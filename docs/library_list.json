{"libraries":[{"name":"dart-core","qualifiedName":"dart-core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>","packageName":""},{"name":"image","qualifiedName":"image/image","preview":"<p>The image library aims to provide server-side programs the ability to load,\nmanipulate, and save various image file formats.</p>","packageName":"image","packageIntro":"<h1>image</h1>\n<p><a href=\"https://drone.io/github.com/brendan-duncan/image/latest\">!<a href=\"https://drone.io/github.com/brendan-duncan/image/status.png\">Build Status</a></a></p>\n<h2>Overview</h2>\n<p>A Dart library to encode and decode various image formats.</p>\n<p>The library has no reliance on <code>dart:io</code>, so it can be used for both server and\nweb applications. </p>\n<p>The image library currently supports decoding and encoding the following \nformats:</p><ul><li>PNG / Animated APNG</li><li>JPG</li><li>TGA</li><li>GIF / Animated GIF</li></ul>\n<p>Decoding Only:</p><ul><li>WebP / Animated WebP</li><li>TIFF</li></ul>\n<h2><a href=\"https://github.com/brendan-duncan/image/wiki\">Documentation</a></h2>\n<h2>Samples</h2>\n<p>Load a WebP image, resize it, and save it as a png:</p>\n<pre><code>import 'dart:io' as Io;\nimport 'package:image/image.dart';\nvoid main() {\n  // Read a webp image from file.\n  Image image = decodeWebP(new Io.File('test.webp').readAsBytesSync());\n\n  // Resize the image to a 120x? thumbnail (maintaining the aspect ratio).\n  Image thumbnail = copyResize(image, 120);\n\n  // Save the thumbnail as a PNG.\n  new Io.File('thumbnail.png')\n        ..writeAsBytesSync(encodePng(thumbnail));\n}\n</code></pre>"},{"name":"archive","qualifiedName":"archive/archive","packageName":"archive","packageIntro":"<h1>archive</h1>\n<p><a href=\"https://drone.io/github.com/brendan-duncan/archive/latest\">!<a href=\"https://drone.io/github.com/brendan-duncan/archive/status.png\">Build Status</a></a></p>\n<h2>Overview</h2>\n<p>A Dart library to encode and decode various archive and compression formats.</p>\n<p>The library has no reliance on <code>dart:io</code>, so it can be used for both server and\nweb applications. </p>\n<p>The archive library currently supports the following decoders:</p><ul><li>Zip (Archive)</li><li>Tar (Archive) </li><li>ZLib Inflate decompression</li><li>GZip Inflate decompression</li><li>BZip2 decompression</li></ul>\n<p>And the following encoders:</p><ul><li>Zip (Archive)</li><li>Tar (Archive)</li><li>ZLib Deflate compression</li><li>GZip Deflate compression</li><li>BZip2 compression</li></ul>\n<h2>Sample</h2>\n<p>Extract the contents of a Zip file, and encode the contents as a BZip2 \ncompressed Tar file:</p>\n<pre><code>import 'dart:io' as Io;\nimport 'package:archive/archive.dart';\nvoid main() {\n  // Read the Zip file from disk.\n  List&lt;int&gt; bytes = new Io.File('test.zip').readAsBytesSync();\n  \n  // Decode the Zip file\n  Archive archive = new ZipDecoder().decodeBytes(bytes);\n  \n  // Extract the contents of the Zip archive to disk.\n  for (ArchiveFile file in archive) {\n    String filename = file.name;\n    List&lt;int&gt; data = file.content;\n    new Io.File('out/' + filename)\n          ..createSync(recursive: true)\n          ..writeAsBytesSync(data);\n  }\n  \n  // Encode the archive as a BZip2 compressed Tar file.\n  List&lt;int&gt; tar_data = new TarEncoder().encode(archive);\n  List&lt;int&gt; tar_bz2 = new BZip2Encoder().encode(tar_data);\n  \n  // Write the compressed tar file to disk.\n  Io.File fp = new Io.File(filename + '.tbz');\n  fp.writeAsBytesSync(tar_bz2);\n}\n</code></pre>"}],"introduction":"","filetype":"json"}