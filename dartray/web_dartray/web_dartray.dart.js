// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
(function (reflectionData) {
  "use strict";
  function map(x){x={x:x};delete x.x;return x}
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "^") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0) descriptor[previousProperty].$reflectable = flag;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array) {
          addStubs(globalObject, element, property, true, descriptor, functions);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              var flag = element[prop];
              if (flag > 0) element[previousProp].$reflectable = flag;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              var elem = element[prop];
              if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
                addStubs(newDesc, elem, prop, false, element, []);
              } else {
                newDesc[previousProp = prop] = elem;
              }
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function") break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex =  2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;

    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic) init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName) functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted) init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName) mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount) descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted
        ? new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "(x) {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [x], name);" +
              "return new c(this, funcs[0], x, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
        : new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "() {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [], name);" +
              "return new c(this, funcs[0], null, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted
        ? function(x) {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
            return new cache(this, funcs[0], x, name)
          }
        : function() {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
            return new cache(this, funcs[0], null, name)
          }
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic
        ? function() {
            if (cache === void 0) cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
            return cache;
          }
        : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = (typeof dart_precompiled == "function")
      ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  if (!init.interceptedNames) init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})
([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    "%": "DOMImplementation|MediaError|MediaKeyError|Navigator|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|SVGAnimatedTransformList|SVGPointList"
  },
  JSBool: {
    "^": "bool/Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Null/Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  JSArray: {
    "^": "List/Interceptor;",
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      return receiver.splice(index, 1)[0];
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        this.add$1(receiver, t1._current);
    },
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, null);
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start == null)
        H.throwExpression(P.ArgumentError$(null));
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(P.ArgumentError$(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end == null)
        end = receiver.length;
      else {
        if (typeof end !== "number" || Math.floor(end) !== end)
          throw H.wrapException(P.ArgumentError$(end));
        if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      }
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
    },
    fillRange$3: function(receiver, start, end, fillValue) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("fill range"));
      H.IterableMixinWorkaround_fillRangeList(receiver, start, end, fillValue);
    },
    sort$1: function(receiver, compare) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.IterableMixinWorkaround_sortList(receiver, compare);
    },
    lastIndexOf$2: function(receiver, element, start) {
      return H.Lists_lastIndexOf(receiver, element, receiver.length - 1);
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = init;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    set$length: function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$(newLength));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isList: true,
    $isJSIndexable: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    static: {JSArray_JSArray$fixed: function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
        t1 = H.setRuntimeTypeInfo(new Array($length), [$E]);
        t1.fixed$length = init;
        return t1;
      }}
  },
  JSNumber: {
    "^": "num/Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    ceil$0: function(receiver) {
      return this.toInt$0(Math.ceil(receiver));
    },
    floor$0: function(receiver) {
      return this.toInt$0(Math.floor(receiver));
    },
    round$0: function(receiver) {
      return this.toInt$0(this.roundToDouble$0(receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (typeof lowerLimit !== "number")
        throw H.wrapException(P.ArgumentError$(lowerLimit));
      if (typeof upperLimit !== "number")
        throw H.wrapException(P.ArgumentError$(upperLimit));
      if (this.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(P.ArgumentError$(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toDouble$0: function(receiver) {
      return receiver;
    },
    toRadixString$1: function(receiver, radix) {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result;
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else {
        if (typeof other !== "number")
          H.throwExpression(P.ArgumentError$(other));
        return this.toInt$0(receiver / other);
      }
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    $shl: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver >>> other;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver & other) >>> 0;
    },
    $or: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver | other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "int/JSNumber;",
    $isdouble: true,
    $isnum: true,
    $isint: true
  },
  JSDouble: {
    "^": "double/JSNumber;",
    $isdouble: true,
    $isnum: true
  },
  JSString: {
    "^": "String/Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    $mul: function(receiver, times) {
      var s, result;
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    get$codeUnits: function(receiver) {
      return new J._CodeUnits(receiver);
    },
    indexOf$2: function(receiver, pattern, start) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      return receiver.indexOf(pattern, start);
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2;
      start = receiver.length;
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isJSIndexable: true,
    $isString: true
  },
  _CodeUnits: {
    "^": "UnmodifiableListBase;_string",
    get$length: function(_) {
      return this._string.length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, i) {
      var t1, t2;
      t1 = this._string;
      if (typeof i !== "number" || Math.floor(i) !== i)
        H.throwExpression(P.ArgumentError$(i));
      t2 = J.getInterceptor$n(i);
      if (t2.$lt(i, 0))
        H.throwExpression(P.RangeError$value(i));
      if (t2.$ge(i, t1.length))
        H.throwExpression(P.RangeError$value(i));
      return t1.charCodeAt(i);
    },
    $asUnmodifiableListBase: function() {
      return [J.JSInt];
    },
    $asListBase: function() {
      return [J.JSInt];
    },
    $asList: function() {
      return [J.JSInt];
    }
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, new Isolate(), t5, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, false);
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, new Isolate(), t4, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, false);
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "startPaused"), t1.$index(msg, "replyPort"));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  },
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  IsolateNatives_spawn: function(functionName, uri, args, message, isLight, isSpawnUri, startPaused) {
    var port, result, signalReply, t1, t2;
    if (C.JSString_methods.endsWith$1(uri, ".dart"))
      uri += ".js";
    port = P.ReceivePort_ReceivePort();
    result = port.get$first(port).then$1(new H.IsolateNatives_spawn_closure());
    signalReply = new H._NativeJsSendPort(port._rawPort, init.globalState.currentContext.id);
    if (init.globalState.supportsWorkers === true && !isLight)
      if (init.globalState.isWorker === true) {
        t1 = init.globalState.mainManager;
        t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "spawn-worker", "functionName", functionName, "args", args, "msg", message, "uri", uri, "isSpawnUri", isSpawnUri, "startPaused", startPaused, "replyPort", signalReply], null, null));
        t1.toString;
        self.postMessage(t2);
      } else
        H.IsolateNatives__spawnWorker(functionName, uri, args, message, isSpawnUri, startPaused, signalReply);
    else
      H.IsolateNatives__startNonWorker(functionName, uri, args, message, isSpawnUri, startPaused, signalReply);
    return result;
  },
  IsolateNatives__startNonWorker: function(functionName, uri, args, message, isSpawnUri, startPaused, replyPort) {
    throw H.wrapException(P.UnsupportedError$("Currently spawnUri is not supported without web workers."));
  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort.get$sendPort();
    t2 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", t1, t2, context.terminateCapability]);
    t1 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri);
    if (startPaused === true) {
      context.addPause$2(t2, t2);
      init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t1, "start isolate"));
    } else
      t1.call$0();
  },
  IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, startPaused, replyPort) {
    var worker, t1;
    if (uri == null)
      uri = $.get$IsolateNatives_thisScript();
    worker = new Worker(uri);
    worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage(worker, e); };
    t1 = init.globalState.nextManagerId++;
    $.get$IsolateNatives_workerIds().$indexSet(0, worker, t1);
    init.globalState.managers.$indexSet(0, t1, worker);
    worker.postMessage(H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "start", "id", t1, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "startPaused", startPaused, "functionName", functionName], null, null)));
  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "^": "Closure:91;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    }
  },
  startRootIsolate_closure0: {
    "^": "Closure:91;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    }
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function (e) { H.IsolateNatives__processWorkerMessage(t1, e); };
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function (object) {};
      }
    }
  },
  _IsolateContext: {
    "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,isPaused<,delayedEvents,pauseTokens,doneHandlers,errorsAreFatal",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      if (J.$eq(pingType, 2))
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(this, new H._IsolateContext_handlePing_closure(responsePort), "ping"));
      else
        J.send$1$x(responsePort, null);
    },
    eval$1: function(code) {
      var old, result;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      try {
        result = code.call$0();
      } finally {
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
      }
      return result;
    },
    handleControlMessage$1: function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        default:
          P.print("UNKNOWN MESSAGE: " + H.S(message));
      }
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this._shutdown$0();
    },
    _shutdown$0: function() {
      init.globalState.isolates.remove$1(0, this.id);
      var t1 = this.doneHandlers;
      if (t1 != null)
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          J.send$1$x(t1._current, null);
    }
  },
  _IsolateContext_handlePing_closure: {
    "^": "Closure:91;responsePort_0",
    call$0: function() {
      J.send$1$x(this.responsePort_0, null);
    }
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1, t2, t3, t4, result;
      t1 = this.events;
      t2 = t1._head;
      if (t2 === t1._tail)
        return;
      ++t1._modificationCount;
      t3 = t1._table;
      t4 = t3.length;
      if (t2 >= t4)
        return H.ioore(t3, t2);
      result = t3[t2];
      t3[t2] = null;
      t1._head = (t2 + 1 & t4 - 1) >>> 0;
      return result;
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:9;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.get$isPaused()) {
        t1.delayedEvents.push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:91;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }
  },
  IsolateNatives_spawn_closure: {
    "^": "Closure:92;",
    call$1: function(msg) {
      return msg;
    }
  },
  IsolateNatives__startNonWorker_closure: {
    "^": "Closure:91;functionName_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyPort_5",
    call$0: function() {
      H.IsolateNatives__startIsolate(init.globalFunctions[this.functionName_0](), this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyPort_5);
    }
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:9;topLevel_0,args_1,message_2,isSpawnUri_3",
    call$0: function() {
      var t1, t2, t3;
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (J.$eq(isolate.get$controlPort(), t3)) {
        isolate.handleControlMessage$1(t1.msg_0);
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:91;box_0,this_1,shouldSerialize_2",
    call$0: function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    }
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = this._workerId;
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = this._isolateId;
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    close$0: function(_) {
      var t1, t2;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = this._id;
      t1.ports.remove$1(0, t2);
      t1.weakPorts.remove$1(0, t2);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    get$sendPort: function() {
      return new H._NativeJsSendPort(this, init.globalState.currentContext.id);
    },
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  ReceivePortImpl: {
    "^": "Stream;_rawPort,_controller",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    close$0: [function(_) {
      this._rawPort.close$0(0);
      this._controller.close$0(0);
    }, "call$0", "get$close", 0, 0, 9],
    ReceivePortImpl$fromRawReceivePort$1: function(_rawPort) {
      var t1 = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
      this._controller = t1;
      this._rawPort._handler = t1.get$add(t1);
    },
    $asStream: function() {
      return [null];
    }
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x._id];
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x._id);
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, i;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure:93;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, t1;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, list, t1);
      return ["list", t1, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, t1;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, map, t1);
      return ["map", t1, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:9;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:9;this_2,callback_3",
    call$0: function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash = this._id;
      if (typeof hash !== "number")
        return hash.$shr();
      hash = C.JSNumber_methods._shrOtherPositive$1(hash, 0) ^ C.JSNumber_methods._tdivFast$1(hash, 4294967296);
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this._id;
        t2 = other._id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 0],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1, maxCharCode, digitsPart, i, t2;
    handleError = H.Primitives__throwFormatException$closure();
    if (typeof source !== "string")
      H.throwExpression(P.ArgumentError$(source));
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (radix == null) {
      if (match != null) {
        t1 = match.length;
        if (2 >= t1)
          return H.ioore(match, 2);
        if (match[2] != null)
          return parseInt(source, 16);
        if (3 >= t1)
          return H.ioore(match, 3);
        if (match[3] != null)
          return parseInt(source, 10);
        return handleError.call$1(source);
      }
      radix = 10;
    } else {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
      if (match != null) {
        if (radix === 10) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] != null;
        } else
          t1 = false;
        if (t1)
          return parseInt(source, 10);
        if (!(radix < 10)) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] == null;
        } else
          t1 = true;
        if (t1) {
          maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
          if (1 >= match.length)
            return H.ioore(match, 1);
          digitsPart = match[1];
          t1 = J.getInterceptor$asx(digitsPart);
          i = 0;
          while (true) {
            t2 = t1.get$length(digitsPart);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            t1.codeUnitAt$1(digitsPart, 0);
            if (i >= digitsPart.length)
              H.throwExpression(P.RangeError$value(i));
            if (digitsPart.charCodeAt(i) > maxCharCode)
              return handleError.call$1(source);
            ++i;
          }
        }
      }
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, radix);
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_IX5(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = decompiled;
    }
    if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_numMicroseconds: function() {
    if (typeof window != "undefined" && window !== null) {
      var performance = window.performance;
      if (performance != null && typeof performance.webkitNow == "function")
        return C.JSNumber_methods.toInt$0(Math.floor(1000 * performance.webkitNow()));
    }
    return 1000 * Date.now();
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [J.JSInt];
    for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(P.ArgumentError$(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i < 0)
        throw H.wrapException(P.ArgumentError$(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_stringFromCharCode: function(charCode) {
    var bits;
    if (typeof charCode !== "number")
      return H.iae(charCode);
    if (0 <= charCode) {
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSNumber_methods._shrOtherPositive$1(bits, 10)) >>> 0, (56320 | bits & 1023) >>> 0);
      }
    }
    throw H.wrapException(P.RangeError$range(charCode, 0, 1114111));
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,init.globalState.currentContext,H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function(){this.$initialize()};
    else if (typeof dart_precompiled == "function") {
      t1 = function(a,b,c,d) {this.$initialize(a,b,c,d)};
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = (function(s){return function(){return init.metadata[s]}})(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f,r){return function(){return f.apply({$receiver:r(this)},arguments)}}(functionType,getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n,S){return function(){return S(this)[n]()}}(stubName,getSelf);
      case 1:
        return function(n,S){return function(a){return S(this)[n](a)}}(stubName,getSelf);
      case 2:
        return function(n,S){return function(a,b){return S(this)[n](a,b)}}(stubName,getSelf);
      case 3:
        return function(n,S){return function(a,b,c){return S(this)[n](a,b,c)}}(stubName,getSelf);
      case 4:
        return function(n,S){return function(a,b,c,d){return S(this)[n](a,b,c,d)}}(stubName,getSelf);
      case 5:
        return function(n,S){return function(a,b,c,d,e){return S(this)[n](a,b,c,d,e)}}(stubName,getSelf);
      default:
        return function(f,s){return function(){return f.apply(s(this),arguments)}}($function,getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n,s,r){return function(){return s(this)[n](r(this))}}($name,getSelf,getReceiver);
      case 2:
        return function(n,s,r){return function(a){return s(this)[n](r(this),a)}}($name,getSelf,getReceiver);
      case 3:
        return function(n,s,r){return function(a,b){return s(this)[n](r(this),a,b)}}($name,getSelf,getReceiver);
      case 4:
        return function(n,s,r){return function(a,b,c){return s(this)[n](r(this),a,b,c)}}($name,getSelf,getReceiver);
      case 5:
        return function(n,s,r){return function(a,b,c,d){return s(this)[n](r(this),a,b,c,d)}}($name,getSelf,getReceiver);
      case 6:
        return function(n,s,r){return function(a,b,c,d,e){return s(this)[n](r(this),a,b,c,d,e)}}($name,getSelf,getReceiver);
      default:
        return function(f,s,r,a){return function(){a=[r(this)];Array.prototype.push.apply(a,arguments);return f.apply(s(this),a)}}($function,getSelf,getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents += ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      buffer._contents += typeof str === "string" ? str : H.S(str);
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  checkSubtype: function(object, isField, checks, asField) {
    var $arguments, interceptor;
    if (object == null)
      return false;
    $arguments = H.getRuntimeTypeInfo(object);
    interceptor = J.getInterceptor(object);
    if (interceptor[isField] == null)
      return false;
    return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_U4w, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_IX5), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  },
  ConstantMap: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !J.$eq(this.get$length(this), 0);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _throwUnmodifiable$0: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    $indexSet: function(_, key, val) {
      return this._throwUnmodifiable$0();
    },
    $isMap: true
  },
  ConstantStringMap: {
    "^": "ConstantMap;length>,_jsObject,__js_helper$_keys",
    length$0: function($receiver) {
      return this.length.call$0();
    },
    containsKey$1: function(key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[key];
    },
    forEach$1: function(_, f) {
      var keys, i, key;
      keys = this.__js_helper$_keys;
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        f.call$2(key, this._fetch$1(key));
      }
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new H._ConstantMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(this.__js_helper$_keys, new H.ConstantStringMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $isEfficientLength: true
  },
  ConstantStringMap_values_closure: {
    "^": "Closure:92;this_0",
    call$1: function(key) {
      return this.this_0._fetch$1(key);
    }
  },
  _ConstantMapKeyIterable: {
    "^": "IterableBase;__js_helper$_map",
    get$iterator: function(_) {
      return J.get$iterator$ax(this.__js_helper$_map.__js_helper$_keys);
    }
  },
  GeneralConstantMap: {
    "^": "ConstantMap;_jsData",
    _getMap$0: function() {
      if (!this.$map)
        this.$map = H.fillLiteralMap(this._jsData, P.LinkedHashMap_LinkedHashMap(null, null, null, H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)));
      return this.$map;
    },
    containsKey$1: function(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index: function(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1: function(_, f) {
      this._getMap$0().forEach$1(0, f);
    },
    get$keys: function() {
      return this._getMap$0().get$keys();
    },
    get$values: function(_) {
      var t1 = this._getMap$0();
      return t1.get$values(t1);
    },
    get$length: function(_) {
      var t1 = this._getMap$0();
      return t1.get$length(t1);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    }
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data>,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, requiredParameterCount, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        requiredParameterCount = requiredParametersInfo >> 1;
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParameterCount, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:92;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:91;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "^": "Closure:91;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "^": "Closure:91;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "^": "Closure:91;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "^": "Closure:91;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      t1 = H.Primitives_objectHashCode(this._target);
      if (typeof receiverHashCode !== "number")
        return receiverHashCode.$xor();
      return (receiverHashCode ^ t1) >>> 0;
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = { "func": "dynafunc" };
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  TypeImpl: {
    "^": "Object;_typeName,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName, unmangledName0;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName;
      unmangledName0 = init.mangledGlobalNames[unmangledName];
      unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true
  },
  initHooks_closure: {
    "^": "Closure:92;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "^": "Closure:94;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "^": "Closure:0;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  }
}],
["accelerators", "package:dartray/accelerators/accelerators.dart", , E, {
  "^": "",
  BruteForceAccel: {
    "^": "Aggregate;primitives,bounds@,primitiveId",
    worldBound$0: function() {
      return this.bounds;
    },
    canIntersect$0: function() {
      return true;
    },
    BruteForceAccel$1: function(p) {
      var t1, i, t2, t3, t4, t5;
      $.Log.call$2(0, "Building Brute Force Acceleration Structures.");
      t1 = J.getInterceptor$asx(p);
      i = 0;
      while (true) {
        t2 = t1.get$length(p);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$index(p, i).fullyRefine$1(this.primitives);
        ++i;
      }
      for (i = 0; t1 = this.primitives, i < t1.length; ++i) {
        t2 = this.bounds;
        t1 = t1[i].worldBound$0();
        t3 = t2.pMin;
        t4 = t3.x;
        t5 = t3.y;
        t3 = t3.z;
        t2 = t2.pMax;
        this.bounds = new G.BBox(new G.Point(t4, t5, t3), new G.Point(t2.x, t2.y, t2.z)).union$1(t1);
      }
    },
    static: {BruteForceAccel_Create: [function(prims, ps) {
        return E.BruteForceAccel$(prims);
      }, "call$2", "BruteForceAccel_Create$closure", 4, 0, 1], BruteForceAccel$: function(p) {
        var t1, t2;
        t1 = G.BBox$(null, null);
        t2 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t2 + 1;
        t2 = new E.BruteForceAccel([], t1, t2);
        t2.BruteForceAccel$1(p);
        return t2;
      }}
  },
  BVHAccel: {
    "^": "Aggregate;maxPrimsInNode,splitMethod,primitives,nodes,primitiveId",
    worldBound$0: function() {
      var t1 = this.nodes;
      if (t1 != null) {
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = t1[0].get$bounds();
      } else
        t1 = G.BBox$(null, null);
      return t1;
    },
    canIntersect$0: function() {
      return true;
    },
    _accelerators$_recursiveBuild$5: function(buildData, start, end, totalNodes, orderedPrims) {
      var t1, node, bbox, i, t2, t3, t4, t5, t6, nPrimitives, firstPrimOffset, primNum, centroidBounds, dim, mid, mid0, buckets, t7, b, t8, t9, t10, cost, b0, b1, count0, j, j0, count1, minCost, c2;
      t1 = {};
      totalNodes[0] = J.$add$ns(totalNodes[0], 1);
      node = new E._BVHBuildNode(G.BBox$(null, null), [null, null], null, null, null);
      bbox = G.BBox$(null, null);
      for (i = start; i < end; ++i) {
        if (i >= buildData.length)
          return H.ioore(buildData, i);
        t2 = buildData[i].get$bounds();
        t3 = bbox.pMin;
        t4 = t3.x;
        t5 = t3.y;
        t3 = t3.z;
        t6 = bbox.pMax;
        bbox = new G.BBox(new G.Point(t4, t5, t3), new G.Point(t6.x, t6.y, t6.z)).union$1(t2);
      }
      nPrimitives = end - start;
      if (nPrimitives === 1) {
        firstPrimOffset = orderedPrims.length;
        for (i = start; i < end; ++i) {
          if (i >= buildData.length)
            return H.ioore(buildData, i);
          primNum = buildData[i].get$primitiveNumber();
          t1 = this.primitives;
          if (primNum >= t1.length)
            return H.ioore(t1, primNum);
          orderedPrims.push(t1[primNum]);
        }
        node.firstPrimOffset = firstPrimOffset;
        node.nPrimitives = nPrimitives;
        t1 = node.bounds;
        t1.pMin.copy$1(bbox.pMin);
        t1.pMax.copy$1(bbox.pMax);
      } else {
        centroidBounds = G.BBox$(null, null);
        t1.centroidBounds_0 = centroidBounds;
        for (t2 = centroidBounds, i = start; i < end; ++i, t2 = centroidBounds) {
          if (i >= buildData.length)
            return H.ioore(buildData, i);
          t3 = buildData[i].get$centroid();
          t4 = t2.pMin;
          t5 = t4.x;
          t6 = t4.y;
          t4 = t4.z;
          t2 = t2.pMax;
          centroidBounds = new G.BBox(new G.Point(t5, t6, t4), new G.Point(t2.x, t2.y, t2.z)).unionPoint$1(t3);
          t1.centroidBounds_0 = centroidBounds;
        }
        dim = t2.maximumExtent$0();
        mid = C.JSInt_methods._tdivFast$1(start + end, 2);
        if (J.$eq(t1.centroidBounds_0.pMax.$index(0, dim), t1.centroidBounds_0.pMin.$index(0, dim))) {
          firstPrimOffset = orderedPrims.length;
          for (i = start; i < end; ++i) {
            if (i >= buildData.length)
              return H.ioore(buildData, i);
            primNum = buildData[i].get$primitiveNumber();
            t1 = this.primitives;
            if (primNum >= t1.length)
              return H.ioore(t1, primNum);
            orderedPrims.push(t1[primNum]);
          }
          node.firstPrimOffset = firstPrimOffset;
          node.nPrimitives = nPrimitives;
          t1 = node.bounds;
          t1.pMin.copy$1(bbox.pMin);
          t1.pMax.copy$1(bbox.pMax);
          return node;
        }
        t2 = new E.BVHAccel__recursiveBuild_ComparePoints(dim);
        switch (this.splitMethod) {
          case 0:
            t1 = J.$add$ns(t1.centroidBounds_0.pMin.$index(0, dim), t1.centroidBounds_0.pMax.$index(0, dim));
            if (typeof t1 !== "number")
              return H.iae(t1);
            mid0 = G.partition(buildData, new E.BVHAccel__recursiveBuild_CompareToMid(dim, 0.5 * t1), start, end);
            if (mid0 !== start && mid0 !== end) {
              mid = mid0;
              break;
            }
            G.nth_element(buildData, start, mid, end, t2);
            break;
          case 1:
            G.nth_element(buildData, start, mid, end, t2);
            break;
          case 2:
            if (nPrimitives <= 4)
              G.nth_element(buildData, start, mid, end, t2);
            else {
              buckets = H.setRuntimeTypeInfo(Array(12), [E._BVHBucketInfo]);
              for (t2 = buckets.length, i = 0; i < 12; ++i) {
                t3 = G.BBox$(null, null);
                if (i >= t2)
                  return H.ioore(buckets, i);
                buckets[i] = new E._BVHBucketInfo(0, t3);
              }
              for (t3 = dim === 1, t4 = dim === 0, i = start; i < end; ++i) {
                if (i >= buildData.length)
                  return H.ioore(buildData, i);
                t5 = buildData[i].get$centroid();
                if (t4)
                  t5 = t5.x;
                else
                  t5 = t3 ? t5.y : t5.z;
                t6 = t1.centroidBounds_0.pMin;
                if (t4)
                  t6 = t6.x;
                else
                  t6 = t3 ? t6.y : t6.z;
                t6 = J.$sub$n(t5, t6);
                t5 = t1.centroidBounds_0;
                t7 = t5.pMax;
                if (t4)
                  t7 = t7.x;
                else
                  t7 = t3 ? t7.y : t7.z;
                t5 = t5.pMin;
                if (t4)
                  t5 = t5.x;
                else
                  t5 = t3 ? t5.y : t5.z;
                t5 = J.$div$n(t6, J.$sub$n(t7, t5));
                if (typeof t5 !== "number")
                  return H.iae(t5);
                b = C.JSNumber_methods.toInt$0(Math.floor(12 * t5));
                if (b === 12)
                  b = 11;
                if (b < 0 || b >= t2)
                  return H.ioore(buckets, b);
                t5 = buckets[b];
                t5.set$count(J.$add$ns(t5.get$count(), 1));
                t5 = buckets[b];
                t6 = t5.get$bounds();
                if (i >= buildData.length)
                  return H.ioore(buildData, i);
                t7 = buildData[i].get$bounds();
                t8 = t6.get$pMin();
                t9 = t8.x;
                t10 = t8.y;
                t8 = t8.z;
                t6 = t6.pMax;
                t5.set$bounds(new G.BBox(new G.Point(t9, t10, t8), new G.Point(t6.x, t6.y, t6.z)).union$1(t7));
              }
              cost = H.setRuntimeTypeInfo(Array(11), [J.JSDouble]);
              for (t3 = cost.length, i = 0; i < 11; i = j) {
                b0 = G.BBox$(null, null);
                b1 = G.BBox$(null, null);
                for (count0 = 0, j = 0; j <= i; ++j) {
                  if (j >= t2)
                    return H.ioore(buckets, j);
                  t4 = buckets[j].get$bounds();
                  t5 = b0.pMin;
                  t6 = t5.x;
                  t7 = t5.y;
                  t5 = t5.z;
                  t8 = b0.pMax;
                  b0 = new G.BBox(new G.Point(t6, t7, t5), new G.Point(t8.x, t8.y, t8.z)).union$1(t4);
                  t4 = buckets[j].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count0 += t4;
                }
                for (j = i + 1, j0 = j, count1 = 0; j0 < 12; ++j0) {
                  if (j0 >= t2)
                    return H.ioore(buckets, j0);
                  t4 = buckets[j0].get$bounds();
                  t5 = b1.pMin;
                  t6 = t5.x;
                  t7 = t5.y;
                  t5 = t5.z;
                  t8 = b1.pMax;
                  b1 = new G.BBox(new G.Point(t6, t7, t5), new G.Point(t8.x, t8.y, t8.z)).union$1(t4);
                  t4 = buckets[j0].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count1 += t4;
                }
                t4 = b0.surfaceArea$0();
                t5 = b1.surfaceArea$0();
                t6 = bbox.surfaceArea$0();
                if (i >= t3)
                  return H.ioore(cost, i);
                cost[i] = 0.125 + (count0 * t4 + count1 * t5) / t6;
              }
              if (0 >= t3)
                return H.ioore(cost, 0);
              minCost = cost[0];
              t1.minCostSplit_1 = 0;
              for (i = 1; i < 11; ++i) {
                if (i >= t3)
                  return H.ioore(cost, i);
                if (J.$lt$n(cost[i], minCost)) {
                  minCost = cost[i];
                  t1.minCostSplit_1 = i;
                }
              }
              if (nPrimitives > this.maxPrimsInNode || J.$lt$n(minCost, nPrimitives))
                mid = G.partition(buildData, new E.BVHAccel__recursiveBuild_CompareToBucket(t1, dim, 12), start, end);
              else {
                firstPrimOffset = orderedPrims.length;
                for (i = start; i < end; ++i) {
                  if (i >= buildData.length)
                    return H.ioore(buildData, i);
                  primNum = buildData[i].get$primitiveNumber();
                  t1 = this.primitives;
                  if (primNum >= t1.length)
                    return H.ioore(t1, primNum);
                  orderedPrims.push(t1[primNum]);
                }
                node.firstPrimOffset = firstPrimOffset;
                node.nPrimitives = nPrimitives;
                t1 = node.bounds;
                t1.pMin.copy$1(bbox.pMin);
                t1.pMax.copy$1(bbox.pMax);
                return node;
              }
            }
            break;
          default:
            if (nPrimitives <= 4)
              G.nth_element(buildData, start, mid, end, t2);
            else {
              buckets = H.setRuntimeTypeInfo(Array(12), [E._BVHBucketInfo]);
              for (t2 = buckets.length, i = 0; i < 12; ++i) {
                t3 = G.BBox$(null, null);
                if (i >= t2)
                  return H.ioore(buckets, i);
                buckets[i] = new E._BVHBucketInfo(0, t3);
              }
              for (t3 = dim === 1, t4 = dim === 0, i = start; i < end; ++i) {
                if (i >= buildData.length)
                  return H.ioore(buildData, i);
                t5 = buildData[i].get$centroid();
                if (t4)
                  t5 = t5.x;
                else
                  t5 = t3 ? t5.y : t5.z;
                t6 = t1.centroidBounds_0.pMin;
                if (t4)
                  t6 = t6.x;
                else
                  t6 = t3 ? t6.y : t6.z;
                t6 = J.$sub$n(t5, t6);
                t5 = t1.centroidBounds_0;
                t7 = t5.pMax;
                if (t4)
                  t7 = t7.x;
                else
                  t7 = t3 ? t7.y : t7.z;
                t5 = t5.pMin;
                if (t4)
                  t5 = t5.x;
                else
                  t5 = t3 ? t5.y : t5.z;
                t5 = J.$div$n(t6, J.$sub$n(t7, t5));
                if (typeof t5 !== "number")
                  return H.iae(t5);
                b = C.JSNumber_methods.toInt$0(Math.floor(12 * t5));
                if (b === 12)
                  b = 11;
                if (b < 0 || b >= t2)
                  return H.ioore(buckets, b);
                t5 = buckets[b];
                t5.set$count(J.$add$ns(t5.get$count(), 1));
                t5 = buckets[b];
                t6 = t5.get$bounds();
                if (i >= buildData.length)
                  return H.ioore(buildData, i);
                t7 = buildData[i].get$bounds();
                t8 = t6.get$pMin();
                t9 = t8.x;
                t10 = t8.y;
                t8 = t8.z;
                t6 = t6.pMax;
                t5.set$bounds(new G.BBox(new G.Point(t9, t10, t8), new G.Point(t6.x, t6.y, t6.z)).union$1(t7));
              }
              cost = H.setRuntimeTypeInfo(Array(11), [J.JSDouble]);
              for (t3 = cost.length, i = 0; i < 11; i = j) {
                b0 = G.BBox$(null, null);
                b1 = G.BBox$(null, null);
                for (count0 = 0, j = 0; j <= i; ++j) {
                  if (j >= t2)
                    return H.ioore(buckets, j);
                  t4 = buckets[j].get$bounds();
                  t5 = b0.pMin;
                  t6 = t5.x;
                  t7 = t5.y;
                  t5 = t5.z;
                  t8 = b0.pMax;
                  b0 = new G.BBox(new G.Point(t6, t7, t5), new G.Point(t8.x, t8.y, t8.z)).union$1(t4);
                  t4 = buckets[j].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count0 += t4;
                }
                for (j = i + 1, j0 = j, count1 = 0; j0 < 12; ++j0) {
                  if (j0 >= t2)
                    return H.ioore(buckets, j0);
                  t4 = buckets[j0].get$bounds();
                  t5 = b1.pMin;
                  t6 = t5.x;
                  t7 = t5.y;
                  t5 = t5.z;
                  t8 = b1.pMax;
                  b1 = new G.BBox(new G.Point(t6, t7, t5), new G.Point(t8.x, t8.y, t8.z)).union$1(t4);
                  t4 = buckets[j0].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count1 += t4;
                }
                t4 = b0.surfaceArea$0();
                t5 = b1.surfaceArea$0();
                t6 = bbox.surfaceArea$0();
                if (i >= t3)
                  return H.ioore(cost, i);
                cost[i] = 0.125 + (count0 * t4 + count1 * t5) / t6;
              }
              if (0 >= t3)
                return H.ioore(cost, 0);
              minCost = cost[0];
              t1.minCostSplit_1 = 0;
              for (i = 1; i < 11; ++i) {
                if (i >= t3)
                  return H.ioore(cost, i);
                if (J.$lt$n(cost[i], minCost)) {
                  minCost = cost[i];
                  t1.minCostSplit_1 = i;
                }
              }
              if (nPrimitives > this.maxPrimsInNode || J.$lt$n(minCost, nPrimitives))
                mid = G.partition(buildData, new E.BVHAccel__recursiveBuild_CompareToBucket(t1, dim, 12), start, end);
              else {
                firstPrimOffset = orderedPrims.length;
                for (i = start; i < end; ++i) {
                  if (i >= buildData.length)
                    return H.ioore(buildData, i);
                  primNum = buildData[i].get$primitiveNumber();
                  t1 = this.primitives;
                  if (primNum >= t1.length)
                    return H.ioore(t1, primNum);
                  orderedPrims.push(t1[primNum]);
                }
                node.firstPrimOffset = firstPrimOffset;
                node.nPrimitives = nPrimitives;
                t1 = node.bounds;
                t1.pMin.copy$1(bbox.pMin);
                t1.pMax.copy$1(bbox.pMax);
                return node;
              }
            }
            break;
        }
        c2 = this._accelerators$_recursiveBuild$5(buildData, mid, end, totalNodes, orderedPrims);
        node.initInterior$3(dim, this._accelerators$_recursiveBuild$5(buildData, start, mid, totalNodes, orderedPrims), c2);
      }
      return node;
    },
    _flattenBVHTree$2: function(node, offset) {
      var t1, t2, linearNode, myOffset;
      t1 = this.nodes;
      t2 = offset[0];
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      linearNode = t1[t2];
      linearNode.set$bounds(G.BBox$from(node.get$bounds()));
      myOffset = offset[0];
      offset[0] = J.$add$ns(myOffset, 1);
      t1 = node.get$nPrimitives();
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        J.set$offset$x(linearNode, node.get$firstPrimOffset());
        linearNode.set$nPrimitives(node.nPrimitives);
      } else {
        linearNode.set$axis(node.get$splitAxis());
        linearNode.set$nPrimitives(0);
        this._flattenBVHTree$2(node.get$children(node)[0], offset);
        linearNode.offset = this._flattenBVHTree$2(node.children[1], offset);
      }
      return myOffset;
    },
    BVHAccel$3: function(p, maxPrims, splitMethod) {
      var t1, i, t2, buildData, bbox, t3, t4, t5, t6, t7, totalNodes, orderedPrims, root, len;
      $.Log.call$2(0, "Building BVH Acceleration Structures.");
      this.maxPrimsInNode = P.min(255, maxPrims);
      t1 = J.getInterceptor$asx(p);
      i = 0;
      while (true) {
        t2 = t1.get$length(p);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$index(p, i).fullyRefine$1(this.primitives);
        ++i;
      }
      if (this.primitives.length === 0) {
        this.nodes = null;
        return;
      }
      buildData = [];
      for (i = 0; t1 = this.primitives, t2 = t1.length, i < t2; ++i) {
        bbox = t1[i].worldBound$0();
        t1 = new E._BVHPrimitiveInfo(i, null, bbox);
        if (bbox == null) {
          t2 = G.BBox$(null, null);
          t1.bounds = t2;
        } else
          t2 = bbox;
        t3 = t2.get$pMin();
        t4 = J.$mul$ns(t3.x, 0.5);
        t5 = J.$mul$ns(t3.y, 0.5);
        t3 = J.$mul$ns(t3.z, 0.5);
        t2 = t2.pMax;
        t6 = J.$mul$ns(t2.x, 0.5);
        t7 = J.$mul$ns(t2.y, 0.5);
        t2 = J.$mul$ns(t2.z, 0.5);
        t1.centroid = new G.Point(J.$add$ns(t4, t6), J.$add$ns(t5, t7), J.$add$ns(t3, t2));
        buildData.push(t1);
      }
      totalNodes = [0];
      orderedPrims = [];
      root = this._accelerators$_recursiveBuild$5(buildData, 0, t2, totalNodes, orderedPrims);
      this.primitives = orderedPrims;
      t1 = "BVH created with " + H.S(totalNodes[0]) + " nodes for " + this.primitives.length + " primitives";
      $.Log.call$2(0, t1);
      t1 = totalNodes[0];
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = Array(t1);
      t1.fixed$length = init;
      this.nodes = H.setRuntimeTypeInfo(t1, [E._LinearBVHNode]);
      len = totalNodes[0];
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i) {
        t1 = this.nodes;
        t2 = G.BBox$(null, null);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = new E._LinearBVHNode(t2, null, null, null);
      }
      this._flattenBVHTree$2(root, [0]);
    },
    static: {"^": "BVHAccel_SPLIT_MIDDLE,BVHAccel_SPLIT_EQUAL_COUNTS,BVHAccel_SPLIT_SAH", BVHAccel$: function(p, maxPrims, splitMethod) {
        var t1 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t1 + 1;
        t1 = new E.BVHAccel(null, splitMethod, [], null, t1);
        t1.BVHAccel$3(p, maxPrims, splitMethod);
        return t1;
      }, BVHAccel_Create: [function(prims, ps) {
        var splitMethod, maxPrimsInNode, t1, sm;
        splitMethod = ps.findOneString$2("splitmethod", "sah");
        maxPrimsInNode = ps.findOneInt$2("maxnodeprims", 4);
        t1 = J.getInterceptor(splitMethod);
        if (t1.$eq(splitMethod, "sah"))
          sm = 2;
        else if (t1.$eq(splitMethod, "middle"))
          sm = 0;
        else {
          t1 = t1.$eq(splitMethod, "equal") ? 1 : 2;
          sm = t1;
        }
        return E.BVHAccel$(prims, maxPrimsInNode, sm);
      }, "call$2", "BVHAccel_Create$closure", 4, 0, 2]}
  },
  BVHAccel__recursiveBuild_ComparePoints: {
    "^": "Closure:95;dim_1",
    call$2: function(a, b) {
      var t1 = this.dim_1;
      return J.$lt$n(a.get$centroid().$index(0, t1), b.get$centroid().$index(0, t1));
    }
  },
  BVHAccel__recursiveBuild_CompareToMid: {
    "^": "Closure:96;dim_2,pmid_3",
    call$1: function(a) {
      return J.$lt$n(a.get$centroid().$index(0, this.dim_2), this.pmid_3);
    }
  },
  BVHAccel__recursiveBuild_CompareToBucket: {
    "^": "Closure:96;box_0,dim_4,nBuckets_5",
    call$1: function(p) {
      var t1, t2, t3, b;
      t1 = this.nBuckets_5;
      t2 = this.dim_4;
      t3 = this.box_0;
      t2 = J.$div$n(J.$sub$n(p.get$centroid().$index(0, t2), t3.centroidBounds_0.pMin.$index(0, t2)), J.$sub$n(t3.centroidBounds_0.pMax.$index(0, t2), t3.centroidBounds_0.pMin.$index(0, t2)));
      if (typeof t2 !== "number")
        return H.iae(t2);
      b = C.JSNumber_methods.toInt$0(Math.floor(t1 * t2));
      if (b === t1)
        b = t1 - 1;
      return b <= t3.minCostSplit_1;
    }
  },
  _BVHPrimitiveInfo: {
    "^": "Object;primitiveNumber<,centroid<,bounds@"
  },
  _BVHBucketInfo: {
    "^": "Object;count@,bounds@"
  },
  _BVHBuildNode: {
    "^": "Object;bounds@,children>,splitAxis<,firstPrimOffset<,nPrimitives<",
    initInterior$3: function(axis, c0, c1) {
      var t1, t2;
      t1 = this.children;
      t1[0] = c0;
      t1[1] = c1;
      t1 = c0.get$bounds();
      t2 = c1.get$bounds();
      this.bounds = G.BBox$from(t1).union$1(t2);
      this.splitAxis = axis;
      this.nPrimitives = 0;
    }
  },
  _LinearBVHNode: {
    "^": "Object;bounds@,offset',nPrimitives@,axis?"
  },
  GridAccel: {
    "^": "Aggregate;primitives,nVoxels,bounds@,width>,invWidth,voxels,primitiveId",
    worldBound$0: function() {
      return G.BBox$from(this.bounds);
    },
    canIntersect$0: function() {
      return true;
    },
    posToVoxel$2: function($P, axis) {
      var t1, t2, t3, v;
      t1 = axis === 0;
      if (t1)
        t2 = $P.x;
      else
        t2 = axis === 1 ? $P.y : $P.z;
      t3 = this.bounds.pMin;
      if (t1)
        t3 = t3.x;
      else
        t3 = axis === 1 ? t3.y : t3.z;
      t3 = J.$sub$n(t2, t3);
      t2 = this.invWidth;
      if (t1)
        t1 = t2.x;
      else
        t1 = axis === 1 ? t2.y : t2.z;
      v = J.toInt$0$n(J.$mul$ns(t3, t1));
      t1 = this.nVoxels;
      if (axis >= 3)
        return H.ioore(t1, axis);
      return C.JSInt_methods.clamp$2(v, 0, J.$sub$n(t1[axis], 1));
    },
    GridAccel$2: function(p, refineImmediately) {
      var t1, i, t2, t3, t4, t5, delta, voxelsPerUnitDist, axis, nv, vmin, vmax, prim, pb, z, y, x, o, t6, t7;
      $.Log.call$2(0, "Building Hierarchical Grid Acceleration Structures.");
      t1 = J.getInterceptor$asx(p);
      t1.get$length(p);
      if (refineImmediately === true) {
        i = 0;
        while (true) {
          t2 = t1.get$length(p);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          t1.$index(p, i).fullyRefine$1(this.primitives);
          ++i;
        }
      } else
        this.primitives = p;
      i = 0;
      while (true) {
        t1 = J.get$length$asx(this.primitives);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.bounds;
        if (!(i < t1))
          break;
        t1 = J.$index$asx(this.primitives, i).worldBound$0();
        t3 = t2.pMin;
        t4 = t3.x;
        t5 = t3.y;
        t3 = t3.z;
        t2 = t2.pMax;
        this.bounds = new G.BBox(new G.Point(t4, t5, t3), new G.Point(t2.x, t2.y, t2.z)).union$1(t1);
        ++i;
      }
      delta = t2.pMax.$sub(0, t2.pMin);
      t1 = delta.$index(0, this.bounds.maximumExtent$0());
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = J.get$length$asx(this.primitives);
      if (typeof t2 !== "number")
        H.throwExpression(P.ArgumentError$(t2));
      voxelsPerUnitDist = 3 * Math.pow(t2, 0.3333333333333333) * (1 / t1);
      for (t1 = this.nVoxels, axis = 0; axis < 3; ++axis) {
        if (axis === 0)
          t2 = delta.x;
        else
          t2 = axis === 1 ? delta.y : delta.z;
        t2 = J.round$0$n(J.$mul$ns(t2, voxelsPerUnitDist));
        t1[axis] = t2;
        t1[axis] = C.JSInt_methods.clamp$2(t2, 1, 64);
      }
      for (t2 = this.invWidth, axis = 0; axis < 3; ++axis) {
        t3 = this.width;
        t4 = axis === 0;
        if (t4)
          t5 = delta.x;
        else
          t5 = axis === 1 ? delta.y : delta.z;
        t5 = J.$div$n(t5, t1[axis]);
        if (t4)
          t3.x = t5;
        else if (axis === 1)
          t3.y = t5;
        else
          t3.z = t5;
        t3 = this.width;
        if (t4)
          t3 = t3.x;
        else
          t3 = axis === 1 ? t3.y : t3.z;
        if (J.$eq(t3, 0))
          t3 = 0;
        else {
          t3 = this.width;
          if (t4)
            t3 = t3.x;
          else
            t3 = axis === 1 ? t3.y : t3.z;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t3 = 1 / t3;
        }
        if (t4)
          t2.x = t3;
        else if (axis === 1)
          t2.y = t3;
        else
          t2.z = t3;
      }
      nv = J.$mul$ns(J.$mul$ns(t1[0], t1[1]), t1[2]);
      if (typeof nv !== "number")
        return H.iae(nv);
      this.voxels = H.setRuntimeTypeInfo(Array(nv), [E._Voxel]);
      vmin = [0, 0, 0];
      vmax = [0, 0, 0];
      i = 0;
      while (true) {
        t2 = J.get$length$asx(this.primitives);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        prim = J.$index$asx(this.primitives, i);
        pb = prim.worldBound$0();
        for (axis = 0; axis < 3; ++axis) {
          vmin[axis] = this.posToVoxel$2(pb.get$pMin(), axis);
          vmax[axis] = this.posToVoxel$2(pb.pMax, axis);
        }
        for (z = vmin[2]; t2 = J.getInterceptor$n(z), t2.$le(z, vmax[2]); z = t2.$add(z, 1))
          for (y = vmin[1]; t3 = J.getInterceptor$n(y), t3.$le(y, vmax[1]); y = t3.$add(y, 1))
            for (x = vmin[0]; t4 = J.getInterceptor$n(x), t4.$le(x, vmax[0]); x = t4.$add(x, 1)) {
              o = J.$add$ns(J.$add$ns(J.$mul$ns(t2.$mul(z, t1[0]), t1[1]), t3.$mul(y, t1[0])), x);
              t5 = this.voxels;
              if (o >>> 0 !== o || o >= t5.length)
                return H.ioore(t5, o);
              t6 = t5[o];
              if (t6 == null) {
                t6 = [];
                t7 = new E._Voxel(t6, null);
                t7.allCanIntersect = false;
                t6.push(prim);
                t5[o] = t7;
              } else
                t6.addPrimitive$1(prim);
            }
        ++i;
      }
    },
    static: {GridAccel_Create: [function(prims, ps) {
        return E.GridAccel$(prims, ps.findOneBool$2("refineimmediately", true));
      }, "call$2", "GridAccel_Create$closure", 4, 0, 3], GridAccel$: function(p, refineImmediately) {
        var t1, t2;
        t1 = G.BBox$(null, null);
        t2 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t2 + 1;
        t2 = new E.GridAccel([], [0, 0, 0], t1, new G.Vector(0, 0, 0), new G.Vector(0, 0, 0), null, t2);
        t2.GridAccel$2(p, refineImmediately);
        return t2;
      }}
  },
  _Voxel: {
    "^": "Object;primitives,allCanIntersect",
    size$0: [function(_) {
      return this.primitives.length;
    }, "call$0", "get$size", 0, 0, 97],
    addPrimitive$1: function(prim) {
      this.primitives.push(prim);
    }
  },
  KdTreeAccel: {
    "^": "Aggregate;isectCost,traversalCost,maxPrims,maxDepth,emptyBonus,primitives,nodes,nAllocedNodes,nextFreeNode,bounds@,primitiveId",
    worldBound$0: function() {
      return this.bounds;
    },
    canIntersect$0: function() {
      return true;
    },
    _buildTree$11: function(nodeNum, nodeBounds, allPrimBounds, primNums, nPrimitives, depth, edges, prims0, prims1, prims1Offset, badRefines) {
      var t1, t2, nAlloc, n, i, t3, i0, t4, oldCost, invTotalSA, d, axis, t5, eb, t6, t7, bestAxis, bestOffset, bestCost, retries, t8, t9, t10, pn, bbox, t11, t12, t13, nAbove, nBelow, edget, otherAxis0, otherAxis1, t14, t15, t16, t17, eb0, cost, n0, n00, n1, n10, tsplit, aboveChild;
      t1 = this.nextFreeNode;
      t2 = this.nAllocedNodes;
      if (t1 === t2) {
        nAlloc = P.max(2 * t2, 512);
        t1 = Array(nAlloc);
        t1.fixed$length = init;
        n = H.setRuntimeTypeInfo(t1, [E._KdAccelNode]);
        i = this.nAllocedNodes;
        if (i > 0) {
          for (t1 = this.nodes, t2 = t1.length, t3 = n.length, i0 = 0; i0 < i; ++i0) {
            if (i0 >= t2)
              return H.ioore(t1, i0);
            t4 = t1[i0];
            if (i0 >= t3)
              return H.ioore(n, i0);
            n[i0] = t4;
          }
          for (; i < t3; ++i) {
            if (i >>> 0 !== i || i >= t3)
              return H.ioore(n, i);
            n[i] = new E._KdAccelNode(null, null, null, null);
          }
        } else
          for (t1 = n.length, i = 0; i < t1; ++i)
            n[i] = new E._KdAccelNode(null, null, null, null);
        this.nodes = n;
        this.nAllocedNodes = nAlloc;
      }
      ++this.nextFreeNode;
      t1 = this.maxPrims;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (nPrimitives <= t1 || J.$eq(depth, 0)) {
        t1 = this.nodes;
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum].initLeaf$2(primNums, nPrimitives);
        return;
      }
      t1 = this.isectCost;
      t2 = J.getInterceptor$ns(t1);
      oldCost = t2.$mul(t1, nPrimitives);
      invTotalSA = 1 / nodeBounds.surfaceArea$0();
      d = nodeBounds.pMax.$sub(0, nodeBounds.pMin);
      axis = nodeBounds.maximumExtent$0();
      for (t3 = 2 * nPrimitives, t4 = this.traversalCost, t5 = J.getInterceptor$ns(t4), eb = this.emptyBonus, t6 = primNums.length, t7 = allPrimBounds.length, bestAxis = -1, bestOffset = -1, bestCost = 1 / 0, retries = 0; true;) {
        for (t8 = axis === 1, t9 = axis === 0, i = 0; t10 = edges[axis], i < nPrimitives; ++i) {
          if (i >= t6)
            return H.ioore(primNums, i);
          pn = primNums[i];
          if (pn >= t7)
            return H.ioore(allPrimBounds, pn);
          bbox = allPrimBounds[pn];
          if (axis < 0 || axis >= 3)
            return H.ioore(edges, axis);
          t11 = 2 * i;
          t12 = bbox.get$pMin();
          if (t9)
            t12 = t12.x;
          else
            t12 = t8 ? t12.y : t12.z;
          t13 = new E._BoundEdge(null, null, null);
          t13.t = t12;
          t13.primNum = pn;
          t13.type = 1;
          J.$indexSet$ax(t10, t11, t13);
          t10 = edges[axis];
          t12 = bbox.pMax;
          if (t9)
            t12 = t12.x;
          else
            t12 = t8 ? t12.y : t12.z;
          t13 = new E._BoundEdge(null, null, null);
          t13.t = t12;
          t13.primNum = pn;
          t13.type = 0;
          J.$indexSet$ax(t10, t11 + 1, t13);
        }
        if (axis < 0 || axis >= 3)
          return H.ioore(edges, axis);
        J.sort$1$ax(t10, new E.KdTreeAccel__buildTree_closure());
        for (t10 = axis + 1, t11 = axis + 2, nAbove = nPrimitives, nBelow = 0, i = 0; i < t3; ++i) {
          if (J.$eq(J.get$type$x(J.$index$asx(edges[axis], i)), 0))
            --nAbove;
          edget = J.$index$asx(edges[axis], i).get$t();
          t12 = nodeBounds.pMin;
          if (t9)
            t12 = t12.x;
          else
            t12 = t8 ? t12.y : t12.z;
          t13 = J.getInterceptor$n(edget);
          if (t13.$gt(edget, t12)) {
            t12 = nodeBounds.pMax;
            if (t9)
              t12 = t12.x;
            else
              t12 = t8 ? t12.y : t12.z;
            t12 = t13.$lt(edget, t12);
          } else
            t12 = false;
          if (t12) {
            otherAxis0 = C.JSInt_methods.$mod(t10, 3);
            otherAxis1 = C.JSInt_methods.$mod(t11, 3);
            t12 = otherAxis0 === 0;
            if (t12)
              t14 = d.x;
            else
              t14 = otherAxis0 === 1 ? d.y : d.z;
            t15 = otherAxis1 === 0;
            if (t15)
              t16 = d.x;
            else
              t16 = otherAxis1 === 1 ? d.y : d.z;
            t16 = J.$mul$ns(t14, t16);
            t14 = nodeBounds.pMin;
            if (t9)
              t14 = t14.x;
            else
              t14 = t8 ? t14.y : t14.z;
            t14 = t13.$sub(edget, t14);
            if (t12)
              t13 = d.x;
            else
              t13 = otherAxis0 === 1 ? d.y : d.z;
            if (t15)
              t17 = d.x;
            else
              t17 = otherAxis1 === 1 ? d.y : d.z;
            t17 = J.$add$ns(t16, J.$mul$ns(t14, J.$add$ns(t13, t17)));
            if (typeof t17 !== "number")
              return H.iae(t17);
            if (t12)
              t13 = d.x;
            else
              t13 = otherAxis0 === 1 ? d.y : d.z;
            if (t15)
              t14 = d.x;
            else
              t14 = otherAxis1 === 1 ? d.y : d.z;
            t14 = J.$mul$ns(t13, t14);
            t13 = nodeBounds.pMax;
            if (t9)
              t13 = t13.x;
            else
              t13 = t8 ? t13.y : t13.z;
            t13 = J.$sub$n(t13, edget);
            if (t12)
              t12 = d.x;
            else
              t12 = otherAxis0 === 1 ? d.y : d.z;
            if (t15)
              t15 = d.x;
            else
              t15 = otherAxis1 === 1 ? d.y : d.z;
            t15 = J.$add$ns(t14, J.$mul$ns(t13, J.$add$ns(t12, t15)));
            if (typeof t15 !== "number")
              return H.iae(t15);
            eb0 = nAbove === 0 || nBelow === 0 ? eb : 0;
            if (typeof eb0 !== "number")
              return H.iae(eb0);
            cost = t5.$add(t4, J.$mul$ns(t2.$mul(t1, 1 - eb0), 2 * t17 * invTotalSA * nBelow + 2 * t15 * invTotalSA * nAbove));
            if (J.$lt$n(cost, bestCost)) {
              bestCost = cost;
              bestOffset = i;
              bestAxis = axis;
            }
          }
          if (J.$eq(J.get$type$x(J.$index$asx(edges[axis], i)), 1))
            ++nBelow;
        }
        if (bestAxis === -1 && retries < 2) {
          ++retries;
          axis = C.JSInt_methods.$mod(t10, 3);
          continue;
        }
        break;
      }
      t1 = J.getInterceptor$n(bestCost);
      if (t1.$gt(bestCost, oldCost))
        ++badRefines;
      if (typeof oldCost !== "number")
        return H.iae(oldCost);
      if (t1.$gt(bestCost, 4 * oldCost) && nPrimitives < 16 || bestAxis === -1 || badRefines === 3) {
        t1 = this.nodes;
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum].initLeaf$2(primNums, nPrimitives);
        return;
      }
      for (t1 = prims0.length, n0 = 0, i = 0; i < bestOffset; ++i) {
        if (bestAxis < 0 || bestAxis >= 3)
          return H.ioore(edges, bestAxis);
        if (J.$eq(J.get$type$x(J.$index$asx(edges[bestAxis], i)), 1)) {
          n00 = n0 + 1;
          t2 = J.$index$asx(edges[bestAxis], i).get$primNum();
          if (n0 >= t1)
            return H.ioore(prims0, n0);
          prims0[n0] = t2;
          n0 = n00;
        }
      }
      for (i = bestOffset + 1, t1 = prims1.length, n1 = 0; i < t3; ++i) {
        if (bestAxis < 0 || bestAxis >= 3)
          return H.ioore(edges, bestAxis);
        if (J.$eq(J.get$type$x(J.$index$asx(edges[bestAxis], i)), 0)) {
          n10 = n1 + 1;
          t2 = prims1Offset + n1;
          t4 = J.$index$asx(edges[bestAxis], i).get$primNum();
          if (t2 >= t1)
            return H.ioore(prims1, t2);
          prims1[t2] = t4;
          n1 = n10;
        }
      }
      if (bestAxis < 0 || bestAxis >= 3)
        return H.ioore(edges, bestAxis);
      tsplit = J.$index$asx(edges[bestAxis], bestOffset).get$t();
      t1 = nodeBounds.pMax;
      nodeBounds.pMin.$indexSet(0, bestAxis, tsplit);
      t1.$indexSet(0, bestAxis, tsplit);
      t1 = J.getInterceptor$n(depth);
      this._buildTree$11(nodeNum + 1, nodeBounds, allPrimBounds, prims0, n0, t1.$sub(depth, 1), edges, prims0, prims1, nPrimitives, badRefines);
      aboveChild = this.nextFreeNode;
      t2 = this.nodes;
      if (nodeNum >= t2.length)
        return H.ioore(t2, nodeNum);
      t2[nodeNum].initInterior$3(bestAxis, aboveChild, tsplit);
      this._buildTree$11(aboveChild, nodeBounds, allPrimBounds, prims1, n1, t1.$sub(depth, 1), edges, prims0, prims1, nPrimitives, badRefines);
    },
    _buildTree$10: function(nodeNum, nodeBounds, allPrimBounds, primNums, nPrimitives, depth, edges, prims0, prims1, prims1Offset) {
      return this._buildTree$11(nodeNum, nodeBounds, allPrimBounds, primNums, nPrimitives, depth, edges, prims0, prims1, prims1Offset, 0);
    },
    KdTreeAccel$6: function(p, isectCost, traversalCost, emptyBonus, maxPrims, maxDepth) {
      var t1, i, t2, primBounds, b, t3, t4, t5, edges, len, j, prims0, prims1, primNums;
      $.Log.call$2(0, "Building Kd-Tree Acceleration Structures.");
      t1 = J.getInterceptor$asx(p);
      i = 0;
      while (true) {
        t2 = t1.get$length(p);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$index(p, i).fullyRefine$1(this.primitives);
        ++i;
      }
      this.nextFreeNode = 0;
      this.nAllocedNodes = 0;
      if (J.$le$n(this.maxDepth, 0)) {
        t1 = this.primitives.length;
        t1 = Math.log(t1);
        t2 = $.get$_invLog2();
        if (typeof t2 !== "number")
          return H.iae(t2);
        this.maxDepth = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(8 + 1.3 * C.JSDouble_methods.toInt$0(t1 * t2)));
      }
      this.bounds = G.BBox$(null, null);
      primBounds = H.setRuntimeTypeInfo(Array(this.primitives.length), [G.BBox]);
      for (t1 = primBounds.length, i = 0; t2 = this.primitives, i < t2.length; ++i) {
        b = t2[i].worldBound$0();
        t2 = this.bounds;
        t3 = t2.pMin;
        t4 = t3.x;
        t5 = t3.y;
        t3 = t3.z;
        t2 = t2.pMax;
        this.bounds = new G.BBox(new G.Point(t4, t5, t3), new G.Point(t2.x, t2.y, t2.z)).union$1(b);
        if (i >= t1)
          return H.ioore(primBounds, i);
        primBounds[i] = b;
      }
      edges = H.setRuntimeTypeInfo(Array(3), [[J.JSArray, E._BoundEdge]]);
      for (i = 0; t1 = this.primitives, i < 3; ++i) {
        len = 2 * t1.length;
        t1 = Array(len);
        t1.fixed$length = init;
        t1.$builtinTypeInfo = [E._BoundEdge];
        edges[i] = t1;
        for (j = 0; j < len; ++j) {
          t1 = edges[i];
          t2 = new E._BoundEdge(null, null, null);
          t2.t = 0;
          t2.primNum = 0;
          t2.type = 0;
          J.$indexSet$ax(t1, j, t2);
        }
      }
      t1 = t1.length;
      prims0 = new Uint32Array(t1);
      t1 = J.$mul$ns(J.$add$ns(this.maxDepth, 1), this.primitives.length);
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      prims1 = new Uint32Array(t1);
      t1 = this.primitives.length;
      primNums = new Uint32Array(t1);
      for (t2 = this.primitives.length, i = 0; i < t2; ++i) {
        if (i >= t1)
          return H.ioore(primNums, i);
        primNums[i] = i;
      }
      this._buildTree$10(0, this.bounds, primBounds, primNums, t2, this.maxDepth, edges, prims0, prims1, 0);
    },
    static: {KdTreeAccel_Create: [function(prims, ps) {
        return E.KdTreeAccel$(prims, ps.findOneInt$2("intersectcost", 80), ps.findOneInt$2("traversalcost", 1), ps.findOneFloat$2("emptybonus", 0.5), ps.findOneInt$2("maxprims", 1), ps.findOneInt$2("maxdepth", -1));
      }, "call$2", "KdTreeAccel_Create$closure", 4, 0, 4], KdTreeAccel$: function(p, isectCost, traversalCost, emptyBonus, maxPrims, maxDepth) {
        var t1 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t1 + 1;
        t1 = new E.KdTreeAccel(isectCost, traversalCost, maxPrims, maxDepth, emptyBonus, [], [], null, null, null, t1);
        t1.KdTreeAccel$6(p, isectCost, traversalCost, emptyBonus, maxPrims, maxDepth);
        return t1;
      }}
  },
  KdTreeAccel__buildTree_closure: {
    "^": "Closure:93;",
    call$2: function(a, b) {
      return J.$lt$n(a, b) ? -1 : 1;
    }
  },
  _KdAccelNode: {
    "^": "Object;split,onePrimitive,primitives,flags",
    initLeaf$2: function(primNums, np) {
      var t1, t2, i, t3;
      this.flags = 3;
      this.flags = (3 | np << 2) >>> 0;
      if (np === 0)
        this.onePrimitive = 0;
      else if (np === 1) {
        if (0 >= primNums.length)
          return H.ioore(primNums, 0);
        this.onePrimitive = primNums[0];
      } else {
        t1 = new Uint32Array(np);
        this.primitives = t1;
        for (t2 = primNums.length, i = 0; i < np; ++i) {
          if (i >= t2)
            return H.ioore(primNums, i);
          t3 = primNums[i];
          if (i >= np)
            return H.ioore(t1, i);
          t1[i] = t3;
        }
      }
    },
    initInterior$3: function(axis, ac, s) {
      this.split = s;
      this.flags = axis;
      this.flags = (axis | ac << 2) >>> 0;
    },
    nPrimitives$0: [function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$shr();
      return C.JSInt_methods._shrOtherPositive$1(t1, 2);
    }, "call$0", "get$nPrimitives", 0, 0, 97],
    splitAxis$0: [function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return t1 & 3;
    }, "call$0", "get$splitAxis", 0, 0, 97]
  },
  _BoundEdge: {
    "^": "Object;t<,primNum<,type>",
    $lt: function(_, e) {
      if (J.$eq(this.t, e.get$t()))
        return this.type < e.get$type(e);
      else
        return J.$lt$n(this.t, e.get$t());
    },
    static: {"^": "_BoundEdge_START,_BoundEdge_END"}
  }
}],
["archive", "package:archive/archive.dart", , T, {
  "^": "",
  getAdler32: function(array, adler) {
    var s1, s2, len, len0, i, n, i0;
    s1 = adler & 65535;
    s2 = adler >>> 16;
    len = array.length;
    for (len0 = len, i = 0; len0 > 0;) {
      n = 3800 > len0 ? len0 : 3800;
      len0 -= n;
      for (; --n, n >= 0; i = i0) {
        i0 = i + 1;
        if (i < 0 || i >= len)
          return H.ioore(array, i);
        s1 += array[i] & 255;
        s2 += s1;
      }
      s1 = C.JSInt_methods.$mod(s1, 65521);
      s2 = C.JSInt_methods.$mod(s2, 65521);
    }
    return (s2 << 16 | s1) >>> 0;
  },
  getCrc32: function(array, crc) {
    var t1, len, ip, ip0, t2;
    t1 = J.getInterceptor$asx(array);
    len = t1.get$length(array);
    crc ^= 4294967295;
    for (ip = 0; len >= 8;) {
      ip0 = ip + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip0 = ip + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip0 = ip + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip0 = ip + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      len -= 8;
    }
    if (len > 0)
      do {
        ip0 = ip + 1;
        t2 = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255];
        if (typeof t2 !== "number")
          return t2.$xor();
        crc = t2 ^ crc >>> 8;
        if (--len, len > 0) {
          ip = ip0;
          continue;
        } else
          break;
      } while (true);
    return (crc ^ 4294967295) >>> 0;
  },
  ArchiveException: {
    "^": "Object;message",
    toString$0: function(_) {
      return "ArchiveException: " + this.message;
    },
    static: {ArchiveException$: function(message) {
        return new T.ArchiveException(message);
      }}
  },
  InputStream: {
    "^": "Object;buffer>,offset*,start>,byteOrder,_archive$_length",
    get$length: function(_) {
      var t1, t2, t3;
      t1 = this._archive$_length;
      t2 = this.offset;
      t3 = this.start;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (typeof t1 !== "number")
        return t1.$sub();
      return t1 - (t2 - t3);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, index) {
      var t1, t2;
      t1 = this.buffer;
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof index !== "number")
        return H.iae(index);
      t2 += index;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    subset$2: function(position, $length) {
      var t1 = this.start;
      if (typeof t1 !== "number")
        return H.iae(t1);
      position += t1;
      return T.InputStream$(this.buffer, this.byteOrder, $length, position);
    },
    skip$1: function(_, count) {
      var t1 = this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof count !== "number")
        return H.iae(count);
      this.offset = t1 + count;
    },
    readUint32$0: function() {
      var t1, t2, b1, b2, b3, b4;
      t1 = this.buffer;
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      b1 = J.$and$n(t1[t2], 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      b2 = J.$and$n(t1[t2], 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      b3 = J.$and$n(t1[t2], 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      b4 = J.$and$n(t1[t2], 255);
      if (this.byteOrder === 1)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    InputStream$4$byteOrder$length$start: function(buffer, byteOrder, $length, start) {
      this._archive$_length = $length == null ? buffer.length : $length;
      this.offset = start;
    },
    static: {InputStream$: function(buffer, byteOrder, $length, start) {
        var t1 = new T.InputStream(buffer, null, start, byteOrder, null);
        t1.InputStream$4$byteOrder$length$start(buffer, byteOrder, $length, start);
        return t1;
      }}
  },
  OutputStream: {
    "^": "Object;length*,byteOrder,_archive$_buffer",
    length$0: function($receiver) {
      return this.length.call$0();
    },
    getBytes$0: function() {
      return H.NativeUint8List_NativeUint8List$view(this._archive$_buffer.buffer, 0, this.length);
    },
    writeBytes$2: function(bytes, len) {
      var t1, t2;
      len = bytes.length;
      for (; t1 = J.$gt$n(J.$add$ns(this.length, len), this._archive$_buffer.length), t2 = this.length, t1;)
        this._archive$_expandBuffer$1(J.$sub$n(J.$add$ns(t2, len), this._archive$_buffer.length));
      C.NativeUint8List_methods.setRange$3(this._archive$_buffer, t2, J.$add$ns(t2, len), bytes);
      this.length = J.$add$ns(this.length, len);
    },
    writeBytes$1: function(bytes) {
      return this.writeBytes$2(bytes, null);
    },
    writeInputStream$1: function(bytes) {
      var t1, t2, t3, t4, t5;
      t1 = bytes.start;
      while (true) {
        t2 = this.length;
        t3 = bytes._archive$_length;
        t4 = bytes.offset;
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (typeof t3 !== "number")
          return t3.$sub();
        t4 = J.$gt$n(J.$add$ns(t2, t3 - (t4 - t1)), this._archive$_buffer.length);
        t3 = bytes._archive$_length;
        t2 = this.length;
        t5 = bytes.offset;
        if (!t4)
          break;
        if (typeof t5 !== "number")
          return t5.$sub();
        if (typeof t3 !== "number")
          return t3.$sub();
        this._archive$_expandBuffer$1(J.$sub$n(J.$add$ns(t2, t3 - (t5 - t1)), this._archive$_buffer.length));
      }
      t4 = this._archive$_buffer;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t3 !== "number")
        return t3.$sub();
      C.NativeUint8List_methods.setRange$4(t4, t2, J.$add$ns(t2, t3 - (t5 - t1)), bytes.buffer, bytes.offset);
      t5 = this.length;
      t3 = bytes._archive$_length;
      t2 = bytes.offset;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return t3.$sub();
      this.length = J.$add$ns(t5, t3 - (t2 - t1));
    },
    subset$2: function(start, end) {
      if (J.$lt$n(start, 0))
        start = J.$add$ns(this.length, start);
      if (end == null)
        end = this.length;
      else if (J.$lt$n(end, 0))
        end = J.$add$ns(this.length, end);
      return H.NativeUint8List_NativeUint8List$view(this._archive$_buffer.buffer, start, J.$sub$n(end, start));
    },
    subset$1: function(start) {
      return this.subset$2(start, null);
    },
    _archive$_expandBuffer$1: function(required) {
      var blockSize, t1, newBuffer;
      blockSize = required != null ? J.$gt$n(required, 32768) ? required : 32768 : 32768;
      t1 = this._archive$_buffer;
      if (typeof blockSize !== "number")
        return H.iae(blockSize);
      t1 = t1.length + blockSize;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      newBuffer = new Uint8Array(t1);
      t1 = this._archive$_buffer;
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, t1.length, t1);
      this._archive$_buffer = newBuffer;
    },
    _archive$_expandBuffer$0: function() {
      return this._archive$_expandBuffer$1(null);
    },
    static: {"^": "OutputStream__BLOCK_SIZE", OutputStream$: function(byteOrder, size) {
        return new T.OutputStream(0, byteOrder, new Uint8Array(32768));
      }}
  },
  HuffmanTable: {
    "^": "Object;table,maxCodeLength,minCodeLength",
    HuffmanTable$1: function(lengths) {
      var listSize, i, t1, size, bitLength, code, skip, rtemp, reversed, j, t2, t3;
      listSize = lengths.length;
      for (i = 0; i < listSize; ++i) {
        if (i >= lengths.length)
          return H.ioore(lengths, i);
        if (J.$gt$n(lengths[i], this.maxCodeLength)) {
          if (i >= lengths.length)
            return H.ioore(lengths, i);
          this.maxCodeLength = lengths[i];
        }
        if (i >= lengths.length)
          return H.ioore(lengths, i);
        if (J.$lt$n(lengths[i], this.minCodeLength)) {
          if (i >= lengths.length)
            return H.ioore(lengths, i);
          this.minCodeLength = lengths[i];
        }
      }
      t1 = this.maxCodeLength;
      if (typeof t1 !== "number")
        return H.iae(t1);
      size = C.JSInt_methods.$shl(1, t1);
      this.table = new Uint32Array(size);
      bitLength = 1;
      code = 0;
      skip = 2;
      while (true) {
        t1 = this.maxCodeLength;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(bitLength <= t1))
          break;
        for (t1 = bitLength << 16, i = 0; i < listSize; ++i) {
          if (i >= lengths.length)
            return H.ioore(lengths, i);
          if (J.$eq(lengths[i], bitLength)) {
            for (rtemp = code, reversed = 0, j = 0; j < bitLength; ++j) {
              reversed = (reversed << 1 | rtemp & 1) >>> 0;
              rtemp = rtemp >>> 1;
            }
            for (t2 = this.table, t3 = (t1 | i) >>> 0, j = reversed; j < size; j += skip) {
              if (j < 0 || j >= t2.length)
                return H.ioore(t2, j);
              t2[j] = t3;
            }
            ++code;
          }
        }
        ++bitLength;
        code = code << 1 >>> 0;
        skip = skip << 1 >>> 0;
      }
    },
    static: {HuffmanTable$: function(lengths) {
        var t1 = new T.HuffmanTable(null, 0, 2147483647);
        t1.HuffmanTable$1(lengths);
        return t1;
      }}
  },
  Inflate: {
    "^": "Object;input,output,_bitBuffer,_bitBufferLen,_blockPos,_fixedLiteralLengthTable,_fixedDistanceTable",
    getBytes$0: function() {
      var t1 = this.output;
      return H.NativeUint8List_NativeUint8List$view(t1._archive$_buffer.buffer, 0, t1.length);
    },
    _inflate$0: function() {
      this._bitBuffer = 0;
      this._bitBufferLen = 0;
      var t1 = this.output;
      t1._archive$_buffer = new Uint8Array(32768);
      t1.length = 0;
      for (; this._parseBlock$0();)
        ;
    },
    _parseBlock$0: function() {
      var t1, t2, t3, hdr, btype, len, t4, bytes, t5;
      t1 = this.input;
      t2 = t1.offset;
      t3 = t1.start;
      t1 = t1._archive$_length;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= t3 + t1)
        return false;
      hdr = this._readBits$1(3);
      btype = hdr >>> 1;
      switch (btype) {
        case 0:
          this._bitBuffer = 0;
          this._bitBufferLen = 0;
          len = this._readBits$1(16);
          if (len === ~this._readBits$1(16) >>> 0)
            H.throwExpression(T.ArchiveException$("Invalid uncompressed block header"));
          t1 = this.input;
          t2 = t1._archive$_length;
          t3 = t1.offset;
          t4 = t1.start;
          if (typeof t3 !== "number")
            return t3.$sub();
          if (typeof t4 !== "number")
            return H.iae(t4);
          t4 = t3 - t4;
          if (typeof t2 !== "number")
            return t2.$sub();
          if (len > t2 - t4)
            H.throwExpression(T.ArchiveException$("Input buffer is broken"));
          bytes = t1.subset$2(t4, len);
          t2 = t1.offset;
          t3 = bytes._archive$_length;
          t4 = bytes.offset;
          t5 = bytes.start;
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (typeof t3 !== "number")
            return t3.$sub();
          if (typeof t2 !== "number")
            return t2.$add();
          t1.offset = t2 + (t3 - (t4 - t5));
          this.output.writeInputStream$1(bytes);
          break;
        case 1:
          this._decodeHuffman$2(this._fixedLiteralLengthTable, this._fixedDistanceTable);
          break;
        case 2:
          this._parseDynamicHuffmanBlock$0();
          break;
        default:
          throw H.wrapException(T.ArchiveException$("unknown BTYPE: " + btype));
      }
      return (hdr & 1) === 0;
    },
    _readBits$1: function($length) {
      var t1, t2, t3, t4, t5, octet;
      if (J.$eq($length, 0))
        return 0;
      if (typeof $length !== "number")
        return H.iae($length);
      for (; t1 = this._bitBufferLen, t1 < $length;) {
        t2 = this.input;
        t3 = t2.offset;
        t4 = t2.start;
        t5 = t2._archive$_length;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= t4 + t5)
          throw H.wrapException(T.ArchiveException$("input buffer is broken"));
        t4 = t2.buffer;
        t2.offset = t3 + 1;
        if (t3 >>> 0 !== t3 || t3 >= t4.length)
          return H.ioore(t4, t3);
        octet = t4[t3];
        t3 = this._bitBuffer;
        if (typeof octet !== "number")
          return octet.$shl();
        this._bitBuffer = (t3 | C.JSNumber_methods.$shl(octet, t1)) >>> 0;
        this._bitBufferLen = t1 + 8;
      }
      t2 = this._bitBuffer;
      t3 = C.JSInt_methods.$shl(1, $length);
      this._bitBuffer = C.JSInt_methods._shrReceiverPositive$1(t2, $length);
      this._bitBufferLen = t1 - $length;
      return (t2 & t3 - 1) >>> 0;
    },
    _readCodeByTable$1: function(table) {
      var codeTable, maxCodeLength, t1, t2, t3, t4, t5, octet, codeWithLength, codeLength;
      codeTable = table.table;
      maxCodeLength = table.maxCodeLength;
      if (typeof maxCodeLength !== "number")
        return H.iae(maxCodeLength);
      for (; t1 = this._bitBufferLen, t1 < maxCodeLength;) {
        t2 = this.input;
        t3 = t2.offset;
        t4 = t2.start;
        t5 = t2._archive$_length;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= t4 + t5)
          break;
        t4 = t2.buffer;
        t2.offset = t3 + 1;
        if (t3 >>> 0 !== t3 || t3 >= t4.length)
          return H.ioore(t4, t3);
        octet = t4[t3];
        t3 = this._bitBuffer;
        if (typeof octet !== "number")
          return octet.$shl();
        this._bitBuffer = (t3 | C.JSNumber_methods.$shl(octet, t1)) >>> 0;
        this._bitBufferLen = t1 + 8;
      }
      t2 = this._bitBuffer;
      t3 = (t2 & C.JSInt_methods.$shl(1, maxCodeLength) - 1) >>> 0;
      if (t3 >= codeTable.length)
        return H.ioore(codeTable, t3);
      codeWithLength = codeTable[t3];
      codeLength = codeWithLength >>> 16;
      this._bitBuffer = C.JSInt_methods._shrBothPositive$1(t2, codeLength);
      this._bitBufferLen = t1 - codeLength;
      return codeWithLength & 65535;
    },
    _parseDynamicHuffmanBlock$0: function() {
      var numLitLengthCodes, numDistanceCodes, numCodeLengths, codeLengths, i, t1, t2, codeLengthsTable, litlenLengths, distLengths, litlen, dist;
      numLitLengthCodes = this._readBits$1(5) + 257;
      numDistanceCodes = this._readBits$1(5) + 1;
      numCodeLengths = this._readBits$1(4) + 4;
      codeLengths = new Uint8Array(19);
      for (i = 0; i < numCodeLengths; ++i) {
        if (i >= 19)
          return H.ioore(C.List_uSC, i);
        t1 = C.List_uSC[i];
        t2 = this._readBits$1(3);
        if (t1 >>> 0 !== t1 || t1 >= 19)
          return H.ioore(codeLengths, t1);
        codeLengths[t1] = t2;
      }
      codeLengthsTable = T.HuffmanTable$(codeLengths);
      litlenLengths = new Uint8Array(numLitLengthCodes);
      distLengths = new Uint8Array(numDistanceCodes);
      litlen = this._decode$3(numLitLengthCodes, codeLengthsTable, litlenLengths);
      dist = this._decode$3(numDistanceCodes, codeLengthsTable, distLengths);
      this._decodeHuffman$2(T.HuffmanTable$(litlen), T.HuffmanTable$(dist));
    },
    _decodeHuffman$2: function(litlen, dist) {
      var code, t1, t2, t3, ti, codeLength, distCode, distance;
      for (; true;) {
        code = this._readCodeByTable$1(litlen);
        if (code > 285)
          throw H.wrapException(T.ArchiveException$("Invalid Huffman Code " + code));
        if (code === 256)
          break;
        if (code < 256) {
          t1 = this.output;
          if (J.$eq(t1.length, t1._archive$_buffer.length))
            t1._archive$_expandBuffer$0();
          t2 = t1._archive$_buffer;
          t3 = t1.length;
          t1.length = J.$add$ns(t3, 1);
          if (t3 >>> 0 !== t3 || t3 >= t2.length)
            return H.ioore(t2, t3);
          t2[t3] = code & 255 & 255;
          continue;
        }
        ti = code - 257;
        if (ti < 0 || ti >= 29)
          return H.ioore(C.List_qQn, ti);
        codeLength = J.$add$ns(C.List_qQn[ti], this._readBits$1(C.List_eea[ti]));
        distCode = this._readCodeByTable$1(dist);
        if (distCode <= 29) {
          if (distCode >= 30)
            return H.ioore(C.List_i3t, distCode);
          distance = J.$add$ns(C.List_i3t[distCode], this._readBits$1(C.List_X3d0[distCode]));
          for (t1 = this.output, t2 = J.getInterceptor$n(distance); t3 = J.getInterceptor$n(codeLength), t3.$gt(codeLength, distance);) {
            t1.writeBytes$1(t1.subset$1(t2.$negate(distance)));
            codeLength = t3.$sub(codeLength, distance);
          }
          if (t3.$eq(codeLength, distance))
            t1.writeBytes$1(t1.subset$1(t2.$negate(distance)));
          else
            t1.writeBytes$1(t1.subset$2(t2.$negate(distance), t3.$sub(codeLength, distance)));
        } else
          throw H.wrapException(T.ArchiveException$("Illegal unused distance symbol"));
      }
      for (; t1 = this._bitBufferLen, t1 >= 8;) {
        this._bitBufferLen = t1 - 8;
        t1 = this.input;
        t2 = t1.offset;
        if (typeof t2 !== "number")
          return t2.$sub();
        t1.offset = t2 - 1;
      }
    },
    _decode$3: function(num, table, lengths) {
      var t1, prev, i, code, repeat, repeat0, i0;
      for (t1 = lengths.length, prev = 0, i = 0; i < num;) {
        code = this._readCodeByTable$1(table);
        switch (code) {
          case 16:
            repeat = 3 + this._readBits$1(2);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = prev;
            }
            break;
          case 17:
            repeat = 3 + this._readBits$1(3);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          case 18:
            repeat = 11 + this._readBits$1(7);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          default:
            if (code > 15)
              throw H.wrapException(T.ArchiveException$("Invalid Huffman Code: " + code));
            i0 = i + 1;
            if (i < 0 || i >= t1)
              return H.ioore(lengths, i);
            lengths[i] = code;
            i = i0;
            prev = code;
            break;
        }
      }
      return lengths;
    },
    Inflate$2: function(bytes, uncompressedSize) {
      this._inflate$0();
    },
    static: {"^": "Inflate__BLOCK_UNCOMPRESSED,Inflate__BLOCK_FIXED_HUFFMAN,Inflate__BLOCK_DYNAMIC_HUFFMAN,Inflate__FIXED_LITERAL_LENGTHS,Inflate__FIXED_DISTANCE_TABLE,Inflate__MAX_BACKWARD_LENGTH,Inflate__MAX_COPY_LENGTH,Inflate__ORDER,Inflate__LENGTH_CODE_TABLE,Inflate__LENGTH_EXTRA_TABLE,Inflate__DIST_CODE_TABLE,Inflate__DIST_EXTRA_TABLE", Inflate$: function(bytes, uncompressedSize) {
        var t1, t2;
        t1 = T.HuffmanTable$(C.List_2Bc);
        t2 = T.HuffmanTable$(C.List_X3d);
        t2 = new T.Inflate(T.InputStream$(bytes, 0, null, 0), T.OutputStream$(0, uncompressedSize), 0, 0, 0, t1, t2);
        t2.Inflate$2(bytes, uncompressedSize);
        return t2;
      }}
  },
  ZLibDecoder: {
    "^": "Object;",
    decodeBuffer$2$verify: function(input, verify) {
      var t1, t2, t3, t4, cmf, flg, method, buffer, adler32;
      t1 = input.buffer;
      t2 = input.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t3 = t2 + 1;
      input.offset = t3;
      t4 = t1.length;
      if (t2 >>> 0 !== t2 || t2 >= t4)
        return H.ioore(t1, t2);
      cmf = t1[t2];
      input.offset = t3 + 1;
      if (t3 >>> 0 !== t3 || t3 >= t4)
        return H.ioore(t1, t3);
      flg = t1[t3];
      method = J.getInterceptor$n(cmf).$and(cmf, 8);
      if (typeof cmf !== "number")
        return cmf.$shr();
      C.JSNumber_methods._shrOtherPositive$1(cmf, 3);
      if (method !== 8)
        throw H.wrapException(T.ArchiveException$("Only DEFLATE compression supported: " + method));
      t1 = J.getInterceptor$n(flg);
      t1.$and(flg, 16);
      t2 = t1.$and(flg, 32);
      t1.$and(flg, 64);
      if (typeof flg !== "number")
        return H.iae(flg);
      if (C.JSNumber_methods.$mod((cmf << 8 >>> 0) + flg, 31) !== 0)
        throw H.wrapException(T.ArchiveException$("Invalid FCHECK"));
      if (t2 >>> 5 !== 0) {
        input.readUint32$0();
        throw H.wrapException(T.ArchiveException$("FDICT Encoding not currently supported"));
      }
      t1 = T.HuffmanTable$(C.List_2Bc);
      t2 = T.HuffmanTable$(C.List_X3d);
      t3 = T.OutputStream$(0, null);
      new T.Inflate(input, t3, 0, 0, 0, t1, t2)._inflate$0();
      buffer = H.NativeUint8List_NativeUint8List$view(t3._archive$_buffer.buffer, 0, t3.length);
      adler32 = input.readUint32$0();
      if (verify)
        if (adler32 !== T.getAdler32(buffer, 1))
          throw H.wrapException(T.ArchiveException$("Invalid adler-32 checksum"));
      return buffer;
    },
    static: {"^": "ZLibDecoder_DEFLATE"}
  }
}],
["cameras", "package:dartray/cameras/cameras.dart", , K, {
  "^": "",
  EnvironmentCamera: {
    "^": "Camera;cameraToWorld,shutterOpen,shutterClose,film",
    static: {EnvironmentCamera_Create: [function(params, cam2world, film) {
        var shutteropen, shutterclose, t1, t0, frame, sw, $screen;
        shutteropen = params.findOneFloat$2("shutteropen", 0);
        shutterclose = params.findOneFloat$2("shutterclose", 1);
        if (J.$lt$n(shutterclose, shutteropen)) {
          t1 = "Shutter close time [" + H.S(shutterclose) + "] < shutter open [" + H.S(shutteropen) + "]. Swapping them.";
          $.Log.call$2(1, t1);
          t0 = shutterclose;
          shutterclose = shutteropen;
          shutteropen = t0;
        }
        frame = params.findOneFloat$2("frameaspectratio", J.$div$n(film.get$xResolution(), film.yResolution));
        sw = params.findFloat$1("screenwindow");
        if (sw != null && J.$eq(J.get$length$asx(sw), 4))
          ;
        else {
          $screen = [0, 0, 0, 0];
          if (J.$gt$n(frame, 1)) {
            if (typeof frame !== "number")
              return frame.$negate();
            $screen[0] = -frame;
            $screen[1] = frame;
            $screen[2] = -1;
            $screen[3] = 1;
          } else {
            $screen[0] = -1;
            $screen[1] = 1;
            if (typeof frame !== "number")
              return H.iae(frame);
            $screen[2] = -1 / frame;
            $screen[3] = 1 / frame;
          }
        }
        return new K.EnvironmentCamera(cam2world, shutteropen, shutterclose, film);
      }, "call$3", "EnvironmentCamera_Create$closure", 6, 0, 5]}
  },
  OrthographicCamera: {
    "^": "ProjectiveCamera;dxCamera,dyCamera,cameraToScreen,rasterToCamera,screenToRaster,rasterToScreen,lensRadius,focalDistance,cameraToWorld,shutterOpen,shutterClose,film",
    OrthographicCamera$7: function(cam2world, screenWindow, sopen, sclose, lensr, focald, film) {
      this.dxCamera = this.rasterToCamera.transformVector$1(new G.Vector(1, 0, 0));
      this.dyCamera = this.rasterToCamera.transformVector$1(new G.Vector(0, 1, 0));
    },
    static: {OrthographicCamera_Create: [function(params, cam2world, film) {
        var shutteropen, shutterclose, t1, t0, lensradius, focaldistance, frame, sw, $screen, t2;
        shutteropen = params.findOneFloat$2("shutteropen", 0);
        shutterclose = params.findOneFloat$2("shutterclose", 1);
        if (J.$lt$n(shutterclose, shutteropen)) {
          t1 = "Shutter close time [" + H.S(shutterclose) + "] < shutter open [" + H.S(shutteropen) + "].  Swapping them.";
          $.Log.call$2(1, t1);
          t0 = shutterclose;
          shutterclose = shutteropen;
          shutteropen = t0;
        }
        lensradius = params.findOneFloat$2("lensradius", 0);
        focaldistance = params.findOneFloat$2("focaldistance", 1000000000000000019884624838656);
        frame = params.findOneFloat$2("frameaspectratio", J.$div$n(film.get$xResolution(), film.yResolution));
        sw = params.findFloat$1("screenwindow");
        if (sw != null && J.$eq(J.get$length$asx(sw), 4))
          $screen = sw;
        else {
          $screen = [0, 0, 0, 0];
          if (J.$gt$n(frame, 1)) {
            if (typeof frame !== "number")
              return frame.$negate();
            $screen[0] = -frame;
            $screen[1] = frame;
            $screen[2] = -1;
            $screen[3] = 1;
          } else {
            $screen[0] = -1;
            $screen[1] = 1;
            if (typeof frame !== "number")
              return H.iae(frame);
            $screen[2] = -1 / frame;
            $screen[3] = 1 / frame;
          }
        }
        t1 = G.Transform_Scale(1, 1, 1).$mul(0, G.Transform_Translate(new G.Vector(0, 0, -0.0)));
        t2 = new K.OrthographicCamera(null, null, t1, null, null, null, lensradius, focaldistance, cam2world, shutteropen, shutterclose, film);
        t2.ProjectiveCamera$8(cam2world, t1, $screen, shutteropen, shutterclose, lensradius, focaldistance, film);
        t2.OrthographicCamera$7(cam2world, $screen, shutteropen, shutterclose, lensradius, focaldistance, film);
        return t2;
      }, "call$3", "OrthographicCamera_Create$closure", 6, 0, 6]}
  },
  PerspectiveCamera: {
    "^": "ProjectiveCamera;dxCamera,dyCamera,cameraToScreen,rasterToCamera,screenToRaster,rasterToScreen,lensRadius,focalDistance,cameraToWorld,shutterOpen,shutterClose,film",
    PerspectiveCamera$8: function(cam2world, screenWindow, sopen, sclose, lensr, focald, fov, film) {
      this.dxCamera = this.rasterToCamera.transformPoint$1(new G.Point(1, 0, 0)).$sub(0, this.rasterToCamera.transformPoint$1(new G.Point(0, 0, 0)));
      this.dyCamera = this.rasterToCamera.transformPoint$1(new G.Point(0, 1, 0)).$sub(0, this.rasterToCamera.transformPoint$1(new G.Point(0, 0, 0)));
    },
    static: {PerspectiveCamera_Create: [function(params, cam2world, film) {
        var shutteropen, shutterclose, t0, lensradius, focaldistance, frame, sw, $screen, fov, halffov, t1, t2;
        shutteropen = params.findOneFloat$2("shutteropen", 0);
        shutterclose = params.findOneFloat$2("shutterclose", 1);
        if (J.$lt$n(shutterclose, shutteropen)) {
          t0 = shutterclose;
          shutterclose = shutteropen;
          shutteropen = t0;
        }
        lensradius = params.findOneFloat$2("lensradius", 0);
        focaldistance = params.findOneFloat$2("focaldistance", 1000000000000000019884624838656);
        frame = params.findOneFloat$2("frameaspectratio", J.$div$n(film.get$xResolution(), film.yResolution));
        sw = params.findFloat$1("screenwindow");
        if (sw != null && J.$eq(J.get$length$asx(sw), 4))
          $screen = sw;
        else {
          $screen = [0, 0, 0, 0];
          if (J.$gt$n(frame, 1)) {
            if (typeof frame !== "number")
              return frame.$negate();
            $screen[0] = -frame;
            $screen[1] = frame;
            $screen[2] = -1;
            $screen[3] = 1;
          } else {
            $screen[0] = -1;
            $screen[1] = 1;
            if (typeof frame !== "number")
              return H.iae(frame);
            $screen[2] = -1 / frame;
            $screen[3] = 1 / frame;
          }
        }
        fov = params.findOneFloat$2("fov", 60);
        halffov = params.findOneFloat$2("halffov", -1);
        if (J.$gt$n(halffov, 0)) {
          if (typeof halffov !== "number")
            return H.iae(halffov);
          fov = 2 * halffov;
        }
        t1 = G.Transform_Perspective(fov, 0.01, 1000);
        t2 = new K.PerspectiveCamera(null, null, t1, null, null, null, lensradius, focaldistance, cam2world, shutteropen, shutterclose, film);
        t2.ProjectiveCamera$8(cam2world, t1, $screen, shutteropen, shutterclose, lensradius, focaldistance, film);
        t2.PerspectiveCamera$8(cam2world, $screen, shutteropen, shutterclose, lensradius, focaldistance, fov, film);
        return t2;
      }, "call$3", "PerspectiveCamera_Create$closure", 6, 0, 7]}
  }
}],
["core", "package:dartray/core/core.dart", , G, {
  "^": "",
  RoundUpPow2: function(v) {
    v = J.$sub$n(v, 1);
    if (typeof v !== "number")
      return v.$shr();
    v |= C.JSNumber_methods._shrOtherPositive$1(v, 1);
    v |= v >>> 2;
    v |= v >>> 4;
    v |= v >>> 8;
    return ((v | v >>> 16) >>> 0) + 1;
  },
  partition: function(list, pred, first, last) {
    var t1, t;
    for (; first < last;) {
      while (true) {
        if (first < 0 || first >= list.length)
          return H.ioore(list, first);
        if (!(pred.call$1(list[first]) === true))
          break;
        ++first;
        if (first === last)
          return first;
      }
      do {
        --last;
        if (first === last)
          return first;
        if (last < 0 || last >= list.length)
          return H.ioore(list, last);
      } while (pred.call$1(list[last]) !== true);
      t1 = list.length;
      if (first >= t1)
        return H.ioore(list, first);
      t = list[first];
      if (last >= t1)
        return H.ioore(list, last);
      list[first] = list[last];
      list[last] = t;
      ++first;
    }
    return first;
  },
  nth_element: function(list, first, nth, last, pred) {
    var l, t1, i, j, t2;
    l = C.JSArray_methods.sublist$2(list, first, last);
    H.IterableMixinWorkaround_sortList(l, new G.nth_element_closure(pred));
    for (t1 = list.length, i = first, j = 0; J.$lt$n(i, last); ++i, ++j) {
      if (j >= l.length)
        return H.ioore(l, j);
      t2 = l[j];
      if (i >>> 0 !== i || i >= t1)
        return H.ioore(list, i);
      list[i] = t2;
    }
  },
  PrintLogger: [function(type, msg) {
    if (type >= 5)
      return H.ioore(C.List_UgT, type);
    P.print(H.S(C.List_UgT[type]) + ": " + H.S(msg));
    if (type === 3)
      throw H.wrapException(P.Exception_Exception(msg));
  }, "call$2", "PrintLogger$closure", 4, 0, 8],
  BRDFRemap: function(wo, wi) {
    var t1, cosi, t2, coso, t3, sini, sino, p, phii, dphi;
    t1 = J.getInterceptor$x(wi);
    cosi = t1.get$z(wi);
    t2 = J.getInterceptor$x(wo);
    coso = t2.get$z(wo);
    t3 = J.$mul$ns(t1.get$z(wi), t1.get$z(wi));
    if (typeof t3 !== "number")
      return H.iae(t3);
    t3 = P.max(0, 1 - t3);
    sini = Math.sqrt(t3);
    t3 = J.$mul$ns(t2.get$z(wo), t2.get$z(wo));
    if (typeof t3 !== "number")
      return H.iae(t3);
    t3 = P.max(0, 1 - t3);
    sino = Math.sqrt(t3);
    t3 = t1.get$y(wi);
    t1 = t1.get$x(wi);
    if (typeof t3 !== "number")
      H.throwExpression(P.ArgumentError$(t3));
    if (typeof t1 !== "number")
      H.throwExpression(P.ArgumentError$(t1));
    p = Math.atan2(t3, t1);
    phii = p < 0 ? p + 6.283185307179586 : p;
    t1 = t2.get$y(wo);
    t2 = t2.get$x(wo);
    if (typeof t1 !== "number")
      H.throwExpression(P.ArgumentError$(t1));
    if (typeof t2 !== "number")
      H.throwExpression(P.ArgumentError$(t2));
    p = Math.atan2(t1, t2);
    dphi = phii - (p < 0 ? p + 6.283185307179586 : p);
    if (dphi < 0)
      dphi += 6.283185307179586;
    if (dphi > 6.283185307179586)
      dphi -= 6.283185307179586;
    if (dphi > 3.141592653589793)
      dphi = 6.283185307179586 - dphi;
    return new G.Point(sini * sino, dphi / 3.141592653589793, J.$mul$ns(cosi, coso));
  },
  Sampler_ComputeSubWindow: function(w, h, num, count, extents) {
    var t1, nx, ny, t2, xo, yo, tx0, tx1, ty0, ty1;
    t1 = J.getInterceptor$ns(h);
    nx = count;
    ny = 1;
    while (true) {
      if ((nx & 1) === 0) {
        if (typeof w !== "number")
          return H.iae(w);
        t2 = t1.$mul(h, nx);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = 2 * w * ny < t2;
      } else
        t2 = false;
      if (!t2)
        break;
      nx = nx >>> 1;
      ny = ny << 1 >>> 0;
    }
    xo = C.JSInt_methods.$mod(num, nx);
    yo = C.JSInt_methods.$tdiv(num, nx);
    tx0 = xo / nx;
    tx1 = (xo + 1) / nx;
    ty0 = yo / ny;
    ty1 = (yo + 1) / ny;
    if (typeof w !== "number")
      return H.iae(w);
    extents[0] = C.JSNumber_methods.toInt$0(Math.floor((1 - tx0) * 0 + tx0 * w));
    extents[1] = P.min(C.JSNumber_methods.toInt$0(Math.floor((1 - tx1) * 0 + tx1 * w)), w - 1);
    if (typeof h !== "number")
      return H.iae(h);
    extents[2] = C.JSNumber_methods.toInt$0(Math.floor((1 - ty0) * 0 + ty0 * h));
    extents[3] = P.min(C.JSNumber_methods.toInt$0(Math.floor((1 - ty1) * 0 + ty1 * h)), h - 1);
  },
  Spectrum_Spectrum: function(v) {
    var t1, t2;
    t1 = $.Spectrum_type;
    if (t1 === 0) {
      t1 = new Float32Array(3);
      t2 = new G.RGBColor(t1);
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(t1, 0, 3, v);
      t1 = t2;
    } else if (t1 === 2) {
      t1 = new Float32Array(4);
      t2 = new G.SampledSpectrum(t1);
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(t1, 0, 4, v);
      t1 = t2;
    } else if (t1 === 1) {
      t1 = new Float32Array(3);
      t2 = new G.XYZColor(t1);
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(t1, 0, 3, v);
      t1 = t2;
    } else
      t1 = null;
    return t1;
  },
  Spectrum_Spectrum$from: function(other, type) {
    switch ($.Spectrum_type) {
      case 0:
        return G.RGBColor$from(other);
      case 1:
        return G.XYZColor$from(other);
      case 2:
        return G.SampledSpectrum$from(other, type);
    }
    $.Log.call$2(3, "Invalid Spectrum type");
    return;
  },
  Spectrum_Spectrum$rgb: function(r, g, b) {
    var t1, t2;
    t1 = $.Spectrum_type;
    if (t1 === 0)
      t1 = G.RGBColor$rgb(r, g, b);
    else if (t1 === 2) {
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.setRGB$3(r, g, b);
    } else if (t1 === 1) {
      t1 = new Float32Array(3);
      t2 = new G.XYZColor(t1);
      G.Spectrum_RGBToXYZ(r, g, b, t1);
      t1 = t2;
    } else
      t1 = null;
    return t1;
  },
  Spectrum_XYZToRGB: function(x, y, z, rgb) {
    var t1;
    if (typeof x !== "number")
      return H.iae(x);
    if (typeof y !== "number")
      return H.iae(y);
    if (typeof z !== "number")
      return H.iae(z);
    t1 = rgb.length;
    if (0 >= t1)
      return H.ioore(rgb, 0);
    rgb[0] = 3.240479 * x - 1.53715 * y - 0.498535 * z;
    if (1 >= t1)
      return H.ioore(rgb, 1);
    rgb[1] = -0.969256 * x + 1.875991 * y + 0.041556 * z;
    if (2 >= t1)
      return H.ioore(rgb, 2);
    rgb[2] = 0.055648 * x - 0.204043 * y + 1.057311 * z;
  },
  Spectrum_RGBToXYZ: function(r, g, b, xyz) {
    var t1;
    if (typeof r !== "number")
      return H.iae(r);
    if (typeof g !== "number")
      return H.iae(g);
    if (typeof b !== "number")
      return H.iae(b);
    t1 = xyz.length;
    if (0 >= t1)
      return H.ioore(xyz, 0);
    xyz[0] = 0.412453 * r + 0.35758 * g + 0.180423 * b;
    if (1 >= t1)
      return H.ioore(xyz, 1);
    xyz[1] = 0.212671 * r + 0.71516 * g + 0.072169 * b;
    if (2 >= t1)
      return H.ioore(xyz, 2);
    xyz[2] = 0.019334 * r + 0.119193 * g + 0.950227 * b;
  },
  Spectrum_SpectrumSamplesSorted: function(lambda) {
    var t1, i, t2, t3;
    for (t1 = lambda.length - 1, i = 0; i < t1;) {
      t2 = lambda.length;
      if (i >= t2)
        return H.ioore(lambda, i);
      t3 = lambda[i];
      ++i;
      if (i >= t2)
        return H.ioore(lambda, i);
      if (J.$gt$n(t3, lambda[i]))
        return false;
    }
    return true;
  },
  Spectrum_SortSpectrumSamples: function(lambda, vals, offset) {
    var sortVec, n, i, t1, t2;
    sortVec = [];
    n = lambda.length;
    for (i = 0; i < n; ++i) {
      if (i >= lambda.length)
        return H.ioore(lambda, i);
      t1 = lambda[i];
      t2 = offset + i;
      if (t2 < 0 || t2 >= vals.length)
        return H.ioore(vals, t2);
      sortVec.push([t1, vals[t2]]);
    }
    H.IterableMixinWorkaround_sortList(sortVec, new G.Spectrum_SortSpectrumSamples_closure());
    for (t1 = J.getInterceptor$ax(lambda), t2 = J.getInterceptor$ax(vals), i = 0; i < n; ++i) {
      if (i >= sortVec.length)
        return H.ioore(sortVec, i);
      t1.$indexSet(lambda, i, J.$index$asx(sortVec[i], 0));
      if (i >= sortVec.length)
        return H.ioore(sortVec, i);
      t2.$indexSet(vals, offset + i, J.$index$asx(sortVec[i], 1));
    }
  },
  Spectrum_AverageSpectrumSamples: function(lambda, vals, lambdaStart, lambdaEnd, offset) {
    var n, t1, t2, t3, sum, i, i0, segStart, segEnd;
    n = lambda.length;
    if (0 >= n)
      return H.ioore(lambda, 0);
    t1 = lambda[0];
    if (typeof t1 !== "number")
      return H.iae(t1);
    if (lambdaEnd <= t1) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      return vals[offset];
    }
    t2 = n - 1;
    if (t2 < 0)
      return H.ioore(lambda, t2);
    t3 = lambda[t2];
    if (typeof t3 !== "number")
      return H.iae(t3);
    if (lambdaStart >= t3) {
      t1 = offset + n - 1;
      if (t1 < 0 || t1 >= vals.length)
        return H.ioore(vals, t1);
      return vals[t1];
    }
    if (n === 1) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      return vals[offset];
    }
    if (lambdaStart < t1) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      t1 = J.$mul$ns(vals[offset], t1 - lambdaStart);
      if (typeof t1 !== "number")
        return H.iae(t1);
      sum = 0 + t1;
    } else
      sum = 0;
    if (t2 >= lambda.length)
      return H.ioore(lambda, t2);
    t1 = lambda[t2];
    if (typeof t1 !== "number")
      return H.iae(t1);
    if (lambdaEnd > t1) {
      t2 = offset + n - 1;
      if (t2 < 0 || t2 >= vals.length)
        return H.ioore(vals, t2);
      t1 = J.$mul$ns(vals[t2], lambdaEnd - t1);
      if (typeof t1 !== "number")
        return H.iae(t1);
      sum += t1;
    }
    t1 = lambda.length;
    i = 0;
    while (true) {
      i0 = i + 1;
      if (i0 >= t1)
        return H.ioore(lambda, i0);
      t2 = lambda[i0];
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(lambdaStart > t2))
        break;
      i = i0;
    }
    t1 = new G.Spectrum_AverageSpectrumSamples_SEG_AVG(new G.Spectrum_AverageSpectrumSamples_INTERP(lambda, vals, offset));
    while (true) {
      i0 = i + 1;
      if (i0 < n) {
        if (i >= lambda.length)
          return H.ioore(lambda, i);
        t2 = lambda[i];
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = lambdaEnd >= t2;
      } else
        t2 = false;
      if (!t2)
        break;
      if (i >= lambda.length)
        return H.ioore(lambda, i);
      segStart = P.max(lambdaStart, lambda[i]);
      if (i0 >= lambda.length)
        return H.ioore(lambda, i0);
      segEnd = P.min(lambdaEnd, lambda[i0]);
      t2 = J.$mul$ns(t1.call$3(segStart, segEnd, i), segEnd - segStart);
      if (typeof t2 !== "number")
        return H.iae(t2);
      sum += t2;
      i = i0;
    }
    return sum / (lambdaEnd - lambdaStart);
  },
  Spectrum_InterpolateSpectrumSamples: function(lambda, vals, l, offset) {
    var n, t1, t2, i, t3, t4, t5, t;
    n = lambda.length;
    if (0 >= n)
      return H.ioore(lambda, 0);
    t1 = J.getInterceptor$n(l);
    if (t1.$le(l, lambda[0])) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      return vals[offset];
    }
    t2 = n - 1;
    if (t2 < 0 || t2 >= lambda.length)
      return H.ioore(lambda, t2);
    if (t1.$ge(l, lambda[t2])) {
      t1 = offset + t2;
      if (t1 < 0 || t1 >= vals.length)
        return H.ioore(vals, t1);
      return vals[t1];
    }
    for (i = 0; i < t2; ++i) {
      if (i >= lambda.length)
        return H.ioore(lambda, i);
      if (t1.$ge(l, lambda[i])) {
        t3 = i + 1;
        if (t3 >= lambda.length)
          return H.ioore(lambda, t3);
        t3 = t1.$le(l, lambda[t3]);
      } else
        t3 = false;
      if (t3) {
        if (i >= lambda.length)
          return H.ioore(lambda, i);
        t2 = t1.$sub(l, lambda[i]);
        t3 = i + 1;
        t4 = lambda.length;
        if (t3 >= t4)
          return H.ioore(lambda, t3);
        t5 = lambda[t3];
        if (i >= t4)
          return H.ioore(lambda, i);
        t5 = J.$sub$n(t5, lambda[i]);
        if (typeof t2 !== "number")
          return t2.$div();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t = t2 / t5;
        t5 = offset + i;
        t2 = vals.length;
        if (t5 < 0 || t5 >= t2)
          return H.ioore(vals, t5);
        t5 = vals[t5];
        if (t3 >= t2)
          return H.ioore(vals, t3);
        t3 = vals[t3];
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t3 !== "number")
          return H.iae(t3);
        return (1 - t) * t5 + t * t3;
      }
    }
    $.Log.call$2(3, "Fatal logic error in InterpolateSpectrumSamples()");
    return 0;
  },
  Stats_getString: function() {
    var t1, s;
    for (t1 = $.get$Stats_trackers(), t1 = new H.ListIterator(t1, t1.length, 0, null), s = ""; t1.moveNext$0();)
      s += H.S(t1._current) + "\n";
    return s;
  },
  Lanczos: function(x, tau) {
    var t1, t2;
    x = Math.abs(x);
    if (x < 0.00001)
      return 1;
    if (x > 1)
      return 0;
    x *= 3.141592653589793;
    t1 = x * tau;
    t2 = Math.sin(t1);
    return t2 / t1 * (Math.sin(x) / x);
  },
  PhaseHG: function(w, wp, g) {
    var costheta, t1, t2;
    costheta = G.Vector_Dot(w, wp);
    t1 = J.getInterceptor$ns(g);
    t2 = t1.$mul(g, g);
    if (typeof t2 !== "number")
      return H.iae(t2);
    t1 = t1.$mul(g, g);
    if (typeof t1 !== "number")
      return H.iae(t1);
    if (typeof g !== "number")
      return H.iae(g);
    if (typeof costheta !== "number")
      return H.iae(costheta);
    return 0.07957747154594767 * (1 - t2) / Math.pow(1 + t1 - 2 * g * costheta, 1.5);
  },
  GetVolumeScatteringProperties: function($name, sigma_a, sigma_prime_s) {
    if (C.Map_2j0.containsKey$1($name) !== true)
      return false;
    sigma_a.setRGB$3(J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 1), 0), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 1), 1), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 2), 2));
    sigma_prime_s.setRGB$3(J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 0), 0), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 0), 1), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 0), 2));
    return true;
  },
  AnimatedTransform: {
    "^": "Object;"
  },
  BBox: {
    "^": "Object;pMin<,pMax",
    $index: function(_, index) {
      return J.$eq(index, 0) ? this.pMin : this.pMax;
    },
    inside$1: function(pt) {
      return J.$ge$n(pt.get$x(pt), this.pMin.x) && J.$le$n(pt.get$x(pt), this.pMax.x) && J.$ge$n(pt.get$y(pt), this.pMin.y) && J.$le$n(pt.get$y(pt), this.pMax.y) && J.$ge$n(pt.get$z(pt), this.pMin.z) && J.$le$n(pt.get$z(pt), this.pMax.z);
    },
    unionPoint$1: function(p) {
      var t1, t2;
      t1 = this.pMin;
      t2 = J.getInterceptor$x(p);
      t1.x = P.min(t1.x, t2.get$x(p));
      t1 = this.pMin;
      t1.y = P.min(t1.y, t2.get$y(p));
      t1 = this.pMin;
      t1.z = P.min(t1.z, t2.get$z(p));
      t1 = this.pMax;
      t1.x = P.max(t1.x, t2.get$x(p));
      t1 = this.pMax;
      t1.y = P.max(t1.y, t2.get$y(p));
      t1 = this.pMax;
      t1.z = P.max(t1.z, t2.get$z(p));
      return this;
    },
    union$1: function(b2) {
      var t1 = this.pMin;
      t1.x = P.min(t1.x, b2.get$pMin().x);
      t1 = this.pMin;
      t1.y = P.min(t1.y, b2.pMin.y);
      t1 = this.pMin;
      t1.z = P.min(t1.z, b2.pMin.z);
      t1 = this.pMax;
      t1.x = P.max(t1.x, b2.pMax.x);
      t1 = this.pMax;
      t1.y = P.max(t1.y, b2.pMax.y);
      t1 = this.pMax;
      t1.z = P.max(t1.z, b2.pMax.z);
      return this;
    },
    surfaceArea$0: function() {
      var d, t1;
      d = this.pMax.$sub(0, this.pMin);
      t1 = J.$add$ns(J.$add$ns(J.$mul$ns(d.x, d.y), J.$mul$ns(d.x, d.z)), J.$mul$ns(d.y, d.z));
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 2 * t1;
    },
    maximumExtent$0: function() {
      var diag = this.pMax.$sub(0, this.pMin);
      if (J.$gt$n(diag.x, diag.y) && J.$gt$n(diag.x, diag.z))
        return 0;
      else if (J.$gt$n(diag.y, diag.z))
        return 1;
      else
        return 2;
    },
    BBox$2: function(p1, p2) {
      var t1, t2;
      t1 = p1 == null;
      if (t1 && p2 == null) {
        this.pMin = new G.Point(1 / 0, 1 / 0, 1 / 0);
        this.pMax = new G.Point(-1 / 0, -1 / 0, -1 / 0);
      } else {
        t1 = !t1 && p2 != null;
        t2 = J.getInterceptor$x(p1);
        if (t1) {
          t1 = J.getInterceptor$x(p2);
          this.pMin = new G.Point(P.min(t2.get$x(p1), t1.get$x(p2)), P.min(t2.get$y(p1), t1.get$y(p2)), P.min(t2.get$z(p1), t1.get$z(p2)));
          this.pMax = new G.Point(P.max(t2.get$x(p1), t1.get$x(p2)), P.max(t2.get$y(p1), t1.get$y(p2)), P.max(t2.get$z(p1), t1.get$z(p2)));
        } else {
          this.pMin = new G.Point(t2.get$x(p1), t2.get$y(p1), t2.get$z(p1));
          this.pMax = new G.Point(t2.get$x(p1), t2.get$y(p1), t2.get$z(p1));
        }
      }
    },
    static: {BBox$: function(p1, p2) {
        var t1 = new G.BBox(null, null);
        t1.BBox$2(p1, p2);
        return t1;
      }, BBox$from: function(other) {
        var t1, t2, t3, t4;
        t1 = other.get$pMin();
        t2 = t1.x;
        t3 = t1.y;
        t1 = t1.z;
        t4 = other.pMax;
        return new G.BBox(new G.Point(t2, t3, t1), new G.Point(t4.x, t4.y, t4.z));
      }}
  },
  Camera: {
    "^": "Object;shutterOpen<,shutterClose<"
  },
  nth_element_closure: {
    "^": "Closure:93;pred_0",
    call$2: function(a, b) {
      return this.pred_0.call$2(a, b) === true ? -1 : 1;
    }
  },
  Film: {
    "^": "Object;xResolution<"
  },
  Filter: {
    "^": "Object;xWidth<,yWidth<"
  },
  Integrator: {
    "^": "Object;"
  },
  KdTree: {
    "^": "Object;nodes,nodeData,nNodes,nextFreeNode",
    _recursiveBuild$5: function(nodeNum, start, end, data, buildNodes) {
      var t1, t2, bound, i, t3, t4, t5, t6, t7, splitAxis, splitPos;
      t1 = J.getInterceptor$ns(start);
      if (J.$eq(t1.$add(start, 1), end)) {
        t1 = this.nodes;
        if (nodeNum < 0 || nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum] = new G._KdNode(null, 3, false, 536870911);
        t1 = this.nodeData;
        if (start >>> 0 !== start || start >= buildNodes.length)
          return H.ioore(buildNodes, start);
        t2 = buildNodes[start];
        if (t2 >>> 0 !== t2 || t2 >= data.length)
          return H.ioore(data, t2);
        t2 = data[t2];
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum] = t2;
        return;
      }
      bound = G.BBox$(null, null);
      for (t2 = buildNodes.length, i = start; J.$lt$n(i, end); ++i) {
        if (i >>> 0 !== i || i >= t2)
          return H.ioore(buildNodes, i);
        t3 = buildNodes[i];
        if (t3 >>> 0 !== t3 || t3 >= data.length)
          return H.ioore(data, t3);
        t3 = J.get$p$x(data[t3]);
        t4 = bound.pMin;
        t5 = t4.x;
        t6 = t4.y;
        t4 = t4.z;
        t7 = bound.pMax;
        bound = new G.BBox(new G.Point(t5, t6, t4), new G.Point(t7.x, t7.y, t7.z)).unionPoint$1(t3);
      }
      splitAxis = bound.maximumExtent$0();
      splitPos = J.$tdiv$n(t1.$add(start, end), 2);
      G.nth_element(buildNodes, start, splitPos, end, new G._CompareNode(data, splitAxis));
      t3 = this.nodes;
      if (splitPos >>> 0 !== splitPos || splitPos >= t2)
        return H.ioore(buildNodes, splitPos);
      t2 = buildNodes[splitPos];
      if (t2 >>> 0 !== t2 || t2 >= data.length)
        return H.ioore(data, t2);
      t2 = J.$index$asx(J.get$p$x(data[t2]), splitAxis);
      if (nodeNum < 0 || nodeNum >= t3.length)
        return H.ioore(t3, nodeNum);
      t3[nodeNum] = new G._KdNode(t2, splitAxis, false, 536870911);
      t2 = this.nodeData;
      t3 = buildNodes[splitPos];
      if (t3 >>> 0 !== t3 || t3 >= data.length)
        return H.ioore(data, t3);
      t3 = data[t3];
      if (nodeNum >= t2.length)
        return H.ioore(t2, nodeNum);
      t2[nodeNum] = t3;
      if (t1.$lt(start, splitPos)) {
        t1 = this.nodes;
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum].set$hasLeftChild(true);
        this._recursiveBuild$5(this.nextFreeNode++, start, splitPos, data, buildNodes);
      }
      t1 = splitPos + 1;
      if (typeof end !== "number")
        return H.iae(end);
      if (t1 < end) {
        t2 = this.nodes;
        if (nodeNum >= t2.length)
          return H.ioore(t2, nodeNum);
        t2[nodeNum].set$rightChild(this.nextFreeNode++);
        t2 = this.nodes;
        if (nodeNum >= t2.length)
          return H.ioore(t2, nodeNum);
        this._recursiveBuild$5(t2[nodeNum].get$rightChild(), t1, end, data, buildNodes);
      }
    },
    KdTree$1: function(data) {
      var t1, buildNodes, t2, i;
      t1 = data.length;
      this.nNodes = t1;
      this.nextFreeNode = 1;
      t1 = Array(t1);
      t1.fixed$length = init;
      this.nodes = H.setRuntimeTypeInfo(t1, [G._KdNode]);
      t1 = this.nNodes;
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.nodeData = Array(t1);
      buildNodes = H.setRuntimeTypeInfo(Array(t1), [J.JSInt]);
      t1 = this.nNodes;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = buildNodes.length;
      i = 0;
      for (; i < t1; ++i) {
        if (i >= t2)
          return H.ioore(buildNodes, i);
        buildNodes[i] = i;
      }
      this._recursiveBuild$5(0, 0, t1, data, buildNodes);
    },
    static: {KdTree$: function(data) {
        var t1 = new G.KdTree(null, null, null, null);
        t1.KdTree$1(data);
        return t1;
      }}
  },
  _CompareNode: {
    "^": "Object:13;data>,axis?",
    call$2: function(d1, d2) {
      var t1, t2;
      t1 = this.data;
      if (d1 >>> 0 !== d1 || d1 >= t1.length)
        return H.ioore(t1, d1);
      t1 = J.$index$asx(J.get$p$x(t1[d1]), this.axis);
      t2 = this.data;
      if (d2 >>> 0 !== d2 || d2 >= t2.length)
        return H.ioore(t2, d2);
      t2 = J.$eq(t1, J.$index$asx(J.get$p$x(t2[d2]), this.axis));
      t1 = this.data;
      if (t2) {
        if (d1 >= t1.length)
          return H.ioore(t1, d1);
        t1 = J.get$hashCode$(t1[d1]);
        t2 = this.data;
        if (d2 >= t2.length)
          return H.ioore(t2, d2);
        t2 = J.$lt$n(t1, J.get$hashCode$(t2[d2]));
        t1 = t2;
      } else {
        if (d1 >= t1.length)
          return H.ioore(t1, d1);
        t1 = J.$index$asx(J.get$p$x(t1[d1]), this.axis);
        t2 = this.data;
        if (d2 >= t2.length)
          return H.ioore(t2, d2);
        t2 = J.$lt$n(t1, J.$index$asx(J.get$p$x(t2[d2]), this.axis));
        t1 = t2;
      }
      return t1;
    }
  },
  _KdNode: {
    "^": "Object;splitPos,splitAxis,hasLeftChild?,rightChild@"
  },
  AreaLight: {
    "^": "Light;"
  },
  Light: {
    "^": "Object;",
    Light$2: function(l2w, ns) {
      if (this.worldToLight.hasScale$0())
        $.Log.call$2(1, "Scaling detected in world to light transformation!\nThe system has numerous assumptions, implicit and explicit,\nthat this transform will have no scale factors in it.\nProceed at your own risk; your image may have errors or\nthe system may crash as a result of this.");
    }
  },
  LightSampleOffsets: {
    "^": "Object;"
  },
  ShapeSet: {
    "^": "Object;shapes,area,areas,areaDistribution",
    area$0: function() {
      return this.area.call$0();
    },
    ShapeSet$1: function(s) {
      var todo, t1, sh, t2, i, a, t3;
      todo = [];
      todo.push(s);
      for (t1 = this.shapes; todo.length !== 0;) {
        sh = C.JSArray_methods.get$last(todo);
        if (0 >= todo.length)
          return H.ioore(todo, 0);
        todo.pop();
        if (sh.canIntersect$0())
          t1.push(sh);
        else
          sh.refine$1(todo);
      }
      t2 = t1.length;
      if (t2 > 64) {
        t2 = "Area light geometry turned into " + t2 + " shapes; may be very inefficient.";
        $.Log.call$2(1, t2);
      }
      this.area = 0;
      for (t2 = this.areas, i = 0; i < t1.length; ++i) {
        a = t1[i].area$0();
        t2.push(a);
        t3 = this.area;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof a !== "number")
          return H.iae(a);
        this.area = t3 + a;
      }
      this.areaDistribution = G.Distribution1D$(t2, t2.length);
    },
    static: {ShapeSet$: function(s) {
        var t1 = new G.ShapeSet([], null, [], null);
        t1.ShapeSet$1(s);
        return t1;
      }}
  },
  Material: {
    "^": "Object;"
  },
  Matrix4x4: {
    "^": "Object;m<",
    $eq: function(_, m2) {
      var t1, t2, i;
      if (m2 == null)
        return false;
      for (t1 = this.m, t2 = t1.length, i = 0; i < 16; ++i) {
        if (i >= t2)
          return H.ioore(t1, i);
        if (t1[i] !== J.$index$asx(m2.get$m(), i))
          return false;
      }
      return true;
    },
    $index: function(_, index) {
      var t1 = this.m;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this.m;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = value;
      return value;
    },
    invert$0: function() {
      var t1, t2, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, det, invDet, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
      t1 = this.m;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      n11 = t1[0];
      if (4 >= t2)
        return H.ioore(t1, 4);
      n12 = t1[4];
      if (8 >= t2)
        return H.ioore(t1, 8);
      n13 = t1[8];
      if (12 >= t2)
        return H.ioore(t1, 12);
      n14 = t1[12];
      n21 = t1[1];
      n22 = t1[5];
      n23 = t1[9];
      if (13 >= t2)
        return H.ioore(t1, 13);
      n24 = t1[13];
      n31 = t1[2];
      n32 = t1[6];
      n33 = t1[10];
      if (14 >= t2)
        return H.ioore(t1, 14);
      n34 = t1[14];
      n41 = t1[3];
      n42 = t1[7];
      n43 = t1[11];
      if (15 >= t2)
        return H.ioore(t1, 15);
      n44 = t1[15];
      t2 = n14 * n23;
      t3 = t2 * n32;
      t4 = n13 * n24;
      t5 = t4 * n32;
      t6 = n14 * n22;
      t7 = t6 * n33;
      t8 = n12 * n24;
      t9 = t8 * n33;
      t10 = n13 * n22;
      t11 = t10 * n34;
      t12 = n12 * n23;
      t13 = t12 * n34;
      t14 = t2 * n31;
      t15 = t4 * n31;
      t16 = n14 * n21;
      t17 = t16 * n33;
      t18 = n11 * n24;
      t19 = t18 * n33;
      t20 = n13 * n21;
      t21 = t20 * n34;
      t22 = n11 * n23;
      t23 = t22 * n34;
      t24 = t6 * n31;
      t25 = t8 * n31;
      t26 = t16 * n32;
      t27 = t18 * n32;
      t28 = n12 * n21;
      t29 = t28 * n34;
      t30 = n11 * n22;
      t31 = t30 * n34;
      t32 = t10 * n31;
      t33 = t12 * n31;
      t34 = t20 * n32;
      t35 = t22 * n32;
      t36 = t28 * n33;
      t37 = t30 * n33;
      det = t3 * n41 - t5 * n41 - t7 * n41 + t9 * n41 + t11 * n41 - t13 * n41 - t14 * n42 + t15 * n42 + t17 * n42 - t19 * n42 - t21 * n42 + t23 * n42 + t24 * n43 - t25 * n43 - t26 * n43 + t27 * n43 + t29 * n43 - t31 * n43 - t32 * n44 + t33 * n44 + t34 * n44 - t35 * n44 - t36 * n44 + t37 * n44;
      if (det === 0)
        return this;
      invDet = 1 / det;
      t38 = n23 * n34;
      t39 = n24 * n33;
      t40 = n24 * n32;
      t41 = n22 * n34;
      t42 = n23 * n32;
      t43 = n22 * n33;
      t1[0] = (t38 * n42 - t39 * n42 + t40 * n43 - t41 * n43 - t42 * n44 + t43 * n44) * invDet;
      t44 = n14 * n33;
      t45 = n13 * n34;
      t46 = n14 * n32;
      t47 = n12 * n34;
      t48 = n13 * n32;
      t49 = n12 * n33;
      t1[4] = (t44 * n42 - t45 * n42 - t46 * n43 + t47 * n43 + t48 * n44 - t49 * n44) * invDet;
      t1[8] = (t4 * n42 - t2 * n42 + t6 * n43 - t8 * n43 - t10 * n44 + t12 * n44) * invDet;
      t1[12] = (t3 - t5 - t7 + t9 + t11 - t13) * invDet;
      t13 = n24 * n31;
      t11 = n21 * n34;
      t9 = n23 * n31;
      t7 = n21 * n33;
      t1[1] = (t39 * n41 - t38 * n41 - t13 * n43 + t11 * n43 + t9 * n44 - t7 * n44) * invDet;
      t38 = n14 * n31;
      t39 = n11 * n34;
      t5 = n13 * n31;
      t3 = n11 * n33;
      t1[5] = (t45 * n41 - t44 * n41 + t38 * n43 - t39 * n43 - t5 * n44 + t3 * n44) * invDet;
      t1[9] = (t2 * n41 - t4 * n41 - t16 * n43 + t18 * n43 + t20 * n44 - t22 * n44) * invDet;
      t1[13] = (t15 - t14 + t17 - t19 - t21 + t23) * invDet;
      t23 = n22 * n31;
      t21 = n21 * n32;
      t1[2] = (t41 * n41 - t40 * n41 + t13 * n42 - t11 * n42 - t23 * n44 + t21 * n44) * invDet;
      t11 = n12 * n31;
      t13 = n11 * n32;
      t1[6] = (t46 * n41 - t47 * n41 - t38 * n42 + t39 * n42 + t11 * n44 - t13 * n44) * invDet;
      t1[10] = (t8 * n41 - t6 * n41 + t16 * n42 - t18 * n42 - t28 * n44 + t30 * n44) * invDet;
      t1[14] = (t24 - t25 - t26 + t27 + t29 - t31) * invDet;
      t1[3] = (t42 * n41 - t43 * n41 - t9 * n42 + t7 * n42 + t23 * n43 - t21 * n43) * invDet;
      t1[7] = (t49 * n41 - t48 * n41 + t5 * n42 - t3 * n42 - t11 * n43 + t13 * n43) * invDet;
      t1[11] = (t10 * n41 - t12 * n41 - t20 * n42 + t22 * n42 + t28 * n43 - t30 * n43) * invDet;
      t1[15] = (t33 - t32 + t34 - t35 - t36 + t37) * invDet;
      return this;
    },
    toString$0: function(_) {
      var t1, t2, t3;
      t1 = this.m;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = H.S(t1[0]) + " ";
      if (4 >= t2)
        return H.ioore(t1, 4);
      t3 = t3 + H.S(t1[4]) + " ";
      if (8 >= t2)
        return H.ioore(t1, 8);
      t3 = t3 + H.S(t1[8]) + " ";
      if (12 >= t2)
        return H.ioore(t1, 12);
      t3 = t3 + H.S(t1[12]) + " " + H.S(t1[1]) + " " + H.S(t1[5]) + " " + H.S(t1[9]) + " ";
      if (13 >= t2)
        return H.ioore(t1, 13);
      t3 = t3 + H.S(t1[13]) + " " + H.S(t1[2]) + " " + H.S(t1[6]) + " " + H.S(t1[10]) + " ";
      if (14 >= t2)
        return H.ioore(t1, 14);
      t3 = t3 + H.S(t1[14]) + " " + H.S(t1[3]) + " " + H.S(t1[7]) + " " + H.S(t1[11]) + " ";
      if (15 >= t2)
        return H.ioore(t1, 15);
      return t3 + H.S(t1[15]);
    },
    Matrix4x4$values$16: function(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
      var t1, t2;
      t1 = this.m;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = m11;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = m12;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = m13;
      if (3 >= t2)
        return H.ioore(t1, 3);
      t1[3] = m14;
      if (4 >= t2)
        return H.ioore(t1, 4);
      t1[4] = m21;
      if (5 >= t2)
        return H.ioore(t1, 5);
      t1[5] = m22;
      if (6 >= t2)
        return H.ioore(t1, 6);
      t1[6] = m23;
      if (7 >= t2)
        return H.ioore(t1, 7);
      t1[7] = m24;
      if (8 >= t2)
        return H.ioore(t1, 8);
      t1[8] = m31;
      if (9 >= t2)
        return H.ioore(t1, 9);
      t1[9] = m32;
      if (10 >= t2)
        return H.ioore(t1, 10);
      t1[10] = m33;
      if (11 >= t2)
        return H.ioore(t1, 11);
      t1[11] = m34;
      if (12 >= t2)
        return H.ioore(t1, 12);
      t1[12] = m41;
      if (13 >= t2)
        return H.ioore(t1, 13);
      t1[13] = m42;
      if (14 >= t2)
        return H.ioore(t1, 14);
      t1[14] = m43;
      if (15 >= t2)
        return H.ioore(t1, 15);
      t1[15] = m44;
    },
    Matrix4x4$0: function() {
      var t1, t2;
      t1 = this.m;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = 1;
      if (5 >= t2)
        return H.ioore(t1, 5);
      t1[5] = 1;
      if (10 >= t2)
        return H.ioore(t1, 10);
      t1[10] = 1;
      if (15 >= t2)
        return H.ioore(t1, 15);
      t1[15] = 1;
    },
    static: {"^": "Matrix4x4_IDENTITY", Matrix4x4$: function() {
        var t1 = new G.Matrix4x4(new Float32Array(16));
        t1.Matrix4x4$0();
        return t1;
      }, Matrix4x4$values: function(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
        var t1 = new G.Matrix4x4(new Float32Array(16));
        t1.Matrix4x4$values$16(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44);
        return t1;
      }, Matrix4x4_Mul: function(m1, m2) {
        var r, t1, t2, t3, t4, i, k, t5, t6, t7, j, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
        r = G.Matrix4x4$();
        for (t1 = r.m, t2 = m1.m, t3 = t2.length, t4 = t1.length, i = 0, k = 0; i < 4; ++i, k += 4)
          for (t5 = k + 1, t6 = k + 2, t7 = k + 3, j = 0; j < 4; ++j) {
            t8 = k + j;
            if (k >= t3)
              return H.ioore(t2, k);
            t9 = t2[k];
            t10 = m2.get$m();
            if (j >= t10.length)
              return H.ioore(t10, j);
            t10 = t10[j];
            if (t5 >= t3)
              return H.ioore(t2, t5);
            t11 = t2[t5];
            t12 = m2.m;
            t13 = 4 + j;
            t14 = t12.length;
            if (t13 >= t14)
              return H.ioore(t12, t13);
            t13 = t12[t13];
            if (t6 >= t3)
              return H.ioore(t2, t6);
            t15 = t2[t6];
            t16 = 8 + j;
            if (t16 >= t14)
              return H.ioore(t12, t16);
            t16 = t12[t16];
            if (t7 >= t3)
              return H.ioore(t2, t7);
            t17 = t2[t7];
            t18 = 12 + j;
            if (t18 >= t14)
              return H.ioore(t12, t18);
            t18 = t12[t18];
            if (t8 >= t4)
              return H.ioore(t1, t8);
            t1[t8] = t9 * t10 + t11 * t13 + t15 * t16 + t17 * t18;
          }
        return r;
      }}
  },
  MIPMap: {
    "^": "Object;doTrilinear,maxAnisotropy,wrapMode,pyramid,width>,height>,levels",
    texel$3: function(level, s, t) {
      var t1, l, t2, a, a0;
      t1 = this.pyramid;
      if (level >>> 0 !== level || level >= t1.length)
        return H.ioore(t1, level);
      l = t1[level];
      switch (this.wrapMode) {
        case 0:
          t1 = J.getInterceptor$x(l);
          t2 = t1.get$width(l);
          if (typeof t2 !== "number")
            return H.iae(t2);
          a = s - C.JSInt_methods.$tdiv(s, t2) * t2;
          if (a < 0)
            a += t2;
          t1 = t1.get$height(l);
          if (typeof t1 !== "number")
            return H.iae(t1);
          a0 = t - C.JSInt_methods.$tdiv(t, t1) * t1;
          if (a0 < 0)
            a0 += t1;
          t = a0;
          s = a;
          break;
        case 2:
          t1 = J.getInterceptor$x(l);
          s = C.JSInt_methods.clamp$2(s, 0, J.$sub$n(t1.get$width(l), 1));
          t = C.JSInt_methods.clamp$2(t, 0, J.$sub$n(t1.get$height(l), 1));
          break;
        case 1:
          if (s >= 0) {
            t1 = J.getInterceptor$x(l);
            t2 = t1.get$width(l);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(s >= t2))
              if (t >= 0) {
                t1 = t1.get$height(l);
                if (typeof t1 !== "number")
                  return H.iae(t1);
                t1 = t >= t1;
              } else
                t1 = true;
            else
              t1 = true;
          } else
            t1 = true;
          if (t1)
            return G.Spectrum_Spectrum(0);
          break;
      }
      t1 = J.getInterceptor$x(l);
      t2 = t1.get$width(l);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1.$index(l, t * t2 + s);
    },
    lookup$3: function(s, t, width) {
      var t1, t2, t3, level, iLevel, delta;
      t1 = this.levels;
      if (typeof t1 !== "number")
        return t1.$sub();
      t2 = P.max(width, 1e-8);
      t2 = Math.log(t2);
      t3 = $.get$_invLog2();
      if (typeof t3 !== "number")
        return H.iae(t3);
      level = t1 - 1 + t2 * t3;
      if (level < 0)
        return this.triangle$3(0, s, t);
      else {
        t1 = this.levels;
        if (typeof t1 !== "number")
          return t1.$sub();
        --t1;
        if (level >= t1)
          return this.texel$3(t1, 0, 0);
        else {
          iLevel = C.JSNumber_methods.toInt$0(Math.floor(level));
          delta = level - iLevel;
          return J.$add$ns(J.$mul$ns(this.triangle$3(iLevel, s, t), 1 - delta), J.$mul$ns(this.triangle$3(iLevel + 1, s, t), delta));
        }
      }
    },
    triangle$3: function(level, s, t) {
      var t1, s0, t00, ds, dt, t2, t3, t4;
      t1 = this.levels;
      if (typeof t1 !== "number")
        return t1.$sub();
      level = C.JSInt_methods.clamp$2(level, 0, t1 - 1);
      t1 = this.pyramid;
      if (level >>> 0 !== level || level >= t1.length)
        return H.ioore(t1, level);
      s = J.$sub$n(J.$mul$ns(s, J.get$width$x(t1[level])), 0.5);
      t1 = this.pyramid;
      if (level >= t1.length)
        return H.ioore(t1, level);
      t = J.$sub$n(J.$mul$ns(t, J.get$height$x(t1[level])), 0.5);
      s0 = J.floor$0$n(s);
      t00 = J.floor$0$n(t);
      ds = s - s0;
      dt = t - t00;
      t1 = 1 - ds;
      t2 = 1 - dt;
      t3 = t00 + 1;
      t4 = s0 + 1;
      return J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(this.texel$3(level, s0, t00), t1 * t2), J.$mul$ns(this.texel$3(level, s0, t3), t1 * dt)), J.$mul$ns(this.texel$3(level, t4, t00), ds * t2)), J.$mul$ns(this.texel$3(level, t4, t3), ds * dt));
    },
    _resampleWeights$2: function(oldres, newres) {
      var wt, t1, i, t2, center, j, t3, invSumWts;
      wt = H.setRuntimeTypeInfo(Array(newres), [G._ResampleWeight]);
      for (t1 = wt.length, i = 0; i < newres; ++i) {
        t2 = new G._ResampleWeight(null, [0, 0, 0, 0]);
        if (i >= t1)
          return H.ioore(wt, i);
        wt[i] = t2;
        if (typeof oldres !== "number")
          return H.iae(oldres);
        center = (i + 0.5) * oldres / newres;
        t2.firstTexel = C.JSNumber_methods.toInt$0(Math.floor(center - 2 + 0.5));
        for (j = 0; t2 = wt[i], j < 4; ++j) {
          t3 = t2.get$firstTexel();
          if (typeof t3 !== "number")
            return t3.$add();
          t2.weight[j] = G.Lanczos((t3 + j + 0.5 - center) / 2, 2);
        }
        t2 = t2.get$weight();
        t2 = J.$add$ns(J.$add$ns(J.$add$ns(t2[0], t2[1]), wt[i].get$weight()[2]), wt[i].get$weight()[3]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        invSumWts = 1 / t2;
        for (j = 0; j < 4; ++j) {
          t2 = wt[i].get$weight();
          t2[j] = J.$mul$ns(t2[j], invSumWts);
        }
      }
      return wt;
    },
    MIPMap$texture$4: function(img, doTrilinear, maxAnisotropy, wrapMode) {
      var t1, xres, yres, t2, t3, sPow2, tPow2, sWeights, resampledImage, zero, t4, t5, t, p, t6, s, t7, j, t8, origS, a, px, tWeights, workData, offset, i, sRes, tRes;
      t1 = J.getInterceptor$x(img);
      xres = t1.get$width(img);
      yres = t1.get$height(img);
      t2 = J.getInterceptor$n(xres);
      if (t2.$and(xres, t2.$sub(xres, 1)) === 0) {
        t3 = J.getInterceptor$n(yres);
        t3 = t3.$and(yres, t3.$sub(yres, 1)) !== 0;
      } else
        t3 = true;
      if (t3) {
        sPow2 = G.RoundUpPow2(xres);
        tPow2 = G.RoundUpPow2(yres);
        sWeights = this._resampleWeights$2(xres, sPow2);
        resampledImage = G.SpectrumImage$(sPow2, tPow2, img.get$samplesPerPixel());
        zero = J.$eq(img.get$samplesPerPixel(), 1) ? 0 : G.Spectrum_Spectrum(0);
        if (typeof yres !== "number")
          return H.iae(yres);
        t3 = this.wrapMode;
        t4 = t3 === 2;
        t3 = t3 === 0;
        t5 = sWeights.length;
        t = 0;
        p = 0;
        for (; t < yres; ++t)
          for (t6 = t * sPow2, s = 0; s < sPow2; ++s, ++p) {
            resampledImage.$indexSet(0, p, zero);
            for (t7 = t6 + s, j = 0; j < 4; ++j) {
              if (s >= t5)
                return H.ioore(sWeights, s);
              t8 = sWeights[s].get$firstTexel();
              if (typeof t8 !== "number")
                return t8.$add();
              origS = t8 + j;
              if (t3) {
                if (typeof xres !== "number")
                  return H.iae(xres);
                a = origS - C.JSInt_methods.$tdiv(origS, xres) * xres;
                if (a < 0)
                  a += xres;
                origS = a;
              } else if (t4)
                origS = C.JSInt_methods.clamp$2(origS, 0, t2.$sub(xres, 1));
              if (origS >= 0) {
                if (typeof xres !== "number")
                  return H.iae(xres);
                t8 = origS < xres;
              } else
                t8 = false;
              if (t8) {
                if (typeof xres !== "number")
                  return H.iae(xres);
                px = J.$mul$ns(t1.$index(img, t * xres + origS), sWeights[s].get$weight()[j]);
                resampledImage.$indexSet(0, t7, J.$add$ns(resampledImage.$index(0, t7), px));
              }
            }
          }
        tWeights = this._resampleWeights$2(yres, tPow2);
        workData = Array(tPow2);
        for (t1 = tWeights.length, t2 = yres - 1, s = 0; s < sPow2; ++s) {
          for (t = 0; t < tPow2; ++t) {
            workData[t] = J.$eq(img.get$samplesPerPixel(), 3) ? G.Spectrum_Spectrum(0) : 0;
            for (j = 0; j < 4; ++j) {
              if (t >= t1)
                return H.ioore(tWeights, t);
              t5 = tWeights[t].get$firstTexel();
              if (typeof t5 !== "number")
                return t5.$add();
              offset = t5 + j;
              if (t3) {
                a = offset - C.JSInt_methods.$tdiv(offset, yres) * yres;
                if (a < 0)
                  a += yres;
                offset = a;
              } else if (t4)
                offset = C.JSInt_methods.clamp$2(offset, 0, t2);
              if (offset >= 0 && offset < yres) {
                px = J.$mul$ns(resampledImage.$index(0, offset * sPow2 + s), tWeights[t].get$weight()[j]);
                workData[t] = J.$add$ns(workData[t], px);
              }
            }
          }
          for (t = 0; t < tPow2; ++t)
            resampledImage.$indexSet(0, t * sPow2 + s, J.clamp$2$n(workData[t], 0, 1 / 0));
        }
        img.set$1(resampledImage);
        yres = tPow2;
        xres = sPow2;
      }
      this.width = xres;
      this.height = yres;
      t1 = P.max(xres, yres);
      t1 = Math.log(t1);
      t2 = $.get$_invLog2();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = 1 + C.JSDouble_methods.toInt$0(t1 * t2);
      this.levels = t2;
      t2 = H.setRuntimeTypeInfo(Array(t2), [G.SpectrumImage]);
      this.pyramid = t2;
      t1 = G.SpectrumImage$from(img);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2[0] = t1;
      i = 1;
      while (true) {
        t1 = this.levels;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.pyramid;
        t2 = i - 1;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        sRes = P.max(1, J.$tdiv$n(J.get$width$x(t1[t2]), 2));
        t1 = this.pyramid;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        tRes = P.max(1, J.$tdiv$n(J.get$height$x(t1[t2]), 2));
        t1 = this.pyramid;
        t3 = img.get$samplesPerPixel();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = sRes * tRes * t3;
        if (typeof t4 !== "number" || Math.floor(t4) !== t4)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t4)));
        t4 = new Float32Array(t4);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = new G.SpectrumImage(sRes, tRes, t3, t4);
        for (t = 0, p = 0; t < tRes; ++t)
          for (t1 = 2 * t, t3 = t1 + 1, s = 0; s < sRes; ++s, ++p) {
            t4 = this.pyramid;
            if (i >= t4.length)
              return H.ioore(t4, i);
            t5 = 2 * s;
            t6 = t5 + 1;
            J.$indexSet$ax(t4[i], p, J.$mul$ns(J.$add$ns(J.$add$ns(J.$add$ns(this.texel$3(t2, t5, t1), this.texel$3(t2, t6, t1)), this.texel$3(t2, t5, t3)), this.texel$3(t2, t6, t3)), 0.25));
          }
        ++i;
      }
      if ($.MIPMap_weightLut == null) {
        $.MIPMap_weightLut = new Float32Array(128);
        for (i = 0; i < 128; ++i) {
          t1 = $.MIPMap_weightLut;
          t2 = Math.exp(-2 * (i / 127));
          t1[i] = t2 - Math.exp(-2);
        }
      }
    },
    static: {"^": "MIPMap_TEXTURE_REPEAT,MIPMap_TEXTURE_BLACK,MIPMap_TEXTURE_CLAMP,MIPMap_WEIGHT_LUT_SIZE,MIPMap_weightLut", MIPMap$texture: function(img, doTrilinear, maxAnisotropy, wrapMode) {
        var t1 = new G.MIPMap(doTrilinear, maxAnisotropy, wrapMode, null, null, null, null);
        t1.MIPMap$texture$4(img, doTrilinear, maxAnisotropy, wrapMode);
        return t1;
      }}
  },
  _ResampleWeight: {
    "^": "Object;firstTexel<,weight<"
  },
  Distribution1D: {
    "^": "Object;func,cdf,funcInt<,count@",
    Distribution1D$2: function(f, count) {
      var t1, i, t2, t3, t4, t5, t6;
      t1 = this.count;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      t1 = new Float32Array(t1);
      this.func = t1;
      C.NativeFloat32List_methods.setRange$3(t1, 0, this.count, f);
      t1 = J.$add$ns(this.count, 1);
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      t1 = new Float32Array(t1);
      this.cdf = t1;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = 0;
      i = 1;
      while (true) {
        t1 = J.$add$ns(this.count, 1);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.cdf;
        t3 = this.count;
        if (!(i < t1))
          break;
        t1 = i - 1;
        t4 = t2.length;
        if (t1 >= t4)
          return H.ioore(t2, t1);
        t5 = t2[t1];
        t6 = this.func;
        if (t1 >= t6.length)
          return H.ioore(t6, t1);
        t1 = t6[t1];
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (i >= t4)
          return H.ioore(t2, i);
        t2[i] = t5 + t1 / t3;
        ++i;
      }
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        return H.ioore(t2, t3);
      t1 = t2[t3];
      this.funcInt = t1;
      if (t1 === 0) {
        t1 = t3;
        i = 1;
        while (true) {
          t1 = J.$add$ns(t1, 1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.cdf;
          t2 = this.count;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = i / t2;
          ++i;
          t1 = t2;
        }
      } else {
        i = 1;
        while (true) {
          t1 = J.$add$ns(this.count, 1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.cdf;
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t3 = this.funcInt;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t1[i] = t2 / t3;
          ++i;
        }
      }
    },
    static: {Distribution1D$: function(f, count) {
        var t1 = new G.Distribution1D(null, null, null, count);
        t1.Distribution1D$2(f, count);
        return t1;
      }}
  },
  Distribution2D: {
    "^": "Object;pConditionalV,pMarginal",
    Distribution2D$3: function(data, nu, nv) {
      var t1, t2, v, t3, marginalFunc, t4;
      if (typeof nv !== "number")
        return H.iae(nv);
      t1 = data.length;
      t2 = this.pConditionalV;
      v = 0;
      for (; v < nv; ++v) {
        if (typeof nu !== "number")
          return H.iae(nu);
        t3 = v * nu;
        t2.push(G.Distribution1D$(new Float32Array(data.subarray(t3, C.NativeFloat32List_methods._checkSublistArguments$3(data, t3, t3 + nu, t1))), nu));
      }
      if (typeof nv !== "number" || Math.floor(nv) !== nv)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(nv)));
      marginalFunc = new Float32Array(nv);
      for (t1 = t2.length, t3 = marginalFunc.length, v = 0; v < nv; ++v) {
        if (v >= t1)
          return H.ioore(t2, v);
        t4 = t2[v].get$funcInt();
        if (v >= t3)
          return H.ioore(marginalFunc, v);
        marginalFunc[v] = t4;
      }
      this.pMarginal = G.Distribution1D$(marginalFunc, nv);
    },
    static: {Distribution2D$: function(data, nu, nv) {
        var t1 = new G.Distribution2D([], null);
        t1.Distribution2D$3(data, nu, nv);
        return t1;
      }}
  },
  Normal: {
    "^": "Vector;x,y,z",
    $mul: function(_, s) {
      return new G.Normal(J.$mul$ns(this.x, s), J.$mul$ns(this.y, s), J.$mul$ns(this.z, s));
    },
    $div: function(_, s) {
      return new G.Normal(J.$div$n(this.x, s), J.$div$n(this.y, s), J.$div$n(this.z, s));
    },
    $add: function(_, p) {
      var t1 = J.getInterceptor$x(p);
      return new G.Normal(J.$add$ns(this.x, t1.get$x(p)), J.$add$ns(this.y, t1.get$y(p)), J.$add$ns(this.z, t1.get$z(p)));
    },
    $sub: function(_, p) {
      var t1 = J.getInterceptor$x(p);
      return new G.Normal(J.$sub$n(this.x, t1.get$x(p)), J.$sub$n(this.y, t1.get$y(p)), J.$sub$n(this.z, t1.get$z(p)));
    },
    $negate: function(_) {
      return new G.Normal(J.$negate$n(this.x), J.$negate$n(this.y), J.$negate$n(this.z));
    },
    $isNormal: true
  },
  OutputImage: {
    "^": "Object;width>,height>,xOffset,yOffset,rgb",
    static: {OutputImage$: function(xOffset, yOffset, width, height, rgb) {
        var t1;
        if (rgb != null)
          t1 = rgb;
        else {
          t1 = J.$mul$ns(J.$mul$ns(width, height), 3);
          if (typeof t1 !== "number" || Math.floor(t1) !== t1)
            H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
          t1 = new Float32Array(t1);
        }
        return new G.OutputImage(width, height, xOffset, yOffset, t1);
      }}
  },
  ParamSet: {
    "^": "Object;bools,ints,floats,points,vectors,normals,spectra,strings,textures",
    addFloat$2: function($name, data) {
      $name = J.toLowerCase$0$s($name);
      this.eraseFloat$1($name);
      this.floats.push(new G.ParamSetItem($name, data, false));
    },
    addInt$2: function($name, data) {
      $name = J.toLowerCase$0$s($name);
      this.eraseInt$1($name);
      this.ints.push(new G.ParamSetItem($name, data, false));
    },
    addPoint$2: function($name, data) {
      var t1, t2, numPts, pts, i, j, t3, t4, t5;
      $name = J.toLowerCase$0$s($name);
      this.erasePoint$1($name);
      t1 = J.getInterceptor$asx(data);
      t2 = t1.$index(data, 0);
      if (typeof t2 === "number") {
        numPts = J.$tdiv$n(t1.get$length(data), 3);
        if (typeof numPts !== "number")
          return H.iae(numPts);
        t2 = Array(numPts);
        t2.fixed$length = init;
        pts = H.setRuntimeTypeInfo(t2, [G.Point]);
        for (t2 = pts.length, i = 0, j = 0; i < numPts; ++i, j += 3) {
          t3 = t1.$index(data, j);
          t4 = t1.$index(data, j + 1);
          t5 = t1.$index(data, j + 2);
          if (i >= t2)
            return H.ioore(pts, i);
          pts[i] = new G.Point(t3, t4, t5);
        }
        this.points.push(new G.ParamSetItem($name, pts, false));
      } else if (!!J.getInterceptor(t1.$index(data, 0)).$isPoint)
        this.points.push(new G.ParamSetItem($name, data, false));
    },
    addNormal$2: function($name, data) {
      var t1, t2, numNorms, norms, i, j, t3, t4, t5;
      $name = J.toLowerCase$0$s($name);
      this.eraseNormal$1($name);
      t1 = J.getInterceptor$asx(data);
      if (!!J.getInterceptor(t1.$index(data, 0)).$isNormal)
        this.normals.push(new G.ParamSetItem($name, data, false));
      else {
        t2 = t1.$index(data, 0);
        if (typeof t2 === "number") {
          numNorms = J.$tdiv$n(t1.get$length(data), 3);
          if (typeof numNorms !== "number")
            return H.iae(numNorms);
          t2 = Array(numNorms);
          t2.fixed$length = init;
          norms = H.setRuntimeTypeInfo(t2, [G.Normal]);
          for (t2 = norms.length, i = 0, j = 0; i < numNorms; ++i, j += 3) {
            t3 = t1.$index(data, j);
            t4 = t1.$index(data, j + 1);
            t5 = t1.$index(data, j + 2);
            if (i >= t2)
              return H.ioore(norms, i);
            norms[i] = new G.Normal(t3, t4, t5);
          }
          this.normals.push(new G.ParamSetItem($name, norms, false));
        }
      }
    },
    eraseInt$1: function(n) {
      var t1, i;
      for (t1 = this.ints, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    eraseFloat$1: function(n) {
      var t1, i;
      for (t1 = this.floats, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    erasePoint$1: function(n) {
      var t1, i;
      for (t1 = this.points, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    eraseNormal$1: function(n) {
      var t1, i;
      for (t1 = this.normals, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    findOneFloat$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.floats, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneInt$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.ints, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneBool$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.bools, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOnePoint$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.points, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneVector$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.vectors, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneSpectrum$2: function($name, d) {
      var t1, i, t2, t3;
      $name = $name.toLowerCase();
      for (t1 = this.spectra, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          t3 = t1.length;
          if (i >= t3)
            return H.ioore(t1, i);
          if (t2.data == null)
            return d;
          if (i >= t3)
            return H.ioore(t1, i);
          if (J.$eq(J.get$length$asx(t2.data), 1)) {
            if (i >= t1.length)
              return H.ioore(t1, i);
            t2 = t1[i];
            t2.set$lookedUp(true);
            if (i >= t1.length)
              return H.ioore(t1, i);
            return J.$index$asx(t2.data, 0);
          }
        }
      return d;
    },
    findOneString$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.strings, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneFilename$2: function($name, d) {
      var filename = this.findOneString$2($name.toLowerCase(), "");
      if (J.$eq(filename, ""))
        return d;
      return filename;
    },
    findTexture$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.textures, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return "";
    },
    findFloat$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.floats, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findInt$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.ints, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findPoint$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.points, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findVector$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.vectors, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findNormal$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.normals, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findString$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.strings, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    toString$0: function(_) {
      var t1, out, p, t2, i, t3;
      for (t1 = this.bools, t1 = new H.ListIterator(t1, t1.length, 0, null), out = ""; t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        out += "\"bool " + H.S(t2.get$name(p)) + "\" [";
        i = 0;
        while (true) {
          t3 = J.get$length$asx(t2.get$data(p));
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (i !== 0)
            out += " ";
          out += J.$index$asx(t2.get$data(p), i) === true ? 1 : 0;
          ++i;
        }
        out += "] ";
      }
      for (t1 = this.ints, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("integer", t1._current);
      for (t1 = this.floats, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("float", t1._current);
      for (t1 = this.points, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("point", t1._current);
      for (t1 = this.vectors, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("vector", t1._current);
      for (t1 = this.normals, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("normals", t1._current);
      for (t1 = this.spectra, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("color", t1._current);
      for (t1 = this.strings, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        out += "\"string " + H.S(t2.get$name(p)) + "\" [";
        i = 0;
        while (true) {
          t3 = J.get$length$asx(t2.get$data(p));
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (i !== 0)
            out += " ";
          out += "\"" + H.S(J.$index$asx(t2.get$data(p), i)) + "\"";
          ++i;
        }
        out += "] ";
      }
      for (t1 = this.textures, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        out += "\"texture " + H.S(t2.get$name(p)) + "\" [";
        i = 0;
        while (true) {
          t3 = J.get$length$asx(t2.get$data(p));
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (i !== 0)
            out += " ";
          out += "\"" + H.S(J.$index$asx(t2.get$data(p), i)) + "\"";
          ++i;
        }
        out += "] ";
      }
      return out;
    },
    _paramToString$2: function(type, item) {
      var t1, out, i, t2;
      t1 = J.getInterceptor$x(item);
      out = "\"" + type + " " + H.S(t1.get$name(item)) + "\" [";
      i = 0;
      while (true) {
        t2 = J.get$length$asx(t1.get$data(item));
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        if (i !== 0)
          out += " ";
        out += H.S(J.$index$asx(t1.get$data(item), i));
        ++i;
      }
      return out + "] ";
    }
  },
  ParamSetItem: {
    "^": "Object;name>,data>,lookedUp?"
  },
  PixelSampler: {
    "^": "Object;",
    setup$4: function(xPixelStart, xPixelEnd, yPixelStart, yPixelEnd) {
      this.xPixelStart = xPixelStart;
      this.xPixelEnd = xPixelEnd;
      this.yPixelStart = yPixelStart;
      this.yPixelEnd = yPixelEnd;
    }
  },
  Point: {
    "^": "Vector;x,y,z",
    $mul: function(_, s) {
      return new G.Point(J.$mul$ns(this.x, s), J.$mul$ns(this.y, s), J.$mul$ns(this.z, s));
    },
    $div: function(_, s) {
      return new G.Point(J.$div$n(this.x, s), J.$div$n(this.y, s), J.$div$n(this.z, s));
    },
    $add: function(_, p) {
      var t1 = J.getInterceptor$x(p);
      return new G.Point(J.$add$ns(this.x, t1.get$x(p)), J.$add$ns(this.y, t1.get$y(p)), J.$add$ns(this.z, t1.get$z(p)));
    },
    $sub: function(_, p) {
      var t1 = J.getInterceptor$x(p);
      return new G.Point(J.$sub$n(this.x, t1.get$x(p)), J.$sub$n(this.y, t1.get$y(p)), J.$sub$n(this.z, t1.get$z(p)));
    },
    $isPoint: true
  },
  Aggregate: {
    "^": "Primitive;"
  },
  Primitive: {
    "^": "Object;",
    canIntersect$0: function() {
      return true;
    },
    refine$1: function(refined) {
      $.Log.call$2(3, "Unimplemented Primitive.refine() method called!");
    },
    fullyRefine$1: function(refined) {
      var todo, t1, prim;
      todo = [];
      todo.push(this);
      for (t1 = J.getInterceptor$ax(refined); todo.length !== 0;) {
        prim = C.JSArray_methods.get$last(todo);
        if (0 >= todo.length)
          return H.ioore(todo, 0);
        todo.pop();
        if (prim.canIntersect$0())
          t1.add$1(refined, prim);
        else
          prim.refine$1(todo);
      }
    }
  },
  ProjectiveCamera: {
    "^": "Camera;",
    ProjectiveCamera$8: function(cam2world, cameraToScreen, screenWindow, sopen, sclose, lensRadius, focalDistance, film) {
      var t1, t2, t3, t4;
      t1 = G.Transform_Scale(J.toDouble$0$n(film.xResolution), J.toDouble$0$n(film.yResolution), 1);
      t2 = J.getInterceptor$asx(screenWindow);
      t3 = J.$sub$n(t2.$index(screenWindow, 1), t2.$index(screenWindow, 0));
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = J.$sub$n(t2.$index(screenWindow, 2), t2.$index(screenWindow, 3));
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = t1.$mul(0, G.Transform_Scale(1 / t3, 1 / t4, 1)).$mul(0, G.Transform_Translate(new G.Vector(-J.toDouble$0$n(t2.$index(screenWindow, 0)), -J.toDouble$0$n(t2.$index(screenWindow, 3)), 0)));
      this.screenToRaster = t2;
      this.rasterToScreen = G.Transform$(t2.mInv, t2.m);
      t2 = this.cameraToScreen;
      this.rasterToCamera = G.Transform$(t2.mInv, t2.m).$mul(0, this.rasterToScreen);
    }
  },
  Quaternion: {
    "^": "Object;"
  },
  Ray: {
    "^": "Object;"
  },
  BSDFSampleOffsets: {
    "^": "Object;"
  },
  BxDF: {
    "^": "Object;"
  },
  IrregIsotropicBRDFSample: {
    "^": "Object;p>,v<"
  },
  ResourceManager: {
    "^": "Object;",
    requestFile$2: function(path, future) {
      var t1, t2, c;
      if (future != null)
        this.futures.push(future);
      t1 = this.resources;
      if (t1.containsKey$1(path)) {
        if (!!J.getInterceptor(t1.$index(0, path)).$isFuture)
          return t1.$index(0, path);
        t2 = [J.JSArray, J.JSInt];
        c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
        t1 = t1.$index(0, path);
        t2 = c.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
        return t2;
      }
      t2 = [J.JSArray, J.JSInt];
      c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
      t2 = c.future;
      t1.$indexSet(0, path, t2);
      this.loadFile$1(path).then$1(new G.ResourceManager_requestFile_closure(this, path, c));
      return t2;
    },
    requestImage$2: function(path, future) {
      var t1, t2, c;
      this.futures.push(future);
      t1 = this.resources;
      if (t1.containsKey$1(path)) {
        if (!!J.getInterceptor(t1.$index(0, path)).$isFuture)
          return t1.$index(0, path);
        t2 = [J.JSArray, J.JSInt];
        c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
        t1 = t1.$index(0, path);
        t2 = c.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
        return t2;
      }
      t2 = "LOADING " + H.S(path);
      $.Log.call$2(4, t2);
      t2 = G.SpectrumImage;
      c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
      t2 = c.future;
      t1.$indexSet(0, path, t2);
      this.loadFile$1(path).then$1(new G.ResourceManager_requestImage_closure(this, path, c));
      return t2;
    }
  },
  ResourceManager_requestFile_closure: {
    "^": "Closure:92;this_0,path_1,c_2",
    call$1: function(bytes) {
      var t1;
      if (bytes == null) {
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      this.this_0.resources.$indexSet(0, this.path_1, bytes);
      t1 = this.c_2.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(bytes);
    }
  },
  ResourceManager_requestImage_closure: {
    "^": "Closure:92;this_0,path_1,c_2",
    call$1: function(bytes) {
      var t1, decoder, info, hdr, t2, t3, res, ri, y, x, r, g, b, ri0;
      if (bytes == null) {
        t1 = "UNABLE TO LOAD " + H.S(this.path_1);
        $.Log.call$2(0, t1);
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      decoder = U.findDecoderForData(bytes);
      if (decoder == null) {
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      info = decoder.startDecode$1(bytes);
      if (info == null) {
        t1 = "UNABLE TO DECODE " + H.S(this.path_1);
        $.Log.call$2(0, t1);
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      if (!!info.$isExrImage) {
        t1 = info.parts;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        hdr = t1[0].get$framebuffer();
        t1 = hdr.slices;
        if (t1.get$isEmpty(t1))
          t2 = 0;
        else {
          t2 = t1.get$values(t1);
          t2 = J.get$width$x(t2._f$1(J.get$first$ax(t2._iterable)));
        }
        if (t1.get$isEmpty(t1))
          t3 = 0;
        else {
          t3 = t1.get$values(t1);
          t3 = J.get$height$x(t3._f$1(J.get$first$ax(t3._iterable)));
        }
        res = G.SpectrumImage$(t2, t3, 3);
        ri = 0;
        y = 0;
        while (true) {
          if (t1.get$isEmpty(t1))
            t2 = 0;
          else {
            t2 = t1.get$values(t1);
            t2 = J.get$height$x(t2._f$1(J.get$first$ax(t2._iterable)));
          }
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(y < t2))
            break;
          x = 0;
          while (true) {
            if (t1.get$isEmpty(t1))
              t2 = 0;
            else {
              t2 = t1.get$values(t1);
              t2 = J.get$width$x(t2._f$1(J.get$first$ax(t2._iterable)));
            }
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(x < t2))
              break;
            t2 = hdr.red;
            r = t2 != null ? t2.getFloat$2(x, y) : 0;
            t2 = hdr.green;
            g = t2 != null ? t2.getFloat$2(x, y) : 0;
            t2 = hdr.blue;
            b = t2 != null ? t2.getFloat$2(x, y) : 0;
            t2 = res.data;
            ri0 = ri + 1;
            t3 = t2.length;
            if (ri < 0 || ri >= t3)
              return H.ioore(t2, ri);
            t2[ri] = r;
            ri = ri0 + 1;
            if (ri0 < 0 || ri0 >= t3)
              return H.ioore(t2, ri0);
            t2[ri0] = g;
            ri0 = ri + 1;
            if (ri < 0 || ri >= t3)
              return H.ioore(t2, ri);
            t2[ri] = b;
            ++x;
            ri = ri0;
          }
          ++y;
        }
        t1 = this.path_1;
        t2 = "HDR IMAGE LOADED " + H.S(t1);
        $.Log.call$2(4, t2);
        this.this_0.resources.$indexSet(0, t1, res);
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(res);
        return;
      }
      res = G.SpectrumImage$fromImage(decoder.decodeFrame$1(0));
      t1 = this.path_1;
      t2 = "IMAGE LOADED " + H.S(t1);
      $.Log.call$2(4, t2);
      this.this_0.resources.$indexSet(0, t1, res);
      t1 = this.c_2.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(res);
    }
  },
  RGBColor: {
    "^": "Spectrum;c",
    setSampled$3: function(lambda, v, offset) {
      var x, y, z, yint, i, t1, val, t2;
      if (!G.Spectrum_SpectrumSamplesSorted(lambda))
        G.Spectrum_SortSpectrumSamples(lambda, v, offset);
      for (x = 0, y = 0, z = 0, yint = 0, i = 0; i < 471; ++i) {
        t1 = C.List_s9c[i];
        if (typeof t1 !== "number")
          return H.iae(t1);
        yint += t1;
        val = G.Spectrum_InterpolateSpectrumSamples(lambda, v, C.List_U49[i], offset);
        t1 = J.getInterceptor$ns(val);
        t2 = t1.$mul(val, C.List_wsa[i]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        x += t2;
        t2 = t1.$mul(val, C.List_s9c[i]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        y += t2;
        t1 = t1.$mul(val, C.List_SCE[i]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        z += t1;
      }
      G.Spectrum_XYZToRGB(x / yint, y / yint, z / yint, this.c);
      return this;
    },
    setSampled$2: function(lambda, v) {
      return this.setSampled$3(lambda, v, 0);
    },
    toRGB$0: function() {
      return this;
    },
    setRGB$4: function(r, g, b, type) {
      var t1, t2;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = r;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = g;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = b;
      return this;
    },
    setRGB$3: function(r, g, b) {
      return this.setRGB$4(r, g, b, 0);
    },
    $add: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.RGBColor$rgb(t3 + t4, t5 + t6, t1 + t2);
    },
    $sub: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.RGBColor$rgb(t3 - t4, t5 - t6, t1 - t2);
    },
    $mul: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.RGBColor$rgb(t3 * s, t4 * s, t1[2] * s);
      }
      if (!!J.getInterceptor(s).$isRGBColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.RGBColor$rgb(t3 * t6, t7 * t8, t1 * t4[2]);
      }
      $.Log.call$2(3, "RGBSpectrum or double expected.");
      t1 = new G.RGBColor(new Float32Array(3));
      t1.Spectrum$samples$2(3, 0);
      return t1;
    },
    $div: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.RGBColor$rgb(t3 / s, t4 / s, t1[2] / s);
      }
      if (!!J.getInterceptor(s).$isRGBColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.RGBColor$rgb(t3 / t6, t7 / t8, t1 / t4[2]);
      }
      $.Log.call$2(3, "RGBSpectrum or double expected.");
      t1 = new G.RGBColor(new Float32Array(3));
      t1.Spectrum$samples$2(3, 0);
      return t1;
    },
    $negate: function(_) {
      var t1, t2, t3, t4;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.RGBColor$rgb(-t3, -t4, -t1[2]);
    },
    get$y: function(_) {
      var t1, t2, t3, t4;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return 0.212671 * t3 + 0.71516 * t4 + 0.072169 * t1[2];
    },
    clamp$2: function(_, low, high) {
      var t1, t2, t3, t4;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = C.JSNumber_methods.clamp$2(t1[0], low, high);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = C.JSNumber_methods.clamp$2(t1[1], low, high);
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.RGBColor$rgb(t3, t4, C.JSNumber_methods.clamp$2(t1[2], low, high));
    },
    toString$0: function(_) {
      var t1, t2, t3;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = H.S(t1[0]) + " ";
      if (1 >= t2)
        return H.ioore(t1, 1);
      t3 = t3 + H.S(t1[1]) + " ";
      if (2 >= t2)
        return H.ioore(t1, 2);
      return t3 + H.S(t1[2]);
    },
    RGBColor$rgb$3: function(r, g, b) {
      var t1, t2;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = r;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = g;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = b;
    },
    RGBColor$from$1: function(s) {
      var t1, t2, t3, t4, t5;
      t1 = J.getInterceptor(s);
      if (!!t1.$isRGBColor) {
        t1 = this.c;
        t2 = s.c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      } else if (!!t1.$isXYZColor) {
        t1 = s.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        G.Spectrum_XYZToRGB(t3, t4, t1[2], this.c);
      } else if (!!t1.$isSampledSpectrum) {
        t1 = this.c;
        t2 = s.toRGB$0().c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      }
    },
    $isRGBColor: true,
    static: {RGBColor$rgb: function(r, g, b) {
        var t1 = new G.RGBColor(new Float32Array(3));
        t1.Spectrum$samples$2(3, 0);
        t1.RGBColor$rgb$3(r, g, b);
        return t1;
      }, RGBColor$from: function(s) {
        var t1 = new G.RGBColor(new Float32Array(3));
        t1.Spectrum$samples$2(3, 0);
        t1.RGBColor$from$1(s);
        return t1;
      }}
  },
  RNG: {
    "^": "Object;random,mt,mti",
    seed$1: function(_, seed) {
      var t1, t2, t3;
      t1 = this.mt;
      t1[0] = (seed & 4294967295) >>> 0;
      for (this.mti = 1, t2 = 1; t2 < 624; ++t2, this.mti = t2) {
        t3 = t1[t2 - 1];
        t1[t2] = 1812433253 * ((t3 ^ t3 >>> 30) >>> 0) + t2;
        t1[t2] = (t1[t2] & 4294967295) >>> 0;
      }
    },
    randomUInt$0: function() {
      var t1, kk, kk0, y, t2, t3;
      t1 = this.mti;
      if (t1 >= 624) {
        if (t1 === 625)
          this.seed$1(0, 5489);
        for (t1 = this.mt, kk = 0; kk < 227; kk = kk0) {
          kk0 = kk + 1;
          y = t1[kk] & 2147483648 | t1[kk0] & 2147483647;
          t2 = t1[kk + 397];
          t3 = C.List_0_2567483615[y & 1];
          if (typeof t3 !== "number")
            return H.iae(t3);
          t1[kk] = (t2 ^ y >>> 1 ^ t3) >>> 0;
        }
        for (; kk < 623; kk = kk0) {
          kk0 = kk + 1;
          y = t1[kk] & 2147483648 | t1[kk0] & 2147483647;
          t2 = t1[kk + -227];
          t3 = C.List_0_2567483615[y & 1];
          if (typeof t3 !== "number")
            return H.iae(t3);
          t1[kk] = (t2 ^ y >>> 1 ^ t3) >>> 0;
        }
        y = t1[623] & 2147483648 | t1[0] & 2147483647;
        t2 = t1[396];
        t3 = C.List_0_2567483615[y & 1];
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1[623] = (t2 ^ y >>> 1 ^ t3) >>> 0;
        this.mti = 0;
        t1 = 0;
      }
      t2 = this.mt;
      this.mti = t1 + 1;
      if (t1 >= 624)
        return H.ioore(t2, t1);
      y = t2[t1];
      y ^= y >>> 11;
      y ^= y << 7 & 2636928640;
      y ^= y << 15 & 4022730752;
      return (y ^ y >>> 18) >>> 0;
    },
    static: {"^": "RNG_N"}
  },
  SampledSpectrum: {
    "^": "Spectrum;c",
    setSampled$3: function(lambda, v, offset) {
      var t1, t2, i, t3, i0, t4;
      if (!G.Spectrum_SpectrumSamplesSorted(lambda))
        G.Spectrum_SortSpectrumSamples(lambda, v, offset);
      for (t1 = this.c, t2 = t1.length, i = 0; i < 4; i = i0) {
        t3 = i / 4;
        i0 = i + 1;
        t4 = i0 / 4;
        t4 = G.Spectrum_AverageSpectrumSamples(lambda, v, (1 - t3) * 400 + t3 * 700, (1 - t4) * 400 + t4 * 700, offset);
        if (i >= t2)
          return H.ioore(t1, i);
        t1[i] = t4;
      }
      return this;
    },
    setSampled$2: function(lambda, v) {
      return this.setSampled$3(lambda, v, 0);
    },
    $add: function(_, s) {
      var t1, r, t2, t3, i, t4, t5;
      t1 = new Float32Array(4);
      r = new G.SampledSpectrum(t1);
      r.Spectrum$samples$2(4, 0);
      for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        t4 = t2[i];
        t5 = J.$index$asx(s.get$c(), i);
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (i >= 4)
          return H.ioore(t1, i);
        t1[i] = t4 + t5;
      }
      return r;
    },
    $sub: function(_, s) {
      var t1, r, t2, t3, i, t4, t5;
      t1 = new Float32Array(4);
      r = new G.SampledSpectrum(t1);
      r.Spectrum$samples$2(4, 0);
      for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        t4 = t2[i];
        t5 = J.$index$asx(s.get$c(), i);
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (i >= 4)
          return H.ioore(t1, i);
        t1[i] = t4 - t5;
      }
      return r;
    },
    $mul: function(_, s) {
      var t1, r, t2, t3, i, t4, t5, t6, t7;
      if (typeof s === "number") {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$samples$2(4, 0);
        for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t4 = t2[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t4 * s;
        }
        return r;
      }
      if (!!J.getInterceptor(s).$isSampledSpectrum) {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$samples$2(4, 0);
        for (t2 = this.c, t3 = t2.length, t4 = s.c, t5 = t4.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t5)
            return H.ioore(t4, i);
          t7 = t4[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t6 * t7;
        }
        return r;
      }
      $.Log.call$2(3, "SampledSpectrum or num expected.");
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      return t1;
    },
    $div: function(_, s) {
      var t1, r, t2, t3, i, t4, t5, t6, t7;
      if (typeof s === "number") {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$samples$2(4, 0);
        for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t4 = t2[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t4 / s;
        }
        return r;
      }
      if (!!J.getInterceptor(s).$isSampledSpectrum) {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$samples$2(4, 0);
        for (t2 = this.c, t3 = t2.length, t4 = s.c, t5 = t4.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t5)
            return H.ioore(t4, i);
          t7 = t4[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t6 / t7;
        }
        return r;
      }
      $.Log.call$2(3, "SampledSpectrum or double expected.");
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      return t1;
    },
    setRGB$4: function(r, g, b, type) {
      var res, t1, t2, t3, t4, t5;
      res = new G.SampledSpectrum(new Float32Array(4));
      res.Spectrum$samples$2(4, 0);
      if (type === 0) {
        t1 = J.getInterceptor$n(r);
        if (t1.$le(r, g) && t1.$le(r, b)) {
          res = res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectWhite.$mul(0, r));
          t1 = J.getInterceptor$n(g);
          t2 = J.getInterceptor$n(b);
          res = t1.$le(g, b) ? res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectCyan.$mul(0, t1.$sub(g, r))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectBlue.$mul(0, t2.$sub(b, g))) : res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectCyan.$mul(0, t2.$sub(b, r))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectGreen.$mul(0, t1.$sub(g, b)));
        } else {
          t2 = J.getInterceptor$n(g);
          if (t2.$le(g, r) && t2.$le(g, b)) {
            res = res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectWhite.$mul(0, g));
            t2 = J.getInterceptor$n(b);
            res = t1.$le(r, b) ? res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectMagenta.$mul(0, t1.$sub(r, g))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectBlue.$mul(0, t2.$sub(b, r))) : res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectMagenta.$mul(0, t2.$sub(b, g))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectRed.$mul(0, t1.$sub(r, b)));
          } else {
            res = res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectWhite.$mul(0, b));
            res = t1.$le(r, g) ? res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectYellow.$mul(0, t1.$sub(r, b))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectGreen.$mul(0, t2.$sub(g, r))) : res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectYellow.$mul(0, t2.$sub(g, b))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectRed.$mul(0, t1.$sub(r, g)));
          }
        }
        res = res.$mul(0, 0.94);
      } else {
        t1 = J.getInterceptor$n(r);
        if (t1.$le(r, g) && t1.$le(r, b)) {
          res = res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectWhite.$mul(0, r));
          t1 = J.getInterceptor$n(g);
          t2 = J.getInterceptor$n(b);
          res = t1.$le(g, b) ? res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectCyan.$mul(0, t1.$sub(g, r))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectBlue.$mul(0, t2.$sub(b, g))) : res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectCyan.$mul(0, t2.$sub(b, r))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectGreen.$mul(0, t1.$sub(g, b)));
        } else {
          t2 = J.getInterceptor$n(g);
          if (t2.$le(g, r) && t2.$le(g, b)) {
            res = res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectWhite.$mul(0, g));
            t2 = J.getInterceptor$n(b);
            res = t1.$le(r, b) ? res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectMagenta.$mul(0, t1.$sub(r, g))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectBlue.$mul(0, t2.$sub(b, r))) : res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectMagenta.$mul(0, t2.$sub(b, g))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectRed.$mul(0, t1.$sub(r, b)));
          } else {
            res = res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectWhite.$mul(0, b));
            res = t1.$le(r, g) ? res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectYellow.$mul(0, t1.$sub(r, b))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectGreen.$mul(0, t2.$sub(g, r))) : res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectYellow.$mul(0, t2.$sub(g, b))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectRed.$mul(0, t1.$sub(r, g)));
          }
        }
        res = res.$mul(0, 0.86445);
      }
      t1 = this.c;
      t2 = res.c;
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t4 = C.JSNumber_methods.clamp$2(t2[0], 0, 1 / 0);
      t5 = t1.length;
      if (0 >= t5)
        return H.ioore(t1, 0);
      t1[0] = t4;
      if (1 >= t3)
        return H.ioore(t2, 1);
      t4 = C.JSNumber_methods.clamp$2(t2[1], 0, 1 / 0);
      if (1 >= t5)
        return H.ioore(t1, 1);
      t1[1] = t4;
      if (2 >= t3)
        return H.ioore(t2, 2);
      t2 = C.JSNumber_methods.clamp$2(t2[2], 0, 1 / 0);
      if (2 >= t5)
        return H.ioore(t1, 2);
      t1[2] = t2;
      return this;
    },
    setRGB$3: function(r, g, b) {
      return this.setRGB$4(r, g, b, 0);
    },
    toXYZ$0: function() {
      var t1, xyz, t2, t3, i, t4, t5, t6;
      t1 = new Float32Array(3);
      xyz = new G.XYZColor(t1);
      xyz.Spectrum$samples$2(3, 0);
      if (0 >= 3)
        return H.ioore(t1, 0);
      t1[0] = 0;
      if (1 >= 3)
        return H.ioore(t1, 1);
      t1[1] = 0;
      if (2 >= 3)
        return H.ioore(t1, 2);
      t1[2] = 0;
      for (t2 = this.c, t3 = t2.length, i = 0; t4 = t1[0], i < 4; ++i) {
        t5 = $.get$_Spectrum_G();
        t6 = t5.X.c;
        if (i >= t6.length)
          return H.ioore(t6, i);
        t6 = t6[i];
        if (i >= t3)
          return H.ioore(t2, i);
        t1[0] = t4 + t6 * t2[i];
        t6 = t1[1];
        t4 = t5.Y.c;
        if (i >= t4.length)
          return H.ioore(t4, i);
        t1[1] = t6 + t4[i] * t2[i];
        t4 = t1[2];
        t5 = t5.Z.c;
        if (i >= t5.length)
          return H.ioore(t5, i);
        t1[2] = t4 + t5[i] * t2[i];
      }
      t1[0] = t4 * 0.7018732857622337;
      t1[1] = t1[1] * 0.7018732857622337;
      t1[2] = t1[2] * 0.7018732857622337;
      return xyz;
    },
    get$y: function(_) {
      var t1, t2, yy, i, t3;
      for (t1 = this.c, t2 = t1.length, yy = 0, i = 0; i < 4; ++i) {
        t3 = $.get$_Spectrum_G().Y.c;
        if (i >= t3.length)
          return H.ioore(t3, i);
        t3 = t3[i];
        if (i >= t2)
          return H.ioore(t1, i);
        yy += t3 * t1[i];
      }
      return yy * 300 / 427.42758;
    },
    toRGB$0: function() {
      return G.RGBColor$from(this.toXYZ$0());
    },
    clamp$2: function(_, low, high) {
      var t1, r, t2, t3, i, t4;
      t1 = new Float32Array(4);
      r = new G.SampledSpectrum(t1);
      r.Spectrum$samples$2(4, 0);
      for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        t4 = C.JSNumber_methods.clamp$2(t2[i], low, high);
        if (i >= 4)
          return H.ioore(t1, i);
        t1[i] = t4;
      }
      return r;
    },
    SampledSpectrum$from$2: function(s, type) {
      var t1, t2, t3, t4, i, t5;
      t1 = J.getInterceptor(s);
      if (!!t1.$isSampledSpectrum)
        for (t1 = this.c, t2 = s.c, t3 = t2.length, t4 = t1.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t5 = t2[i];
          if (i >= t4)
            return H.ioore(t1, i);
          t1[i] = t5;
        }
      else if (!!t1.$isRGBColor) {
        t1 = s.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        this.setRGB$4(t3, t4, t1[2], type);
      } else if (!!t1.$isXYZColor) {
        t1 = G.RGBColor$from(s).c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        this.setRGB$4(t3, t4, t1[2], type);
      }
    },
    $isSampledSpectrum: true,
    static: {"^": "SampledSpectrum_NUM_SAMPLES", SampledSpectrum$from: function(s, type) {
        var t1 = new G.SampledSpectrum(new Float32Array(4));
        t1.Spectrum$samples$2(4, 0);
        t1.SampledSpectrum$from$2(s, type);
        return t1;
      }}
  },
  _Spectrum: {
    "^": "Object;X,Y,Z,rgbRefl2SpectWhite,rgbRefl2SpectCyan,rgbRefl2SpectMagenta,rgbRefl2SpectYellow,rgbRefl2SpectRed,rgbRefl2SpectGreen,rgbRefl2SpectBlue,rgbIllum2SpectWhite,rgbIllum2SpectCyan,rgbIllum2SpectMagenta,rgbIllum2SpectYellow,rgbIllum2SpectRed,rgbIllum2SpectGreen,rgbIllum2SpectBlue",
    _Spectrum$0: function() {
      var t1, i, wl0, i0, wl1, t2;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.X = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.Y = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.Z = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbRefl2SpectWhite = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbRefl2SpectCyan = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbRefl2SpectMagenta = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbRefl2SpectYellow = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbRefl2SpectRed = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbRefl2SpectGreen = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbRefl2SpectBlue = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbIllum2SpectWhite = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbIllum2SpectCyan = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbIllum2SpectMagenta = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbIllum2SpectYellow = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbIllum2SpectRed = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbIllum2SpectGreen = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$samples$2(4, 0);
      this.rgbIllum2SpectBlue = t1;
      for (i = 0; i < 4; i = i0) {
        t1 = i / 4;
        wl0 = (1 - t1) * 400 + t1 * 700;
        i0 = i + 1;
        t1 = i0 / 4;
        wl1 = (1 - t1) * 400 + t1 * 700;
        t1 = this.X.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_U49, C.List_wsa, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.Y.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_U49, C.List_s9c, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.Z.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_U49, C.List_SCE, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
      }
      for (i = 0; i < 4; i = i0) {
        t1 = i / 4;
        wl0 = (1 - t1) * 400 + t1 * 700;
        i0 = i + 1;
        t1 = i0 / 4;
        wl1 = (1 - t1) * 400 + t1 * 700;
        t1 = this.rgbRefl2SpectWhite.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_iDZ, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbRefl2SpectCyan.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_DFB, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbRefl2SpectMagenta.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Qu6, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbRefl2SpectYellow.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Qaw, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbRefl2SpectRed.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Sby, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbRefl2SpectGreen.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_cQL, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbRefl2SpectBlue.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Ls5, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectWhite.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_ssa, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbIllum2SpectCyan.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_QmM, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectMagenta.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_ild, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbIllum2SpectYellow.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_LkP, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectRed.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_wQn, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbIllum2SpectGreen.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_ec6, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectBlue.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_aXZ, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
      }
    },
    static: {"^": "_Spectrum_G", _Spectrum$: function() {
        var t1 = new G._Spectrum(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1._Spectrum$0();
        return t1;
      }}
  },
  Sampler: {
    "^": "Object;samplesPerPixel<,shutterOpen<,shutterClose<",
    get$width: function(_) {
      return J.$sub$n(this.xPixelEnd, this.xPixelStart);
    },
    get$height: function(_) {
      return J.$sub$n(this.yPixelEnd, this.yPixelStart);
    }
  },
  Shape: {
    "^": "Object;",
    worldBound$0: function() {
      return this.objectToWorld.transformBBox$1(this.objectBound$0());
    },
    canIntersect$0: function() {
      return true;
    },
    refine$1: function(refined) {
      $.Log.call$2(3, "Unimplemented Shape.refine() method called");
    },
    area$0: function() {
      $.Log.call$2(3, "Unimplemented Shape.area() method called");
      return 0;
    }
  },
  Spectrum: {
    "^": "Object;c<",
    $index: function(_, index) {
      var t1 = this.c;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this.c;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = value;
      return value;
    },
    $add: function(_, s) {
      var r, t1, n, i, t2, t3, t4;
      r = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = r.c;
        t3 = t1[i];
        t4 = J.$index$asx(s.get$c(), i);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3 + t4;
      }
      return r;
    },
    $sub: function(_, s) {
      var r, t1, n, i, t2, t3, t4;
      r = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = r.c;
        t3 = t1[i];
        t4 = J.$index$asx(s.get$c(), i);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3 - t4;
      }
      return r;
    },
    $mul: function(_, s) {
      var r, t1, n, i, t2, t3, t4, t5, t6;
      r = G.Spectrum_Spectrum(0);
      if (typeof s === "number")
        for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
          t2 = r.c;
          t3 = t1[i];
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t3 * s;
        }
      else if (!!J.getInterceptor(s).$isSpectrum)
        for (t1 = this.c, n = t1.length, t2 = s.c, t3 = t2.length, i = 0; i < n; ++i) {
          t4 = r.c;
          t5 = t1[i];
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t4.length)
            return H.ioore(t4, i);
          t4[i] = t5 * t6;
        }
      else
        $.Log.call$2(3, "Spectrum or double expected.");
      return r;
    },
    $div: function(_, s) {
      var r, t1, n, i, t2, t3, t4, t5, t6;
      r = G.Spectrum_Spectrum(0);
      if (typeof s === "number")
        for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
          t2 = r.c;
          t3 = t1[i];
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t3 / s;
        }
      else if (!!J.getInterceptor(s).$isSpectrum)
        for (t1 = this.c, n = t1.length, t2 = s.c, t3 = t2.length, i = 0; i < n; ++i) {
          t4 = r.c;
          t5 = t1[i];
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t4.length)
            return H.ioore(t4, i);
          t4[i] = t5 / t6;
        }
      else
        $.Log.call$2(3, "Spectrum or double expected.");
      return r;
    },
    $negate: function(_) {
      var r, t1, n, i, t2, t3;
      r = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = r.c;
        t3 = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = -t3;
      }
      return r;
    },
    add$1: function(_, s) {
      var t1, n, i, t2, t3;
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = t1[i];
        t3 = J.$index$asx(s.get$c(), i);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1[i] = t2 + t3;
      }
    },
    clamp$2: function(_, low, high) {
      var s, t1, n, i, t2, t3;
      s = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = s.c;
        t3 = C.JSNumber_methods.clamp$2(t1[i], low, high);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3;
      }
      return s;
    },
    Spectrum$samples$2: function(nSamples, v) {
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(this.c, 0, nSamples, v);
    },
    $isSpectrum: true,
    static: {"^": "Spectrum_type<"}
  },
  Spectrum_SortSpectrumSamples_closure: {
    "^": "Closure:93;",
    call$2: function(a, b) {
      return J.$lt$n(J.$index$asx(a, 0), J.$index$asx(b, 0));
    }
  },
  Spectrum_AverageSpectrumSamples_INTERP: {
    "^": "Closure:93;lambda_0,vals_1,offset_2",
    call$2: function(w, i) {
      var t1, t2, t3, t4, t5;
      t1 = this.lambda_0;
      t2 = t1.length;
      if (i >= t2)
        return H.ioore(t1, i);
      t3 = t1[i];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = i + 1;
      if (t4 >= t2)
        return H.ioore(t1, t4);
      t4 = J.$sub$n(t1[t4], t3);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t4 = (w - t3) / t4;
      t3 = this.vals_1;
      t1 = this.offset_2 + i;
      t2 = t3.length;
      if (t1 < 0 || t1 >= t2)
        return H.ioore(t3, t1);
      t5 = t3[t1];
      ++t1;
      if (t1 >= t2)
        return H.ioore(t3, t1);
      t1 = t3[t1];
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return (1 - t4) * t5 + t4 * t1;
    }
  },
  Spectrum_AverageSpectrumSamples_SEG_AVG: {
    "^": "Closure:98;INTERP_3",
    call$3: function(wl0, wl1, i) {
      var t1 = this.INTERP_3;
      return 0.5 * J.$add$ns(t1.call$2(wl0, i), t1.call$2(wl1, i));
    }
  },
  SpectrumImage: {
    "^": "Object;width>,height>,samplesPerPixel<,data>",
    convert$1: function(format) {
      var out, t1, len, t2, i, j, i0, r, g, b, j0, y, t3;
      if (format === this.samplesPerPixel)
        return this;
      if (format === 1) {
        out = G.SpectrumImage$(this.width, this.height, 1);
        t1 = this.data;
        len = t1.length;
        for (t2 = out.data, i = 0, j = 0; i < len; j = j0, i = i0) {
          i0 = i + 1;
          r = t1[i];
          i = i0 + 1;
          if (i0 >= len)
            return H.ioore(t1, i0);
          g = t1[i0];
          i0 = i + 1;
          if (i >= len)
            return H.ioore(t1, i);
          b = t1[i];
          j0 = j + 1;
          if (j >= t2.length)
            return H.ioore(t2, j);
          t2[j] = 0.212671 * r + 0.71516 * g + 0.072169 * b;
        }
        return out;
      }
      out = G.SpectrumImage$(this.width, this.height, 3);
      t1 = this.data;
      len = t1.length;
      for (t2 = out.data, i = 0, j = 0; i < len; j = j0, i = i0) {
        i0 = i + 1;
        y = t1[i];
        j0 = j + 1;
        t3 = t2.length;
        if (j >= t3)
          return H.ioore(t2, j);
        t2[j] = y;
        j = j0 + 1;
        if (j0 >= t3)
          return H.ioore(t2, j0);
        t2[j0] = y;
        j0 = j + 1;
        if (j >= t3)
          return H.ioore(t2, j);
        t2[j] = y;
      }
      return out;
    },
    set$1: function(other) {
      this.data = J.get$data$x(other);
      this.width = other.width;
      this.height = other.height;
    },
    $index: function(_, index) {
      var t1, t2, t3, t4, t5;
      if (J.$eq(this.samplesPerPixel, 1)) {
        t1 = this.data;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      }
      index = J.$mul$ns(index, this.samplesPerPixel);
      t1 = $.get$SpectrumImage__output().c;
      t2 = this.data;
      t3 = t2.length;
      if (index >>> 0 !== index || index >= t3)
        return H.ioore(t2, index);
      t4 = t2[index];
      t5 = t1.length;
      if (0 >= t5)
        return H.ioore(t1, 0);
      t1[0] = t4;
      t4 = index + 1;
      if (t4 >= t3)
        return H.ioore(t2, t4);
      t4 = t2[t4];
      if (1 >= t5)
        return H.ioore(t1, 1);
      t1[1] = t4;
      t4 = index + 2;
      if (t4 >= t2.length)
        return H.ioore(t2, t4);
      t4 = t2[t4];
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = t4;
      return $.get$SpectrumImage__output();
    },
    $indexSet: function(_, index, s) {
      var t1, t2, t3;
      if (J.$eq(this.samplesPerPixel, 1)) {
        t1 = this.data;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        t1[index] = s;
        return;
      }
      index = J.$mul$ns(index, this.samplesPerPixel);
      t1 = this.data;
      t2 = J.$index$asx(s.get$c(), 0);
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = t2;
      t2 = this.data;
      t1 = index + 1;
      t3 = J.$index$asx(s.get$c(), 1);
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      t2[t1] = t3;
      t3 = this.data;
      t1 = index + 2;
      t2 = J.$index$asx(s.get$c(), 2);
      if (t1 >= t3.length)
        return H.ioore(t3, t1);
      t3[t1] = t2;
    },
    SpectrumImage$fromImage$1: function(img) {
      var b, t1, t2, t3, t4, y, p, d, x, d0, t5, t6;
      b = img.getBytes$0();
      t1 = this.height;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.width;
      t3 = this.data;
      t4 = b.length;
      y = 0;
      p = 0;
      d = 0;
      for (; y < t1; ++y) {
        if (typeof t2 !== "number")
          return H.iae(t2);
        x = 0;
        for (; x < t2; ++x, p += 4, d = d0) {
          d0 = d + 1;
          if (p < 0 || p >= t4)
            return H.ioore(b, p);
          t5 = b[p];
          t6 = t3.length;
          if (d < 0 || d >= t6)
            return H.ioore(t3, d);
          t3[d] = t5 / 255;
          d = d0 + 1;
          t5 = p + 1;
          if (t5 >= t4)
            return H.ioore(b, t5);
          t5 = b[t5];
          if (d0 < 0 || d0 >= t6)
            return H.ioore(t3, d0);
          t3[d0] = t5 / 255;
          d0 = d + 1;
          t5 = p + 2;
          if (t5 >= t4)
            return H.ioore(b, t5);
          t5 = b[t5];
          if (d < 0 || d >= t6)
            return H.ioore(t3, d);
          t3[d] = t5 / 255;
        }
      }
    },
    static: {"^": "SpectrumImage_FLOAT,SpectrumImage_SPECTRUM,SpectrumImage__output", SpectrumImage$: function(width, height, samplesPerPixel) {
        var t1 = J.$mul$ns(J.$mul$ns(width, height), samplesPerPixel);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        return new G.SpectrumImage(width, height, samplesPerPixel, new Float32Array(t1));
      }, SpectrumImage$fromImage: function(img) {
        var t1, t2, t3;
        t1 = J.get$width$x(img);
        t2 = img.height;
        t3 = J.$mul$ns(J.$mul$ns(img.width, t2), 3);
        if (typeof t3 !== "number" || Math.floor(t3) !== t3)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t3)));
        t1 = new G.SpectrumImage(t1, t2, 3, new Float32Array(t3));
        t1.SpectrumImage$fromImage$1(img);
        return t1;
      }, SpectrumImage$from: function(other) {
        var t1 = J.getInterceptor$x(other);
        return new G.SpectrumImage(t1.get$width(other), t1.get$height(other), other.get$samplesPerPixel(), new Float32Array(H._ensureNativeList(t1.get$data(other))));
      }}
  },
  SurfaceIntegrator: {
    "^": "Integrator;"
  },
  ConstantTexture: {
    "^": "Texture;value"
  },
  CylindricalMapping2D: {
    "^": "TextureMapping2D;worldToTexture"
  },
  IdentityMapping3D: {
    "^": "TextureMapping3D;worldToTexture"
  },
  PlanarMapping2D: {
    "^": "TextureMapping2D;vs,vt,ds,dt"
  },
  SphericalMapping2D: {
    "^": "TextureMapping2D;worldToTexture"
  },
  Texture: {
    "^": "Object;"
  },
  TextureMapping2D: {
    "^": "Object;"
  },
  TextureMapping3D: {
    "^": "Object;"
  },
  UVMapping2D: {
    "^": "TextureMapping2D;su,sv,du,dv"
  },
  TextureParams: {
    "^": "Object;"
  },
  Transform: {
    "^": "Object;m<,mInv<",
    $eq: function(_, t) {
      if (t == null)
        return false;
      return J.$eq(t.get$m(), this.m) && t.get$mInv().$eq(0, this.mInv);
    },
    $lt: function(_, t2) {
      var t1, t3, i, t4, t5;
      for (t1 = this.m.m, t3 = t1.length, i = 0; i < 16; ++i) {
        if (i >= t3)
          return H.ioore(t1, i);
        t4 = t1[i];
        t5 = t2.get$m().get$m();
        if (i >= t5.length)
          return H.ioore(t5, i);
        t5 = t5[i];
        if (t4 < t5)
          return true;
        if (t4 > t5)
          return false;
      }
      return false;
    },
    $mul: function(_, t2) {
      return G.Transform$(G.Matrix4x4_Mul(this.m, t2.get$m()), G.Matrix4x4_Mul(t2.get$mInv(), this.mInv));
    },
    hasScale$0: function() {
      var la2, lb2, lc2, t1;
      la2 = this.transformVector$1(new G.Vector(1, 0, 0)).lengthSquared$0();
      lb2 = this.transformVector$1(new G.Vector(0, 1, 0)).lengthSquared$0();
      lc2 = this.transformVector$1(new G.Vector(0, 0, 1)).lengthSquared$0();
      t1 = J.getInterceptor$n(la2);
      if (!(t1.$lt(la2, 0.999) || t1.$gt(la2, 1.001))) {
        t1 = J.getInterceptor$n(lb2);
        if (!(t1.$lt(lb2, 0.999) || t1.$gt(lb2, 1.001))) {
          t1 = J.getInterceptor$n(lc2);
          t1 = t1.$lt(lc2, 0.999) || t1.$gt(lc2, 1.001);
        } else
          t1 = true;
      } else
        t1 = true;
      return t1;
    },
    transformPoint$2: function(p, out) {
      var t1, x, y, z, t2, t3, t4, t5, t6, w;
      if (out == null)
        out = new G.Point(0, 0, 0);
      t1 = J.getInterceptor$x(p);
      x = t1.get$x(p);
      y = t1.get$y(p);
      z = t1.get$z(p);
      t1 = this.m.m;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof x !== "number")
        return H.iae(x);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (typeof y !== "number")
        return H.iae(y);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t5 = t1[2];
      if (typeof z !== "number")
        return H.iae(z);
      if (3 >= t2)
        return H.ioore(t1, 3);
      t2 = J.getInterceptor$x(out);
      t2.set$x(out, t3 * x + t4 * y + t5 * z + t1[3]);
      t1 = this.m.m;
      t5 = t1.length;
      if (4 >= t5)
        return H.ioore(t1, 4);
      t4 = t1[4];
      if (5 >= t5)
        return H.ioore(t1, 5);
      t3 = t1[5];
      if (6 >= t5)
        return H.ioore(t1, 6);
      t6 = t1[6];
      if (7 >= t5)
        return H.ioore(t1, 7);
      t2.set$y(out, t4 * x + t3 * y + t6 * z + t1[7]);
      t1 = this.m.m;
      t6 = t1.length;
      if (8 >= t6)
        return H.ioore(t1, 8);
      t3 = t1[8];
      if (9 >= t6)
        return H.ioore(t1, 9);
      t4 = t1[9];
      if (10 >= t6)
        return H.ioore(t1, 10);
      t5 = t1[10];
      if (11 >= t6)
        return H.ioore(t1, 11);
      t2.set$z(out, t3 * x + t4 * y + t5 * z + t1[11]);
      t1 = this.m.m;
      t5 = t1.length;
      if (12 >= t5)
        return H.ioore(t1, 12);
      t4 = t1[12];
      if (13 >= t5)
        return H.ioore(t1, 13);
      t3 = t1[13];
      if (14 >= t5)
        return H.ioore(t1, 14);
      t2 = t1[14];
      if (15 >= t5)
        return H.ioore(t1, 15);
      w = t4 * x + t3 * y + t2 * z + t1[15];
      if (w !== 1)
        out.invScale$1(w);
      return out;
    },
    transformPoint$1: function(p) {
      return this.transformPoint$2(p, null);
    },
    transformVector$2: function(p, out) {
      var t1, x, y, z, t2, t3, t4, t5;
      if (out == null)
        out = new G.Vector(0, 0, 0);
      t1 = J.getInterceptor$x(p);
      x = t1.get$x(p);
      y = t1.get$y(p);
      z = t1.get$z(p);
      t1 = this.m.m;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof x !== "number")
        return H.iae(x);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (typeof y !== "number")
        return H.iae(y);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      if (typeof z !== "number")
        return H.iae(z);
      t2 = J.getInterceptor$x(out);
      t2.set$x(out, t3 * x + t4 * y + t1 * z);
      t1 = this.m.m;
      t4 = t1.length;
      if (4 >= t4)
        return H.ioore(t1, 4);
      t3 = t1[4];
      if (5 >= t4)
        return H.ioore(t1, 5);
      t5 = t1[5];
      if (6 >= t4)
        return H.ioore(t1, 6);
      t2.set$y(out, t3 * x + t5 * y + t1[6] * z);
      t1 = this.m.m;
      t5 = t1.length;
      if (8 >= t5)
        return H.ioore(t1, 8);
      t3 = t1[8];
      if (9 >= t5)
        return H.ioore(t1, 9);
      t4 = t1[9];
      if (10 >= t5)
        return H.ioore(t1, 10);
      t2.set$z(out, t3 * x + t4 * y + t1[10] * z);
      return out;
    },
    transformVector$1: function(p) {
      return this.transformVector$2(p, null);
    },
    transformBBox$2: function(b, out) {
      var t1, t2;
      out = G.BBox$(null, null);
      t1 = this.transformPoint$1(b.get$pMin());
      out.pMin.copy$1(t1);
      out.pMax.copy$1(t1);
      t1 = b.pMax.x;
      t2 = b.pMin;
      out.unionPoint$1(this.transformPoint$1(new G.Point(t1, t2.y, t2.z)));
      t2 = b.pMin;
      out.unionPoint$1(this.transformPoint$1(new G.Point(t2.x, b.pMax.y, t2.z)));
      t2 = b.pMin;
      out.unionPoint$1(this.transformPoint$1(new G.Point(t2.x, t2.y, b.pMax.z)));
      t2 = b.pMin.x;
      t1 = b.pMax;
      out.unionPoint$1(this.transformPoint$1(new G.Point(t2, t1.y, t1.z)));
      t1 = b.pMax;
      out.unionPoint$1(this.transformPoint$1(new G.Point(t1.x, t1.y, b.pMin.z)));
      t1 = b.pMax;
      out.unionPoint$1(this.transformPoint$1(new G.Point(t1.x, b.pMin.y, t1.z)));
      out.unionPoint$1(this.transformPoint$1(b.pMax));
      return out;
    },
    transformBBox$1: function(b) {
      return this.transformBBox$2(b, null);
    },
    static: {Transform$: function(m, inv) {
        var t1, t2;
        t1 = m == null;
        t2 = t1 ? G.Matrix4x4$() : new G.Matrix4x4(new Float32Array(H._ensureNativeList(m.m)));
        if (inv == null)
          t1 = t1 ? G.Matrix4x4$() : new G.Matrix4x4(new Float32Array(H._ensureNativeList(m.m))).invert$0();
        else
          t1 = new G.Matrix4x4(new Float32Array(H._ensureNativeList(inv.m)));
        return new G.Transform(t2, t1);
      }, Transform$from: function(t) {
        return new G.Transform(new G.Matrix4x4(new Float32Array(H._ensureNativeList(t.get$m().get$m()))), new G.Matrix4x4(new Float32Array(H._ensureNativeList(t.get$mInv().m))));
      }, Transform_Translate: function(delta) {
        var t1 = J.getInterceptor$x(delta);
        return G.Transform$(G.Matrix4x4$values(1, 0, 0, t1.get$x(delta), 0, 1, 0, t1.get$y(delta), 0, 0, 1, t1.get$z(delta), 0, 0, 0, 1), G.Matrix4x4$values(1, 0, 0, J.$negate$n(t1.get$x(delta)), 0, 1, 0, J.$negate$n(t1.get$y(delta)), 0, 0, 1, J.$negate$n(t1.get$z(delta)), 0, 0, 0, 1));
      }, Transform_Scale: function(x, y, z) {
        var m = G.Matrix4x4$values(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
        if (typeof x !== "number")
          return H.iae(x);
        if (typeof y !== "number")
          return H.iae(y);
        if (typeof z !== "number")
          return H.iae(z);
        return G.Transform$(m, G.Matrix4x4$values(1 / x, 0, 0, 0, 0, 1 / y, 0, 0, 0, 0, 1 / z, 0, 0, 0, 0, 1));
      }, Transform_Perspective: function(fov, znear, zfar) {
        var t1, persp, invTanAng;
        t1 = zfar - znear;
        persp = G.Matrix4x4$values(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, zfar / t1, -zfar * znear / t1, 0, 0, 1, 0);
        if (typeof fov !== "number")
          return H.iae(fov);
        invTanAng = 1 / Math.tan(0.017453292519943295 * fov / 2);
        return G.Transform_Scale(invTanAng, invTanAng, 1).$mul(0, G.Transform$(persp, null));
      }}
  },
  Vector: {
    "^": "Object;x*,y*,z*",
    copy$1: function(other) {
      var t1 = J.getInterceptor$x(other);
      this.x = t1.get$x(other);
      this.y = t1.get$y(other);
      this.z = t1.get$z(other);
    },
    $add: function(_, v) {
      var t1 = J.getInterceptor$x(v);
      return new G.Vector(J.$add$ns(this.x, t1.get$x(v)), J.$add$ns(this.y, t1.get$y(v)), J.$add$ns(this.z, t1.get$z(v)));
    },
    add$1: function(_, v) {
      var t1 = J.getInterceptor$x(v);
      this.x = J.$add$ns(this.x, t1.get$x(v));
      this.y = J.$add$ns(this.y, t1.get$y(v));
      this.z = J.$add$ns(this.z, t1.get$z(v));
    },
    $sub: function(_, v) {
      var t1 = J.getInterceptor$x(v);
      return new G.Vector(J.$sub$n(this.x, t1.get$x(v)), J.$sub$n(this.y, t1.get$y(v)), J.$sub$n(this.z, t1.get$z(v)));
    },
    $mul: function(_, f) {
      return new G.Vector(J.$mul$ns(this.x, f), J.$mul$ns(this.y, f), J.$mul$ns(this.z, f));
    },
    $div: function(_, f) {
      return new G.Vector(J.$div$n(this.x, f), J.$div$n(this.y, f), J.$div$n(this.z, f));
    },
    invScale$1: function(f) {
      this.x = J.$div$n(this.x, f);
      this.y = J.$div$n(this.y, f);
      this.z = J.$div$n(this.z, f);
    },
    $negate: function(_) {
      return new G.Vector(J.$negate$n(this.x), J.$negate$n(this.y), J.$negate$n(this.z));
    },
    $index: function(_, i) {
      var t1 = J.getInterceptor(i);
      if (t1.$eq(i, 0))
        t1 = this.x;
      else
        t1 = t1.$eq(i, 1) ? this.y : this.z;
      return t1;
    },
    $indexSet: function(_, i, v) {
      var t1 = J.getInterceptor(i);
      if (t1.$eq(i, 0))
        this.x = v;
      else if (t1.$eq(i, 1))
        this.y = v;
      else
        this.z = v;
      return v;
    },
    lengthSquared$0: function() {
      var t1, t2;
      t1 = this.x;
      t1 = J.$mul$ns(t1, t1);
      t2 = this.y;
      t2 = J.$add$ns(t1, J.$mul$ns(t2, t2));
      t1 = this.z;
      return J.$add$ns(t2, J.$mul$ns(t1, t1));
    },
    length$0: [function(_) {
      var t1 = this.lengthSquared$0();
      if (typeof t1 !== "number")
        H.throwExpression(P.ArgumentError$(t1));
      return Math.sqrt(t1);
    }, "call$0", "get$length", 0, 0, 99],
    toString$0: function(_) {
      return H.S(this.x) + " " + H.S(this.y) + " " + H.S(this.z);
    },
    static: {Vector$from: function(other) {
        var t1 = J.getInterceptor$x(other);
        return new G.Vector(t1.get$x(other), t1.get$y(other), t1.get$z(other));
      }, Vector_Dot: function(v1, v2) {
        var t1, t2;
        t1 = J.getInterceptor$x(v1);
        t2 = J.getInterceptor$x(v2);
        return J.$add$ns(J.$add$ns(J.$mul$ns(t1.get$x(v1), t2.get$x(v2)), J.$mul$ns(t1.get$y(v1), t2.get$y(v2))), J.$mul$ns(t1.get$z(v1), t2.get$z(v2)));
      }, Vector_Cross: function(v1, v2) {
        var t1, v1x, v1y, v1z, v2x, v2y, v2z, t2, t3;
        t1 = J.getInterceptor$x(v1);
        v1x = t1.get$x(v1);
        v1y = t1.get$y(v1);
        v1z = t1.get$z(v1);
        t1 = J.getInterceptor$x(v2);
        v2x = t1.get$x(v2);
        v2y = t1.get$y(v2);
        v2z = t1.get$z(v2);
        t1 = J.getInterceptor$ns(v1y);
        t2 = J.getInterceptor$ns(v1z);
        t3 = J.getInterceptor$ns(v1x);
        return new G.Vector(J.$sub$n(t1.$mul(v1y, v2z), t2.$mul(v1z, v2y)), J.$sub$n(t2.$mul(v1z, v2x), t3.$mul(v1x, v2z)), J.$sub$n(t3.$mul(v1x, v2y), t1.$mul(v1y, v2x)));
      }, Vector_CoordinateSystem: function(v1, v2, v3) {
        var t1, t2, invLen;
        t1 = J.getInterceptor$x(v1);
        if (J.abs$0$n(t1.get$x(v1)) > J.abs$0$n(t1.get$y(v1))) {
          t2 = J.$add$ns(J.$mul$ns(t1.get$x(v1), t1.get$x(v1)), J.$mul$ns(t1.get$z(v1), t1.get$z(v1)));
          if (typeof t2 !== "number")
            H.throwExpression(P.ArgumentError$(t2));
          invLen = 1 / Math.sqrt(t2);
          t2 = J.getInterceptor$x(v2);
          t2.set$x(v2, J.$mul$ns(J.$negate$n(t1.get$z(v1)), invLen));
          t2.set$y(v2, 0);
          t2.set$z(v2, J.$mul$ns(t1.get$x(v1), invLen));
        } else {
          t2 = J.$add$ns(J.$mul$ns(t1.get$y(v1), t1.get$y(v1)), J.$mul$ns(t1.get$z(v1), t1.get$z(v1)));
          if (typeof t2 !== "number")
            H.throwExpression(P.ArgumentError$(t2));
          invLen = 1 / Math.sqrt(t2);
          t2 = J.getInterceptor$x(v2);
          t2.set$x(v2, 0);
          t2.set$y(v2, J.$mul$ns(t1.get$z(v1), invLen));
          t2.set$z(v2, J.$mul$ns(J.$negate$n(t1.get$y(v1)), invLen));
        }
        t1 = G.Vector_Cross(v1, v2);
        v3.x = t1.x;
        v3.y = t1.y;
        v3.z = t1.z;
      }}
  },
  DensityRegion: {
    "^": "VolumeRegion;",
    p$4: [function(_, p, w, wp, d) {
      return G.PhaseHG(w, wp, this.g);
    }, "call$4", "get$p", 8, 0, 100]
  },
  VolumeRegion: {
    "^": "Object;"
  },
  VolumeIntegrator: {
    "^": "Integrator;"
  },
  XYZColor: {
    "^": "Spectrum;c",
    get$x: function(_) {
      var t1 = this.c;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0];
    },
    set$x: function(_, v) {
      var t1 = this.c;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = v;
      return v;
    },
    get$y: function(_) {
      var t1 = this.c;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    set$y: function(_, v) {
      var t1 = this.c;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1[1] = v;
      return v;
    },
    get$z: function(_) {
      var t1 = this.c;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      return t1[2];
    },
    set$z: function(_, v) {
      var t1 = this.c;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = v;
      return v;
    },
    toRGB$0: function() {
      return G.RGBColor$from(this);
    },
    setSampled$3: function(lambda, v, offset) {
      var t1, t2, t3, t4;
      t1 = new G.RGBColor(new Float32Array(3));
      t1.Spectrum$samples$2(3, 0);
      t1 = t1.setSampled$3(lambda, v, offset).c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      G.Spectrum_RGBToXYZ(t3, t4, t1[2], this.c);
      return this;
    },
    setSampled$2: function(lambda, v) {
      return this.setSampled$3(lambda, v, 0);
    },
    setRGB$4: function(r, g, b, type) {
      G.Spectrum_RGBToXYZ(r, g, b, this.c);
      return this;
    },
    setRGB$3: function(r, g, b) {
      return this.setRGB$4(r, g, b, 0);
    },
    $add: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.XYZColor$xyz(t3 + t4, t5 + t6, t1 + t2);
    },
    $sub: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.XYZColor$xyz(t3 - t4, t5 - t6, t1 - t2);
    },
    $mul: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.XYZColor$xyz(t3 * s, t4 * s, t1[2] * s);
      }
      if (!!J.getInterceptor(s).$isXYZColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.XYZColor$xyz(t3 * t6, t7 * t8, t1 * t4[2]);
      }
      $.Log.call$2(3, "XYZColor or double expected.");
      t1 = new G.XYZColor(new Float32Array(3));
      t1.Spectrum$samples$2(3, 0);
      return t1;
    },
    $div: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.XYZColor$xyz(t3 / s, t4 / s, t1[2] / s);
      }
      if (!!J.getInterceptor(s).$isXYZColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.XYZColor$xyz(t3 / t6, t7 / t8, t1 / t4[2]);
      }
      $.Log.call$2(3, "XYZColor or double expected.");
      t1 = new G.XYZColor(new Float32Array(3));
      t1.Spectrum$samples$2(3, 0);
      return t1;
    },
    XYZColor$from$1: function(color) {
      var t1, t2, t3, t4, t5;
      t1 = J.getInterceptor(color);
      if (!!t1.$isRGBColor) {
        t1 = color.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        G.Spectrum_RGBToXYZ(t3, t4, t1[2], this.c);
      } else if (!!t1.$isXYZColor) {
        t1 = this.c;
        t2 = color.c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      } else if (!!t1.$isSampledSpectrum) {
        t1 = this.c;
        t2 = color.toXYZ$0().c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      }
    },
    XYZColor$xyz$3: function(x, y, z) {
      var t1, t2;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = x;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = y;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = z;
    },
    $isXYZColor: true,
    static: {XYZColor$xyz: function(x, y, z) {
        var t1 = new G.XYZColor(new Float32Array(3));
        t1.Spectrum$samples$2(3, 0);
        t1.XYZColor$xyz$3(x, y, z);
        return t1;
      }, XYZColor$from: function(color) {
        var t1 = new G.XYZColor(new Float32Array(3));
        t1.Spectrum$samples$2(3, 0);
        t1.XYZColor$from$1(color);
        return t1;
      }}
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      f.call$1(t1._current);
  },
  IterableMixinWorkaround_any: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      if (f.call$1(t1._current) === true)
        return true;
    return false;
  },
  IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1, t2;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i) {
      t1 = t1[i];
      t2 = iterable;
      if (t1 == null ? t2 == null : t1 === t2)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    }
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  IterableMixinWorkaround_sortList: function(list, compare) {
    H.Sort__doSort(list, 0, list.length - 1, compare);
  },
  IterableMixinWorkaround__rangeCheck: function(list, start, end) {
    var t1 = J.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, list.length))
      throw H.wrapException(P.RangeError$range(start, 0, list.length));
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, list.length))
      throw H.wrapException(P.RangeError$range(end, start, list.length));
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length, t1, otherStart, otherList;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    $length = J.$sub$n(end, start);
    if (J.$eq($length, 0))
      return;
    if (J.$lt$n(skipCount, 0))
      throw H.wrapException(P.ArgumentError$(skipCount));
    t1 = J.getInterceptor(from);
    if (!!t1.$isList) {
      otherStart = skipCount;
      otherList = from;
    } else {
      otherList = t1.skip$1(from, skipCount).toList$1$growable(0, false);
      otherStart = 0;
    }
    if (J.$gt$n(J.$add$ns(otherStart, $length), J.get$length$asx(otherList)))
      throw H.wrapException(P.StateError$("Not enough elements"));
    H.Lists_copy(otherList, otherStart, list, start, $length);
  },
  IterableMixinWorkaround_fillRangeList: function(list, start, end, fillValue) {
    var i, t1;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    for (i = start; t1 = J.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
      C.JSArray_methods.$indexSet(list, i, fillValue);
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var t1, i, j, t2, t3;
    t1 = J.getInterceptor$n(srcStart);
    if (t1.$lt(srcStart, dstStart))
      for (i = J.$sub$n(t1.$add(srcStart, count), 1), j = J.$sub$n(J.$add$ns(dstStart, count), 1), t1 = J.getInterceptor$asx(src); t2 = J.getInterceptor$n(i), t2.$ge(i, srcStart); i = t2.$sub(i, 1), j = J.$sub$n(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
    else
      for (t2 = J.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = J.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)); i = t3.$add(i, 1), j = J.$add$ns(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
  },
  Lists_lastIndexOf: function(a, element, startIndex) {
    var t1, i;
    if (typeof startIndex !== "number")
      return startIndex.$lt();
    if (startIndex < 0)
      return -1;
    t1 = a.length;
    if (startIndex >= t1)
      startIndex = t1 - 1;
    for (i = startIndex; i >= 0; --i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  Symbol_getName: function(symbol) {
    return symbol.get$_name();
  },
  ListIterable: {
    "^": "IterableBase;",
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$first: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.elementAt$1(0, 0);
    },
    get$last: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.elementAt$1(0, this.get$length(this) - 1);
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, null);
    },
    toList$1$growable: function(_, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(this)), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      for (i = 0; i < this.get$length(this); ++i) {
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,_start,_endOrLength",
    get$_endIndex: function() {
      var $length = J.get$length$asx(this._iterable);
      return $length;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$ge$n(t1, $length))
        return 0;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return $length - t1;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    elementAt$1: function(_, index) {
      var realIndex = J.$add$ns(this.get$_startIndex(), index);
      if (J.$lt$n(index, 0) || J.$ge$n(realIndex, this.get$_endIndex()))
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    skip$1: function(_, count) {
      if (J.$lt$n(count, 0))
        throw H.wrapException(P.RangeError$value(count));
      return H.SubListIterable$(this._iterable, J.$add$ns(this._start, count), this._endOrLength, null);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1 = this._start;
      if (J.$lt$n(t1, 0))
        throw H.wrapException(P.RangeError$value(t1));
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this._length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._iterable);
    },
    get$first: function(_) {
      return this._f$1(J.get$first$ax(this._iterable));
    },
    get$last: function(_) {
      return this._f$1(J.get$last$ax(this._iterable));
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!J.getInterceptor(iterable).$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "^": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  },
  MappedListIterable: {
    "^": "ListIterable;_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "^": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  ExpandIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      return new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, null);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    }
  },
  ExpandIterator: {
    "^": "Object;_iterator,_f,_currentExpansion,_current",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2;
      t1 = this._currentExpansion;
      if (t1 == null)
        return false;
      for (t2 = this._iterator; !t1.moveNext$0();) {
        this._current = null;
        if (t2.moveNext$0()) {
          this._currentExpansion = null;
          t1 = J.get$iterator$ax(this._f$1(t2.get$current()));
          this._currentExpansion = t1;
        } else
          return false;
      }
      this._current = this._currentExpansion.get$current();
      return true;
    }
  },
  SkipIterable: {
    "^": "IterableBase;_iterable,_skipCount",
    skip$1: function(_, n) {
      if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
        throw H.wrapException(P.RangeError$value(n));
      return H.SkipIterable_SkipIterable(this._iterable, J.$add$ns(this._skipCount, n), H.getTypeArgumentByIndex(this, 0));
    },
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.SkipIterator(t1.get$iterator(t1), this._skipCount);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    SkipIterable$_$2: function(_iterable, _skipCount, $E) {
      var t1 = this._skipCount;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1 || J.$lt$n(t1, 0))
        throw H.wrapException(P.RangeError$(t1));
    },
    static: {SkipIterable_SkipIterable: function(iterable, skipCount, $E) {
        var t1;
        if (!!iterable.$isEfficientLength) {
          t1 = H.setRuntimeTypeInfo(new H.EfficientLengthSkipIterable(iterable, skipCount), [$E]);
          t1.SkipIterable$_$2(iterable, skipCount, $E);
          return t1;
        }
        return H.SkipIterable$_(iterable, skipCount, $E);
      }, SkipIterable$_: function(_iterable, _skipCount, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SkipIterable(_iterable, _skipCount), [$E]);
        t1.SkipIterable$_$2(_iterable, _skipCount, $E);
        return t1;
      }}
  },
  EfficientLengthSkipIterable: {
    "^": "SkipIterable;_iterable,_skipCount",
    get$length: function(_) {
      var t1, $length;
      t1 = this._iterable;
      $length = J.$sub$n(t1.get$length(t1), this._skipCount);
      if (J.$ge$n($length, 0))
        return $length;
      return 0;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $isEfficientLength: true
  },
  SkipIterator: {
    "^": "Iterator;_iterator,_skipCount",
    moveNext$0: function() {
      var t1, i, t2;
      t1 = this._iterator;
      i = 0;
      while (true) {
        t2 = this._skipCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.moveNext$0();
        ++i;
      }
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  EmptyIterator: {
    "^": "Object;",
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    }
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  },
  UnmodifiableListMixin: {
    "^": "Object;",
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    fillRange$3: function(_, start, end, fillValue) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  UnmodifiableListBase: {
    "^": "ListBase+UnmodifiableListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo((function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1) {
      zone.toString;
      return errorHandler;
    } else {
      zone.toString;
      return errorHandler;
    }
  },
  _asyncRunCallbackLoop: function() {
    var entry = $._nextCallback;
    for (; entry != null;) {
      entry.callback$0();
      entry = entry.next;
      $._nextCallback = entry;
    }
    $._lastCallback = null;
  },
  _asyncRunCallback: [function() {
    var e, s, exception, t1;
    try {
      P._asyncRunCallbackLoop();
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (!!J.getInterceptor(e).$isError)
        P.print("microtask error " + H.S(e.get$stackTrace()));
      else
        P.print("microtask error " + H.S(e));
      P.print("microtask error stack trace: " + H.S(s));
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure());
      $._nextCallback = $._nextCallback.get$next();
      throw exception;
    }

  }, "call$0", "_asyncRunCallback$closure", 0, 0, 9],
  _scheduleAsyncCallback: function(callback) {
    var t1, t2;
    t1 = $._lastCallback;
    if (t1 == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure());
    } else {
      t2 = new P._AsyncCallbackEntry(callback, null);
      t1.next = t2;
      $._lastCallback = t2;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, callback);
      return;
    }
    P._rootScheduleMicrotask(t1, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]);
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(t1, null, t1, e, s);
    }

  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 10],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 11, 12],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 9],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreateTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreateTimer(t1, null, t1, duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  _createTimer: function(duration, callback) {
    var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  },
  _rootCreateTimer: function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  },
  _AsyncError: {
    "^": "Object;error>,stackTrace<",
    $isError: true
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  _Completer: {
    "^": "Object;"
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    completeError$2: [function(error, stackTrace) {
      var t1;
      if (error == null)
        throw H.wrapException(P.ArgumentError$("Error must not be null"));
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncCompleteError$2(error, stackTrace);
    }, function(error) {
      return this.completeError$2(error, null);
    }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 101, 12]
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasValue: function() {
      return this._state === 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, f, null, P._registerErrorHandler(onError, t1), null), [null]);
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    catchError$2$test: function(onError, test) {
      var t1, t2, result;
      t1 = $.Zone__current;
      t2 = P._registerErrorHandler(onError, t1);
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, null, test, t2, null), [null]);
      this._addListener$1(result);
      return result;
    },
    catchError$1: function(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = new P._Future(0, t1, null, null, null, null, null, action);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_async$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(t1, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 11, 12],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              if (this._state !== 0)
                H.throwExpression(P.StateError$("Future already completed"));
              this._state = 1;
              t1 = this._zone;
              t1.toString;
              P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    _async$_Future$immediate$1: function(value, $T) {
      this._asyncComplete$1(value);
    },
    _async$_Future$immediateError$2: function(error, stackTrace, $T) {
      this._asyncCompleteError$2(error, stackTrace);
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future$immediate: function(value, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediate$1(value, $T);
        return t1;
      }, _Future__chainForeignFuture: function(source, target) {
        target._state = 2;
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        target._state = 2;
        if (source._state >= 4)
          P._Future__propagateToListeners(source, target);
        else
          source._addListener$1(target);
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners._nextListener = null;
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, sourceValue, t5, zone, oldZone, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            t2 = t1.source_4;
            asyncError = t2.get$_error();
            t2 = t2._zone;
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          if (listeners == null)
            return;
          if (listeners._nextListener != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          t3.listenerHasValue_1 = true;
          sourceValue = t1.source_4.get$_hasValue() ? t1.source_4.get$_async$_value() : null;
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (t2) {
            t4 = listeners._state === 2;
            if ((t4 ? null : listeners._onValueCallback) == null) {
              t5 = (t4 ? null : listeners._whenCompleteActionCallback) != null;
              t4 = t5;
            } else
              t4 = true;
          } else
            t4 = true;
          if (t4) {
            zone = listeners._zone;
            if (hasError) {
              t4 = t1.source_4.get$_zone();
              t4.toString;
              zone.toString;
              t4 = zone == null ? t4 != null : zone !== t4;
            } else
              t4 = false;
            if (t4) {
              t2 = t1.source_4;
              asyncError = t2.get$_error();
              t2 = t2._zone;
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(t2, null, t2, t3, t4);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if ((listeners._state === 2 ? null : listeners._onValueCallback) != null)
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if ((listeners._state === 2 ? null : listeners._whenCompleteActionCallback) != null)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  listeners._state = 2;
                  t1.source_4 = chainSource;
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, listeners);
              else
                P._Future__chainForeignFuture(chainSource, listeners);
              return;
            }
          }
          if (t3.listenerHasValue_1 === true) {
            listeners0 = listeners._removeListeners$0();
            t2 = t3.listenerValueOrError_2;
            listeners._state = 4;
            listeners._resultOrListeners = t2;
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            t2 = J.get$error$x(asyncError);
            t3 = asyncError.get$stackTrace();
            listeners._state = 8;
            listeners._resultOrListeners = new P._AsyncError(t2, t3);
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:91;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:92;target_0",
    call$1: function(value) {
      this.target_0._completeWithValue$1(value);
    }
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:102;target_1",
    call$2: function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:91;this_0,coreFuture_1",
    call$0: function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:91;this_2,value_3",
    call$0: function() {
      this.this_2._completeWithValue$1(this.value_3);
    }
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:91;this_0,error_1,stackTrace_2",
    call$0: function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:103;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, t1, t2, exception;
      try {
        t1 = this.zone_5;
        t2 = this.listener_3;
        t2 = t2._state === 2 ? null : t2._onValueCallback;
        t1.toString;
        this.box_1.listenerValueOrError_2 = P._rootRunUnary(t1, null, t1, t2, this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P._AsyncError(e, s);
        return false;
      }

    }
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:9;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, test, matchesTest, e, s, errorCallback, e0, s0, t1, t2, t3, exception, listenerValueOrError, t4;
      asyncError = this.box_2.source_4.get$_error();
      t1 = this.listener_6;
      test = t1._state === 2 ? null : t1._errorTestCallback;
      matchesTest = true;
      if (test != null)
        try {
          t2 = this.zone_7;
          t3 = J.get$error$x(asyncError);
          t2.toString;
          matchesTest = P._rootRunUnary(t2, null, t2, test, t3);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      errorCallback = t1._state === 2 ? null : t1._onErrorCallback;
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2) {
            t1 = J.get$error$x(asyncError);
            t2 = asyncError.get$stackTrace();
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunBinary(t3, null, t3, errorCallback, t1, t2);
          } else {
            t1 = J.get$error$x(asyncError);
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunUnary(t3, null, t3, errorCallback, t1);
          }
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:9;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, t2, t3, exception;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        t2 = this.zone_10;
        t3 = this.listener_9;
        t3 = t3._state === 2 ? null : t3._whenCompleteActionCallback;
        t2.toString;
        t1.completeResult_0 = P._rootRun(t2, null, t2, t3);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8) {
          t2 = J.get$error$x(this.box_2.source_4.get$_error());
          t3 = e;
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        t3 = this.box_1;
        if (t2)
          t3.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t3.listenerValueOrError_2 = new P._AsyncError(e, s);
        t3.listenerHasValue_1 = false;
      }

      if (!!J.getInterceptor(t1.completeResult_0).$isFuture) {
        t2 = this.listener_9;
        t2.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, t2), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, t2));
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:92;box_2,listener_11",
    call$1: function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_11);
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:102;box_0,listener_12",
    call$2: function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_12);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next@",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSInt);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSBool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    skip$1: function(_, count) {
      var t1 = H.setRuntimeTypeInfo(new P._SkipStream(count, this), [null]);
      t1._SkipStream$2(this, count, null);
      return t1;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    },
    get$last: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.result_0 = null;
      t1.foundResult_1 = false;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
      return future;
    }
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:91;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    }
  },
  Stream_forEach__closure0: {
    "^": "Closure:92;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "^": "Closure:91;future_6",
    call$0: function() {
      this.future_6._complete$1(null);
    }
  },
  Stream_length_closure: {
    "^": "Closure:92;box_0",
    call$1: function(_) {
      ++this.box_0.count_0;
    }
  },
  Stream_length_closure0: {
    "^": "Closure:91;box_0,future_1",
    call$0: function() {
      this.future_1._complete$1(this.box_0.count_0);
    }
  },
  Stream_isEmpty_closure: {
    "^": "Closure:92;box_0,future_1",
    call$1: function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    }
  },
  Stream_isEmpty_closure0: {
    "^": "Closure:91;future_2",
    call$0: function() {
      this.future_2._complete$1(true);
    }
  },
  Stream_first_closure: {
    "^": "Closure;box_0,this_1,future_2",
    call$1: function(value) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_first_closure0: {
    "^": "Closure:91;future_3",
    call$0: function() {
      this.future_3._completeError$1(new P.StateError("No elements"));
    }
  },
  Stream_last_closure: {
    "^": "Closure;box_0,this_1",
    call$1: function(value) {
      var t1 = this.box_0;
      t1.foundResult_1 = true;
      t1.result_0 = value;
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_last_closure0: {
    "^": "Closure:91;box_0,future_2",
    call$0: function() {
      var t1 = this.box_0;
      if (t1.foundResult_1) {
        this.future_2._complete$1(t1.result_0);
        return;
      }
      this.future_2._completeError$1(new P.StateError("No elements"));
    }
  },
  StreamSubscription: {
    "^": "Object;"
  },
  _StreamController: {
    "^": "Object;",
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      if ((this._state & 8) === 0) {
        var t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      t1 = this._varData.get$varData();
      return t1;
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null) {
        t1 = (this._state & 2) !== 0 ? $.get$Future__nullFuture() : P._Future$(null);
        this._doneFuture = t1;
      }
      return t1;
    },
    add$1: [function(_, value) {
      var t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null));
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }],
    close$0: function(_) {
      var t1 = this._state;
      if ((t1 & 4) !== 0) {
        this._ensureDoneFuture$0();
        return this._doneFuture;
      }
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      t1 |= 4;
      this._state = t1;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      this._ensureDoneFuture$0();
      return this._doneFuture;
    },
    _subscribe$1: function(cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, t2, null, null), [null]);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state |= 1;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var t1, future;
      if ((this._state & 8) !== 0)
        this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      t1 = new P._StreamController__recordCancel_complete(this);
      future = P._runGuarded(this.get$_onCancel());
      if (future != null)
        future = future.whenComplete$1(t1);
      else
        t1.call$0();
      return future;
    }
  },
  _StreamController__subscribe_closure: {
    "^": "Closure:91;this_0",
    call$0: function() {
      P._runGuarded(this.this_0.get$_onListen());
    }
  },
  _StreamController__recordCancel_complete: {
    "^": "Closure:9;this_0",
    call$0: function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }
  },
  _SyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  },
  _AsyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  },
  _AsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;"
  },
  _SyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__SyncStreamControllerDispatch: {
    "^": "_StreamController+_SyncStreamControllerDispatch;"
  },
  _ControllerStream: {
    "^": "_StreamImpl;_async$_controller",
    _createSubscription$1: function(cancelOnError) {
      return this._async$_controller._subscribe$1(cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true
  },
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.pause$0(0);
      P._runGuarded(t1.get$_onPause());
    }, "call$0", "get$_onPause", 0, 0, 9],
    _onResume$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.resume$0();
      P._runGuarded(t1.get$_onResume());
    }, "call$0", "get$_onResume", 0, 0, 9]
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        this._state = (this._state | 64) >>> 0;
        pendingEvents.schedule$1(this);
      }
    },
    onData$1: function(handleData) {
      this._zone.toString;
      this._onData = handleData;
    },
    onError$1: function(_, handleError) {
      if (handleError == null)
        handleError = P._nullErrorHandler$closure();
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    onDone$1: function(handleDone) {
      if (handleDone == null)
        handleDone = P._nullDoneHandler$closure();
      this._zone.toString;
      this._onDone = handleDone;
    },
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1, t2;
      t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t2 = this._pending;
            t2 = !t2.get$isEmpty(t2);
          } else
            t2 = false;
          if (t2)
            this._pending.schedule$1(this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 9],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 9],
    _onCancel$0: function() {
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        if (!!J.getInterceptor(t1).$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, t2, isInputPaused;
      t1 = this._state;
      if ((t1 & 64) !== 0) {
        t2 = this._pending;
        t2 = t2.get$isEmpty(t2);
      } else
        t2 = false;
      if (t2) {
        t1 = (t1 & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = this._pending;
            t2 = t2 == null || t2.get$isEmpty(t2);
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        t1 = (this._state & 4294967263) >>> 0;
        this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    static: {"^": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:9;this_0,error_1,stackTrace_2",
    call$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._zone;
      t3 = $.Zone__current;
      t2.toString;
      t3.toString;
      if (t3 == null ? t2 != null : t3 !== t2)
        P._rootHandleUncaughtError(t3, null, t3, this.error_1, this.stackTrace_2);
      else {
        t3 = t1._onError;
        t4 = H.getDynamicRuntimeType();
        t4 = H.buildFunctionType(t4, [t4, t4])._isTest$1(t3);
        t5 = this.error_1;
        if (t4)
          t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
        else
          t2.runUnaryGuarded$2(t3, t5);
      }
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:9;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(0, onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error>,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:91;this_0,dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _cancelAndError_closure: {
    "^": "Closure:91;future_0,error_1,stackTrace_2",
    call$0: function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:104;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }
  },
  _cancelAndValue_closure: {
    "^": "Closure:91;future_0,value_1",
    call$0: function() {
      return this.future_0._complete$1(this.value_1);
    }
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4, result;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      result = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null), [t1, t2]);
      result._ForwardingStreamSubscription$2(this, cancelOnError, t1, t2);
      result.onData$1(onData);
      result.onError$1(0, onError);
      result.onDone$1(onDone);
      return result;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 9],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 9],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 105],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 9],
    _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    }
  },
  _SkipStream: {
    "^": "_ForwardingStream;_remaining,_async$_source",
    _handleData$2: function(inputEvent, sink) {
      if (J.$gt$n(this._remaining, 0)) {
        this._remaining = J.$sub$n(this._remaining, 1);
        return;
      }
      sink._async$_add$1(inputEvent);
    },
    _SkipStream$2: function(source, count, $T) {
      if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
        throw H.wrapException(P.ArgumentError$(count));
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  _BaseZone: {
    "^": "Object;",
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        t1 = this.runBinary$3(f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    }
  },
  _BaseZone_bindCallback_closure: {
    "^": "Closure:91;this_0,registered_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }
  },
  _BaseZone_bindCallback_closure0: {
    "^": "Closure:91;this_2,registered_3",
    call$0: function() {
      return this.this_2.run$1(this.registered_3);
    }
  },
  _BaseZone_bindUnaryCallback_closure: {
    "^": "Closure:92;this_0,registered_1",
    call$1: function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }
  },
  _BaseZone_bindUnaryCallback_closure0: {
    "^": "Closure:92;this_2,registered_3",
    call$1: function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:91;error_0,stackTrace_1",
    call$0: function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    }
  },
  _rootHandleUncaughtError__closure: {
    "^": "Closure:91;error_2,stackTrace_3",
    call$0: function() {
      var t1, trace;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null && !!J.getInterceptor(t1).$isError)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    }
  },
  _RootZone: {
    "^": "_BaseZone;",
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      return P._rootRunBinary(this, null, this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _HashSet__newHashTable: function() {
    var table = Object.create(null);
    table["<non-identifier-key>"] = table;
    delete table["<non-identifier-key>"];
    return table;
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 13],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 14],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  HashSet_HashSet$identity: function($E) {
    return H.setRuntimeTypeInfo(new P._IdentityHashSet(0, null, null, null, null), [$E]);
  },
  _iterableToString: function(iterable) {
    var parts, t1;
    if ($.get$_toStringVisiting().contains$1(0, iterable))
      return "(...)";
    $.get$_toStringVisiting().add$1(0, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      $.get$_toStringVisiting().remove$1(0, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  },
  _iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, t1, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              t1 = J.$add$ns(J.get$length$asx(parts.pop()), 2);
              if (typeof t1 !== "number")
                return H.iae(t1);
              $length -= t1;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      t1 = J.$add$ns(J.get$length$asx(parts.pop()), 2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      $length -= t1;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result, i, t2, t3;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i) {
      t2 = t2[i];
      t3 = m;
      if (t2 == null ? t3 == null : t2 === t3)
        return "{...}";
    }
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, t1, entry, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++this._collection$_length;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++this._collection$_length;
          this._keys = null;
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "^": "Closure:92;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "^": "Object;_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_value();
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(key);
    },
    _remove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell._value);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure:92;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  LinkedHashMapCell: {
    "^": "Object;_key<,_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    },
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSet: {
    "^": "_HashSetBase;",
    get$iterator: function(_) {
      return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++this._collection$_length;
      this._elements = null;
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      --this._collection$_length;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = 0;
      ++this._collection$_length;
      this._elements = null;
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        --this._collection$_length;
        this._elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    },
    $isEfficientLength: true
  },
  _IdentityHashSet: {
    "^": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i];
        if (t1 == null ? element == null : t1 === element)
          return i;
      }
      return -1;
    }
  },
  HashSetIterator: {
    "^": "Object;_set,_elements,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_collection$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    get$first: function(_) {
      var t1 = this._first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return t1.get$_collection$_element();
    },
    get$last: function(_) {
      var t1 = this._last;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return t1.get$_collection$_element();
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_collection$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: true,
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_collection$_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_collection$_element();
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "^": "IterableBase;",
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    $isEfficientLength: true
  },
  IterableBase: {
    "^": "Object;",
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return this.get$isEmpty(this) !== true;
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(P.StateError$("No elements"));
      return it.get$current();
    },
    get$last: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(P.StateError$("No elements"));
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    get$single: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(P.StateError$("No elements"));
      result = it.get$current();
      if (it.moveNext$0())
        throw H.wrapException(P.StateError$("More than one element"));
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element, t2;
      if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        t2 = J.getInterceptor(remaining);
        if (t2.$eq(remaining, 0))
          return element;
        remaining = t2.$sub(remaining, 1);
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P._iterableToString(this);
    }
  },
  ListBase: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    where$1: function(receiver, test) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, null);
    },
    toList$1$growable: function(receiver, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(receiver)), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      for (i = 0; i < this.get$length(receiver); ++i) {
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    sort$1: function(receiver, compare) {
      H.Sort__doSort(receiver, 0, this.get$length(receiver) - 1, compare);
    },
    _rangeCheck$2: function(receiver, start, end) {
      var t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
        throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver)));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
        throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver)));
    },
    sublist$2: function(receiver, start, end) {
      var $length, result, t1, i, t2;
      if (end == null)
        end = this.get$length(receiver);
      this._rangeCheck$2(receiver, start, end);
      $length = J.$sub$n(end, start);
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      if (typeof $length !== "number")
        return H.iae($length);
      t1 = J.getInterceptor$ns(start);
      i = 0;
      for (; i < $length; ++i) {
        t2 = this.$index(receiver, t1.$add(start, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i, t1;
      this._rangeCheck$2(receiver, start, end);
      for (i = start; t1 = J.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
        this.$indexSet(receiver, i, fill);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, t2, $length, t3, otherStart, otherList, t4, i;
      t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
        H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
      t2 = J.getInterceptor$n(end);
      if (t2.$lt(end, start) || t2.$gt(end, this.get$length(receiver)))
        H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
      $length = t2.$sub(end, start);
      t2 = J.getInterceptor($length);
      if (t2.$eq($length, 0))
        return;
      if (J.$lt$n(skipCount, 0))
        throw H.wrapException(P.ArgumentError$(skipCount));
      t3 = J.getInterceptor(iterable);
      if (!!t3.$isList) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = t3.skip$1(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t3 = J.getInterceptor$ns(otherStart);
      t4 = J.getInterceptor$asx(otherList);
      if (J.$gt$n(t3.$add(otherStart, $length), t4.get$length(otherList)))
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (t3.$lt(otherStart, start))
        for (i = t2.$sub($length, 1); t2 = J.getInterceptor$n(i), t2.$ge(i, 0); i = t2.$sub(i, 1))
          this.$indexSet(receiver, t1.$add(start, i), t4.$index(otherList, t3.$add(otherStart, i)));
      else {
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i)
          this.$indexSet(receiver, t1.$add(start, i), t4.$index(otherList, t3.$add(otherStart, i)));
      }
    },
    lastIndexOf$2: function(receiver, element, startIndex) {
      var i;
      startIndex = this.get$length(receiver) - 1;
      for (i = startIndex; i >= 0; --i)
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    toString$0: function(receiver) {
      var result;
      if ($.get$_toStringVisiting().contains$1(0, receiver))
        return "[...]";
      result = P.StringBuffer$("");
      try {
        $.get$_toStringVisiting().add$1(0, receiver);
        result.write$1("[");
        result.writeAll$2(receiver, ", ");
        result.write$1("]");
      } finally {
        $.get$_toStringVisiting().remove$1(0, receiver);
      }
      return result.get$_contents();
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  Maps_mapToString_closure: {
    "^": "Closure:93;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$first: function(_) {
      var t1, t2;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(P.StateError$("No elements"));
      t2 = this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1];
    },
    get$last: function(_) {
      var t1, t2, t3;
      t1 = this._head;
      t2 = this._tail;
      if (t1 === t2)
        throw H.wrapException(P.StateError$("No elements"));
      t1 = this._table;
      t3 = t1.length;
      t2 = (t2 - 1 & t3 - 1) >>> 0;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    add$1: function(_, element) {
      this._add$1(element);
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      ++this._modificationCount;
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: true,
    static: {"^": "ListQueue__INITIAL_CAPACITY"}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  }
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  Codec: {
    "^": "Object;",
    decode$1: function(encoded) {
      return this.get$decoder().convert$1(encoded);
    }
  },
  Converter: {
    "^": "Object;"
  },
  Encoding: {
    "^": "Codec;"
  },
  Utf8Codec: {
    "^": "Encoding;_allowMalformed",
    get$name: function(_) {
      return "utf-8";
    },
    decode$2$allowMalformed: function(codeUnits, allowMalformed) {
      allowMalformed = this._allowMalformed;
      return new P.Utf8Decoder(allowMalformed).convert$1(codeUnits);
    },
    decode$1: function(codeUnits) {
      return this.decode$2$allowMalformed(codeUnits, null);
    },
    get$encoder: function() {
      return new P.Utf8Encoder();
    },
    get$decoder: function() {
      return new P.Utf8Decoder(this._allowMalformed);
    }
  },
  Utf8Encoder: {
    "^": "Converter;",
    convert$1: function(string) {
      var t1, t2, encoder;
      t1 = C.JSInt_methods.get$length(string);
      t2 = Array(t1.$mul(0, 3));
      t2.fixed$length = init;
      t2 = H.setRuntimeTypeInfo(t2, [J.JSInt]);
      encoder = new P._Utf8Encoder(0, 0, t2);
      encoder._fillBuffer$3(string, 0, t1);
      encoder._writeSurrogate$2(C.JSInt_methods.codeUnitAt$1(string, t1.$sub(0, 1)), 0);
      return C.JSArray_methods.sublist$2(t2, 0, encoder._bufferIndex);
    }
  },
  _Utf8Encoder: {
    "^": "Object;_carry,_bufferIndex,_buffer",
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, rune, t3, t4;
      t1 = this._buffer;
      t2 = this._bufferIndex;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = (240 | rune >>> 18) >>> 0;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 224 | leadingSurrogate >>> 12;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
        this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | leadingSurrogate & 63;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
      if (start !== end && (J.codeUnitAt$1$s(str, J.$sub$n(end, 1)) & 64512) === 55296)
        end = J.$sub$n(end, 1);
      if (typeof end !== "number")
        return H.iae(end);
      t1 = this._buffer;
      t2 = t1.length;
      t3 = J.getInterceptor$s(str);
      stringIndex = start;
      for (; stringIndex < end; ++stringIndex) {
        codeUnit = t3.codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t4 = this._bufferIndex;
          if (t4 >= t2)
            break;
          this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else if ((codeUnit & 64512) === 55296) {
          if (this._bufferIndex + 3 >= t2)
            break;
          stringIndex0 = stringIndex + 1;
          if (stringIndex0 >= str.length)
            H.throwExpression(P.RangeError$value(stringIndex0));
          if (this._writeSurrogate$2(codeUnit, str.charCodeAt(stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t4 = this._bufferIndex;
          t5 = t4 + 1;
          if (t5 >= t2)
            break;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 192 | codeUnit >>> 6;
          this._bufferIndex = t5 + 1;
          t1[t5] = 128 | codeUnit & 63;
        } else {
          t4 = this._bufferIndex;
          if (t4 + 2 >= t2)
            break;
          t5 = t4 + 1;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 224 | codeUnit >>> 12;
          t4 = t5 + 1;
          this._bufferIndex = t4;
          if (t5 >= t2)
            return H.ioore(t1, t5);
          t1[t5] = 128 | codeUnit >>> 6 & 63;
          this._bufferIndex = t4 + 1;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 128 | codeUnit & 63;
        }
      }
      return stringIndex;
    },
    static: {"^": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE"}
  },
  Utf8Decoder: {
    "^": "Converter;_allowMalformed",
    convert$1: function(codeUnits) {
      var buffer, decoder;
      buffer = P.StringBuffer$("");
      decoder = new P._Utf8Decoder(this._allowMalformed, buffer, true, 0, 0, 0);
      decoder.convert$3(codeUnits, 0, J.get$length$asx(codeUnits));
      decoder.flush$0();
      return buffer._contents;
    }
  },
  _Utf8Decoder: {
    "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
    flush$0: function() {
      if (this._expectedUnits > 0) {
        if (this._allowMalformed !== true)
          throw H.wrapException(P.FormatException$("Unfinished UTF-8 octet sequence"));
        this._stringSink.write$1(H.Primitives_stringFromCharCode(65533));
        this._convert$_value = 0;
        this._expectedUnits = 0;
        this._extraUnits = 0;
      }
    },
    convert$3: function(codeUnits, startIndex, endIndex) {
      var t1, value, expectedUnits, extraUnits, t2, t3, t4, t5, i, unit, t6, i0, t7, to;
      t1 = {};
      value = this._convert$_value;
      expectedUnits = this._expectedUnits;
      extraUnits = this._extraUnits;
      t1.singleBytesCount_0 = 0;
      this._convert$_value = 0;
      this._expectedUnits = 0;
      this._extraUnits = 0;
      t2 = new P._Utf8Decoder_convert_addSingleBytes(t1, this, codeUnits);
      $loop$0:
        for (t3 = this._stringSink, t4 = this._allowMalformed !== true, t5 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
          $multibyte$2: {
            if (expectedUnits > 0) {
              do {
                if (i === endIndex)
                  break $loop$0;
                unit = t5.$index(codeUnits, i);
                t6 = J.getInterceptor$n(unit);
                if (t6.$and(unit, 192) !== 128) {
                  if (t4)
                    throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + t6.toRadixString$1(unit, 16)));
                  this._isFirstCharacter = false;
                  t6 = H.Primitives_stringFromCharCode(65533);
                  t3._contents += t6;
                  expectedUnits = 0;
                  break $multibyte$2;
                } else {
                  value = (value << 6 | t6.$and(unit, 63)) >>> 0;
                  --expectedUnits;
                  ++i;
                }
              } while (expectedUnits > 0);
              t6 = extraUnits - 1;
              if (t6 < 0 || t6 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t6);
              t6 = C.List_127_2047_65535_1114111[t6];
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (value <= t6) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
              if (value > 1114111) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
                value = 65533;
              }
              if (!this._isFirstCharacter || value !== 65279) {
                t6 = H.Primitives_stringFromCharCode(value);
                t3._contents += t6;
              }
              this._isFirstCharacter = false;
            }
          }
          if (typeof endIndex !== "number")
            return H.iae(endIndex);
          for (; i < endIndex; i = i0) {
            i0 = i + 1;
            unit = t5.$index(codeUnits, i);
            t6 = J.getInterceptor$n(unit);
            if (t6.$lt(unit, 0)) {
              t7 = t1.singleBytesCount_0;
              if (t7 > 0) {
                to = i0 - 1;
                t2.call$2(to - t7, to);
              }
              if (t4)
                throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + J.toRadixString$1$n(t6.$negate(unit), 16)));
              t6 = H.Primitives_stringFromCharCode(65533);
              t3._contents += t6;
            } else if (t6.$le(unit, 127)) {
              this._isFirstCharacter = false;
              ++t1.singleBytesCount_0;
            } else {
              t6 = t1.singleBytesCount_0;
              if (t6 > 0) {
                to = i0 - 1;
                t2.call$2(to - t6, to);
              }
              if (typeof unit !== "number")
                return unit.$and();
              if ((unit & 224) === 192) {
                value = unit & 31;
                expectedUnits = 1;
                extraUnits = 1;
                continue $loop$0;
              }
              if ((unit & 240) === 224) {
                value = unit & 15;
                expectedUnits = 2;
                extraUnits = 2;
                continue $loop$0;
              }
              if ((unit & 248) === 240 && unit < 245) {
                value = unit & 7;
                expectedUnits = 3;
                extraUnits = 3;
                continue $loop$0;
              }
              if (t4)
                throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + C.JSNumber_methods.toRadixString$1(unit, 16)));
              this._isFirstCharacter = false;
              t6 = H.Primitives_stringFromCharCode(65533);
              t3._contents += t6;
              value = 65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
          }
          break $loop$0;
        }
      t1 = t1.singleBytesCount_0;
      if (t1 > 0)
        t2.call$2(i - t1, endIndex);
      if (expectedUnits > 0) {
        this._convert$_value = value;
        this._expectedUnits = expectedUnits;
        this._extraUnits = extraUnits;
      }
    },
    static: {"^": "_Utf8Decoder__LIMITS"}
  },
  _Utf8Decoder_convert_addSingleBytes: {
    "^": "Closure:106;box_0,this_1,codeUnits_2",
    call$2: function(from, to) {
      var t1, t2, t3;
      t1 = from === 0 && J.$eq(to, J.get$length$asx(this.codeUnits_2));
      t2 = this.this_1;
      t3 = this.codeUnits_2;
      if (t1)
        t2._stringSink.write$1(P.String_String$fromCharCodes(t3));
      else
        t2._stringSink.write$1(P.String_String$fromCharCodes(J.sublist$2$ax(t3, from, to)));
      this.box_0.singleBytesCount_0 = 0;
    }
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  _symbolToString: function(symbol) {
    return H.Symbol_getName(symbol);
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 15],
  Error_safeToString: function(object) {
    var buffer, t1, i, t2, codeUnit;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0, t2 = "\""; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10)
            t2 = buffer._contents += "\\n";
          else if (codeUnit === 13)
            t2 = buffer._contents += "\\r";
          else if (codeUnit === 9)
            t2 = buffer._contents += "\\t";
          else {
            t2 = buffer._contents += "\\x";
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = H.Primitives_stringFromCharCode(codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit);
            t2 = buffer._contents += t2;
          }
        else if (codeUnit === 92)
          t2 = buffer._contents += "\\\\";
        else if (codeUnit === 34)
          t2 = buffer._contents += "\\\"";
        else {
          t2 = H.Primitives_stringFromCharCode(codeUnit);
          t2 = buffer._contents += t2;
        }
      }
      t1 = t2 + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 16],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 17],
  List_List$filled: function($length, fill, $E) {
    var result, t1, i;
    result = J.JSArray_JSArray$fixed($length, $E);
    if ($length !== 0 && true)
      for (t1 = result.length, i = 0; i < t1; ++i)
        result[i] = fill;
    return result;
  },
  List_List$from: function(other, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = init;
    return list;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  String_String$fromCharCodes: function(charCodes) {
    return H.Primitives_stringFromCharCodes(typeof charCodes !== "object" || charCodes === null || charCodes.constructor !== Array ? P.List_List$from(charCodes, true, null) : charCodes);
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:107;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(P._symbolToString(key));
    }
  },
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDateTime)
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    add$1: function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
    },
    $isDateTime: true,
    static: {"^": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH", DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }}
  },
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
    },
    $mul: function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
    },
    $tdiv: function(_, quotient) {
      if (J.$eq(quotient, 0))
        throw H.wrapException(P.IntegerDivisionByZeroException$());
      if (typeof quotient !== "number")
        return H.iae(quotient);
      return P.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return this._duration > other.get$_duration();
    },
    $le: function(_, other) {
      return this._duration <= other.get$_duration();
    },
    $ge: function(_, other) {
      return this._duration >= other.get$_duration();
    },
    get$inMilliseconds: function() {
      return C.JSNumber_methods._tdivFast$1(this._duration, 1000);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + P.Duration$(0, 0, -t2, 0, 0, 0).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
      return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure:108;",
    call$1: function(n) {
      if (n >= 100000)
        return H.S(n);
      if (n >= 10000)
        return "0" + H.S(n);
      if (n >= 1000)
        return "00" + H.S(n);
      if (n >= 100)
        return "000" + H.S(n);
      if (n >= 10)
        return "0000" + H.S(n);
      return "00000" + H.S(n);
    }
  },
  Duration_toString_twoDigits: {
    "^": "Closure:108;",
    call$1: function(n) {
      if (n >= 10)
        return H.S(n);
      return "0" + H.S(n);
    }
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + H.S(start) + ".." + H.S(end));
      }}
  },
  UnsupportedError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message",
    toString$0: function(_) {
      return "FormatException: " + H.S(this.message);
    },
    static: {FormatException$: function(message) {
        return new P.FormatException(message);
      }}
  },
  IntegerDivisionByZeroException: {
    "^": "Object;",
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    },
    static: {IntegerDivisionByZeroException$: function() {
        return new P.IntegerDivisionByZeroException();
      }}
  },
  Expando: {
    "^": "Object;name>",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"^": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Function: {
    "^": "Object;"
  },
  Iterator: {
    "^": "Object;"
  },
  Map: {
    "^": "Object;",
    $isMap: true
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    }
  },
  Pattern: {
    "^": "Object;"
  },
  StackTrace: {
    "^": "Object;"
  },
  Stopwatch: {
    "^": "Object;frequency,_core$_start,_stop",
    start$0: [function(_) {
      var t1, t2, t3;
      t1 = this._core$_start == null;
      if (!t1 && this._stop == null)
        return;
      if (t1)
        this._core$_start = H.Primitives_numMicroseconds();
      else {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._stop;
        t3 = this._core$_start;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._core$_start = t1 - (t2 - t3);
        this._stop = null;
      }
    }, "call$0", "get$start", 0, 0, 9],
    stop$0: function(_) {
      if (!(this._core$_start != null && this._stop == null))
        return;
      this._stop = H.Primitives_numMicroseconds();
    },
    get$elapsedTicks: function() {
      var t1, t2;
      t1 = this._core$_start;
      if (t1 == null)
        return 0;
      t2 = this._stop;
      if (t2 == null) {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._core$_start;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 - t2;
        t1 = t2;
      } else {
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = t2 - t1;
      }
      return t1;
    }
  },
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._contents.length !== 0;
    },
    write$1: function(obj) {
      this._contents += typeof obj === "string" ? obj : H.S(obj);
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        }
      }
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "^": "Object;"
  },
  Uri: {
    "^": "Object;_host,_port,_path,scheme,userInfo,query,fragment,_pathSegments,_queryParameters",
    get$host: function(_) {
      var t1;
      if (C.JSString_methods.startsWith$1(this._host, "[")) {
        t1 = this._host;
        return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
      }
      return this._host;
    },
    get$port: function(_) {
      var t1;
      if (J.$eq(this._port, 0)) {
        t1 = this.scheme;
        if (t1 === "http")
          return 80;
        if (t1 === "https")
          return 443;
      }
      return this._port;
    },
    _makePath$2: function(path, pathSegments) {
      var t1, result;
      t1 = path == null;
      if (t1 && true)
        return "";
      t1 = !t1;
      if (t1)
        ;
      result = t1 ? P.Uri__normalize(path) : C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure()).join$1(0, "/");
      if ((this.get$host(this) !== "" || this.scheme === "file") && result.length !== 0 && !C.JSString_methods.startsWith$1(result, "/"))
        return "/" + result;
      return result;
    },
    toString$0: function(_) {
      var sb, t1;
      sb = P.StringBuffer$("");
      t1 = this.scheme;
      if ("" !== t1) {
        sb.write$1(t1);
        sb.write$1(":");
      }
      if (this.get$host(this) !== "" || t1 === "file") {
        sb.write$1("//");
        t1 = this.userInfo;
        if ("" !== t1) {
          sb.write$1(t1);
          sb.write$1("@");
        }
        sb.write$1(this._host);
        if (!J.$eq(this._port, 0)) {
          sb.write$1(":");
          sb.write$1(J.toString$0(this._port));
        }
      }
      sb.write$1(this._path);
      t1 = this.query;
      if ("" !== t1) {
        sb.write$1("?");
        sb.write$1(t1);
      }
      t1 = this.fragment;
      if ("" !== t1) {
        sb.write$1("#");
        sb.write$1(t1);
      }
      return sb._contents;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isUri)
        return false;
      if (this.scheme === other.scheme)
        if (this.userInfo === other.userInfo)
          if (this.get$host(this) === t1.get$host(other))
            if (J.$eq(this.get$port(this), t1.get$port(other))) {
              t1 = this._path;
              t2 = other._path;
              t1 = (t1 == null ? t2 == null : t1 === t2) && this.query === other.query && this.fragment === other.fragment;
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = new P.Uri_hashCode_combine();
      return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.get$host(this), t1.call$2(this.get$port(this), t1.call$2(this._path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
    },
    Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
      if (scheme === "http" && J.$eq(port, 80))
        this._port = 0;
      else if (scheme === "https" && J.$eq(port, 443))
        this._port = 0;
      else
        this._port = port;
      this._path = this._makePath$2(path, pathSegments);
    },
    $isUri: true,
    static: {"^": "Uri__SPACE,Uri__DOUBLE_QUOTE,Uri__NUMBER_SIGN,Uri__PERCENT,Uri__ASTERISK,Uri__PLUS,Uri__SLASH,Uri__ZERO,Uri__NINE,Uri__COLON,Uri__LESS,Uri__GREATER,Uri__QUESTION,Uri__AT_SIGN,Uri__UPPER_CASE_A,Uri__UPPER_CASE_F,Uri__UPPER_CASE_Z,Uri__LEFT_BRACKET,Uri__BACKSLASH,Uri__RIGHT_BRACKET,Uri__LOWER_CASE_A,Uri__LOWER_CASE_F,Uri__LOWER_CASE_Z,Uri__BAR,Uri__unreservedTable,Uri__unreserved2396Table,Uri__encodeFullTable,Uri__schemeTable,Uri__schemeLowerTable,Uri__subDelimitersTable,Uri__regNameTable,Uri__pathCharTable,Uri__queryCharTable", Uri_parse: function(uri) {
        var port, portStr, t1, t2, $length, index, schemeEndIndex, index0, codeUnit, t3, authorityEndIndex, portIndex, userInfoEndIndex, authorityEndIndex0, pathEndIndex, pathEndIndex0, queryEndIndex, queryEndIndex0, scheme, startIndex, userInfo, exception, host, path, query, fragment;
        t1 = new P.Uri_parse_isRegName();
        t2 = new P.Uri_parse_ipV6Address(uri);
        $length = uri.length;
        if ($length === 0)
          return P.Uri$("", "", null, null, 0, null, null, null, "");
        if (C.JSString_methods.codeUnitAt$1(uri, 0) !== 47)
          for (index = 0; schemeEndIndex = 0, index < $length; index = index0) {
            index0 = index + 1;
            if (index >= $length)
              H.throwExpression(P.RangeError$value(index));
            codeUnit = uri.charCodeAt(index);
            if (codeUnit < 128) {
              t3 = codeUnit >>> 4;
              if (t3 >= 8)
                return H.ioore(C.List_JYB, t3);
              t3 = J.$and$n(C.List_JYB[t3], C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t3 = false;
            if (!t3) {
              if (codeUnit === 58) {
                schemeEndIndex = index0;
                index = schemeEndIndex;
              } else {
                index = index0 - 1;
                schemeEndIndex = 0;
              }
              break;
            }
          }
        else {
          index = 0;
          schemeEndIndex = 0;
        }
        if (schemeEndIndex === index) {
          t3 = schemeEndIndex + 1;
          t3 = t3 < $length && C.JSString_methods.codeUnitAt$1(uri, schemeEndIndex) === 47 && C.JSString_methods.codeUnitAt$1(uri, t3) === 47;
        } else
          t3 = false;
        if (t3) {
          authorityEndIndex = schemeEndIndex + 2;
          for (portIndex = -1; t3 = J.getInterceptor$n(authorityEndIndex), userInfoEndIndex = -1, t3.$lt(authorityEndIndex, $length);) {
            authorityEndIndex0 = t3.$add(authorityEndIndex, 1);
            if (typeof authorityEndIndex !== "number" || Math.floor(authorityEndIndex) !== authorityEndIndex)
              H.throwExpression(P.ArgumentError$(authorityEndIndex));
            if (t3.$lt(authorityEndIndex, 0))
              H.throwExpression(P.RangeError$value(authorityEndIndex));
            if (t3.$ge(authorityEndIndex, $length))
              H.throwExpression(P.RangeError$value(authorityEndIndex));
            codeUnit = uri.charCodeAt(authorityEndIndex);
            if (t1.call$1(codeUnit) !== true)
              if (codeUnit === 91)
                authorityEndIndex = t2.call$1(authorityEndIndex0);
              else {
                if (J.$eq(portIndex, -1) && codeUnit === 58)
                  ;
                else {
                  t3 = codeUnit === 64 || codeUnit === 58;
                  authorityEndIndex = authorityEndIndex0 - 1;
                  if (t3) {
                    userInfoEndIndex = C.JSString_methods.indexOf$2(uri, "@", authorityEndIndex);
                    if (userInfoEndIndex === -1) {
                      authorityEndIndex = index;
                      break;
                    }
                    authorityEndIndex = userInfoEndIndex + 1;
                    for (portIndex = -1; t3 = J.getInterceptor$n(authorityEndIndex), t3.$lt(authorityEndIndex, $length);) {
                      authorityEndIndex0 = t3.$add(authorityEndIndex, 1);
                      if (typeof authorityEndIndex !== "number" || Math.floor(authorityEndIndex) !== authorityEndIndex)
                        H.throwExpression(P.ArgumentError$(authorityEndIndex));
                      if (t3.$lt(authorityEndIndex, 0))
                        H.throwExpression(P.RangeError$value(authorityEndIndex));
                      if (t3.$ge(authorityEndIndex, $length))
                        H.throwExpression(P.RangeError$value(authorityEndIndex));
                      codeUnit = uri.charCodeAt(authorityEndIndex);
                      if (t1.call$1(codeUnit) !== true)
                        if (codeUnit === 91)
                          authorityEndIndex = t2.call$1(authorityEndIndex0);
                        else {
                          if (codeUnit === 58) {
                            if (!J.$eq(portIndex, -1))
                              throw H.wrapException(P.FormatException$("Double port in host"));
                          } else {
                            authorityEndIndex = authorityEndIndex0 - 1;
                            break;
                          }
                          authorityEndIndex = authorityEndIndex0;
                          portIndex = authorityEndIndex;
                        }
                      else
                        authorityEndIndex = authorityEndIndex0;
                    }
                    break;
                  } else {
                    userInfoEndIndex = -1;
                    break;
                  }
                }
                authorityEndIndex = authorityEndIndex0;
                portIndex = authorityEndIndex;
              }
            else
              authorityEndIndex = authorityEndIndex0;
          }
        } else {
          authorityEndIndex = schemeEndIndex;
          userInfoEndIndex = -1;
          portIndex = -1;
        }
        for (pathEndIndex = authorityEndIndex; t1 = J.getInterceptor$n(pathEndIndex), t1.$lt(pathEndIndex, $length); pathEndIndex = pathEndIndex0) {
          pathEndIndex0 = t1.$add(pathEndIndex, 1);
          if (typeof pathEndIndex !== "number" || Math.floor(pathEndIndex) !== pathEndIndex)
            H.throwExpression(P.ArgumentError$(pathEndIndex));
          if (t1.$lt(pathEndIndex, 0))
            H.throwExpression(P.RangeError$value(pathEndIndex));
          if (t1.$ge(pathEndIndex, $length))
            H.throwExpression(P.RangeError$value(pathEndIndex));
          codeUnit = uri.charCodeAt(pathEndIndex);
          if (codeUnit === 63 || codeUnit === 35) {
            pathEndIndex = pathEndIndex0 - 1;
            break;
          }
        }
        t1 = J.getInterceptor$n(pathEndIndex);
        if (t1.$lt(pathEndIndex, $length) && C.JSString_methods.codeUnitAt$1(uri, pathEndIndex) === 63)
          for (queryEndIndex = pathEndIndex; t2 = J.getInterceptor$n(queryEndIndex), t2.$lt(queryEndIndex, $length); queryEndIndex = queryEndIndex0) {
            queryEndIndex0 = t2.$add(queryEndIndex, 1);
            if (typeof queryEndIndex !== "number" || Math.floor(queryEndIndex) !== queryEndIndex)
              H.throwExpression(P.ArgumentError$(queryEndIndex));
            if (t2.$lt(queryEndIndex, 0))
              H.throwExpression(P.RangeError$value(queryEndIndex));
            if (t2.$ge(queryEndIndex, $length))
              H.throwExpression(P.RangeError$value(queryEndIndex));
            if (uri.charCodeAt(queryEndIndex) === 35) {
              queryEndIndex = queryEndIndex0 - 1;
              break;
            }
          }
        else
          queryEndIndex = pathEndIndex;
        scheme = schemeEndIndex > 0 ? C.JSString_methods.substring$2(uri, 0, schemeEndIndex - 1) : null;
        port = 0;
        if (schemeEndIndex !== authorityEndIndex) {
          startIndex = schemeEndIndex + 2;
          if (userInfoEndIndex > 0) {
            userInfo = C.JSString_methods.substring$2(uri, startIndex, userInfoEndIndex);
            startIndex = userInfoEndIndex + 1;
          } else
            userInfo = "";
          t2 = J.getInterceptor$n(portIndex);
          if (t2.$gt(portIndex, 0)) {
            portStr = C.JSString_methods.substring$2(uri, portIndex, authorityEndIndex);
            try {
              port = H.Primitives_parseInt(portStr, null, null);
            } catch (exception) {
              H.unwrapException(exception);
              throw H.wrapException(P.FormatException$("Invalid port: '" + H.S(portStr) + "'"));
            }

            host = C.JSString_methods.substring$2(uri, startIndex, t2.$sub(portIndex, 1));
          } else
            host = C.JSString_methods.substring$2(uri, startIndex, authorityEndIndex);
        } else {
          host = "";
          userInfo = "";
        }
        path = C.JSString_methods.substring$2(uri, authorityEndIndex, pathEndIndex);
        query = t1.$lt(pathEndIndex, queryEndIndex) ? C.JSString_methods.substring$2(uri, t1.$add(pathEndIndex, 1), queryEndIndex) : "";
        t1 = J.getInterceptor$n(queryEndIndex);
        fragment = t1.$lt(queryEndIndex, $length) ? C.JSString_methods.substring$2(uri, t1.$add(queryEndIndex, 1), $length) : "";
        return P.Uri$(fragment, host, path, null, port, query, null, scheme, userInfo);
      }, Uri$: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
        var t1 = P.Uri__makeScheme(scheme);
        t1 = new P.Uri(P.Uri__makeHost(host), null, null, t1, userInfo, P.Uri__makeQuery(query, queryParameters), P.Uri__makeFragment(fragment), null, null);
        t1.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo);
        return t1;
      }, Uri__makeHost: function(host) {
        var t1, i;
        if (host.length === 0)
          return host;
        if (C.JSString_methods.codeUnitAt$1(host, 0) === 91) {
          t1 = host.length - 1;
          if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
            throw H.wrapException(P.FormatException$("Missing end `]` to match `[` in host"));
          P.Uri_parseIPv6Address(C.JSString_methods.substring$2(host, 1, t1));
          return host;
        }
        for (t1 = host.length, i = 0; i < t1; ++i) {
          if (i >= t1)
            H.throwExpression(P.RangeError$value(i));
          if (host.charCodeAt(i) === 58) {
            P.Uri_parseIPv6Address(host);
            return "[" + host + "]";
          }
        }
        return host;
      }, Uri__makeScheme: function(scheme) {
        var t1, $length, allLowercase, i, codeUnit, t2;
        t1 = new P.Uri__makeScheme_isSchemeLowerCharacter();
        if (scheme == null)
          return "";
        $length = scheme.length;
        for (allLowercase = true, i = 0; i < $length; ++i) {
          if (i >= $length)
            H.throwExpression(P.RangeError$value(i));
          codeUnit = scheme.charCodeAt(i);
          if (i === 0) {
            if (!(codeUnit >= 97 && codeUnit <= 122))
              t2 = codeUnit >= 65 && codeUnit <= 90;
            else
              t2 = true;
            t2 = !t2;
          } else
            t2 = false;
          if (t2)
            throw H.wrapException(P.ArgumentError$("Illegal scheme: " + scheme));
          if (t1.call$1(codeUnit) !== true) {
            if (codeUnit < 128) {
              t2 = codeUnit >>> 4;
              if (t2 >= 8)
                return H.ioore(C.List_JYB, t2);
              t2 = J.$and$n(C.List_JYB[t2], C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t2 = false;
            if (t2)
              ;
            else
              throw H.wrapException(P.ArgumentError$("Illegal scheme: " + scheme));
            allLowercase = false;
          }
        }
        return allLowercase ? scheme : scheme.toLowerCase();
      }, Uri__makeQuery: function(query, queryParameters) {
        var t1, t2, result;
        t1 = {};
        t2 = query == null;
        if (t2 && true)
          return "";
        t2 = !t2;
        if (t2)
          ;
        if (t2)
          return P.Uri__normalize(query);
        result = P.StringBuffer$("");
        t1.first_0 = true;
        C.JSNull_methods.forEach$1(queryParameters, new P.Uri__makeQuery_closure(t1, result));
        return result._contents;
      }, Uri__makeFragment: function(fragment) {
        return P.Uri__normalize(fragment);
      }, Uri__normalize: function(component) {
        var t1, index, t2, t3, t4, t5, $length, t6, t7, codeUnit1, codeUnit2, decodedCodeUnit, t8, next;
        t1 = {};
        index = J.getInterceptor$asx(component).indexOf$1(component, "%");
        t1.index_0 = index;
        if (index < 0)
          return component;
        t2 = new P.Uri__normalize_isNormalizedHexDigit();
        t3 = new P.Uri__normalize_isUnreserved();
        t4 = new P.Uri__normalize_normalizeHexDigit(component, t2, new P.Uri__normalize_isLowerCaseHexDigit());
        t5 = new P.Uri__normalize_decodeHexDigitPair(component);
        t1.result_1 = null;
        $length = component.length;
        t1.prevIndex_2 = 0;
        t6 = new P.Uri__normalize_fillResult(t1, component);
        for (t7 = index; t7 < $length;) {
          if ($length < t7 + 2)
            throw H.wrapException(P.ArgumentError$("Invalid percent-encoding in URI component: " + component));
          ++t7;
          if (t7 < 0)
            H.throwExpression(P.RangeError$value(t7));
          if (t7 >= $length)
            H.throwExpression(P.RangeError$value(t7));
          codeUnit1 = component.charCodeAt(t7);
          t7 = t1.index_0 + 2;
          if (t7 < 0)
            H.throwExpression(P.RangeError$value(t7));
          if (t7 >= $length)
            H.throwExpression(P.RangeError$value(t7));
          codeUnit2 = component.charCodeAt(t7);
          decodedCodeUnit = t5.call$1(t1.index_0 + 1);
          if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true)
            t7 = t1.index_0 += 3;
          else {
            t6.call$0();
            t7 = t3.call$1(decodedCodeUnit);
            t8 = t1.result_1;
            if (t7 === true) {
              t8.toString;
              t7 = H.Primitives_stringFromCharCode(decodedCodeUnit);
              t8._contents += t7;
            } else {
              t8.toString;
              t8._contents += "%";
              t7 = t4.call$1(t1.index_0 + 1);
              t8.toString;
              t7 = H.Primitives_stringFromCharCode(t7);
              t8._contents += t7;
              t7 = t1.result_1;
              t8 = t4.call$1(t1.index_0 + 2);
              t7.toString;
              t8 = H.Primitives_stringFromCharCode(t8);
              t7._contents += t8;
            }
            t7 = t1.index_0 += 3;
            t1.prevIndex_2 = t7;
          }
          next = C.JSString_methods.indexOf$2(component, "%", t7);
          if (next >= t1.index_0) {
            t1.index_0 = next;
            t7 = next;
          } else {
            t1.index_0 = $length;
            t7 = $length;
          }
        }
        if (t1.result_1 == null)
          return component;
        if (t1.prevIndex_2 !== t7)
          t6.call$0();
        return J.toString$0(t1.result_1);
      }, Uri_parseIPv4Address: function(host) {
        var t1, bytes;
        t1 = new P.Uri_parseIPv4Address_error();
        bytes = host.split(".");
        if (bytes.length !== 4)
          t1.call$1("IPv4 address should contain exactly 4 parts");
        return H.setRuntimeTypeInfo(new H.MappedListIterable(bytes, new P.Uri_parseIPv4Address_closure(t1)), [null, null]).toList$0(0);
      }, Uri_parseIPv6Address: function(host) {
        var error, parseHex, parts, partStart, last, wildcardSeen, i, t1, t2, atEnd, isLastWildcard, exception;
        error = new P.Uri_parseIPv6Address_error();
        parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
        if (J.get$length$asx(host) < 2)
          error.call$1("address is too short");
        parts = [];
        partStart = 0;
        wildcardSeen = false;
        i = 0;
        while (true) {
          t1 = J.get$length$asx(host);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = host;
          t2 = J.get$length$asx(t1);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (i >= t2)
            H.throwExpression(P.RangeError$value(i));
          if (t1.charCodeAt(i) === 58) {
            if (i === 0) {
              ++i;
              t1 = host;
              if (i >= J.get$length$asx(t1))
                H.throwExpression(P.RangeError$value(i));
              if (t1.charCodeAt(i) !== 58)
                error.call$1("invalid start colon.");
              partStart = i;
            }
            if (i === partStart) {
              if (wildcardSeen)
                error.call$1("only one wildcard `::` is allowed");
              J.add$1$ax(parts, -1);
              wildcardSeen = true;
            } else
              J.add$1$ax(parts, parseHex.call$2(partStart, i));
            partStart = i + 1;
          }
          ++i;
        }
        if (J.get$length$asx(parts) === 0)
          error.call$1("too few parts");
        atEnd = J.$eq(partStart, J.get$length$asx(host));
        isLastWildcard = J.$eq(J.get$last$ax(parts), -1);
        if (atEnd && !isLastWildcard)
          error.call$1("expected a part after last `:`");
        if (!atEnd)
          try {
            J.add$1$ax(parts, parseHex.call$2(partStart, J.get$length$asx(host)));
          } catch (exception) {
            H.unwrapException(exception);
            try {
              last = P.Uri_parseIPv4Address(J.substring$1$s(host, partStart));
              t1 = J.$index$asx(last, 0);
              if (typeof t1 !== "number")
                return t1.$shl();
              t2 = J.$index$asx(last, 1);
              if (typeof t2 !== "number")
                return H.iae(t2);
              J.add$1$ax(parts, (t1 << 8 | t2) >>> 0);
              t2 = J.$index$asx(last, 2);
              if (typeof t2 !== "number")
                return t2.$shl();
              t1 = J.$index$asx(last, 3);
              if (typeof t1 !== "number")
                return H.iae(t1);
              J.add$1$ax(parts, (t2 << 8 | t1) >>> 0);
            } catch (exception) {
              H.unwrapException(exception);
              error.call$1("invalid end of IPv6 address.");
            }

          }

        if (wildcardSeen) {
          if (J.get$length$asx(parts) > 7)
            error.call$1("an address with a wildcard must have less than 7 parts");
        } else if (J.get$length$asx(parts) !== 8)
          error.call$1("an address without a wildcard must contain exactly 8 parts");
        t1 = new H.ExpandIterable(parts, new P.Uri_parseIPv6Address_closure(parts));
        t1.$builtinTypeInfo = [null, null];
        return P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
      }, Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
        var t1, result, bytes, i, $byte, t2, t3;
        t1 = new P.Uri__uriEncode_byteToHex();
        result = P.StringBuffer$("");
        bytes = encoding.get$encoder().convert$1(text);
        for (i = 0; i < bytes.length; ++i) {
          $byte = bytes[i];
          t2 = J.getInterceptor$n($byte);
          if (t2.$lt($byte, 128)) {
            if (typeof $byte !== "number")
              return $byte.$shr();
            t3 = C.JSNumber_methods._shrOtherPositive$1($byte, 4);
            if (t3 >= 8)
              return H.ioore(canonicalTable, t3);
            t3 = J.$and$n(canonicalTable[t3], C.JSInt_methods._shlPositive$1(1, $byte & 15)) !== 0;
          } else
            t3 = false;
          if (t3) {
            t2 = H.Primitives_stringFromCharCode($byte);
            result._contents += t2;
          } else if (spaceToPlus && t2.$eq($byte, 32)) {
            t2 = H.Primitives_stringFromCharCode(43);
            result._contents += t2;
          } else {
            t2 = H.Primitives_stringFromCharCode(37);
            result._contents += t2;
            t1.call$2($byte, result);
          }
        }
        return result._contents;
      }}
  },
  Uri_parse_isRegName: {
    "^": "Closure:109;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = ch >>> 4;
        if (t1 >= 8)
          return H.ioore(C.List_qNA, t1);
        t1 = J.$and$n(C.List_qNA[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }
  },
  Uri_parse_ipV6Address: {
    "^": "Closure:110;uri_0",
    call$1: function(index) {
      index = C.JSString_methods.indexOf$2(this.uri_0, "]", index);
      if (index === -1)
        throw H.wrapException(P.FormatException$("Bad end of IPv6 host"));
      return index + 1;
    }
  },
  Uri__makeScheme_isSchemeLowerCharacter: {
    "^": "Closure:109;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = ch >>> 4;
        if (t1 >= 8)
          return H.ioore(C.List_6Pr, t1);
        t1 = J.$and$n(C.List_6Pr[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }
  },
  Uri__makePath_closure: {
    "^": "Closure:92;",
    call$1: function(s) {
      return P.Uri__uriEncode(C.List_qg4, s, C.Utf8Codec_false, false);
    }
  },
  Uri__makeQuery_closure: {
    "^": "Closure:93;box_0,result_1",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1("&");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(P.Uri__uriEncode(C.List_nxB, key, C.Utf8Codec_false, true));
      value.get$isEmpty(value);
      t1.write$1("=");
      t1.write$1(P.Uri__uriEncode(C.List_nxB, value, C.Utf8Codec_false, true));
    }
  },
  Uri__normalize_isNormalizedHexDigit: {
    "^": "Closure:109;",
    call$1: function(digit) {
      var t1;
      if (!(48 <= digit && digit <= 57))
        t1 = 65 <= digit && digit <= 70;
      else
        t1 = true;
      return t1;
    }
  },
  Uri__normalize_isLowerCaseHexDigit: {
    "^": "Closure:109;",
    call$1: function(digit) {
      return 97 <= digit && digit <= 102;
    }
  },
  Uri__normalize_isUnreserved: {
    "^": "Closure:109;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = C.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = J.$and$n(C.List_nxB[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }
  },
  Uri__normalize_normalizeHexDigit: {
    "^": "Closure:110;component_1,isNormalizedHexDigit_2,isLowerCaseHexDigit_3",
    call$1: function(index) {
      var t1, codeUnit;
      t1 = this.component_1;
      codeUnit = C.JSString_methods.codeUnitAt$1(t1, index);
      if (this.isLowerCaseHexDigit_3.call$1(codeUnit) === true)
        return codeUnit - 32;
      else if (this.isNormalizedHexDigit_2.call$1(codeUnit) !== true)
        throw H.wrapException(P.ArgumentError$("Invalid URI component: " + t1));
      else
        return codeUnit;
    }
  },
  Uri__normalize_decodeHexDigitPair: {
    "^": "Closure:110;component_4",
    call$1: function(index) {
      var t1, $byte, i, t2, codeUnit;
      for (t1 = this.component_4, $byte = 0, i = 0; i < 2; ++i) {
        t2 = index + i;
        if (t2 < 0)
          H.throwExpression(P.RangeError$value(t2));
        if (t2 >= t1.length)
          H.throwExpression(P.RangeError$value(t2));
        codeUnit = t1.charCodeAt(t2);
        if (48 <= codeUnit && codeUnit <= 57)
          $byte = $byte * 16 + codeUnit - 48;
        else {
          codeUnit |= 32;
          if (97 <= codeUnit && codeUnit <= 102)
            $byte = $byte * 16 + codeUnit - 97 + 10;
          else
            throw H.wrapException(P.ArgumentError$("Invalid percent-encoding in URI component: " + t1));
        }
      }
      return $byte;
    }
  },
  Uri__normalize_fillResult: {
    "^": "Closure:9;box_0,component_5",
    call$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.box_0;
      t2 = t1.result_1;
      t3 = t1.prevIndex_2;
      t4 = this.component_5;
      t5 = t1.index_0;
      if (t2 == null)
        t1.result_1 = P.StringBuffer$(C.JSString_methods.substring$2(t4, t3, t5));
      else
        t2.write$1(C.JSString_methods.substring$2(t4, t3, t5));
    }
  },
  Uri_hashCode_combine: {
    "^": "Closure:111;",
    call$2: function(part, current) {
      var t1 = J.get$hashCode$(part);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return current * 31 + t1 & 1073741823;
    }
  },
  Uri_parseIPv4Address_error: {
    "^": "Closure:112;",
    call$1: function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg));
    }
  },
  Uri_parseIPv4Address_closure: {
    "^": "Closure:92;error_0",
    call$1: function(byteString) {
      var $byte, t1;
      $byte = H.Primitives_parseInt(byteString, null, null);
      t1 = J.getInterceptor$n($byte);
      if (t1.$lt($byte, 0) || t1.$gt($byte, 255))
        this.error_0.call$1("each part must be in the range of `0..255`");
      return $byte;
    }
  },
  Uri_parseIPv6Address_error: {
    "^": "Closure:112;",
    call$1: function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg));
    }
  },
  Uri_parseIPv6Address_parseHex: {
    "^": "Closure:113;host_0,error_1",
    call$2: function(start, end) {
      var value, t1;
      if (end - start > 4)
        this.error_1.call$1("an IPv6 part can only contain a maximum of 4 hex digits");
      value = H.Primitives_parseInt(C.JSString_methods.substring$2(this.host_0, start, end), 16, null);
      t1 = J.getInterceptor$n(value);
      if (t1.$lt(value, 0) || t1.$gt(value, 65535))
        this.error_1.call$1("each part must be in the range of `0x0..0xFFFF`");
      return value;
    }
  },
  Uri_parseIPv6Address_closure: {
    "^": "Closure:92;parts_2",
    call$1: function(value) {
      if (J.getInterceptor(value).$eq(value, -1))
        return P.List_List$filled((9 - this.parts_2.length) * 2, 0, null);
      else {
        if (typeof value !== "number")
          return value.$shr();
        return [C.JSNumber_methods._shrOtherPositive$1(value, 8) & 255, value & 255];
      }
    }
  },
  Uri__uriEncode_byteToHex: {
    "^": "Closure:93;",
    call$2: function($byte, buffer) {
      if (typeof $byte !== "number")
        return $byte.$shr();
      buffer.write$1(H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", C.JSNumber_methods._shrOtherPositive$1($byte, 4))));
      buffer.write$1(H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte & 15)));
    }
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  Element_Element$html: function(html, treeSanitizer, validator) {
    var fragment, t1;
    fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1 = t1.where$1(t1, new W.Element_Element$html_closure());
    return t1.get$single(t1);
  },
  HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
    var t1, completer, xhr;
    t1 = W.HttpRequest;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
    xhr = new XMLHttpRequest();
    C.HttpRequest_methods.open$3$async(xhr, method, url, true);
    xhr.overrideMimeType(mimeType);
    t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, C.EventStreamProvider_load._eventType, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, C.EventStreamProvider_error._eventType, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(completer.get$completeError()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    xhr.send();
    return completer.future;
  },
  Window__isDartLocation: function(thing) {
    var exception;
    try {
      return !!J.getInterceptor(thing).$isLocation;
    } catch (exception) {
      H.unwrapException(exception);
      return false;
    }

  },
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _convertNativeToDart_XHR_Response: function(o) {
    if (!!J.getInterceptor(o).$isDocument)
      return o;
    return P.convertNativeToDart_AcceptStructuredClone(o, true);
  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    if (callback == null)
      return;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "^": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  AnchorElement: {
    "^": "HtmlElement;type=,hostname=,href},port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "^": "HtmlElement;hostname=,href},port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAreaElement"
  },
  BaseElement: {
    "^": "HtmlElement;href}",
    "%": "HTMLBaseElement"
  },
  Blob: {
    "^": "Interceptor;size=,type=",
    "%": ";Blob"
  },
  BodyElement: {
    "^": "HtmlElement;",
    $isBodyElement: true,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "^": "HtmlElement;name=,type=,value=",
    "%": "HTMLButtonElement"
  },
  CanvasElement: {
    "^": "HtmlElement;height%,width%",
    get$context2D: function(receiver) {
      return receiver.getContext("2d");
    },
    "%": "HTMLCanvasElement"
  },
  CanvasRenderingContext: {
    "^": "Interceptor;",
    "%": ";CanvasRenderingContext"
  },
  CanvasRenderingContext2D: {
    "^": "CanvasRenderingContext;",
    putImageData$7: function(receiver, imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
      receiver.putImageData(P.convertDartToNative_ImageData(imagedata), dx, dy);
      return;
    },
    putImageData$3: function($receiver, imagedata, dx, dy) {
      return this.putImageData$7($receiver, imagedata, dx, dy, null, null, null, null);
    },
    "%": "CanvasRenderingContext2D"
  },
  CharacterData: {
    "^": "Node;data=,length=",
    length$0: function($receiver) {
      return $receiver.length.call$0();
    },
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  CompositionEvent: {
    "^": "UIEvent;data=",
    "%": "CompositionEvent"
  },
  Document: {
    "^": "Node;",
    $isDocument: true,
    "%": "Document|HTMLDocument|XMLDocument"
  },
  DocumentFragment: {
    "^": "Node;",
    get$children: function(receiver) {
      if (receiver._docChildren == null)
        receiver._docChildren = H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [null]);
      return receiver._docChildren;
    },
    "%": "DocumentFragment|ShadowRoot"
  },
  DomError: {
    "^": "Interceptor;name=",
    "%": "DOMError|FileError"
  },
  DomException: {
    "^": "Interceptor;",
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMException"
  },
  Element: {
    "^": "Node;id=",
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, base, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          t2 = new W.NodeValidatorBuilder(t1);
          t1.push(W._Html5NodeValidator$(null));
          t1.push(W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document.implementation.createHTMLDocument("");
        $.Element__parseDocument = t1;
        $.Element__parseRange = t1.createRange();
        base = $.Element__parseDocument.createElement("base", null);
        J.set$href$x(base, document.baseURI);
        $.Element__parseDocument.head.appendChild(base);
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName, null);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    $isElement: true,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;height%,name=,type=,width%",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "^": "Event;error=",
    "%": "ErrorEvent"
  },
  Event: {
    "^": "Interceptor;type=",
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|InstallPhaseEvent|MIDIConnectionEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;Event"
  },
  EventTarget: {
    "^": "Interceptor;",
    addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    "%": ";EventTarget"
  },
  FieldSetElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLFieldSetElement"
  },
  File: {
    "^": "Blob;name=",
    "%": "File"
  },
  FormElement: {
    "^": "HtmlElement;length=,name=",
    length$0: function($receiver) {
      return $receiver.length.call$0();
    },
    "%": "HTMLFormElement"
  },
  HtmlCollection: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;",
    get$response: function(receiver) {
      return W._convertNativeToDart_XHR_Response(receiver.response);
    },
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    "%": ";XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;height%,name=,width%",
    "%": "HTMLIFrameElement"
  },
  ImageData: {
    "^": "Interceptor;data=,height=,width=",
    $isImageData: true,
    "%": "ImageData"
  },
  ImageElement: {
    "^": "HtmlElement;height%,width%",
    "%": "HTMLImageElement"
  },
  InputElement: {
    "^": "HtmlElement;height%,name=,size=,type=,value=,width%",
    $isElement: true,
    "%": "HTMLInputElement"
  },
  KeygenElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "^": "HtmlElement;value=",
    "%": "HTMLLIElement"
  },
  LinkElement: {
    "^": "HtmlElement;href},type=",
    "%": "HTMLLinkElement"
  },
  Location: {
    "^": "Interceptor;hostname=,port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    $isLocation: true,
    "%": "Location"
  },
  MapElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "^": "HtmlElement;error=",
    "%": "HTMLAudioElement;HTMLMediaElement"
  },
  MediaStream: {
    "^": "EventTarget;id=",
    "%": "MediaStream"
  },
  MessageEvent: {
    "^": "Event;",
    get$data: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
    },
    "%": "MessageEvent"
  },
  MetaElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLMetaElement"
  },
  MeterElement: {
    "^": "HtmlElement;value=",
    "%": "HTMLMeterElement"
  },
  MidiMessageEvent: {
    "^": "Event;data=",
    "%": "MIDIMessageEvent"
  },
  MidiOutput: {
    "^": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "^": "EventTarget;id=,name=,type=",
    "%": "MIDIInput;MIDIPort"
  },
  NavigatorUserMediaError: {
    "^": "Interceptor;name=",
    "%": "NavigatorUserMediaError"
  },
  Node: {
    "^": "EventTarget;",
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }

      return receiver;
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    _replaceChild$2: function(receiver, newChild, oldChild) {
      return receiver.replaceChild(newChild, oldChild);
    },
    "%": "DocumentType|Notation;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "NodeList|RadioNodeList"
  },
  OListElement: {
    "^": "HtmlElement;start%,type=",
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "^": "HtmlElement;data=,height%,name=,type=,width%",
    "%": "HTMLObjectElement"
  },
  OptionElement: {
    "^": "HtmlElement;value=",
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "^": "HtmlElement;name=,type=,value=",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "^": "HtmlElement;name=,value=",
    "%": "HTMLParamElement"
  },
  ProgressElement: {
    "^": "HtmlElement;value=",
    "%": "HTMLProgressElement"
  },
  ProgressEvent: {
    "^": "Event;",
    "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
  },
  Range: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Range"
  },
  ScriptElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;length%,name=,size=,type=,value=",
    length$0: function($receiver) {
      return $receiver.length.call$0();
    },
    "%": "HTMLSelectElement"
  },
  SourceElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLSourceElement"
  },
  SpeechRecognitionError: {
    "^": "Event;error=",
    "%": "SpeechRecognitionError"
  },
  SpeechSynthesisEvent: {
    "^": "Event;name=",
    "%": "SpeechSynthesisEvent"
  },
  StyleElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLStyleElement"
  },
  TemplateElement: {
    "^": "HtmlElement;",
    $isTemplateElement: true,
    "%": "HTMLTemplateElement"
  },
  TextAreaElement: {
    "^": "HtmlElement;name=,type=,value=",
    "%": "HTMLTextAreaElement"
  },
  TextEvent: {
    "^": "UIEvent;data=",
    "%": "TextEvent"
  },
  UIEvent: {
    "^": "Event;",
    "%": "DragEvent|FocusEvent|KeyboardEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|SVGZoomEvent|TouchEvent|WheelEvent;UIEvent"
  },
  VideoElement: {
    "^": "MediaElement;height%,width%",
    "%": "HTMLVideoElement"
  },
  Window: {
    "^": "EventTarget;name=",
    get$location: function(receiver) {
      var result = receiver.location;
      if (W.Window__isDartLocation(result) === true)
        return result;
      if (null == receiver._location_wrapper)
        receiver._location_wrapper = new W._LocationWrapper(result);
      return receiver._location_wrapper;
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMWindow|Window"
  },
  _Attr: {
    "^": "Node;name=,value=",
    "%": "Attr"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4, hash;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      t4 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4);
      hash = 536870911 & t4 + ((67108863 & t4) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": "ClientRect|DOMRect"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  _ChildrenElementList: {
    "^": "ListBase;_element,_childElements",
    get$isEmpty: function(_) {
      return this._element.firstElementChild == null;
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, index) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      this._element.replaceChild(value, t1[index]);
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      this._element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return new H.ListIterator(t1, t1.length, 0, null);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort element lists"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    fillRange$3: function(_, start, end, fillValue) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    get$first: function(_) {
      var result = this._element.firstElementChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._element.lastElementChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    }
  },
  Element_Element$html_closure: {
    "^": "Closure:92;",
    call$1: function(e) {
      return !!J.getInterceptor(e).$isElement;
    }
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  HttpRequest_request_closure0: {
    "^": "Closure:93;xhr_0",
    call$2: function(header, value) {
      this.xhr_0.setRequestHeader(header, value);
    }
  },
  HttpRequest_request_closure: {
    "^": "Closure:92;completer_1,xhr_2",
    call$1: function(e) {
      var t1, t2, t3;
      t1 = this.xhr_2;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
      t3 = this.completer_1;
      if (t2) {
        t2 = t3.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
      } else
        t3.completeError$1(e);
    }
  },
  _ChildNodeListLazy: {
    "^": "ListBase;_this",
    get$first: function(_) {
      var result = this._this.firstChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._this.lastChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    add$1: function(_, value) {
      this._this.appendChild(value);
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort Node list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
    },
    fillRange$3: function(_, start, end, fill) {
      throw H.wrapException(P.UnsupportedError$("Cannot fillRange on Node list"));
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $asListBase: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  _AttributeMap: {
    "^": "Object;",
    forEach$1: function(_, f) {
      var t1, key;
      for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1._current;
        f.call$2(key, this.$index(0, key));
      }
    },
    get$keys: function() {
      var attributes, keys, len, i, t1;
      attributes = this._element.attributes;
      keys = H.setRuntimeTypeInfo([], [J.JSString]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        t1 = attributes[i];
        if (this._matches$1(t1))
          keys.push(J.get$name$x(t1));
      }
      return keys;
    },
    get$values: function(_) {
      var attributes, values, len, i, t1;
      attributes = this._element.attributes;
      values = H.setRuntimeTypeInfo([], [J.JSString]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        t1 = attributes[i];
        if (this._matches$1(t1))
          values.push(J.get$value$x(t1));
      }
      return values;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    $isMap: true,
    $asMap: function() {
      return [J.JSString, J.JSString];
    }
  },
  _ElementAttributeMap: {
    "^": "_AttributeMap;_element",
    containsKey$1: function(key) {
      return this._element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._element.getAttribute(key);
    },
    $indexSet: function(_, key, value) {
      this._element.setAttribute(key, value);
    },
    get$length: function(_) {
      return this.get$keys().length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    _matches$1: function(node) {
      return node.namespaceURI == null;
    }
  },
  EventStreamProvider: {
    "^": "Object;_eventType"
  },
  _EventStream: {
    "^": "Stream;_html$_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  },
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_html$_onData,_useCapture",
    cancel$0: function() {
      if (this._html$_target == null)
        return;
      this._unlisten$0();
      this._html$_target = null;
      this._html$_onData = null;
      return;
    },
    pause$1: function(_, resumeSignal) {
      if (this._html$_target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      if (this._html$_target == null || this._pauseCount <= 0)
        return;
      --this._pauseCount;
      this._tryResume$0();
    },
    _tryResume$0: function() {
      var t1 = this._html$_onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._html$_onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    }
  },
  _Html5NodeValidator: {
    "^": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return $.get$_Html5NodeValidator__allowedElements().contains$1(0, element.tagName);
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1, validator;
      tagName = element.tagName;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
      if (validator == null)
        validator = t1.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return validator.call$4(element, attributeName, value, this);
    },
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var t1, t2;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      if (t1.get$isEmpty(t1)) {
        for (t2 = new H.ListIterator(C.List_1GN, 261, 0, null); t2.moveNext$0();)
          t1.$indexSet(0, t2._current, W._Html5NodeValidator__standardAttributeValidator$closure());
        for (t2 = new H.ListIterator(C.List_yrN, 12, 0, null); t2.moveNext$0();)
          t1.$indexSet(0, t2._current, W._Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    static: {"^": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators", _Html5NodeValidator$: function(uriPolicy) {
        var e, t1;
        e = document.createElement("a", null);
        t1 = new W._SameOriginUriPolicy(e, C.Window_methods.get$location(window));
        t1 = new W._Html5NodeValidator(t1);
        t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
        return t1;
      }, _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
        return true;
      }, "call$4", "_Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 18], _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
        var t1, t2, t3, t4, t5, t6;
        t1 = context.get$uriPolicy();
        t2 = t1._hiddenAnchor;
        t3 = J.getInterceptor$x(t2);
        t3.set$href(t2, value);
        t4 = t3.get$hostname(t2);
        t1 = t1._loc;
        t5 = J.getInterceptor$x(t1);
        t6 = t5.get$hostname(t1);
        if (t4 == null ? t6 == null : t4 === t6) {
          t4 = t3.get$port(t2);
          t6 = t5.get$port(t1);
          if (t4 == null ? t6 == null : t4 === t6) {
            t4 = t3.get$protocol(t2);
            t1 = t5.get$protocol(t1);
            t1 = t4 == null ? t1 == null : t4 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
        if (!t1)
          t1 = t3.get$hostname(t2) === "" && t3.get$port(t2) === "" && t3.get$protocol(t2) === ":";
        else
          t1 = true;
        return t1;
      }, "call$4", "_Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 18]}
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    sort$1: function(receiver, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    },
    fillRange$3: function(receiver, start, end, fillValue) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an immutable List."));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  NodeValidatorBuilder: {
    "^": "Object;_validators",
    add$1: function(_, validator) {
      this._validators.push(validator);
    },
    allowsElement$1: function(element) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    }
  },
  NodeValidatorBuilder_allowsElement_closure: {
    "^": "Closure:92;element_0",
    call$1: function(v) {
      return v.allowsElement$1(this.element_0);
    }
  },
  NodeValidatorBuilder_allowsAttribute_closure: {
    "^": "Closure:92;element_0,attributeName_1,value_2",
    call$1: function(v) {
      return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
    }
  },
  _SimpleNodeValidator: {
    "^": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, element.tagName);
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1;
      tagName = element.tagName;
      t1 = this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else {
        t1 = this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    }
  },
  _TemplatingNodeValidator: {
    "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
    allowsAttribute$3: function(element, attributeName, value) {
      if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    },
    static: {"^": "_TemplatingNodeValidator__TEMPLATE_ATTRS", _TemplatingNodeValidator$: function() {
        var t1, t2, t3, t4;
        t1 = H.setRuntimeTypeInfo(new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure()), [null, null]);
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t2.addAll$1(0, ["TEMPLATE"]);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t3.addAll$1(0, t1);
        t1 = t3;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
        t4.addAll$1(0, C.List_wSV);
        return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
      }}
  },
  _TemplatingNodeValidator_closure: {
    "^": "Closure:92;",
    call$1: function(attr) {
      return "TEMPLATE::" + H.S(attr);
    }
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_html$_length,_position,_html$_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._html$_length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    }
  },
  _LocationWrapper: {
    "^": "Object;_ptr",
    get$hostname: function(_) {
      return this._ptr.hostname;
    },
    get$port: function(_) {
      return this._ptr.port;
    },
    get$protocol: function(_) {
      return this._ptr.protocol;
    },
    toString$0: function(_) {
      return this._ptr.toString();
    },
    $isLocation: true
  },
  NodeValidator: {
    "^": "Object;"
  },
  _SameOriginUriPolicy: {
    "^": "Object;_hiddenAnchor,_loc"
  },
  _ValidatingTreeSanitizer: {
    "^": "Object;validator",
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
    },
    sanitizeNode$1: function(node) {
      var t1, attrs, t2, isAttr, keys, i, $name, t3;
      switch (node.nodeType) {
        case 1:
          t1 = J.getInterceptor$x(node);
          attrs = t1.get$attributes(node);
          if (!this.validator.allowsElement$1(node)) {
            window;
            t2 = "Removing disallowed element <" + H.S(node.tagName) + ">";
            if (typeof console != "undefined")
              console.warn(t2);
            t1.remove$0(node);
            break;
          }
          t2 = attrs._element;
          isAttr = t2.getAttribute("is");
          if (isAttr != null)
            if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
              window;
              t2 = "Removing disallowed type extension <" + H.S(node.tagName) + " is=\"" + isAttr + "\">";
              if (typeof console != "undefined")
                console.warn(t2);
              t1.remove$0(node);
              break;
            }
          keys = C.JSArray_methods.toList$0(attrs.get$keys());
          for (i = attrs.get$keys().length - 1; i >= 0; --i) {
            if (i >= keys.length)
              return H.ioore(keys, i);
            $name = keys[i];
            if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
              window;
              t3 = "Removing disallowed attribute <" + H.S(node.tagName) + " " + $name + "=\"" + H.S(t2.getAttribute($name)) + "\">";
              if (typeof console != "undefined")
                console.warn(t3);
              t2.getAttribute($name);
              t2.removeAttribute($name);
            }
          }
          if (!!t1.$isTemplateElement)
            this.sanitizeTree$1(node.content);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          J.remove$0$ax(node);
      }
    }
  },
  _ValidatingTreeSanitizer_sanitizeTree_walk: {
    "^": "Closure:114;this_0",
    call$1: function(node) {
      var child, nextChild;
      this.this_0.sanitizeNode$1(node);
      child = node.lastChild;
      for (; child != null; child = nextChild) {
        nextChild = child.previousSibling;
        this.call$1(child);
      }
    }
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  FEBlendElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;type=,height=,width=,x=,y=",
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;type=,height=,width=,x=,y=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    "%": "SVGAElement|SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGImageElement"
  },
  MaskElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGPatternElement"
  },
  RectElement: {
    "^": "GeometryElement;height=,width=,x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement0: {
    "^": "SvgElement;type=",
    "%": "SVGScriptElement"
  },
  StyleElement0: {
    "^": "SvgElement;type=",
    "%": "SVGStyleElement"
  },
  SvgElement: {
    "^": "Element;",
    get$children: function(receiver) {
      return H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [W.Element]);
    },
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  SvgSvgElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": "SVGTextPathElement;SVGTextContentElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;x=,y=",
    "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
  },
  UseElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGUseElement"
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  ReceivePort_ReceivePort: function() {
    var t1, t2, t3;
    t1 = $.RawReceivePortImpl__nextFreeId;
    $.RawReceivePortImpl__nextFreeId = t1 + 1;
    t2 = new H.RawReceivePortImpl(t1, null, false);
    t3 = init.globalState.currentContext;
    t3._addRegistration$2(t1, t2);
    t3._updateGlobalState$0();
    t3 = new H.ReceivePortImpl(t2, null);
    t3.ReceivePortImpl$fromRawReceivePort$1(t2);
    return t3;
  },
  Isolate_spawnUri_closure: {
    "^": "Closure:92;",
    call$1: function(msg) {
      return new P.Isolate(J.$index$asx(msg, 1), J.$index$asx(msg, 2), J.$index$asx(msg, 3));
    }
  },
  Capability: {
    "^": "Object;",
    $isCapability: true,
    static: {Capability_Capability: function() {
        return new H.CapabilityImpl((Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296);
      }}
  },
  Isolate: {
    "^": "Object;controlPort<,pauseCapability,terminateCapability",
    static: {"^": "Isolate_PING_ALIVE,Isolate_PING_CONTROL,Isolate_PING_EVENT", Isolate_spawnUri: function(uri, args, message, paused) {
        var i, e, st, t1, t2, exception;
        try {
          t1 = args;
          t2 = H.checkSubtype(t1, "$isList", [J.JSString], "$asList");
          if (t2)
            for (i = 0; J.$lt$n(i, J.get$length$asx(args)); i = J.$add$ns(i, 1)) {
              t1 = J.$index$asx(args, i);
              if (typeof t1 !== "string") {
                t1 = P.ArgumentError$("Args must be a list of Strings " + H.S(args));
                throw H.wrapException(t1);
              }
            }
          else if (args != null) {
            t1 = P.ArgumentError$("Args must be a list of Strings " + H.S(args));
            throw H.wrapException(t1);
          }
          t1 = H.IsolateNatives_spawn(null, J.toString$0(uri), args, message, false, true, paused).then$1(new P.Isolate_spawnUri_closure());
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          st = new H._StackTrace(exception, null);
          t1 = P.Isolate;
          t2 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [t1]);
          t2._async$_Future$immediateError$2(e, st, t1);
          return t2;
        }

      }}
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  min: function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0 && C.JSDouble_methods.get$isNegative(b) || C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    var t1;
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0)
      t1 = a === 0 ? 1 / a < 0 : a < 0;
    else
      t1 = false;
    if (t1)
      return b;
    return a;
  }
}],
["dart.typed_data", "dart:typed_data", , P, {
  "^": "",
  Uint64List_Uint64List: function($length) {
    throw H.wrapException(P.UnsupportedError$("Uint64List not supported by dart2js."));
  },
  Uint32List: {
    "^": "Object;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  Uint8List: {
    "^": "Object;",
    $isUint8List: true,
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  _checkViewArguments: function(buffer, offsetInBytes, $length) {
    if (!J.getInterceptor(buffer).$isNativeByteBuffer)
      throw H.wrapException(P.ArgumentError$("Invalid view buffer"));
    if (typeof offsetInBytes !== "number" || Math.floor(offsetInBytes) !== offsetInBytes)
      throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
    if ($length != null && (typeof $length !== "number" || Math.floor($length) !== $length))
      throw H.wrapException(P.ArgumentError$("Invalid view length " + H.S($length)));
  },
  _ensureNativeList: function(list) {
    var t1, t2, result, i, t3;
    t1 = J.getInterceptor(list);
    if (!!t1.$isJSIndexable)
      return list;
    t2 = t1.get$length(list);
    if (typeof t2 !== "number")
      return H.iae(t2);
    result = Array(t2);
    result.fixed$length = init;
    t2 = result.length;
    i = 0;
    while (true) {
      t3 = t1.get$length(list);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(i < t3))
        break;
      t3 = t1.$index(list, i);
      if (i >= t2)
        return H.ioore(result, i);
      result[i] = t3;
      ++i;
    }
    return result;
  },
  NativeFloat32List_NativeFloat32List$view: function(buffer, offsetInBytes, $length) {
    H._checkViewArguments(buffer, offsetInBytes, $length);
    return new Float32Array(buffer, offsetInBytes);
  },
  NativeUint32List_NativeUint32List$view: function(buffer, offsetInBytes, $length) {
    H._checkViewArguments(buffer, offsetInBytes, $length);
    return new Uint32Array(buffer, offsetInBytes);
  },
  NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
    H._checkViewArguments(buffer, offsetInBytes, $length);
    return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
  },
  NativeByteBuffer: {
    "^": "Interceptor;",
    $isNativeByteBuffer: true,
    $isByteBuffer: true,
    "%": "ArrayBuffer"
  },
  NativeTypedData: {
    "^": "Interceptor;buffer=,offsetInBytes:byteOffset=",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    _checkSublistArguments$3: function(receiver, start, end, $length) {
      var t1 = $length + 1;
      this._checkIndex$2(receiver, start, t1);
      if (end == null)
        return $length;
      this._checkIndex$2(receiver, end, t1);
      if (J.$gt$n(start, end))
        throw H.wrapException(P.RangeError$range(start, 0, end));
      return end;
    },
    "%": "DataView;ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isUint8List: true,
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": ";Uint8Array"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var t1, count, sourceLength;
      t1 = receiver.length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (J.$gt$n(start, end))
        throw H.wrapException(P.RangeError$range(start, 0, end));
      count = J.$sub$n(end, start);
      if (J.$lt$n(skipCount, 0))
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (typeof skipCount !== "number")
        return H.iae(skipCount);
      if (typeof count !== "number")
        return H.iae(count);
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isNativeTypedArrayOfDouble: true,
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isNativeTypedArrayOfInt: true,
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["dartray_web", "package:dartray/dartray_web.dart", , T, {
  "^": "",
  RenderManager: {
    "^": "RenderManagerInterface;pbrt,isolate,scenePath,includePaths,futures,resources",
    loadFile$2: function(path, future) {
      var t1, c;
      t1 = [J.JSArray, J.JSInt];
      c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
      this._loadFile$1(path).then$1(new T.RenderManager_loadFile_closure(c)).catchError$1(new T.RenderManager_loadFile_closure0(c));
      return c.future;
    },
    loadFile$1: function(path) {
      return this.loadFile$2(path, null);
    },
    _loadFile$1: function(path) {
      var t1, t2, c;
      t1 = {};
      t1.path_0 = path;
      t2 = [J.JSArray, J.JSInt];
      c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
      path = C.JSString_methods.$add(this.scenePath + "/", t1.path_0);
      t1.path_0 = path;
      W.HttpRequest_request(path, "GET", "text/plain; charset=x-user-defined", null, null, null, null, null).then$1(new T.RenderManager__loadFile_closure(c)).catchError$1(new T.RenderManager__loadFile_closure0(t1));
      return c.future;
    }
  },
  RenderManager_loadFile_closure: {
    "^": "Closure:92;c_0",
    call$1: function(bytes) {
      var t1 = this.c_0.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(bytes);
    }
  },
  RenderManager_loadFile_closure0: {
    "^": "Closure:92;c_1",
    call$1: function(e) {
      var t1 = J.toString$0(e);
      $.Log.call$2(2, t1);
      t1 = this.c_1.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  RenderManager__loadFile_closure1: {
    "^": "Closure:92;c_1",
    call$1: function(bytes) {
      var t1, t2;
      t1 = bytes.get$codeUnits(bytes);
      t2 = this.c_1.future;
      if (t2._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1);
      return;
    }
  },
  RenderManager__loadFile_closure: {
    "^": "Closure:92;c_2",
    call$1: function(resp) {
      var t1, t2;
      t1 = J.get$response$x(resp);
      if (typeof t1 === "string") {
        t1 = J.get$codeUnits$s(W._convertNativeToDart_XHR_Response(resp.response));
        t2 = this.c_2.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
        return;
      } else if (!!J.getInterceptor(W._convertNativeToDart_XHR_Response(resp.response)).$isByteBuffer) {
        t1 = H.NativeUint8List_NativeUint8List$view(W._convertNativeToDart_XHR_Response(resp.response), 0, null);
        t2 = this.c_2.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
        return;
      } else {
        t1 = W._convertNativeToDart_XHR_Response(resp.response);
        t2 = H.checkSubtype(t1, "$isList", [J.JSInt], "$asList");
        if (t2) {
          t1 = W._convertNativeToDart_XHR_Response(resp.response);
          t2 = this.c_2.future;
          if (t2._state !== 0)
            H.throwExpression(P.StateError$("Future already completed"));
          t2._asyncComplete$1(t1);
          return;
        } else
          $.Log.call$2(2, "Unknown HttpRequest response type");
      }
    }
  },
  RenderManager__loadFile_closure0: {
    "^": "Closure:92;box_0",
    call$1: function(e) {
      var t1 = "Error Loading Resource " + H.S(this.box_0.path_0) + ": " + H.S(e);
      $.Log.call$2(2, t1);
    }
  }
}],
["film", "package:dartray/film/film.dart", , R, {
  "^": "",
  ImageFilm: {
    "^": "Film;cropWindow,image,filename,previewCallback,output,samplesProcessed,previewCount,filter,xPixelStart,yPixelStart,xPixelCount,yPixelCount,_Lxyz,_splatXYZ,_weightSum,_filterTable,_gamma,xResolution,yResolution",
    getSampleExtent$1: function(extent) {
      var t1, t2, t3;
      t1 = this.xPixelStart;
      t2 = this.filter.get$xWidth();
      if (typeof t2 !== "number")
        return H.iae(t2);
      extent[0] = C.JSNumber_methods.toInt$0(Math.floor(t1 + 0.5 - t2));
      t2 = this.xPixelStart;
      t1 = this.xPixelCount;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t3 = this.filter.get$xWidth();
      if (typeof t3 !== "number")
        return H.iae(t3);
      extent[1] = C.JSNumber_methods.toInt$0(Math.ceil(t2 + 0.5 + t1 + t3));
      t3 = this.yPixelStart;
      t1 = this.filter.get$yWidth();
      if (typeof t1 !== "number")
        return H.iae(t1);
      extent[2] = C.JSNumber_methods.toInt$0(Math.floor(t3 + 0.5 - t1));
      t1 = this.yPixelStart;
      t3 = this.yPixelCount;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2 = this.filter.get$yWidth();
      if (typeof t2 !== "number")
        return H.iae(t2);
      extent[3] = C.JSNumber_methods.toInt$0(Math.ceil(t1 + 0.5 + t3 + t2));
    },
    ImageFilm$7: function(xres, yres, filter, cropWindow, filename, image, previewCallback) {
      var t1, i, t2, t3, t4, fi, y, fy, x, fi0;
      for (t1 = this._gamma, i = 0; i < 256; ++i)
        t1[i] = C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(Math.floor(Math.pow(i / 255, 0.45454545454545453) * 255)), 0, 255);
      t1 = this.xResolution;
      t2 = this.cropWindow;
      t3 = J.getInterceptor$asx(t2);
      t4 = J.getInterceptor$ns(t1);
      this.xPixelStart = J.ceil$0$n(t4.$mul(t1, t3.$index(t2, 0)));
      this.xPixelCount = P.max(1, J.ceil$0$n(t4.$mul(t1, t3.$index(t2, 1))) - this.xPixelStart);
      t1 = this.yResolution;
      t4 = J.getInterceptor$ns(t1);
      this.yPixelStart = J.ceil$0$n(t4.$mul(t1, t3.$index(t2, 2)));
      t2 = P.max(1, J.ceil$0$n(t4.$mul(t1, t3.$index(t2, 3))) - this.yPixelStart);
      this.yPixelCount = t2;
      t3 = this.xPixelCount;
      if (typeof t3 !== "number")
        return t3.$mul();
      this.previewCount = t3 * 12;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = t3 * t2 * 3;
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      this._Lxyz = new Float32Array(t2);
      t1 = this.xPixelCount;
      t2 = this.yPixelCount;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = t1 * t2 * 3;
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      this._splatXYZ = new Float32Array(t2);
      t1 = this.xPixelCount;
      t2 = this.yPixelCount;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = t1 * t2;
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      this._weightSum = new Float32Array(t2);
      this._filterTable = new Float32Array(256);
      for (fi = 0, y = 0; y < 16; ++y) {
        t1 = this.filter.get$yWidth();
        if (typeof t1 !== "number")
          return H.iae(t1);
        fy = (y + 0.5) * t1 / 16;
        for (x = 0; x < 16; ++x, fi = fi0) {
          t1 = this.filter;
          t2 = t1.get$xWidth();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = this._filterTable;
          fi0 = fi + 1;
          t2 = t1.evaluate$2((x + 0.5) * t2 / 16, fy);
          if (fi < 0 || fi >= t3.length)
            return H.ioore(t3, fi);
          t3[fi] = t2;
        }
      }
      if (this.image == null)
        this.image = U.Image$(this.xPixelCount, this.yPixelCount, 4);
      this.output = G.OutputImage$(this.xPixelStart, this.yPixelStart, this.xPixelCount, this.yPixelCount, null);
    },
    static: {"^": "ImageFilm_FILTER_TABLE_SIZE", ImageFilm$: function(xres, yres, filter, cropWindow, filename, image, previewCallback) {
        var t1 = new R.ImageFilm(cropWindow, image, filename, previewCallback, null, 0, null, filter, null, null, null, null, null, null, null, null, new Uint8Array(256), xres, yres);
        t1.ImageFilm$7(xres, yres, filter, cropWindow, filename, image, previewCallback);
        return t1;
      }, ImageFilm_Create: [function(params, filter, image, previewCallback) {
        var xres, yres, filename, crop, t1;
        xres = params.findOneInt$2("xresolution", 640);
        yres = params.findOneInt$2("yresolution", 480);
        filename = params.findOneString$2("filename", "");
        crop = params.findFloat$1("cropWindow");
        if (crop == null)
          crop = [0, 1, 0, 1];
        if (image != null) {
          t1 = J.getInterceptor$x(image);
          xres = t1.get$width(image);
          yres = t1.get$height(image);
        }
        return R.ImageFilm$(xres, yres, filter, crop, filename, image, previewCallback);
      }, function(params, filter, image) {
        return R.ImageFilm_Create(params, filter, image, null);
      }, null, function(params, filter) {
        return R.ImageFilm_Create(params, filter, null, null);
      }, null, "call$4", "call$3", "call$2", "ImageFilm_Create$closure", 4, 4, 19, 12, 12]}
  }
}],
["filters", "package:dartray/filters/filters.dart", , S, {
  "^": "",
  BoxFilter: {
    "^": "Filter;xWidth,yWidth,invXWidth,invYWidth",
    evaluate$2: function(x, y) {
      return 1;
    },
    static: {BoxFilter_Create: [function(ps) {
        var xw, yw;
        xw = ps.findOneFloat$2("xwidth", 0.5);
        yw = ps.findOneFloat$2("ywidth", 0.5);
        if (typeof xw !== "number")
          return H.iae(xw);
        if (typeof yw !== "number")
          return H.iae(yw);
        return new S.BoxFilter(xw, yw, 1 / xw, 1 / yw);
      }, "call$1", "BoxFilter_Create$closure", 2, 0, 20]}
  },
  GaussianFilter: {
    "^": "Filter;alpha,expX,expY,xWidth,yWidth,invXWidth,invYWidth",
    evaluate$2: function(x, y) {
      return this._gaussian$2(x, this.expX) * this._gaussian$2(y, this.expY);
    },
    _gaussian$2: function(d, expv) {
      var t1 = J.$mul$ns(J.$mul$ns(J.$negate$n(this.alpha), d), d);
      if (typeof t1 !== "number")
        H.throwExpression(P.ArgumentError$(t1));
      return P.max(0, Math.exp(t1) - expv);
    },
    static: {GaussianFilter_Create: [function(ps) {
        var xw, yw, alpha, t1, t2;
        xw = ps.findOneFloat$2("xwidth", 2);
        yw = ps.findOneFloat$2("ywidth", 2);
        alpha = ps.findOneFloat$2("alpha", 2);
        if (typeof xw !== "number")
          return H.iae(xw);
        if (typeof yw !== "number")
          return H.iae(yw);
        t1 = J.getInterceptor$n(alpha);
        t2 = J.$mul$ns(J.$mul$ns(t1.$negate(alpha), xw), xw);
        if (typeof t2 !== "number")
          H.throwExpression(P.ArgumentError$(t2));
        t2 = Math.exp(t2);
        t1 = J.$mul$ns(J.$mul$ns(t1.$negate(alpha), yw), yw);
        if (typeof t1 !== "number")
          H.throwExpression(P.ArgumentError$(t1));
        return new S.GaussianFilter(alpha, t2, Math.exp(t1), xw, yw, 1 / xw, 1 / yw);
      }, "call$1", "GaussianFilter_Create$closure", 2, 0, 21]}
  },
  LanczosSincFilter: {
    "^": "Filter;tau,xWidth,yWidth,invXWidth,invYWidth",
    evaluate$2: function(x, y) {
      return this._sinc1D$1(x * this.invXWidth) * this._sinc1D$1(y * this.invYWidth);
    },
    _sinc1D$1: function(x) {
      var t1, t2;
      x = Math.abs(x);
      if (x < 0.00001)
        return 1;
      if (x > 1)
        return 0;
      x *= 3.141592653589793;
      t1 = Math.sin(x);
      t2 = this.tau;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = x * t2;
      return t1 / x * (Math.sin(t2) / t2);
    },
    static: {LanczosSincFilter_Create: [function(ps) {
        var xw, yw, tau;
        xw = ps.findOneFloat$2("xwidth", 4);
        yw = ps.findOneFloat$2("ywidth", 4);
        tau = ps.findOneFloat$2("tau", 3);
        if (typeof xw !== "number")
          return H.iae(xw);
        if (typeof yw !== "number")
          return H.iae(yw);
        return new S.LanczosSincFilter(tau, xw, yw, 1 / xw, 1 / yw);
      }, "call$1", "LanczosSincFilter_Create$closure", 2, 0, 22]}
  },
  MitchellFilter: {
    "^": "Filter;b,c<,xWidth,yWidth,invXWidth,invYWidth",
    evaluate$2: function(x, y) {
      return J.$mul$ns(this._mitchell1D$1(x * this.invXWidth), this._mitchell1D$1(y * this.invYWidth));
    },
    _mitchell1D$1: function(x) {
      var t1, t2, t3;
      x = Math.abs(2 * x);
      t1 = this.b;
      if (x > 1) {
        t1 = J.$negate$n(t1);
        t2 = this.c;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$sub$n(t1, 6 * t2), x), x), x);
        t1 = this.b;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t3 = this.c;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = J.$add$ns(t2, (6 * t1 + 30 * t3) * x * x);
        t1 = this.b;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.c;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = J.$add$ns(t3, (-12 * t1 - 48 * t2) * x);
        t1 = this.b;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t3 = this.c;
        if (typeof t3 !== "number")
          return H.iae(t3);
        return J.$mul$ns(J.$add$ns(t2, 8 * t1 + 24 * t3), 0.16666666666666666);
      } else {
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.c;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = 6 * t2;
        return ((12 - 9 * t1 - t2) * x * x * x + (-18 + 12 * t1 + t2) * x * x + (6 - 2 * t1)) * 0.16666666666666666;
      }
    },
    static: {MitchellFilter_Create: [function(ps) {
        var xw, yw, $B, $C;
        xw = ps.findOneFloat$2("xwidth", 2);
        yw = ps.findOneFloat$2("ywidth", 2);
        $B = ps.findOneFloat$2("B", 0.3333333333333333);
        $C = ps.findOneFloat$2("C", 0.3333333333333333);
        if (typeof xw !== "number")
          return H.iae(xw);
        if (typeof yw !== "number")
          return H.iae(yw);
        return new S.MitchellFilter($B, $C, xw, yw, 1 / xw, 1 / yw);
      }, "call$1", "MitchellFilter_Create$closure", 2, 0, 23]}
  },
  TriangleFilter: {
    "^": "Filter;xWidth,yWidth,invXWidth,invYWidth",
    evaluate$2: function(x, y) {
      return P.max(0, J.$sub$n(this.xWidth, Math.abs(x))) * P.max(0, J.$sub$n(this.yWidth, Math.abs(y)));
    },
    static: {TriangleFilter_Create: [function(ps) {
        var xw, yw;
        xw = ps.findOneFloat$2("xwidth", 2);
        yw = ps.findOneFloat$2("ywidth", 2);
        if (typeof xw !== "number")
          return H.iae(xw);
        if (typeof yw !== "number")
          return H.iae(yw);
        return new S.TriangleFilter(xw, yw, 1 / xw, 1 / yw);
      }, "call$1", "TriangleFilter_Create$closure", 2, 0, 24]}
  }
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
    var copies = [];
    return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
  },
  convertNativeToDart_ImageData: function(nativeImageData) {
    var t1, data;
    t1 = J.getInterceptor(nativeImageData);
    if (!!t1.$isImageData) {
      data = t1.get$data(nativeImageData);
      if (data.constructor === Array)
        if (typeof CanvasPixelArray !== "undefined") {
          data.constructor = CanvasPixelArray;
          data.BYTES_PER_ELEMENT = 1;
        }
      return nativeImageData;
    }
    return new P._TypedImageData(nativeImageData.data, nativeImageData.height, nativeImageData.width);
  },
  convertDartToNative_ImageData: function(imageData) {
    if (!!J.getInterceptor(imageData).$is_TypedImageData)
      return {data: imageData.data, height: imageData.height, width: imageData.width};
    return imageData;
  },
  Device_isWebKit: function() {
    var t1 = $.Device__isWebKit;
    if (t1 == null) {
      t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      t1 = t1 !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      $.Device__isWebKit = t1;
    }
    return t1;
  },
  convertNativeToDart_AcceptStructuredClone_findSlot: {
    "^": "Closure:14;values_0,copies_1",
    call$1: function(value) {
      var t1, $length, i, t2;
      t1 = this.values_0;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this.copies_1.push(null);
      return $length;
    }
  },
  convertNativeToDart_AcceptStructuredClone_readSlot: {
    "^": "Closure:115;copies_2",
    call$1: function(i) {
      var t1 = this.copies_2;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    }
  },
  convertNativeToDart_AcceptStructuredClone_writeSlot: {
    "^": "Closure:116;copies_3",
    call$2: function(i, x) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    }
  },
  convertNativeToDart_AcceptStructuredClone_walk: {
    "^": "Closure:92;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var slot, copy, t1, key, $length, t2, i;
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (Object.getPrototypeOf(e) === Object.prototype) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.writeSlot_7.call$2(slot, copy);
        for (t1 = Object.keys(e), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          key = t1._current;
          copy.$indexSet(0, key, this.call$1(e[key]));
        }
        return copy;
      }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = this.mustCopy_4 ? new Array($length) : e;
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
        return copy;
      }
      return e;
    }
  },
  _TypedImageData: {
    "^": "Object;data>,height>,width>",
    $is_TypedImageData: true,
    $isImageData: true
  },
  FilteredElementList: {
    "^": "ListBase;_node,_childNodes",
    get$_filtered: function() {
      var t1 = this._childNodes;
      return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
    },
    forEach$1: function(_, f) {
      H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
    },
    $indexSet: function(_, index, value) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      J.replaceWith$1$x(t1[index], value);
    },
    set$length: function(_, newLength) {
      var len, t1;
      len = this.get$_filtered().length;
      t1 = J.getInterceptor$n(newLength);
      if (t1.$ge(newLength, len))
        return;
      else if (t1.$lt(newLength, 0))
        throw H.wrapException(P.ArgumentError$("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(value);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort filtered list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
    },
    fillRange$3: function(_, start, end, fillValue) {
      throw H.wrapException(P.UnsupportedError$("Cannot fillRange on filtered list"));
    },
    removeRange$2: function(_, start, end) {
      H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
    },
    get$length: function(_) {
      return this.get$_filtered().length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, index) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$iterator: function(_) {
      var t1 = this.get$_filtered();
      return new H.ListIterator(t1, t1.length, 0, null);
    }
  },
  FilteredElementList__filtered_closure: {
    "^": "Closure:92;",
    call$1: function(n) {
      return !!J.getInterceptor(n).$isElement;
    }
  },
  FilteredElementList_removeRange_closure: {
    "^": "Closure:92;",
    call$1: function(el) {
      return J.remove$0$ax(el);
    }
  }
}],
["image", "package:image/image.dart", , U, {
  "^": "",
  getColor: function(r, g, b, a) {
    var t1, t2, t3, t4;
    t1 = J.clamp$2$n(a, 0, 255);
    if (typeof t1 !== "number")
      return t1.$shl();
    t2 = J.clamp$2$n(b, 0, 255);
    if (typeof t2 !== "number")
      return t2.$shl();
    t3 = J.clamp$2$n(g, 0, 255);
    if (typeof t3 !== "number")
      return t3.$shl();
    t4 = J.clamp$2$n(r, 0, 255);
    if (typeof t4 !== "number")
      return H.iae(t4);
    return (t1 << 24 | t2 << 16 | t3 << 8 | t4) >>> 0;
  },
  ExrCompressor_ExrCompressor: function(type, hdr, maxScanLineSize, numScanLines) {
    var t1;
    switch (type) {
      case 1:
        return new U.ExrRleCompressor(null, maxScanLineSize, 0, 0, hdr);
      case 2:
        t1 = numScanLines == null ? 1 : numScanLines;
        return new U.ExrZipCompressor(new T.ZLibDecoder(), maxScanLineSize, t1, null, 0, 0, hdr);
      case 3:
        t1 = numScanLines == null ? 16 : numScanLines;
        return new U.ExrZipCompressor(new T.ZLibDecoder(), maxScanLineSize, t1, null, 0, 0, hdr);
      case 4:
        return U.ExrPizCompressor$(hdr, maxScanLineSize, numScanLines == null ? 32 : numScanLines);
      case 5:
        t1 = numScanLines == null ? 16 : numScanLines;
        return new U.ExrPxr24Compressor(new T.ZLibDecoder(), maxScanLineSize, t1, null, 0, 0, hdr);
      case 6:
        t1 = numScanLines == null ? 32 : numScanLines;
        return new U.ExrB44Compressor(maxScanLineSize, t1, false, 0, 0, hdr);
      case 7:
        t1 = numScanLines == null ? 32 : numScanLines;
        return new U.ExrB44Compressor(maxScanLineSize, t1, true, 0, 0, hdr);
      default:
        throw H.wrapException(U.ImageException$("Invalid compression type: " + H.S(type)));
    }
  },
  ExrHuffman_uncompress: function(compressed, nCompressed, raw, nRaw) {
    var start, im, iM, nBits, t1, freq, hdec, i;
    if (nCompressed === 0) {
      if (nRaw !== 0)
        throw H.wrapException(U.ImageException$("Incomplete huffman data"));
      return;
    }
    start = compressed.offset;
    im = compressed.readUint32$0();
    iM = compressed.readUint32$0();
    compressed.offset = J.$add$ns(compressed.offset, 4);
    nBits = compressed.readUint32$0();
    if (im < 65537)
      t1 = iM >= 65537;
    else
      t1 = true;
    if (t1)
      throw H.wrapException(U.ImageException$("Invalid huffman table size"));
    compressed.offset = J.$add$ns(compressed.offset, 4);
    t1 = Array(65537);
    t1.fixed$length = init;
    freq = H.setRuntimeTypeInfo(t1, [J.JSInt]);
    H.IterableMixinWorkaround_fillRangeList(freq, 0, 65537, 0);
    hdec = H.setRuntimeTypeInfo(Array(16384), [U.ExrHufDec]);
    for (i = 0; i < 16384; ++i)
      hdec[i] = new U.ExrHufDec(0, 0, null);
    U.ExrHuffman_unpackEncTable(compressed, nCompressed - 20, im, iM, freq);
    t1 = J.$sub$n(compressed.offset, start);
    if (typeof t1 !== "number")
      return H.iae(t1);
    if (nBits > 8 * (nCompressed - t1))
      throw H.wrapException(U.ImageException$("Error in header for Huffman-encoded data (invalid number of bits)."));
    U.ExrHuffman_buildDecTable(freq, im, iM, hdec);
    U.ExrHuffman_decode(freq, hdec, compressed, nBits, iM, nRaw, raw);
  },
  ExrHuffman_decode: function(hcode, hdecod, input, ni, rlc, no, out) {
    var c_lc, ie, oi, t1, t2, pl, j, l, t3, oi0, i;
    c_lc = [0, 0];
    ie = J.$add$ns(input.offset, C.JSInt_methods._tdivFast$1(ni + 7, 8));
    for (oi = 0; J.$lt$n(input.offset, ie);) {
      U.ExrHuffman_getChar(c_lc, input);
      for (; J.$ge$n(c_lc[1], 14);) {
        t1 = c_lc[0];
        t2 = J.$sub$n(c_lc[1], 14);
        if (typeof t1 !== "number")
          return t1.$shr();
        if (typeof t2 !== "number")
          return H.iae(t2);
        pl = hdecod[C.JSNumber_methods.$shr(t1, t2) & 16383];
        if (pl.get$len() !== 0) {
          c_lc[1] = J.$sub$n(c_lc[1], pl.len);
          oi = U.ExrHuffman_getCode(pl.lit, rlc, c_lc, input, out, oi, no);
        } else {
          if (pl.p == null)
            throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code)."));
          for (j = 0; j < pl.lit; ++j) {
            t1 = pl.p;
            if (j >= t1.length)
              return H.ioore(t1, j);
            t1 = t1[j];
            if (t1 >>> 0 !== t1 || t1 >= 65537)
              return H.ioore(hcode, t1);
            l = J.$and$n(hcode[t1], 63);
            while (true) {
              if (!(J.$lt$n(c_lc[1], l) && J.$lt$n(input.offset, ie)))
                break;
              U.ExrHuffman_getChar(c_lc, input);
            }
            if (J.$ge$n(c_lc[1], l)) {
              t1 = pl.p;
              if (j >= t1.length)
                return H.ioore(t1, j);
              t1 = t1[j];
              if (t1 >>> 0 !== t1 || t1 >= 65537)
                return H.ioore(hcode, t1);
              t1 = hcode[t1];
              if (typeof t1 !== "number")
                return t1.$shr();
              t1 = C.JSNumber_methods._shrOtherPositive$1(t1, 6);
              t2 = c_lc[0];
              t3 = J.$sub$n(c_lc[1], l);
              if (typeof t2 !== "number")
                return t2.$shr();
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (t1 === (C.JSNumber_methods.$shr(t2, t3) & C.JSInt_methods._shlPositive$1(1, l) - 1) >>> 0) {
                c_lc[1] = J.$sub$n(c_lc[1], l);
                t1 = pl.p;
                if (j >= t1.length)
                  return H.ioore(t1, j);
                oi0 = U.ExrHuffman_getCode(t1[j], rlc, c_lc, input, out, oi, no);
                oi = oi0;
                break;
              }
            }
          }
          if (j === pl.lit)
            throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code)."));
        }
      }
    }
    i = 8 - ni & 7;
    t1 = c_lc[0];
    if (typeof t1 !== "number")
      return t1.$shr();
    c_lc[0] = C.JSNumber_methods._shrOtherPositive$1(t1, i);
    c_lc[1] = J.$sub$n(c_lc[1], i);
    for (; J.$gt$n(c_lc[1], 0);) {
      t1 = c_lc[0];
      t2 = c_lc[1];
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t1 !== "number")
        return t1.$shl();
      pl = hdecod[C.JSNumber_methods.$shl(t1, 14 - t2) & 16383];
      if (pl.get$len() !== 0) {
        c_lc[1] = t2 - pl.len;
        oi = U.ExrHuffman_getCode(pl.lit, rlc, c_lc, input, out, oi, no);
      } else
        throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code)."));
    }
    if (oi !== no)
      throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (decoded data are shorter than expected)."));
  },
  ExrHuffman_getCode: function(po, rlc, c_lc, input, out, oi, oe) {
    var t1, t2, cs, s, cs0, oi0;
    if (J.$eq(po, rlc)) {
      if (J.$lt$n(c_lc[1], 8))
        U.ExrHuffman_getChar(c_lc, input);
      t1 = J.$sub$n(c_lc[1], 8);
      c_lc[1] = t1;
      t2 = c_lc[0];
      if (typeof t2 !== "number")
        return t2.$shr();
      if (typeof t1 !== "number")
        return H.iae(t1);
      cs = C.JSNumber_methods.$shr(t2, t1) & 255;
      if (oi + cs > oe)
        throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (decoded data are longer than expected)."));
      t1 = oi - 1;
      t2 = out.length;
      if (t1 < 0 || t1 >= t2)
        return H.ioore(out, t1);
      s = out[t1];
      for (; cs0 = cs - 1, cs > 0; cs = cs0, oi = oi0) {
        oi0 = oi + 1;
        if (oi >= t2)
          return H.ioore(out, oi);
        out[oi] = s;
      }
    } else {
      if (oi < oe) {
        oi0 = oi + 1;
        if (oi >= out.length)
          return H.ioore(out, oi);
        out[oi] = po;
      } else
        throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (decoded data are longer than expected)."));
      oi = oi0;
    }
    return oi;
  },
  ExrHuffman_buildDecTable: function(hcode, im, iM, hdecod) {
    var t1, t2, l, pl, t3, t4, i, t5, pi;
    for (; im <= iM; ++im) {
      if (im >= 65537)
        return H.ioore(hcode, im);
      t1 = hcode[im];
      if (typeof t1 !== "number")
        return t1.$shr();
      t2 = C.JSNumber_methods._shrOtherPositive$1(t1, 6);
      l = t1 & 63;
      if (C.JSInt_methods._shrBothPositive$1(t2, l) !== 0)
        throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code table entry)."));
      if (l > 14) {
        t1 = C.JSInt_methods._shrReceiverPositive$1(t2, l - 14);
        if (t1 >= 16384)
          return H.ioore(hdecod, t1);
        pl = hdecod[t1];
        if (pl.get$len() !== 0)
          throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code table entry)."));
        t1 = ++pl.lit;
        t2 = pl.p;
        if (t2 != null) {
          t3 = Array(t1);
          t3.fixed$length = init;
          t3.$builtinTypeInfo = [J.JSInt];
          pl.p = t3;
          for (t4 = pl.lit - 1, i = 0; i < t4; ++i) {
            if (i >= t2.length)
              return H.ioore(t2, i);
            t5 = t2[i];
            if (i >= t1)
              return H.ioore(t3, i);
            t3[i] = t5;
          }
        } else
          pl.p = [0];
        t1 = pl.p;
        t2 = pl.lit - 1;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2] = im;
      } else if (l !== 0) {
        t1 = 14 - l;
        pi = C.JSInt_methods.$shl(t2, t1);
        if (pi >= 16384)
          return H.ioore(hdecod, pi);
        for (i = C.JSInt_methods.$shl(1, t1); i > 0; --i, ++pi) {
          if (pi >= 16384)
            return H.ioore(hdecod, pi);
          pl = hdecod[pi];
          if (pl.get$len() !== 0 || pl.p != null)
            throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code table entry)."));
          pl.len = l;
          pl.lit = im;
        }
      }
    }
  },
  ExrHuffman_unpackEncTable: function(p, ni, im, iM, hcode) {
    var pcode, c_lc, t1, l, zerun, zerun0, im0;
    pcode = p.offset;
    c_lc = [0, 0];
    for (t1 = iM + 1; im <= iM; ++im) {
      if (J.$gt$n(J.$sub$n(p.offset, pcode), ni))
        throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (unexpected end of code table data)."));
      l = U.ExrHuffman_getBits(6, c_lc, p);
      if (im < 0 || im >= 65537)
        return H.ioore(hcode, im);
      hcode[im] = l;
      if (l === 63) {
        if (J.$gt$n(J.$sub$n(p.offset, pcode), ni))
          throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (unexpected end of code table data)."));
        zerun = U.ExrHuffman_getBits(8, c_lc, p) + 6;
        if (im + zerun > t1)
          throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (code table is longer than expected)."));
        for (; zerun0 = zerun - 1, zerun !== 0; zerun = zerun0, im = im0) {
          im0 = im + 1;
          if (im >= 65537)
            return H.ioore(hcode, im);
          hcode[im] = 0;
        }
        --im;
      } else if (l >= 59) {
        zerun = l - 59 + 2;
        if (im + zerun > t1)
          throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (code table is longer than expected)."));
        for (; zerun0 = zerun - 1, zerun !== 0; zerun = zerun0, im = im0) {
          im0 = im + 1;
          if (im >= 65537)
            return H.ioore(hcode, im);
          hcode[im] = 0;
        }
        --im;
      }
    }
    U.ExrHuffman_canonicalCodeTable(hcode);
  },
  ExrHuffman_canonicalCodeTable: function(hcode) {
    var t1, n, i, c, nc, l;
    t1 = Array(59);
    t1.fixed$length = init;
    n = H.setRuntimeTypeInfo(t1, [J.JSInt]);
    H.IterableMixinWorkaround_fillRangeList(n, 0, 59, 0);
    for (i = 0; i < 65537; ++i) {
      t1 = hcode[i];
      if (t1 >>> 0 !== t1 || t1 >= 59)
        return H.ioore(n, t1);
      n[t1] = J.$add$ns(n[t1], 1);
    }
    for (c = 0, i = 58; i > 0; --i, c = nc) {
      t1 = n[i];
      if (typeof t1 !== "number")
        return H.iae(t1);
      nc = C.JSNumber_methods._shrOtherPositive$1(c + t1, 1);
      n[i] = c;
    }
    for (i = 0; i < 65537; ++i) {
      l = hcode[i];
      if (J.$gt$n(l, 0)) {
        if (l >>> 0 !== l || l >= 59)
          return H.ioore(n, l);
        t1 = n[l];
        n[l] = J.$add$ns(t1, 1);
        if (typeof t1 !== "number")
          return t1.$shl();
        hcode[i] = (l | t1 << 6) >>> 0;
      }
    }
  },
  ExrHuffman_getChar: function(c_lc, input) {
    var t1, t2, t3;
    t1 = c_lc[0];
    if (typeof t1 !== "number")
      return t1.$shl();
    t2 = input.buffer;
    t3 = input.offset;
    input.offset = J.$add$ns(t3, 1);
    t3 = J.$index$asx(t2, t3);
    if (typeof t3 !== "number")
      return H.iae(t3);
    c_lc[0] = ((t1 << 8 | t3) & -1) >>> 0;
    c_lc[1] = J.$and$n(J.$add$ns(c_lc[1], 8), -1);
  },
  ExrHuffman_getBits: function(nBits, c_lc, input) {
    var t1, t2, t3;
    for (; J.$lt$n(c_lc[1], nBits);) {
      t1 = c_lc[0];
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = input.buffer;
      t3 = input.offset;
      input.offset = J.$add$ns(t3, 1);
      t3 = J.$index$asx(t2, t3);
      if (typeof t3 !== "number")
        return H.iae(t3);
      c_lc[0] = ((t1 << 8 | t3) & -1) >>> 0;
      c_lc[1] = J.$and$n(J.$add$ns(c_lc[1], 8), -1);
    }
    t1 = J.$sub$n(c_lc[1], nBits);
    c_lc[1] = t1;
    t2 = c_lc[0];
    if (typeof t2 !== "number")
      return t2.$shr();
    if (typeof t1 !== "number")
      return H.iae(t1);
    return (C.JSNumber_methods.$shr(t2, t1) & C.JSInt_methods._shlPositive$1(1, nBits) - 1) >>> 0;
  },
  ExrWavelet_decode: function(input, si, nx, ox, ny, oy, mx) {
    var w14, t1, n, p, p0, a_b, t2, t3, t4, p2, ey, oy1, oy2, ox1, ox2, py, i00, i01, i10, i11, t5, t6, ex, px, p01, p10, p11, t7, t8;
    w14 = mx < 16384;
    t1 = J.getInterceptor$n(nx);
    n = t1.$gt(nx, ny) ? ny : nx;
    if (typeof n !== "number")
      return H.iae(n);
    p = 1;
    for (; p <= n;)
      p = p << 1 >>> 0;
    p = p >>> 1;
    p0 = p >>> 1;
    a_b = [0, 0];
    for (t2 = J.getInterceptor$n(ny), t3 = J.getInterceptor$ns(oy), t4 = J.getInterceptor$ns(si), p2 = p, p = p0; p >= 1; p2 = p, p = p0) {
      ey = t4.$add(si, t3.$mul(oy, t2.$sub(ny, p2)));
      oy1 = t3.$mul(oy, p);
      oy2 = t3.$mul(oy, p2);
      if (typeof ox !== "number")
        return ox.$mul();
      ox1 = ox * p;
      ox2 = ox * p2;
      for (py = si, i00 = null, i01 = null, i10 = null, i11 = null; t5 = J.getInterceptor$n(py), t5.$le(py, ey); py = t5.$add(py, oy2)) {
        t6 = t1.$sub(nx, p2);
        if (typeof t6 !== "number")
          return H.iae(t6);
        ex = t5.$add(py, ox * t6);
        for (px = py; t6 = J.getInterceptor$n(px), t6.$le(px, ex); px = t6.$add(px, ox2)) {
          p01 = t6.$add(px, ox1);
          p10 = t6.$add(px, oy1);
          p11 = J.$add$ns(p10, ox1);
          if (w14) {
            t7 = input.length;
            if (px >>> 0 !== px || px >= t7)
              return H.ioore(input, px);
            t8 = input[px];
            if (p10 >>> 0 !== p10 || p10 >= t7)
              return H.ioore(input, p10);
            U.ExrWavelet_wdec14(t8, input[p10], a_b);
            i00 = a_b[0];
            i10 = a_b[1];
            if (p01 >>> 0 !== p01 || p01 >= t7)
              return H.ioore(input, p01);
            t8 = input[p01];
            if (p11 >>> 0 !== p11 || p11 >= t7)
              return H.ioore(input, p11);
            U.ExrWavelet_wdec14(t8, input[p11], a_b);
            i01 = a_b[0];
            i11 = a_b[1];
            U.ExrWavelet_wdec14(i00, i01, a_b);
            input[px] = a_b[0];
            input[p01] = a_b[1];
            U.ExrWavelet_wdec14(i10, i11, a_b);
            input[p10] = a_b[0];
            input[p11] = a_b[1];
          } else {
            t7 = input.length;
            if (px >>> 0 !== px || px >= t7)
              return H.ioore(input, px);
            t8 = input[px];
            if (p10 >>> 0 !== p10 || p10 >= t7)
              return H.ioore(input, p10);
            U.ExrWavelet_wdec16(t8, input[p10], a_b);
            i00 = a_b[0];
            i10 = a_b[1];
            if (p01 >>> 0 !== p01 || p01 >= t7)
              return H.ioore(input, p01);
            t8 = input[p01];
            if (p11 >>> 0 !== p11 || p11 >= t7)
              return H.ioore(input, p11);
            U.ExrWavelet_wdec16(t8, input[p11], a_b);
            i01 = a_b[0];
            i11 = a_b[1];
            U.ExrWavelet_wdec16(i00, i01, a_b);
            input[px] = a_b[0];
            input[p01] = a_b[1];
            U.ExrWavelet_wdec16(i10, i11, a_b);
            input[p10] = a_b[0];
            input[p11] = a_b[1];
          }
        }
        if (typeof nx !== "number")
          return nx.$and();
        if ((nx & p) >>> 0 !== 0) {
          p10 = t6.$add(px, oy1);
          if (w14) {
            t6 = input.length;
            if (px >>> 0 !== px || px >= t6)
              return H.ioore(input, px);
            t7 = input[px];
            if (p10 >>> 0 !== p10 || p10 >= t6)
              return H.ioore(input, p10);
            U.ExrWavelet_wdec14(t7, input[p10], a_b);
            i00 = a_b[0];
            input[p10] = a_b[1];
          } else {
            t6 = input.length;
            if (px >>> 0 !== px || px >= t6)
              return H.ioore(input, px);
            t7 = input[px];
            if (p10 >>> 0 !== p10 || p10 >= t6)
              return H.ioore(input, p10);
            U.ExrWavelet_wdec16(t7, input[p10], a_b);
            i00 = a_b[0];
            input[p10] = a_b[1];
          }
          if (px >>> 0 !== px || px >= input.length)
            return H.ioore(input, px);
          input[px] = i00;
        }
      }
      if (t2.$and(ny, p) !== 0) {
        t6 = t1.$sub(nx, p2);
        if (typeof t6 !== "number")
          return H.iae(t6);
        ex = t5.$add(py, ox * t6);
        for (px = py; t5 = J.getInterceptor$n(px), t5.$le(px, ex); px += ox2) {
          p01 = t5.$add(px, ox1);
          t5 = input.length;
          if (px >>> 0 !== px || px >= t5)
            return H.ioore(input, px);
          t6 = input[px];
          if (p01 >>> 0 !== p01 || p01 >= t5)
            return H.ioore(input, p01);
          U.ExrWavelet_wdec14(t6, input[p01], a_b);
          i00 = a_b[0];
          input[p01] = a_b[1];
          if (px >>> 0 !== px || px >= input.length)
            return H.ioore(input, px);
          input[px] = i00;
        }
      }
      p0 = p >>> 1;
    }
  },
  ExrWavelet_wdec14: function(l, h, a_b) {
    var t1, t2, t3, ls, hs, ai;
    t1 = $.get$__uint16();
    t1[0] = l;
    t2 = $.get$__uint16ToInt16();
    t3 = t2.length;
    if (0 >= t3)
      return H.ioore(t2, 0);
    ls = t2[0];
    t1[0] = h;
    if (0 >= t3)
      return H.ioore(t2, 0);
    hs = t2[0];
    ai = ls + (hs & 1) + C.JSInt_methods._shrOtherPositive$1(hs, 1);
    a_b[0] = ai;
    a_b[1] = ai - hs;
  },
  ExrWavelet_wdec16: function(l, h, a_b) {
    var bb;
    if (typeof h !== "number")
      return h.$shr();
    bb = J.$and$n(J.$sub$n(l, C.JSNumber_methods._shrOtherPositive$1(h, 1)), 65535);
    a_b[1] = bb;
    a_b[0] = h + bb - 32768 & 65535;
  },
  findDecoderForData: function(data) {
    var bytes, png, gif, webp, tiff;
    bytes = new Uint8Array(H._ensureNativeList(data));
    U.InputBuffer$(bytes, true, null, 0);
    if (new U.JpegData(null, null, null, null, null, null, Array(4), [], [], [], [], 0, 0).validate$1(bytes))
      return new U.JpegDecoder(null, null, null);
    png = new U.PngDecoder(null, 0, 0, null, null, 0, 1, null);
    if (png.isValidFile$1(bytes))
      return png;
    gif = new U.GifDecoder(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    gif._input = U.InputBuffer$(bytes, false, null, 0);
    gif.info = new U.GifInfo(0, null, false, [], 0, 0, 4294967295);
    if (gif._getInfo$0())
      return gif;
    webp = new U.WebPDecoder(null, null, null);
    if (webp.isValidFile$1(bytes))
      return webp;
    tiff = new U.TiffDecoder(null, null, null);
    if (tiff._readHeader$1(U.InputBuffer$(bytes, false, null, 0)) != null)
      return tiff;
    if (U.PsdImage$(bytes).signature === 943870035)
      return new U.PsdDecoder(null, null);
    if (U.ExrImage_isValidFile(bytes))
      return new U.ExrDecoder(null, 1, null, null, null, null, null);
    return;
  },
  WebPFilters_horizontalUnfilter: [function(width, height, stride, row, numRows, data) {
    U.WebPFilters__doHorizontalFilter(data, width, height, stride, row, numRows, true, data);
  }, "call$6", "WebPFilters_horizontalUnfilter$closure", 12, 0, 27],
  WebPFilters_verticalUnfilter: [function(width, height, stride, row, num_rows, data) {
    U.WebPFilters__doVerticalFilter(data, width, height, stride, row, num_rows, true, data);
  }, "call$6", "WebPFilters_verticalUnfilter$closure", 12, 0, 27],
  WebPFilters_gradientUnfilter: [function(width, height, stride, row, num_rows, data) {
    U.WebPFilters__doGradientFilter(data, width, height, stride, row, num_rows, true, data);
  }, "call$6", "WebPFilters_gradientUnfilter$closure", 12, 0, 27],
  WebPFilters__predictLine: function(src, pred, dst, $length, inverse) {
    var i, t1;
    if (inverse) {
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        t1 = J.$add$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, i)), J.$index$asx(pred.buffer, J.$add$ns(pred.offset, i)));
        J.$indexSet$ax(dst.buffer, J.$add$ns(dst.offset, i), t1);
      }
    } else {
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        t1 = J.$sub$n(J.$index$asx(src.buffer, J.$add$ns(src.offset, i)), J.$index$asx(pred.buffer, J.$add$ns(pred.offset, i)));
        J.$indexSet$ax(dst.buffer, J.$add$ns(dst.offset, i), t1);
      }
    }
  },
  WebPFilters__doHorizontalFilter: function(src, width, height, stride, row, numRows, inverse, out) {
    var t1, startOffset, lastRow, s, o, preds, t2, t3;
    t1 = J.getInterceptor$ns(row);
    startOffset = t1.$mul(row, stride);
    lastRow = t1.$add(row, numRows);
    s = U.InputBuffer$(src, false, null, startOffset);
    o = U.InputBuffer$(src, false, null, startOffset);
    preds = U.InputBuffer$from(inverse ? o : s, null, 0);
    if (t1.$eq(row, 0)) {
      t1 = J.$index$asx(s.buffer, J.$add$ns(s.offset, 0));
      J.$indexSet$ax(o.buffer, J.$add$ns(o.offset, 0), t1);
      U.WebPFilters__predictLine(U.InputBuffer$from(s, null, 1), preds, U.InputBuffer$from(o, null, 1), J.$sub$n(width, 1), inverse);
      preds.offset = J.$add$ns(preds.offset, stride);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
      row = 1;
    }
    for (t1 = J.getInterceptor$n(stride), t2 = J.getInterceptor$n(width); t3 = J.getInterceptor$n(row), t3.$lt(row, lastRow);) {
      U.WebPFilters__predictLine(s, U.InputBuffer$from(preds, null, t1.$negate(stride)), o, 1, inverse);
      U.WebPFilters__predictLine(U.InputBuffer$from(s, null, 1), preds, U.InputBuffer$from(o, null, 1), t2.$sub(width, 1), inverse);
      row = t3.$add(row, 1);
      preds.offset = J.$add$ns(preds.offset, stride);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
    }
  },
  WebPFilters__doVerticalFilter: function(src, width, height, stride, row, numRows, inverse, out) {
    var t1, startOffset, last_row, s, o, preds;
    t1 = J.getInterceptor$ns(row);
    startOffset = t1.$mul(row, stride);
    last_row = t1.$add(row, numRows);
    s = U.InputBuffer$(src, false, null, startOffset);
    o = U.InputBuffer$(out, false, null, startOffset);
    preds = U.InputBuffer$from(inverse ? o : s, null, 0);
    if (t1.$eq(row, 0)) {
      t1 = J.$index$asx(s.buffer, J.$add$ns(s.offset, 0));
      J.$indexSet$ax(o.buffer, J.$add$ns(o.offset, 0), t1);
      U.WebPFilters__predictLine(U.InputBuffer$from(s, null, 1), preds, U.InputBuffer$from(o, null, 1), J.$sub$n(width, 1), inverse);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
      row = 1;
    } else
      preds.offset = J.$sub$n(preds.offset, stride);
    for (; t1 = J.getInterceptor$n(row), t1.$lt(row, last_row);) {
      U.WebPFilters__predictLine(s, preds, o, width, inverse);
      row = t1.$add(row, 1);
      preds.offset = J.$add$ns(preds.offset, stride);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
    }
  },
  WebPFilters__doGradientFilter: function(src, width, height, stride, row, numRows, inverse, out) {
    var t1, startOffset, lastRow, s, o, preds, t2, w, t3, t4, t5, g, pred;
    t1 = J.getInterceptor$ns(row);
    startOffset = t1.$mul(row, stride);
    lastRow = t1.$add(row, numRows);
    s = U.InputBuffer$(src, false, null, startOffset);
    o = U.InputBuffer$(out, false, null, startOffset);
    preds = U.InputBuffer$from(inverse ? o : s, null, 0);
    if (t1.$eq(row, 0)) {
      t1 = J.$index$asx(s.buffer, J.$add$ns(s.offset, 0));
      J.$indexSet$ax(o.buffer, J.$add$ns(o.offset, 0), t1);
      U.WebPFilters__predictLine(U.InputBuffer$from(s, null, 1), preds, U.InputBuffer$from(o, null, 1), J.$sub$n(width, 1), inverse);
      preds.offset = J.$add$ns(preds.offset, stride);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
      row = 1;
    }
    for (t1 = J.getInterceptor$n(stride); t2 = J.getInterceptor$n(row), t2.$lt(row, lastRow);) {
      U.WebPFilters__predictLine(s, U.InputBuffer$from(preds, null, t1.$negate(stride)), o, 1, inverse);
      if (typeof width !== "number")
        return H.iae(width);
      w = 1;
      for (; w < width; ++w) {
        t3 = J.$index$asx(preds.buffer, J.$add$ns(preds.offset, w - 1));
        if (typeof stride !== "number")
          return H.iae(stride);
        t4 = w - stride;
        t5 = J.$index$asx(preds.buffer, J.$add$ns(preds.offset, t4));
        t4 = J.$index$asx(preds.buffer, J.$add$ns(preds.offset, t4 - 1));
        g = J.$sub$n(J.$add$ns(t3, t5), t4);
        if (J.$and$n(g, 4294967040) === 0)
          pred = g;
        else {
          if (typeof g !== "number")
            return g.$lt();
          pred = g < 0 ? 0 : 255;
        }
        t3 = J.$index$asx(s.buffer, J.$add$ns(s.offset, w));
        if (inverse)
          t4 = pred;
        else {
          if (typeof pred !== "number")
            return pred.$negate();
          t4 = -pred;
        }
        t4 = J.$add$ns(t3, t4);
        J.$indexSet$ax(o.buffer, J.$add$ns(o.offset, w), t4);
      }
      row = t2.$add(row, 1);
      preds.offset = J.$add$ns(preds.offset, stride);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
    }
  },
  Half__initialize: function() {
    var t1, i, e, t2, t3;
    if ($.Half__toFloatUint32 != null)
      return;
    t1 = new Uint32Array(65536);
    $.Half__toFloatUint32 = t1;
    $.Half__toFloatFloat32 = H.NativeFloat32List_NativeFloat32List$view(t1.buffer, 0, null);
    t1 = new Uint16Array(512);
    $.Half__eLut = t1;
    for (i = 0; i < 256; ++i) {
      e = (i & 255) - 112;
      t2 = e <= 0 || e >= 30;
      t3 = (i | 256) >>> 0;
      if (t2) {
        if (i >= 512)
          return H.ioore(t1, i);
        t1[i] = 0;
        if (t3 >= 512)
          return H.ioore(t1, t3);
        t1[t3] = 0;
      } else {
        t2 = e << 10 >>> 0;
        if (i >= 512)
          return H.ioore(t1, i);
        t1[i] = t2;
        if (t3 >= 512)
          return H.ioore(t1, t3);
        t1[t3] = (t2 | 32768) >>> 0;
      }
    }
    for (i = 0; i < 65536; ++i) {
      t1 = $.Half__toFloatUint32;
      t2 = U.Half__halfToFloat(i);
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = t2;
    }
  },
  Half__halfToFloat: function(y) {
    var s, e, m, t1;
    s = y >>> 15 & 1;
    e = y >>> 10 & 31;
    m = y & 1023;
    if (e === 0)
      if (m === 0)
        return s << 31 >>> 0;
      else {
        for (; (m & 1024) === 0;) {
          m = m << 1;
          --e;
        }
        ++e;
        m &= 4294966271;
      }
    else if (e === 31) {
      t1 = s << 31;
      if (m === 0)
        return (t1 | 2139095040) >>> 0;
      else
        return (t1 | 2139095040 | m << 13) >>> 0;
    }
    return (s << 31 | e + 112 << 23 | m << 13) >>> 0;
  },
  hdrToImage: function(hdr, exposure) {
    var t1, t2, t3, t4, image, pixels, m, y, di, x, r, g, b, ri, gi, bi, mi, di0, a;
    t1 = new U.hdrToImage__gamma(new U.hdrToImage__knee());
    t2 = hdr.slices;
    if (t2.get$isEmpty(t2))
      t3 = 0;
    else {
      t3 = t2.get$values(t2);
      t3 = J.get$width$x(t3._f$1(J.get$first$ax(t3._iterable)));
    }
    if (t2.get$isEmpty(t2))
      t4 = 0;
    else {
      t4 = t2.get$values(t2);
      t4 = J.get$height$x(t4._f$1(J.get$first$ax(t4._iterable)));
    }
    image = U.Image$(t3, t4, 4);
    pixels = H.NativeUint8List_NativeUint8List$view(image.data.buffer, 0, null);
    if (!(hdr.red != null || hdr.green != null || hdr.blue != null))
      throw H.wrapException(U.ImageException$("Only RGB[A] images are currently supported."));
    t3 = C.JSNumber_methods.clamp$2(exposure + 2.47393, -20, 20);
    m = Math.pow(2, t3);
    t3 = pixels.length;
    y = 0;
    di = 0;
    while (true) {
      if (t2.get$isEmpty(t2))
        t4 = 0;
      else {
        t4 = t2.get$values(t2);
        t4 = J.get$height$x(t4._f$1(J.get$first$ax(t4._iterable)));
      }
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (!(y < t4))
        break;
      x = 0;
      while (true) {
        if (t2.get$isEmpty(t2))
          t4 = 0;
        else {
          t4 = t2.get$values(t2);
          t4 = J.get$width$x(t4._f$1(J.get$first$ax(t4._iterable)));
        }
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(x < t4))
          break;
        t4 = hdr.red;
        r = t4 != null ? t4.getFloat$2(x, y) : 0;
        t4 = hdr.green;
        g = t4 != null ? t4.getFloat$2(x, y) : 0;
        t4 = hdr.blue;
        b = t4 != null ? t4.getFloat$2(x, y) : 0;
        if (r == Infinity || r == -Infinity || isNaN(r))
          r = 0;
        if (g == Infinity || g == -Infinity || isNaN(g))
          g = 0;
        if (b == Infinity || b == -Infinity || isNaN(b))
          b = 0;
        ri = t1.call$2(r, m);
        gi = t1.call$2(g, m);
        bi = t1.call$2(b, m);
        mi = P.max(ri, P.max(gi, bi));
        if (mi > 255) {
          ri = 255 * J.$div$n(ri, mi);
          gi = 255 * J.$div$n(gi, mi);
          bi = 255 * J.$div$n(bi, mi);
        }
        di0 = di + 1;
        t4 = C.JSInt_methods.clamp$2(J.toInt$0$n(ri), 0, 255);
        if (di < 0 || di >= t3)
          return H.ioore(pixels, di);
        pixels[di] = t4;
        di = di0 + 1;
        t4 = C.JSInt_methods.clamp$2(J.toInt$0$n(gi), 0, 255);
        if (di0 < 0 || di0 >= t3)
          return H.ioore(pixels, di0);
        pixels[di0] = t4;
        di0 = di + 1;
        t4 = C.JSInt_methods.clamp$2(J.toInt$0$n(bi), 0, 255);
        if (di < 0 || di >= t3)
          return H.ioore(pixels, di);
        pixels[di] = t4;
        t4 = hdr.alpha;
        if (t4 != null) {
          a = t4.getFloat$2(x, y);
          if (a == Infinity || a == -Infinity || isNaN(a))
            a = 1;
          di = di0 + 1;
          t4 = C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(a * 255), 0, 255);
          if (di0 < 0 || di0 >= t3)
            return H.ioore(pixels, di0);
          pixels[di0] = t4;
        } else {
          di = di0 + 1;
          if (di0 < 0 || di0 >= t3)
            return H.ioore(pixels, di0);
          pixels[di0] = 255;
        }
        ++x;
      }
      ++y;
    }
    return image;
  },
  DecodeInfo: {
    "^": "Object;width>,height>"
  },
  Decoder: {
    "^": "Object;"
  },
  ExrAttribute: {
    "^": "Object;name>,type>,size>,data>"
  },
  ExrB44Compressor: {
    "^": "ExrCompressor;_maxScanLineSize,_numScanLines,_optFlatFields,decodedWidth,decodedHeight,_header",
    numScanLines$0: function() {
      return this._numScanLines;
    },
    uncompress$5: function(inPtr, x, y, width, height) {
      throw H.wrapException(U.ImageException$("B44 compression not yet supported."));
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    }
  },
  ExrChannel: {
    "^": "Object;name>,type>,size>,pLinear,xSampling<,ySampling<",
    ExrChannel$1: function(input) {
      var t1, t2;
      t1 = input.readString$0();
      this.name = t1;
      if (t1.length === 0) {
        this.name = null;
        return;
      }
      this.type = input.readUint32$0();
      t1 = input.buffer;
      t2 = input.offset;
      input.offset = J.$add$ns(t2, 1);
      this.pLinear = J.$eq(J.$index$asx(t1, t2), 1);
      input.offset = J.$add$ns(input.offset, 3);
      this.xSampling = input.readUint32$0();
      this.ySampling = input.readUint32$0();
      t1 = this.type;
      switch (t1) {
        case 0:
          this.size = 4;
          break;
        case 1:
          this.size = 2;
          break;
        case 2:
          this.size = 4;
          break;
        default:
          throw H.wrapException(U.ImageException$("EXR Invalid pixel type: " + H.S(t1)));
      }
    },
    static: {"^": "ExrChannel_TYPE_UINT,ExrChannel_TYPE_HALF,ExrChannel_TYPE_FLOAT,ExrChannel_Y,ExrChannel_RY,ExrChannel_BY,ExrChannel_AR,ExrChannel_AG,ExrChannel_AB,ExrChannel_Z,ExrChannel_ZBack,ExrChannel_A,ExrChannel_R,ExrChannel_G,ExrChannel_B,ExrChannel_ID", ExrChannel$: function(input) {
        var t1 = new U.ExrChannel(null, null, null, null, null, null);
        t1.ExrChannel$1(input);
        return t1;
      }}
  },
  ExrCompressor: {
    "^": "Object;",
    uncompress$5: function(inPtr, x, y, width, height) {
      throw H.wrapException(U.ImageException$("Unsupported compression type"));
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    },
    _numSamples$3: function(s, a, b) {
      var a1, t1;
      a1 = C.JSNumber_methods.$tdiv(a, s);
      t1 = J.$sub$n(J.$tdiv$n(b, s), a1);
      return J.$add$ns(t1, a1 * s < a ? 0 : 1);
    }
  },
  ExrHufDec: {
    "^": "Object;len<,lit,p>"
  },
  ExrImage: {
    "^": "DecodeInfo;parts,version,flags,width,height,backgroundColor",
    _readImage$1: function(input) {
      var t1, pi, part, framebuffer, t2, ci, t3, ch, t4, t5, t6, t7, t8, t9;
      J.$and$n(this.flags, 16);
      for (t1 = this.parts, pi = 0; pi < t1.length; ++pi) {
        part = t1[pi];
        framebuffer = part.get$framebuffer();
        for (t2 = framebuffer.slices, ci = 0; t3 = part.channels, ci < t3.length; ++ci) {
          ch = t3[ci];
          t3 = J.getInterceptor$x(ch);
          if (!t2.containsKey$1(t3.get$name(ch))) {
            this.width = part.width;
            this.height = part.height;
            t4 = t3.get$name(ch);
            t5 = t3.get$name(ch);
            t6 = part.width;
            t7 = part.height;
            t3 = t3.get$type(ch);
            t8 = J.getInterceptor(t3);
            if (t8.$eq(t3, 1)) {
              t8 = J.$mul$ns(t6, t7);
              if (typeof t8 !== "number" || Math.floor(t8) !== t8)
                H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t8)));
              t8 = new Uint16Array(t8);
            } else {
              t9 = J.getInterceptor$ns(t6);
              if (t8.$eq(t3, 2)) {
                t8 = t9.$mul(t6, t7);
                if (typeof t8 !== "number" || Math.floor(t8) !== t8)
                  H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t8)));
                t8 = new Float32Array(t8);
              } else {
                t8 = t9.$mul(t6, t7);
                if (typeof t8 !== "number" || Math.floor(t8) !== t8)
                  H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t8)));
                t8 = new Uint32Array(t8);
              }
            }
            framebuffer.addSlice$2(t4, new U.HdrSlice(t5, t6, t7, t3, t8));
          }
        }
        if (part._tiled)
          this._readTiledPart$2(pi, input);
        else
          this._readScanlinePart$2(pi, input);
      }
    },
    _readTiledPart$2: function(pi, input) {
      var t1, part, multiPart, framebuffer, compressor, offsets, imgData, ly, l, t2, lx, ty, oi, t3, tx, tileX, tileY, dataSize, pos, t4, t5, t6, ty0, tx0, tileWidth, tileHeight, uncompressedData, len, numChannels, si, yi, ci, ch, slice, xx, bi, si0, di;
      t1 = this.parts;
      if (pi >= t1.length)
        return H.ioore(t1, pi);
      part = t1[pi];
      multiPart = J.$and$n(this.flags, 16) !== 0;
      framebuffer = part.get$framebuffer();
      compressor = part._compressor;
      offsets = part._offsets;
      t1 = part.channels.length;
      new Uint32Array(t1);
      imgData = U.InputBuffer$from(input, null, 0);
      t1 = framebuffer.slices;
      ly = 0;
      l = 0;
      while (true) {
        t2 = part._numYLevels;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(ly < t2))
          break;
        lx = 0;
        while (true) {
          t2 = part._numXLevels;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(lx < t2))
            break;
          t2 = l !== 0;
          ty = 0;
          oi = 0;
          while (true) {
            t3 = part._numYTiles;
            if (ly >= t3.length)
              return H.ioore(t3, ly);
            t3 = t3[ly];
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(ty < t3))
              break;
            tx = 0;
            while (true) {
              t3 = part._numXTiles;
              if (lx >= t3.length)
                return H.ioore(t3, lx);
              t3 = t3[lx];
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (!(tx < t3))
                break;
              if (t2)
                break;
              if (l < 0 || l >= offsets.length)
                return H.ioore(offsets, l);
              imgData.offset = J.$index$asx(offsets[l], oi);
              if (multiPart)
                if (imgData.readUint32$0() !== pi)
                  throw H.wrapException(U.ImageException$("Invalid Image Data"));
              tileX = imgData.readUint32$0();
              tileY = imgData.readUint32$0();
              imgData.readUint32$0();
              imgData.readUint32$0();
              dataSize = imgData.readUint32$0();
              pos = J.$add$ns(imgData.offset, 0);
              t3 = imgData.buffer;
              t4 = imgData.bigEndian;
              t5 = J.$add$ns(pos, dataSize);
              imgData.offset = J.$add$ns(imgData.offset, J.$sub$n(t5, pos));
              t6 = part._tileHeight;
              if (typeof t6 !== "number")
                return H.iae(t6);
              ty0 = tileY * t6;
              t6 = part._tileWidth;
              if (typeof t6 !== "number")
                return H.iae(t6);
              tx0 = tileX * t6;
              tileWidth = compressor.decodedWidth;
              tileHeight = compressor.decodedHeight;
              if (typeof tileWidth !== "number")
                return H.iae(tileWidth);
              t6 = this.width;
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (tx0 + tileWidth > t6)
                ;
              if (typeof tileHeight !== "number")
                return H.iae(tileHeight);
              t6 = this.height;
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (ty0 + tileHeight > t6)
                ;
              uncompressedData = compressor.uncompress$5(new U.InputBuffer(t3, pos, t5, pos, t4), tx0, ty0, part._tileWidth, part._tileHeight);
              tileWidth = compressor.decodedWidth;
              tileHeight = compressor.decodedHeight;
              len = uncompressedData.length;
              numChannels = part.channels.length;
              if (typeof tileHeight !== "number")
                return H.iae(tileHeight);
              si = 0;
              yi = 0;
              while (true) {
                if (yi < tileHeight) {
                  t3 = this.height;
                  if (typeof t3 !== "number")
                    return H.iae(t3);
                  t3 = ty0 < t3;
                } else
                  t3 = false;
                if (!t3)
                  break;
                for (ci = 0; ci < numChannels; ++ci) {
                  t3 = part.channels;
                  if (ci >= t3.length)
                    return H.ioore(t3, ci);
                  ch = t3[ci];
                  t3 = J.getInterceptor$x(ch);
                  slice = t1.$index(0, t3.get$name(ch)).getBytes$0();
                  if (si >= len)
                    break;
                  t4 = part._tileWidth;
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  tx0 = tileX * t4;
                  if (typeof tileWidth !== "number")
                    return H.iae(tileWidth);
                  t4 = slice.length;
                  xx = 0;
                  for (; xx < tileWidth; ++xx, ++tx0) {
                    bi = 0;
                    while (true) {
                      t5 = t3.get$size(ch);
                      if (typeof t5 !== "number")
                        return H.iae(t5);
                      if (!(bi < t5))
                        break;
                      t5 = part.width;
                      if (typeof t5 !== "number")
                        return H.iae(t5);
                      if (tx0 < t5) {
                        t6 = part.height;
                        if (typeof t6 !== "number")
                          return H.iae(t6);
                        t6 = ty0 < t6;
                      } else
                        t6 = false;
                      si0 = si + 1;
                      if (t6) {
                        t6 = t3.get$size(ch);
                        if (typeof t6 !== "number")
                          return H.iae(t6);
                        di = (ty0 * t5 + tx0) * t6 + bi;
                        if (si < 0 || si >= len)
                          return H.ioore(uncompressedData, si);
                        t6 = uncompressedData[si];
                        if (di >>> 0 !== di || di >= t4)
                          return H.ioore(slice, di);
                        slice[di] = t6;
                        si = si0;
                      } else
                        si = si0;
                      ++bi;
                    }
                  }
                }
                ++yi;
                ++ty0;
              }
              ++tx;
              ++oi;
            }
            ++ty;
          }
          ++lx;
          ++l;
        }
        ++ly;
      }
    },
    _readScanlinePart$2: function(pi, input) {
      var t1, part, multiPart, framebuffer, compressor, offsets, scanLineMin, linesInBuffer, fbi, imgData, t2, t3, t4, yy, t5, t6, dataSize, pos, t7, bytes, uncompressedData, len, numChannels, yi, si, ci, ch, slice, xx, bi, si0, t8;
      t1 = this.parts;
      if (pi >= t1.length)
        return H.ioore(t1, pi);
      part = t1[pi];
      multiPart = J.$and$n(this.flags, 16) !== 0;
      framebuffer = part.get$framebuffer();
      compressor = part._compressor;
      t1 = part._offsets;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      offsets = t1[0];
      t1 = part.dataWindow;
      scanLineMin = t1[1];
      t1[3];
      linesInBuffer = part._linesInBuffer;
      J.$sub$n(J.$add$ns(scanLineMin, linesInBuffer), 1);
      t1 = part.channels.length;
      fbi = new Uint32Array(t1);
      imgData = U.InputBuffer$from(input, null, 0);
      for (t2 = J.get$iterator$ax(offsets), t3 = framebuffer.slices, t4 = compressor != null, yy = 0; t2.moveNext$0();) {
        imgData.offset = t2.get$current();
        if (multiPart)
          if (imgData.readUint32$0() !== pi)
            throw H.wrapException(U.ImageException$("Invalid Image Data"));
        t5 = imgData.readUint32$0();
        t6 = $.get$__uint32();
        t6[0] = t5;
        t5 = $.get$__uint32ToInt32();
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5[0];
        t6[0] = imgData.readUint32$0();
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        dataSize = t5[0];
        pos = J.$add$ns(imgData.offset, 0);
        t5 = imgData.buffer;
        t6 = imgData.bigEndian;
        t7 = J.$add$ns(pos, dataSize);
        bytes = new U.InputBuffer(t5, pos, t7, pos, t6);
        imgData.offset = J.$add$ns(imgData.offset, J.$sub$n(t7, pos));
        uncompressedData = t4 ? compressor.uncompress$3(bytes, 0, yy) : bytes.toUint8List$0();
        len = uncompressedData.length;
        numChannels = part.channels.length;
        if (typeof linesInBuffer !== "number")
          return H.iae(linesInBuffer);
        yi = 0;
        while (true) {
          if (yi < linesInBuffer) {
            t5 = this.height;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = yy < t5;
          } else
            t5 = false;
          if (!t5)
            break;
          t5 = part._offsetInLineBuffer;
          if (yy < 0 || yy >= t5.length)
            return H.ioore(t5, yy);
          si = t5[yy];
          if (si >= len)
            break;
          for (ci = 0; ci < numChannels; ++ci) {
            t5 = part.channels;
            if (ci >= t5.length)
              return H.ioore(t5, ci);
            ch = t5[ci];
            t5 = J.getInterceptor$x(ch);
            slice = t3.$index(0, t5.get$name(ch)).getBytes$0();
            if (si >= len)
              break;
            t6 = slice.length;
            xx = 0;
            while (true) {
              t7 = part.width;
              if (typeof t7 !== "number")
                return H.iae(t7);
              if (!(xx < t7))
                break;
              bi = 0;
              while (true) {
                t7 = t5.get$size(ch);
                if (typeof t7 !== "number")
                  return H.iae(t7);
                if (!(bi < t7))
                  break;
                if (ci >= t1)
                  return H.ioore(fbi, ci);
                t7 = fbi[ci];
                fbi[ci] = t7 + 1;
                si0 = si + 1;
                if (si < 0 || si >= len)
                  return H.ioore(uncompressedData, si);
                t8 = uncompressedData[si];
                if (t7 >= t6)
                  return H.ioore(slice, t7);
                slice[t7] = t8;
                ++bi;
                si = si0;
              }
              ++xx;
            }
          }
          ++yi;
          ++yy;
        }
      }
    },
    ExrImage$1: function(bytes) {
      var input, t1, t2, part;
      input = U.InputBuffer$(bytes, false, null, 0);
      if (input.readUint32$0() !== 20000630)
        throw H.wrapException(U.ImageException$("File is not an OpenEXR image file."));
      t1 = input.buffer;
      t2 = input.offset;
      input.offset = J.$add$ns(t2, 1);
      t2 = J.$index$asx(t1, t2);
      this.version = t2;
      if (!J.$eq(t2, 2))
        throw H.wrapException(U.ImageException$("Cannot read version " + H.S(this.version) + " image files."));
      t1 = input.readUint24$0();
      this.flags = t1;
      if (J.$and$n(t1, 4294967289) !== 0)
        throw H.wrapException(U.ImageException$("The file format version number's flag field contains unrecognized flags."));
      if (J.$and$n(this.flags, 16) === 0) {
        part = U.ExrPart$(J.$and$n(this.flags, 2) !== 0, input);
        if (part.width != null)
          this.parts.push(part);
      } else
        for (t1 = this.parts; true;) {
          part = U.ExrPart$(J.$and$n(this.flags, 2) !== 0, input);
          if (part.width == null)
            break;
          t1.push(part);
        }
      t1 = this.parts;
      t2 = t1.length;
      if (t2 === 0)
        throw H.wrapException(U.ImageException$("Error reading image header"));
      for (t1 = new H.ListIterator(t1, t2, 0, null); t1.moveNext$0();)
        t1._current._readOffsets$1(input);
      this._readImage$1(input);
    },
    $isExrImage: true,
    static: {"^": "ExrImage_MAGIC,ExrImage_EXR_VERSION,ExrImage_TILED_FLAG,ExrImage_LONG_NAMES_FLAG,ExrImage_NON_IMAGE_FLAG,ExrImage_MULTI_PART_FILE_FLAG,ExrImage_ALL_FLAGS", ExrImage$: function(bytes) {
        var t1 = new U.ExrImage([], null, null, 0, 0, 4294967295);
        t1.ExrImage$1(bytes);
        return t1;
      }, ExrImage_isValidFile: function(bytes) {
        var input, t1, t2;
        input = U.InputBuffer$(bytes, false, null, 0);
        if (input.readUint32$0() !== 20000630)
          return false;
        t1 = input.buffer;
        t2 = input.offset;
        input.offset = J.$add$ns(t2, 1);
        if (!J.$eq(J.$index$asx(t1, t2), 2))
          return false;
        if (J.$and$n(input.readUint24$0(), 4294967289) !== 0)
          return false;
        return true;
      }}
  },
  ExrPart: {
    "^": "Object;framebuffer<,channels,attributes,displayWindow,dataWindow,width>,height>,pixelAspectRatio,screenWindowCenterX,screenWindowCenterY,screenWindowWidth,chromaticities,_type,_lineOrder,_compressionType,_offsets,_bytesPerLine,_compressor,_linesInBuffer,_lineBufferSize,_offsetInLineBuffer,_tiled,_tileWidth,_tileHeight,_tileLevelMode,_tileRoundingMode,_numXTiles,_numYTiles,_numXLevels,_numYLevels,_bytesPerPixel,_maxBytesPerTileLine,_tileBufferSize",
    _floorLog2$1: function(x) {
      var y;
      for (y = 0; J.getInterceptor$n(x).$gt(x, 1);) {
        ++y;
        if (typeof x !== "number")
          return x.$shr();
        x = C.JSNumber_methods._shrOtherPositive$1(x, 1);
      }
      return y;
    },
    _ceilLog2$1: function(x) {
      var y, r;
      for (y = 0, r = 0; J.getInterceptor$n(x).$gt(x, 1);) {
        if (typeof x !== "number")
          return x.$and();
        if ((x & 1) !== 0)
          r = 1;
        ++y;
        x = C.JSNumber_methods._shrOtherPositive$1(x, 1);
      }
      return y + r;
    },
    _readOffsets$1: function(input) {
      var i, j, t1, numOffsets;
      if (this._tiled)
        for (i = 0; i < this._offsets.length; ++i) {
          j = 0;
          while (true) {
            t1 = this._offsets;
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1 = J.get$length$asx(t1[i]);
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(j < t1))
              break;
            t1 = this._offsets;
            if (i >= t1.length)
              return H.ioore(t1, i);
            J.$indexSet$ax(t1[i], j, input.readUint64$0());
            ++j;
          }
        }
      else {
        t1 = this._offsets;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        numOffsets = J.get$length$asx(t1[0]);
        if (typeof numOffsets !== "number")
          return H.iae(numOffsets);
        i = 0;
        for (; i < numOffsets; ++i) {
          t1 = this._offsets;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          J.$indexSet$ax(t1[0], i, input.readUint64$0());
        }
      }
    },
    _calculateBytesPerPixel$0: function() {
      var t1, bytesPerPixel, t2;
      for (t1 = this.channels, t1 = new H.ListIterator(t1, t1.length, 0, null), bytesPerPixel = 0; t1.moveNext$0();) {
        t2 = J.get$size$x(t1._current);
        if (typeof t2 !== "number")
          return H.iae(t2);
        bytesPerPixel += t2;
      }
      return bytesPerPixel;
    },
    _calculateNumTiles$6: function(numTiles, numLevels, min, max, size, rmode) {
      var t1, t2, i, a, b, size0, t3;
      if (typeof numLevels !== "number")
        return H.iae(numLevels);
      t1 = rmode === 1;
      t2 = J.getInterceptor$n(max);
      i = 0;
      for (; i < numLevels; ++i) {
        a = J.$add$ns(t2.$sub(max, min), 1);
        b = C.JSInt_methods._shlPositive$1(1, i);
        size0 = J.$tdiv$n(a, b);
        t3 = P.max(t1 && J.$lt$n(J.$mul$ns(size0, b), a) ? J.$add$ns(size0, 1) : size0, 1);
        if (typeof size !== "number")
          return H.iae(size);
        t3 = C.JSNumber_methods.$tdiv(t3 + size - 1, size);
        if (i >= numTiles.length)
          return H.ioore(numTiles, i);
        numTiles[i] = t3;
      }
    },
    ExrPart$2: function(_tiled, input) {
      var t1, t2, $name, type, size, pos, t3, t4, t5, bytes, channel, t6, t7, mode, s, num, w, h, ly, l, lx, ch, nBytes, y, maxBytesPerLine, offset, i, numOffsets;
      t1 = this._tiled;
      this._type = t1 ? 1 : 0;
      for (t2 = this.attributes; true;) {
        $name = input.readString$0();
        if ($name.length === 0)
          break;
        type = input.readString$0();
        size = input.readUint32$0();
        pos = J.$add$ns(input.offset, 0);
        t3 = input.buffer;
        t4 = input.bigEndian;
        t5 = J.$add$ns(pos, size);
        bytes = new U.InputBuffer(t3, pos, t5, pos, t4);
        input.offset = J.$add$ns(input.offset, J.$sub$n(t5, pos));
        t2.$indexSet(0, $name, new U.ExrAttribute($name, type, size, bytes));
        switch ($name) {
          case "channels":
            for (; true;) {
              channel = U.ExrChannel$(bytes);
              if (channel.name == null)
                break;
              this.channels.push(channel);
            }
            break;
          case "chromaticities":
            t3 = new Float32Array(8);
            this.chromaticities = t3;
            t4 = bytes.readUint32$0();
            t5 = $.get$__uint32();
            t5[0] = t4;
            t4 = $.get$__uint32ToFloat32();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[0] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[1] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[2] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[3] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[4] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[5] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[6] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[7] = t4[0];
            break;
          case "compression":
            t3 = bytes.buffer;
            t4 = bytes.offset;
            bytes.offset = J.$add$ns(t4, 1);
            t4 = J.$index$asx(t3, t4);
            this._compressionType = t4;
            if (J.$gt$n(t4, 7))
              throw H.wrapException(U.ImageException$("EXR Invalid compression type"));
            break;
          case "dataWindow":
            t3 = bytes.readUint32$0();
            t4 = $.get$__uint32();
            t4[0] = t3;
            t3 = $.get$__uint32ToInt32();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t5 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t6 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t7 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t3 = [t5, t6, t7, t3[0]];
            this.dataWindow = t3;
            this.width = J.$add$ns(J.$sub$n(t3[2], t3[0]), 1);
            t3 = this.dataWindow;
            this.height = J.$add$ns(J.$sub$n(t3[3], t3[1]), 1);
            break;
          case "displayWindow":
            t3 = bytes.readUint32$0();
            t4 = $.get$__uint32();
            t4[0] = t3;
            t3 = $.get$__uint32ToInt32();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t5 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t6 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t7 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            this.displayWindow = [t5, t6, t7, t3[0]];
            break;
          case "lineOrder":
            t3 = bytes.buffer;
            t4 = bytes.offset;
            bytes.offset = J.$add$ns(t4, 1);
            this._lineOrder = J.$index$asx(t3, t4);
            break;
          case "pixelAspectRatio":
            t3 = bytes.readUint32$0();
            $.get$__uint32()[0] = t3;
            t3 = $.get$__uint32ToFloat32();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            this.pixelAspectRatio = t3[0];
            break;
          case "screenWindowCenter":
            t3 = bytes.readUint32$0();
            t4 = $.get$__uint32();
            t4[0] = t3;
            t3 = $.get$__uint32ToFloat32();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            this.screenWindowCenterX = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            this.screenWindowCenterY = t3[0];
            break;
          case "screenWindowWidth":
            t3 = bytes.readUint32$0();
            $.get$__uint32()[0] = t3;
            t3 = $.get$__uint32ToFloat32();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            this.screenWindowWidth = t3[0];
            break;
          case "tiles":
            this._tileWidth = bytes.readUint32$0();
            this._tileHeight = bytes.readUint32$0();
            t3 = bytes.buffer;
            t4 = bytes.offset;
            bytes.offset = J.$add$ns(t4, 1);
            mode = J.$index$asx(t3, t4);
            this._tileLevelMode = J.getInterceptor$n(mode).$and(mode, 15);
            if (typeof mode !== "number")
              return mode.$shr();
            this._tileRoundingMode = C.JSNumber_methods._shrOtherPositive$1(mode, 4) & 15;
            break;
          case "type":
            s = bytes.readString$0();
            if (s === "deepscanline")
              this._type = 2;
            else if (s === "deeptile")
              this._type = 3;
            else
              throw H.wrapException(U.ImageException$("EXR Invalid type: " + s));
            break;
          default:
            break;
        }
      }
      if (t1) {
        t1 = this.dataWindow;
        t2 = t1[0];
        t3 = t1[2];
        t4 = t1[1];
        t1 = t1[3];
        switch (this._tileLevelMode) {
          case 0:
            num = 1;
            break;
          case 1:
            t1 = P.max(J.$add$ns(J.$sub$n(t3, t2), 1), J.$add$ns(J.$sub$n(t1, t4), 1));
            num = (this._tileRoundingMode === 0 ? this._floorLog2$1(t1) : this._ceilLog2$1(t1)) + 1;
            break;
          case 2:
            w = J.$add$ns(J.$sub$n(t3, t2), 1);
            num = (this._tileRoundingMode === 0 ? this._floorLog2$1(w) : this._ceilLog2$1(w)) + 1;
            break;
          default:
            H.throwExpression(U.ImageException$("Unknown LevelMode format."));
            num = 0;
        }
        this._numXLevels = num;
        t1 = this.dataWindow;
        t2 = t1[0];
        t3 = t1[2];
        t4 = t1[1];
        t1 = t1[3];
        switch (this._tileLevelMode) {
          case 0:
            num = 1;
            break;
          case 1:
            t1 = P.max(J.$add$ns(J.$sub$n(t3, t2), 1), J.$add$ns(J.$sub$n(t1, t4), 1));
            num = (this._tileRoundingMode === 0 ? this._floorLog2$1(t1) : this._ceilLog2$1(t1)) + 1;
            break;
          case 2:
            h = J.$add$ns(J.$sub$n(t1, t4), 1);
            num = (this._tileRoundingMode === 0 ? this._floorLog2$1(h) : this._ceilLog2$1(h)) + 1;
            break;
          default:
            H.throwExpression(U.ImageException$("Unknown LevelMode format."));
            num = 0;
        }
        this._numYLevels = num;
        if (this._tileLevelMode !== 2)
          this._numYLevels = 1;
        t1 = this._numXLevels;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._numXTiles = H.setRuntimeTypeInfo(Array(t1), [J.JSInt]);
        t1 = this._numYLevels;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._numYTiles = H.setRuntimeTypeInfo(Array(t1), [J.JSInt]);
        t1 = this._numXTiles;
        t2 = this._numXLevels;
        t3 = this.dataWindow;
        this._calculateNumTiles$6(t1, t2, t3[0], t3[2], this._tileWidth, this._tileRoundingMode);
        t3 = this._numYTiles;
        t2 = this._numYLevels;
        t1 = this.dataWindow;
        this._calculateNumTiles$6(t3, t2, t1[1], t1[3], this._tileHeight, this._tileRoundingMode);
        t1 = this._calculateBytesPerPixel$0();
        this._bytesPerPixel = t1;
        t2 = this._tileWidth;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 * t2;
        this._maxBytesPerTileLine = t2;
        t1 = this._tileHeight;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._tileBufferSize = t2 * t1;
        this._compressor = U.ExrCompressor_ExrCompressor(this._compressionType, this, t2, t1);
        t1 = this._numXLevels;
        t2 = this._numYLevels;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        this._offsets = H.setRuntimeTypeInfo(Array(t1 * t2), [P.Uint32List]);
        ly = 0;
        l = 0;
        while (true) {
          t1 = this._numYLevels;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(ly < t1))
            break;
          lx = 0;
          while (true) {
            t1 = this._numXLevels;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(lx < t1))
              break;
            t1 = this._offsets;
            t2 = this._numXTiles;
            if (lx >= t2.length)
              return H.ioore(t2, lx);
            t2 = t2[lx];
            t3 = this._numYTiles;
            if (ly >= t3.length)
              return H.ioore(t3, ly);
            t3 = J.$mul$ns(t2, t3[ly]);
            if (typeof t3 !== "number" || Math.floor(t3) !== t3)
              H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t3)));
            t2 = new Uint32Array(t3);
            if (l < 0 || l >= t1.length)
              return H.ioore(t1, l);
            t1[l] = t2;
            ++lx;
            ++l;
          }
          ++ly;
        }
      } else {
        t1 = J.$add$ns(this.height, 1);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        this._bytesPerLine = new Uint32Array(t1);
        for (t1 = this.channels, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          ch = t1._current;
          t2 = J.get$size$x(ch);
          t3 = this.width;
          if (typeof t2 !== "number")
            return t2.$mul();
          if (typeof t3 !== "number")
            return H.iae(t3);
          nBytes = C.JSNumber_methods.$tdiv(t2 * t3, ch.get$xSampling());
          t2 = this.height;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = this.dataWindow;
          t4 = ch.ySampling;
          t5 = this._bytesPerLine;
          y = 0;
          for (; y < t2; ++y) {
            t6 = t3[1];
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (C.JSNumber_methods.$mod(y + t6, t4) === 0) {
              if (y >= t5.length)
                return H.ioore(t5, y);
              t5[y] = t5[y] + nBytes;
            }
          }
        }
        maxBytesPerLine = 0;
        y = 0;
        while (true) {
          t1 = this.height;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(y < t1))
            break;
          t1 = this._bytesPerLine;
          if (y >= t1.length)
            return H.ioore(t1, y);
          maxBytesPerLine = P.max(maxBytesPerLine, t1[y]);
          ++y;
        }
        t1 = U.ExrCompressor_ExrCompressor(this._compressionType, this, maxBytesPerLine, null);
        this._compressor = t1;
        t1 = t1.numScanLines$0();
        this._linesInBuffer = t1;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._lineBufferSize = maxBytesPerLine * t1;
        t1 = this._bytesPerLine.length;
        t2 = new Uint32Array(t1);
        this._offsetInLineBuffer = t2;
        for (t3 = this._bytesPerLine, t4 = t3.length - 1, t5 = this._linesInBuffer, offset = 0, i = 0; i <= t4; ++i) {
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (C.JSInt_methods.$mod(i, t5) === 0)
            offset = 0;
          if (i >= t1)
            return H.ioore(t2, i);
          t2[i] = offset;
          offset += t3[i];
        }
        numOffsets = J.$sub$n(J.$tdiv$n(J.$add$ns(this.height, t5), this._linesInBuffer), 1);
        if (typeof numOffsets !== "number" || Math.floor(numOffsets) !== numOffsets)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(numOffsets)));
        this._offsets = [new Uint32Array(numOffsets)];
      }
    },
    static: {"^": "ExrPart_TYPE_SCANLINE,ExrPart_TYPE_TILE,ExrPart_TYPE_DEEP_SCANLINE,ExrPart_TYPE_DEEP_TILE,ExrPart_INCREASING_Y,ExrPart_DECREASING_Y,ExrPart_RANDOM_Y,ExrPart_ONE_LEVEL,ExrPart_MIPMAP_LEVELS,ExrPart_RIPMAP_LEVELS,ExrPart_ROUND_DOWN,ExrPart_ROUND_UP", ExrPart$: function(_tiled, input) {
        var t1 = new U.ExrPart(new U.HdrImage(P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, null, null, null, null), [], P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, null, null, null, 1, 0, 0, 1, null, null, 0, 0, null, null, null, null, null, null, _tiled, null, null, null, null, null, null, null, null, null, null, null);
        t1.ExrPart$2(_tiled, input);
        return t1;
      }}
  },
  ExrPizCompressor: {
    "^": "ExrCompressor;_output,_maxScanLineSize,_numScanLines,_channelData,_tmpBuffer,decodedWidth,decodedHeight,_header",
    numScanLines$0: function() {
      return this._numScanLines;
    },
    uncompress$5: function(inPtr, x, y, width, height) {
      var maxX, maxY, t1, t2, channels, numChannels, tmpBufferEnd, i, ch, cd, minNonZero, maxNonZero, bitmap, b, len, j, j0, lut, maxValue, t3, t4;
      if (width == null)
        width = this._header.width;
      if (height == null)
        height = this._header._linesInBuffer;
      if (typeof width !== "number")
        return H.iae(width);
      maxX = x + width - 1;
      if (typeof height !== "number")
        return H.iae(height);
      maxY = y + height - 1;
      t1 = this._header;
      t2 = t1.width;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxX > t2)
        maxX = t2 - 1;
      t2 = t1.height;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxY > t2)
        maxY = t2 - 1;
      this.decodedWidth = maxX - x + 1;
      this.decodedHeight = maxY - y + 1;
      channels = t1.channels;
      numChannels = channels.length;
      for (tmpBufferEnd = 0, i = 0; i < numChannels; ++i) {
        if (i >= channels.length)
          return H.ioore(channels, i);
        ch = channels[i];
        t1 = this._channelData;
        if (i >= t1.length)
          return H.ioore(t1, i);
        cd = t1[i];
        t1 = J.getInterceptor$x(cd);
        t1.set$start(cd, tmpBufferEnd);
        cd.set$end(t1.get$start(cd));
        cd.nx = this._numSamples$3(ch.get$xSampling(), x, maxX);
        t1 = this._numSamples$3(ch.ySampling, y, maxY);
        cd.ny = t1;
        cd.ys = ch.ySampling;
        t2 = ch.size;
        if (typeof t2 !== "number")
          return t2.$tdiv();
        cd.size = t2 / 2 | 0;
        t1 = J.$mul$ns(J.$mul$ns(cd.nx, t1), cd.size);
        if (typeof t1 !== "number")
          return H.iae(t1);
        tmpBufferEnd += t1;
      }
      minNonZero = inPtr.readUint16$0();
      maxNonZero = inPtr.readUint16$0();
      if (maxNonZero >= 8192)
        throw H.wrapException(U.ImageException$("Error in header for PIZ-compressed data (invalid bitmap size)."));
      bitmap = new Uint8Array(8192);
      if (minNonZero <= maxNonZero) {
        b = inPtr.readBytes$1(maxNonZero - minNonZero + 1);
        len = J.$sub$n(b.end, b.offset);
        if (typeof len !== "number")
          return H.iae(len);
        j = minNonZero;
        i = 0;
        for (; i < len; ++i, j = j0) {
          j0 = j + 1;
          t1 = J.$index$asx(b.buffer, J.$add$ns(b.offset, i));
          if (j >= 8192)
            return H.ioore(bitmap, j);
          bitmap[j] = t1;
        }
      }
      lut = new Uint16Array(65536);
      maxValue = this._reverseLutFromBitmap$2(bitmap, lut);
      U.ExrHuffman_uncompress(inPtr, inPtr.readUint32$0(), this._tmpBuffer, tmpBufferEnd);
      for (i = 0; i < numChannels; ++i) {
        t1 = this._channelData;
        if (i >= t1.length)
          return H.ioore(t1, i);
        cd = t1[i];
        t1 = J.getInterceptor$x(cd);
        j = 0;
        while (true) {
          t2 = t1.get$size(cd);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(j < t2))
            break;
          U.ExrWavelet_decode(this._tmpBuffer, J.$add$ns(t1.get$start(cd), j), cd.get$nx(), t1.get$size(cd), cd.ny, J.$mul$ns(cd.nx, cd.size), maxValue);
          ++j;
        }
      }
      this._applyLut$3(lut, this._tmpBuffer, tmpBufferEnd);
      t1 = this._output;
      if (t1 == null) {
        t1 = this._maxScanLineSize;
        t2 = this._numScanLines;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = U.OutputBuffer$(false, t1 * t2 + 73728);
        this._output = t2;
        t1 = t2;
      }
      t1.length = 0;
      for (; y <= maxY; ++y)
        for (i = 0; i < numChannels; ++i) {
          t1 = this._channelData;
          if (i >= t1.length)
            return H.ioore(t1, i);
          cd = t1[i];
          t1 = cd.get$ys();
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (C.JSInt_methods.$mod(y, t1) !== 0)
            continue;
          for (x = J.$mul$ns(cd.nx, cd.size); t1 = J.getInterceptor$n(x), t1.$gt(x, 0); x = t1.$sub(x, 1)) {
            t2 = this._output;
            t3 = this._tmpBuffer;
            t4 = cd.end;
            if (typeof t4 !== "number")
              return t4.$add();
            cd.end = t4 + 1;
            if (t4 >>> 0 !== t4 || t4 >= t3.length)
              return H.ioore(t3, t4);
            t2.writeUint16$1(t3[t4]);
          }
        }
      t1 = this._output;
      return H.NativeUint8List_NativeUint8List$view(t1._image$_buffer.buffer, 0, t1.length);
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    },
    _applyLut$3: function(lut, data, nData) {
      var i, t1;
      for (i = 0; i < nData; ++i) {
        if (i >= data.length)
          return H.ioore(data, i);
        t1 = data[i];
        if (t1 >= 65536)
          return H.ioore(lut, t1);
        data[i] = lut[t1];
      }
    },
    _reverseLutFromBitmap$2: function(bitmap, lut) {
      var k, i, t1, k0, k1;
      for (k = 0, i = 0; i < 65536; ++i) {
        if (i !== 0) {
          t1 = i >>> 3;
          if (t1 >= 8192)
            return H.ioore(bitmap, t1);
          t1 = (bitmap[t1] & C.JSInt_methods._shlPositive$1(1, i & 7)) !== 0;
        } else
          t1 = true;
        if (t1) {
          k0 = k + 1;
          if (k >= 65536)
            return H.ioore(lut, k);
          lut[k] = i;
          k = k0;
        }
      }
      for (k0 = k; k0 < 65536; k0 = k1) {
        k1 = k0 + 1;
        lut[k0] = 0;
      }
      return k - 1;
    },
    ExrPizCompressor$3: function(header, _maxScanLineSize, _numScanLines) {
      var t1, t2, i, tmpBufferSize;
      t1 = H.setRuntimeTypeInfo(Array(header.channels.length), [U._PizChannelData]);
      this._channelData = t1;
      for (t2 = t1.length, i = 0; i < t2; ++i)
        t1[i] = new U._PizChannelData(null, null, null, null, null, null);
      t1 = this._maxScanLineSize;
      t2 = this._numScanLines;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      tmpBufferSize = C.JSNumber_methods._tdivFast$1(t1 * t2, 2);
      if (typeof tmpBufferSize !== "number" || Math.floor(tmpBufferSize) !== tmpBufferSize)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(tmpBufferSize)));
      this._tmpBuffer = new Uint16Array(tmpBufferSize);
    },
    static: {"^": "ExrPizCompressor_USHORT_RANGE,ExrPizCompressor_BITMAP_SIZE", ExrPizCompressor$: function(header, _maxScanLineSize, _numScanLines) {
        var t1 = new U.ExrPizCompressor(null, _maxScanLineSize, _numScanLines, null, null, 0, 0, header);
        t1.ExrPizCompressor$3(header, _maxScanLineSize, _numScanLines);
        return t1;
      }}
  },
  _PizChannelData: {
    "^": "Object;start*,end?,nx<,ny,ys<,size>"
  },
  ExrPxr24Compressor: {
    "^": "ExrCompressor;_zlib,_maxScanLineSize,_numScanLines,_output,decodedWidth,decodedHeight,_header",
    numScanLines$0: function() {
      return this._numScanLines;
    },
    uncompress$5: function(inPtr, x, y, width, height) {
      var data, t1, t2, ptr, pixel, pixelBytes, maxX, maxY, numChannels, t3, yi, tmpEnd, ci, t4, ch, n, j, t5, t6, k, t7;
      data = this._zlib.decodeBuffer$2$verify(T.InputStream$(inPtr.toUint8List$0(), 1, null, 0), true);
      t1 = this._output;
      if (t1 == null) {
        t1 = this._numScanLines;
        t2 = this._maxScanLineSize;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = U.OutputBuffer$(false, t1 * t2);
        this._output = t2;
        t1 = t2;
      }
      t1.length = 0;
      ptr = [0, 0, 0, 0];
      pixel = new Uint32Array(1);
      pixelBytes = H.NativeUint8List_NativeUint8List$view(pixel.buffer, 0, null);
      if (width == null)
        width = this._header.width;
      if (height == null)
        height = this._header._linesInBuffer;
      if (typeof width !== "number")
        return H.iae(width);
      maxX = x + width - 1;
      if (typeof height !== "number")
        return H.iae(height);
      maxY = y + height - 1;
      t1 = this._header;
      t2 = t1.width;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxX > t2)
        maxX = t2 - 1;
      t2 = t1.height;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxY > t2)
        maxY = t2 - 1;
      this.decodedWidth = maxX - x + 1;
      this.decodedHeight = maxY - y + 1;
      numChannels = t1.channels.length;
      for (t2 = pixelBytes.length, t3 = data.length, yi = y, tmpEnd = 0; yi <= maxY; ++yi)
        for (ci = 0; ci < numChannels; ++ci) {
          t4 = t1.channels;
          if (ci >= t4.length)
            return H.ioore(t4, ci);
          ch = t4[ci];
          if (C.JSInt_methods.$mod(y, ch.get$ySampling()) !== 0)
            continue;
          n = this._numSamples$3(ch.xSampling, x, maxX);
          pixel[0] = 0;
          switch (ch.type) {
            case 0:
              ptr[0] = tmpEnd;
              if (typeof n !== "number")
                return H.iae(n);
              t4 = tmpEnd + n;
              ptr[1] = t4;
              t4 += n;
              ptr[2] = t4;
              tmpEnd = t4 + n;
              for (j = 0; j < n; ++j) {
                t4 = ptr[0];
                ptr[0] = J.$add$ns(t4, 1);
                if (t4 >>> 0 !== t4 || t4 >= t3)
                  return H.ioore(data, t4);
                t4 = data[t4];
                t5 = ptr[1];
                ptr[1] = J.$add$ns(t5, 1);
                if (t5 >>> 0 !== t5 || t5 >= t3)
                  return H.ioore(data, t5);
                t5 = data[t5];
                t6 = ptr[2];
                ptr[2] = J.$add$ns(t6, 1);
                if (t6 >>> 0 !== t6 || t6 >= t3)
                  return H.ioore(data, t6);
                t6 = data[t6];
                pixel[0] = pixel[0] + ((t4 << 24 | t5 << 16 | t6 << 8) >>> 0);
                for (k = 0; k < 4; ++k) {
                  t4 = this._output;
                  if (k >= t2)
                    return H.ioore(pixelBytes, k);
                  t5 = pixelBytes[k];
                  if (J.$eq(t4.length, t4._image$_buffer.length))
                    t4._expandBuffer$0();
                  t6 = t4._image$_buffer;
                  t7 = t4.length;
                  t4.length = J.$add$ns(t7, 1);
                  if (t7 >>> 0 !== t7 || t7 >= t6.length)
                    return H.ioore(t6, t7);
                  t6[t7] = t5 & 255;
                }
              }
              break;
            case 1:
              ptr[0] = tmpEnd;
              if (typeof n !== "number")
                return H.iae(n);
              t4 = tmpEnd + n;
              ptr[1] = t4;
              tmpEnd = t4 + n;
              for (j = 0; j < n; ++j) {
                t4 = ptr[0];
                ptr[0] = J.$add$ns(t4, 1);
                if (t4 >>> 0 !== t4 || t4 >= t3)
                  return H.ioore(data, t4);
                t4 = data[t4];
                t5 = ptr[1];
                ptr[1] = J.$add$ns(t5, 1);
                if (t5 >>> 0 !== t5 || t5 >= t3)
                  return H.ioore(data, t5);
                t5 = data[t5];
                pixel[0] = pixel[0] + ((t4 << 8 | t5) >>> 0);
                for (k = 0; k < 2; ++k) {
                  t4 = this._output;
                  if (k >= t2)
                    return H.ioore(pixelBytes, k);
                  t5 = pixelBytes[k];
                  if (J.$eq(t4.length, t4._image$_buffer.length))
                    t4._expandBuffer$0();
                  t6 = t4._image$_buffer;
                  t7 = t4.length;
                  t4.length = J.$add$ns(t7, 1);
                  if (t7 >>> 0 !== t7 || t7 >= t6.length)
                    return H.ioore(t6, t7);
                  t6[t7] = t5 & 255;
                }
              }
              break;
            case 2:
              ptr[0] = tmpEnd;
              if (typeof n !== "number")
                return H.iae(n);
              t4 = tmpEnd + n;
              ptr[1] = t4;
              t4 += n;
              ptr[2] = t4;
              tmpEnd = t4 + n;
              for (j = 0; j < n; ++j) {
                t4 = ptr[0];
                ptr[0] = J.$add$ns(t4, 1);
                if (t4 >>> 0 !== t4 || t4 >= t3)
                  return H.ioore(data, t4);
                t4 = data[t4];
                t5 = ptr[1];
                ptr[1] = J.$add$ns(t5, 1);
                if (t5 >>> 0 !== t5 || t5 >= t3)
                  return H.ioore(data, t5);
                t5 = data[t5];
                t6 = ptr[2];
                ptr[2] = J.$add$ns(t6, 1);
                if (t6 >>> 0 !== t6 || t6 >= t3)
                  return H.ioore(data, t6);
                t6 = data[t6];
                pixel[0] = pixel[0] + ((t4 << 24 | t5 << 16 | t6 << 8) >>> 0);
                for (k = 0; k < 4; ++k) {
                  t4 = this._output;
                  if (k >= t2)
                    return H.ioore(pixelBytes, k);
                  t5 = pixelBytes[k];
                  if (J.$eq(t4.length, t4._image$_buffer.length))
                    t4._expandBuffer$0();
                  t6 = t4._image$_buffer;
                  t7 = t4.length;
                  t4.length = J.$add$ns(t7, 1);
                  if (t7 >>> 0 !== t7 || t7 >= t6.length)
                    return H.ioore(t6, t7);
                  t6[t7] = t5 & 255;
                }
              }
              break;
          }
        }
      t1 = this._output;
      return H.NativeUint8List_NativeUint8List$view(t1._image$_buffer.buffer, 0, t1.length);
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    }
  },
  ExrRleCompressor: {
    "^": "ExrCompressor;_outCache,_maxScanLineSize,decodedWidth,decodedHeight,_header",
    numScanLines$0: function() {
      return 1;
    },
    uncompress$5: function(inPtr, x, y, width, height) {
      var t1, out, maxX, maxY, t2, t3, n, count, count0, t4, data, len, i, t10, si, si0, t11, t20;
      t1 = inPtr.end;
      out = U.OutputBuffer$(false, J.$mul$ns(J.$sub$n(t1, inPtr.offset), 2));
      if (width == null)
        width = this._header.width;
      if (height == null)
        height = this._header._linesInBuffer;
      if (typeof width !== "number")
        return H.iae(width);
      maxX = x + width - 1;
      if (typeof height !== "number")
        return H.iae(height);
      maxY = y + height - 1;
      t2 = this._header;
      t3 = t2.width;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (maxX > t3)
        maxX = t3 - 1;
      t2 = t2.height;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxY > t2)
        maxY = t2 - 1;
      this.decodedWidth = maxX - x + 1;
      this.decodedHeight = maxY - y + 1;
      for (; !J.$ge$n(inPtr.offset, t1);) {
        t2 = inPtr.buffer;
        t3 = inPtr.offset;
        inPtr.offset = J.$add$ns(t3, 1);
        t3 = J.$index$asx(t2, t3);
        $.get$__uint8()[0] = t3;
        t3 = $.get$__uint8ToInt8();
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        n = t3[0];
        if (n < 0) {
          count = -n;
          for (; count0 = count - 1, count > 0; count = count0) {
            t2 = inPtr.buffer;
            t3 = inPtr.offset;
            inPtr.offset = J.$add$ns(t3, 1);
            t3 = J.$index$asx(t2, t3);
            if (J.$eq(out.length, out._image$_buffer.length))
              out._expandBuffer$0();
            t2 = out._image$_buffer;
            t4 = out.length;
            out.length = J.$add$ns(t4, 1);
            t3 = J.$and$n(t3, 255);
            if (t4 >>> 0 !== t4 || t4 >= t2.length)
              return H.ioore(t2, t4);
            t2[t4] = t3;
          }
        } else
          for (count = n; count0 = count - 1, count >= 0; count = count0) {
            t2 = inPtr.buffer;
            t3 = inPtr.offset;
            inPtr.offset = J.$add$ns(t3, 1);
            t3 = J.$index$asx(t2, t3);
            if (J.$eq(out.length, out._image$_buffer.length))
              out._expandBuffer$0();
            t2 = out._image$_buffer;
            t4 = out.length;
            out.length = J.$add$ns(t4, 1);
            t3 = J.$and$n(t3, 255);
            if (t4 >>> 0 !== t4 || t4 >= t2.length)
              return H.ioore(t2, t4);
            t2[t4] = t3;
          }
      }
      data = H.NativeUint8List_NativeUint8List$view(out._image$_buffer.buffer, 0, out.length);
      for (len = data.length, i = 1; i < len; ++i)
        data[i] = data[i - 1] + data[i] - 128;
      t1 = this._outCache;
      if (t1 == null || t1.length !== len) {
        t1 = new Uint8Array(len);
        this._outCache = t1;
      }
      t2 = C.JSInt_methods._tdivFast$1(len + 1, 2);
      for (t10 = 0, si = 0; true; t2 = t20, t10 = t11) {
        if (si < len) {
          si0 = si + 1;
          t11 = t10 + 1;
          if (t10 >= len)
            return H.ioore(data, t10);
          t3 = data[t10];
          t4 = t1.length;
          if (si >= t4)
            return H.ioore(t1, si);
          t1[si] = t3;
        } else
          break;
        if (si0 < len) {
          si = si0 + 1;
          t20 = t2 + 1;
          if (t2 >= len)
            return H.ioore(data, t2);
          t2 = data[t2];
          if (si0 >= t4)
            return H.ioore(t1, si0);
          t1[si0] = t2;
        } else
          break;
      }
      return t1;
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    }
  },
  ExrZipCompressor: {
    "^": "ExrCompressor;zlib,_maxScanLineSize,_numScanLines,_outCache,decodedWidth,decodedHeight,_header",
    numScanLines$0: function() {
      return this._numScanLines;
    },
    uncompress$5: function(input, x, y, width, height) {
      var data, maxX, maxY, t1, t2, len, i, t10, si, si0, t11, t3, t4, t20;
      data = this.zlib.decodeBuffer$2$verify(T.InputStream$(input.toUint8List$0(), 1, null, 0), true);
      if (width == null)
        width = this._header.width;
      if (height == null)
        height = this._header._linesInBuffer;
      if (typeof width !== "number")
        return H.iae(width);
      maxX = x + width - 1;
      if (typeof height !== "number")
        return H.iae(height);
      maxY = y + height - 1;
      t1 = this._header;
      t2 = t1.width;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxX > t2)
        maxX = t2 - 1;
      t1 = t1.height;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (maxY > t1)
        maxY = t1 - 1;
      this.decodedWidth = maxX - x + 1;
      this.decodedHeight = maxY - y + 1;
      for (len = data.length, i = 1; i < len; ++i)
        data[i] = data[i - 1] + data[i] - 128;
      t1 = this._outCache;
      if (t1 == null || t1.length !== len) {
        t1 = new Uint8Array(len);
        this._outCache = t1;
      }
      t2 = C.JSInt_methods._tdivFast$1(len + 1, 2);
      for (t10 = 0, si = 0; true; t2 = t20, t10 = t11) {
        if (si < len) {
          si0 = si + 1;
          t11 = t10 + 1;
          if (t10 >= len)
            return H.ioore(data, t10);
          t3 = data[t10];
          t4 = t1.length;
          if (si >= t4)
            return H.ioore(t1, si);
          t1[si] = t3;
        } else
          break;
        if (si0 < len) {
          si = si0 + 1;
          t20 = t2 + 1;
          if (t2 >= len)
            return H.ioore(data, t2);
          t2 = data[t2];
          if (si0 >= t4)
            return H.ioore(t1, si0);
          t1[si0] = t2;
        } else
          break;
      }
      return t1;
    },
    uncompress$3: function(input, x, y) {
      return this.uncompress$5(input, x, y, null, null);
    }
  },
  ExrDecoder: {
    "^": "Decoder;exrImage,exposure,gamma,reinhard,bloomAmount,bloomRadius,progressCallback",
    startDecode$1: function(data) {
      var t1 = U.ExrImage$(data);
      this.exrImage = t1;
      return t1;
    },
    decodeFrame$1: function(frame) {
      var t1 = this.exrImage;
      if (t1 == null)
        return;
      t1 = t1.parts;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return U.hdrToImage(t1[0].get$framebuffer(), this.exposure);
    }
  },
  GifColorMap: {
    "^": "Object;bitsPerPixel,numColors,transparent,colors",
    $index: function(_, index) {
      var t1 = this.colors;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this.colors;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = value;
      return value;
    },
    color$1: function(_, index) {
      var ci, a, t1, t2, t3, t4, t5;
      ci = index * 3;
      a = index === this.transparent ? 0 : 255;
      t1 = this.colors;
      t2 = t1.length;
      if (ci >= t2)
        return H.ioore(t1, ci);
      t3 = t1[ci];
      t4 = ci + 1;
      if (t4 >= t2)
        return H.ioore(t1, t4);
      t4 = t1[t4];
      t5 = ci + 2;
      if (t5 >= t2)
        return H.ioore(t1, t5);
      return U.getColor(t3, t4, t1[t5], a);
    },
    _bitSize$1: function(n) {
      var i;
      for (i = 1; i <= 8; ++i)
        if (C.JSInt_methods._shlPositive$1(1, i) >= n)
          return i;
      return 0;
    },
    GifColorMap$1: function(numColors) {
      this.bitsPerPixel = this._bitSize$1(numColors);
    },
    static: {GifColorMap$: function(numColors) {
        var t1 = new U.GifColorMap(null, numColors, null, new Uint8Array(numColors * 3));
        t1.GifColorMap$1(numColors);
        return t1;
      }}
  },
  GifImageDesc: {
    "^": "Object;x*,y*,width>,height>,interlaced<,colorMap<,duration',clearFrame?,_inputPosition<",
    GifImageDesc$1: function(input) {
      var t1, t2, b, i, t3, t4, t5, ci;
      this.x = input.readUint16$0();
      this.y = input.readUint16$0();
      this.width = input.readUint16$0();
      this.height = input.readUint16$0();
      t1 = input.buffer;
      t2 = input.offset;
      input.offset = J.$add$ns(t2, 1);
      b = J.$index$asx(t1, t2);
      t2 = J.getInterceptor$n(b);
      t1 = t2.$and(b, 7);
      this.interlaced = t2.$and(b, 64) !== 0;
      if (t2.$and(b, 128) !== 0) {
        this.colorMap = U.GifColorMap$(C.JSInt_methods._shlPositive$1(1, t1 + 1));
        for (i = 0; t1 = this.colorMap, i < t1.numColors; ++i) {
          t2 = input.buffer;
          t3 = input.offset;
          input.offset = J.$add$ns(t3, 1);
          t3 = J.$index$asx(t2, t3);
          t2 = input.buffer;
          t4 = input.offset;
          input.offset = J.$add$ns(t4, 1);
          t4 = J.$index$asx(t2, t4);
          t2 = input.buffer;
          t5 = input.offset;
          input.offset = J.$add$ns(t5, 1);
          t5 = J.$index$asx(t2, t5);
          ci = i * 3;
          t1 = t1.colors;
          t2 = t1.length;
          if (ci >= t2)
            return H.ioore(t1, ci);
          t1[ci] = t3;
          t3 = ci + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = t4;
          t4 = ci + 2;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = t5;
        }
      }
      this._inputPosition = J.$sub$n(input.offset, input.start);
    },
    static: {GifImageDesc$: function(input) {
        var t1 = new U.GifImageDesc(null, null, null, null, null, null, 80, true, null);
        t1.GifImageDesc$1(input);
        return t1;
      }}
  },
  GifInfo: {
    "^": "DecodeInfo;colorResolution,globalColorMap,isGif89,frames,width,height,backgroundColor"
  },
  GifDecoder: {
    "^": "Decoder;info,_input,_frame,_numFrames,_image$_buffer,_stack,_suffix,_prefix,_bitsPerPixel,_pixelCount,_currentShiftDWord,_currentShiftState,_stackPtr,_currentCode,_lastCode,_maxCode1,_runningBits,_runningCode,_eofCode,_clearCode,progressCallback",
    startDecode$1: function(bytes) {
      var recordType, gifImage, extCode, b, duration, transparent, disposalMethod, transparentFlag, gifImage0, t1, t2, t3, pos, exception;
      this._input = U.InputBuffer$(bytes, false, null, 0);
      this.info = new U.GifInfo(0, null, false, [], 0, 0, 4294967295);
      if (!this._getInfo$0())
        return;
      try {
        for (; t1 = this._input, !J.$ge$n(t1.offset, t1.end);) {
          t1 = this._input;
          t2 = t1.buffer;
          t3 = t1.offset;
          t1.offset = J.$add$ns(t3, 1);
          recordType = J.$index$asx(t2, t3);
          switch (recordType) {
            case 44:
              gifImage = this._skipImage$0();
              if (gifImage == null) {
                t1 = this.info;
                return t1;
              }
              this.info.frames.push(gifImage);
              break;
            case 33:
              t1 = this._input;
              t2 = t1.buffer;
              t3 = t1.offset;
              t1.offset = J.$add$ns(t3, 1);
              extCode = J.$index$asx(t2, t3);
              if (J.$eq(extCode, 249)) {
                t1 = this._input;
                t2 = t1.buffer;
                t3 = t1.offset;
                t1.offset = J.$add$ns(t3, 1);
                J.$index$asx(t2, t3);
                t3 = this._input;
                t2 = t3.buffer;
                t1 = t3.offset;
                t3.offset = J.$add$ns(t1, 1);
                b = J.$index$asx(t2, t1);
                duration = this._input.readUint16$0();
                t1 = this._input;
                t2 = t1.buffer;
                t3 = t1.offset;
                t1.offset = J.$add$ns(t3, 1);
                transparent = J.$index$asx(t2, t3);
                t3 = this._input;
                t2 = t3.buffer;
                t1 = t3.offset;
                t3.offset = J.$add$ns(t1, 1);
                J.$index$asx(t2, t1);
                t1 = b;
                if (typeof t1 !== "number")
                  return t1.$shr();
                disposalMethod = C.JSNumber_methods._shrOtherPositive$1(t1, 3) & 7;
                t1 = b;
                if (typeof t1 !== "number")
                  return t1.$shr();
                C.JSNumber_methods._shrOtherPositive$1(t1, 1);
                transparentFlag = J.$and$n(b, 1);
                t1 = this._input;
                t1.toString;
                pos = J.$add$ns(t1.offset, 0);
                t2 = t1.buffer;
                t1.bigEndian;
                recordType = J.$index$asx(t2, J.$add$ns(pos, 0));
                if (J.$eq(recordType, 44)) {
                  t1 = this._input;
                  t1.offset = J.$add$ns(t1.offset, 1);
                  gifImage0 = this._skipImage$0();
                  if (gifImage0 == null) {
                    t1 = this.info;
                    return t1;
                  }
                  J.set$duration$x(gifImage0, duration);
                  gifImage0.set$clearFrame(J.$eq(disposalMethod, 2));
                  if (!J.$eq(transparentFlag, 0))
                    if (gifImage0.get$colorMap() != null)
                      gifImage0.get$colorMap().transparent = transparent;
                    else {
                      t1 = this.info.globalColorMap;
                      if (t1 != null)
                        t1.transparent = transparent;
                    }
                  this.info.frames.push(gifImage0);
                }
              } else
                this._skipRemainder$0();
              break;
            case 59:
              t1 = this.info;
              this._numFrames = t1.frames.length;
              return t1;
            default:
              break;
          }
        }
      } catch (exception) {
        H.unwrapException(exception);
      }

      t1 = this.info;
      this._numFrames = t1.frames.length;
      return t1;
    },
    decodeFrame$1: function(frame) {
      var t1, t2, t3, t4;
      t1 = this._input;
      if (t1 == null || this.info == null)
        return;
      t2 = this.info.frames;
      t3 = t2.length;
      if (frame >= t3 || false)
        return;
      this._frame = frame;
      if (frame >= t3)
        return H.ioore(t2, frame);
      t4 = t2[frame];
      t1.offset = t4.get$_inputPosition();
      if (frame >= t3)
        return H.ioore(t2, frame);
      return this._decodeImage$1(t4);
    },
    _skipImage$0: function() {
      var t1, gifImage;
      t1 = this._input;
      if (J.$ge$n(t1.offset, t1.end))
        return;
      gifImage = U.GifImageDesc$(this._input);
      t1 = this._input;
      t1.offset = J.$add$ns(t1.offset, 1);
      this._skipRemainder$0();
      return gifImage;
    },
    _decodeImage$1: function(gifImage) {
      var t1, t2, t3, width, height, colorMap, image, line, row, i, j, y;
      if (this._image$_buffer == null) {
        this._image$_buffer = new Uint8Array(256);
        this._stack = new Uint8Array(4095);
        this._suffix = new Uint8Array(4096);
        this._prefix = new Uint32Array(4096);
      }
      t1 = this._input;
      t2 = t1.buffer;
      t3 = t1.offset;
      t1.offset = J.$add$ns(t3, 1);
      t3 = J.$index$asx(t2, t3);
      this._bitsPerPixel = t3;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2 = C.JSInt_methods.$shl(1, t3);
      this._clearCode = t2;
      ++t2;
      this._eofCode = t2;
      this._runningCode = t2 + 1;
      ++t3;
      this._runningBits = t3;
      this._maxCode1 = C.JSInt_methods.$shl(1, t3);
      this._stackPtr = 0;
      this._lastCode = 4098;
      this._currentShiftState = 0;
      this._currentShiftDWord = 0;
      this._image$_buffer[0] = 0;
      t3 = this._prefix;
      J.fillRange$3$ax(t3, 0, t3.length, 4098);
      t3 = J.getInterceptor$x(gifImage);
      width = t3.get$width(gifImage);
      height = t3.get$height(gifImage);
      if (J.$gt$n(J.$add$ns(t3.get$x(gifImage), width), this.info.width) || J.$gt$n(J.$add$ns(t3.get$y(gifImage), height), this.info.height))
        return;
      colorMap = gifImage.get$colorMap();
      colorMap = colorMap != null ? colorMap : this.info.globalColorMap;
      this._pixelCount = J.$mul$ns(width, height);
      image = U.Image$(width, height, 4);
      if (typeof width !== "number" || Math.floor(width) !== width)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(width)));
      line = new Uint8Array(width);
      if (gifImage.get$interlaced()) {
        row = gifImage.y;
        for (t1 = J.getInterceptor$ns(row), i = 0, j = 0; i < 4; ++i)
          for (y = t1.$add(row, C.List_0_4_2_1[i]); t2 = J.getInterceptor$n(y), t2.$lt(y, t1.$add(row, height)); y = t2.$add(y, C.List_8_8_4_2[i]), ++j) {
            if (!this._getLine$1(line))
              return image;
            this._updateImage$4(image, y, colorMap, line);
          }
      } else {
        if (typeof height !== "number")
          return H.iae(height);
        y = 0;
        for (; y < height; ++y) {
          if (!this._getLine$1(line))
            return image;
          this._updateImage$4(image, y, colorMap, line);
        }
      }
      return image;
    },
    _updateImage$4: function(image, y, colorMap, line) {
      var width, t1, t2, t3, t4, t5, t6, x, t7, t8;
      if (colorMap != null)
        for (width = line.length, t1 = J.getInterceptor$x(colorMap), t2 = image.width, t3 = J.getInterceptor$ns(y), t4 = image.height, t5 = image.data, t6 = t5.length, x = 0; x < width; ++x) {
          t7 = t1.color$1(colorMap, line[x]);
          if (typeof t2 !== "number")
            return H.iae(t2);
          t8 = x < t2 && t3.$ge(y, 0) && t3.$lt(y, t4);
          if (t8) {
            t8 = J.$add$ns(t3.$mul(y, t2), x);
            if (t8 >>> 0 !== t8 || t8 >= t6)
              return H.ioore(t5, t8);
            t5[t8] = t7;
          }
        }
    },
    _getInfo$0: function() {
      var tag, t1, t2, t3, b, t4, t5, t6, i, r, g, ci;
      tag = this._input.readString$1(6);
      if (tag !== "GIF87a" && tag !== "GIF89a")
        return false;
      this.info.width = this._input.readUint16$0();
      this.info.height = this._input.readUint16$0();
      t1 = this._input;
      t2 = t1.buffer;
      t3 = t1.offset;
      t1.offset = J.$add$ns(t3, 1);
      b = J.$index$asx(t2, t3);
      t3 = J.getInterceptor$n(b);
      this.info.colorResolution = (t3.$and(b, 112) + 1 >>> 4) + 1;
      t2 = t3.$and(b, 7);
      t1 = this.info;
      t4 = this._input;
      t5 = t4.buffer;
      t6 = t4.offset;
      t4.offset = J.$add$ns(t6, 1);
      t1.backgroundColor = J.$index$asx(t5, t6);
      t6 = this._input;
      t6.offset = J.$add$ns(t6.offset, 1);
      if (t3.$and(b, 128) !== 0) {
        this.info.globalColorMap = U.GifColorMap$(C.JSInt_methods._shlPositive$1(1, t2 + 1));
        for (i = 0; i < this.info.globalColorMap.numColors; ++i) {
          t1 = this._input;
          t2 = t1.buffer;
          t3 = t1.offset;
          t1.offset = J.$add$ns(t3, 1);
          r = J.$index$asx(t2, t3);
          t3 = this._input;
          t2 = t3.buffer;
          t1 = t3.offset;
          t3.offset = J.$add$ns(t1, 1);
          g = J.$index$asx(t2, t1);
          t1 = this._input;
          t2 = t1.buffer;
          t3 = t1.offset;
          t1.offset = J.$add$ns(t3, 1);
          b = J.$index$asx(t2, t3);
          ci = i * 3;
          t3 = this.info.globalColorMap.colors;
          t2 = t3.length;
          if (ci >= t2)
            return H.ioore(t3, ci);
          t3[ci] = r;
          t1 = ci + 1;
          if (t1 >= t2)
            return H.ioore(t3, t1);
          t3[t1] = g;
          t1 = ci + 2;
          if (t1 >= t2)
            return H.ioore(t3, t1);
          t3[t1] = b;
        }
      }
      this.info.isGif89 = tag === "GIF89a";
      return true;
    },
    _getLine$1: function(line) {
      this._pixelCount = J.$sub$n(this._pixelCount, line.length);
      if (!this._decompressLine$1(line))
        return false;
      if (J.$eq(this._pixelCount, 0))
        this._skipRemainder$0();
      return true;
    },
    _skipRemainder$0: function() {
      var t1, t2, t3, b;
      t1 = this._input;
      if (J.$ge$n(t1.offset, t1.end))
        return true;
      t1 = this._input;
      t2 = t1.buffer;
      t3 = t1.offset;
      t1.offset = J.$add$ns(t3, 1);
      b = J.$index$asx(t2, t3);
      while (true) {
        if (!J.$eq(b, 0)) {
          t1 = this._input;
          t1 = !J.$ge$n(t1.offset, t1.end);
        } else
          t1 = false;
        if (!t1)
          break;
        t1 = this._input;
        t1.offset = J.$add$ns(t1.offset, b);
        t1 = this._input;
        if (J.$ge$n(t1.offset, t1.end))
          return true;
        t1 = this._input;
        t2 = t1.buffer;
        t3 = t1.offset;
        t1.offset = J.$add$ns(t3, 1);
        b = J.$index$asx(t2, t3);
      }
      return true;
    },
    _decompressLine$1: function(line) {
      var t1, lineLen, i, i0, t2, currentPrefix, t3, j, t4, t5, t6, j0;
      t1 = this._stackPtr;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 4095)
        return false;
      lineLen = line.length;
      if (t1 !== 0) {
        i = 0;
        while (true) {
          if (!(t1 !== 0 && i < lineLen))
            break;
          i0 = i + 1;
          t2 = this._stack;
          if (typeof t1 !== "number")
            return t1.$sub();
          --t1;
          this._stackPtr = t1;
          t2.length;
          if (t1 < 0 || t1 >= 4095)
            return H.ioore(t2, t1);
          t2 = t2[t1];
          if (i >= lineLen)
            return H.ioore(line, i);
          line[i] = t2;
          i = i0;
        }
      } else
        i = 0;
      for (currentPrefix = null; i < lineLen;) {
        t1 = this._decompressInput$0();
        this._currentCode = t1;
        if (t1 == null)
          return false;
        t2 = this._eofCode;
        if (t1 == null ? t2 == null : t1 === t2)
          return false;
        t3 = this._clearCode;
        if (t1 == null ? t3 == null : t1 === t3) {
          for (t1 = this._prefix, j = 0; j <= 4095; ++j) {
            if (j >= t1.length)
              return H.ioore(t1, j);
            t1[j] = 4098;
          }
          if (typeof t2 !== "number")
            return t2.$add();
          this._runningCode = t2 + 1;
          t1 = J.$add$ns(this._bitsPerPixel, 1);
          this._runningBits = t1;
          if (typeof t1 !== "number")
            return H.iae(t1);
          this._maxCode1 = C.JSInt_methods.$shl(1, t1);
          this._lastCode = 4098;
        } else {
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (t1 < t3) {
            i0 = i + 1;
            if (i < 0)
              return H.ioore(line, i);
            line[i] = t1;
            i = i0;
          } else {
            t2 = this._prefix;
            if (t1 >= t2.length)
              return H.ioore(t2, t1);
            if (t2[t1] === 4098) {
              t4 = this._runningCode;
              if (typeof t4 !== "number")
                return t4.$sub();
              t4 -= 2;
              if (t1 === t4) {
                currentPrefix = this._lastCode;
                t1 = this._suffix;
                t5 = this._stack;
                t6 = this._stackPtr;
                if (typeof t6 !== "number")
                  return t6.$add();
                this._stackPtr = t6 + 1;
                t3 = this._getPrefixChar$3(t2, currentPrefix, t3);
                t5.length;
                if (t6 < 0 || t6 >= 4095)
                  return H.ioore(t5, t6);
                t5[t6] = t3;
                if (t4 < 0 || t4 >= t1.length)
                  return H.ioore(t1, t4);
                t1[t4] = t3;
              } else
                return false;
            } else
              currentPrefix = t1;
            j = 0;
            while (true) {
              j0 = j + 1;
              if (j <= 4095) {
                t1 = this._clearCode;
                if (typeof currentPrefix !== "number")
                  return currentPrefix.$gt();
                if (typeof t1 !== "number")
                  return H.iae(t1);
                t1 = currentPrefix > t1 && currentPrefix <= 4095;
              } else
                t1 = false;
              if (!t1)
                break;
              t1 = this._stack;
              t2 = this._stackPtr;
              if (typeof t2 !== "number")
                return t2.$add();
              this._stackPtr = t2 + 1;
              t3 = this._suffix;
              if (currentPrefix >>> 0 !== currentPrefix || currentPrefix >= t3.length)
                return H.ioore(t3, currentPrefix);
              t3 = t3[currentPrefix];
              t1.length;
              if (t2 < 0 || t2 >= 4095)
                return H.ioore(t1, t2);
              t1[t2] = t3;
              t3 = this._prefix;
              if (currentPrefix >= t3.length)
                return H.ioore(t3, currentPrefix);
              currentPrefix = t3[currentPrefix];
              j = j0;
            }
            if (j0 < 4095) {
              if (typeof currentPrefix !== "number")
                return currentPrefix.$gt();
              t1 = currentPrefix > 4095;
            } else
              t1 = true;
            if (t1)
              return false;
            t1 = this._stack;
            t2 = this._stackPtr;
            if (typeof t2 !== "number")
              return t2.$add();
            t3 = t2 + 1;
            this._stackPtr = t3;
            t1.length;
            if (t2 < 0 || t2 >= 4095)
              return H.ioore(t1, t2);
            t1[t2] = currentPrefix;
            t2 = t3;
            while (true) {
              if (!(t2 !== 0 && i < lineLen))
                break;
              i0 = i + 1;
              --t2;
              this._stackPtr = t2;
              t1.length;
              if (t2 < 0 || t2 >= 4095)
                return H.ioore(t1, t2);
              t3 = t1[t2];
              if (i < 0 || i >= lineLen)
                return H.ioore(line, i);
              line[i] = t3;
              i = i0;
            }
          }
          t1 = this._lastCode;
          if (t1 !== 4098) {
            t2 = this._prefix;
            t3 = this._runningCode;
            if (typeof t3 !== "number")
              return t3.$sub();
            t3 -= 2;
            if (t3 < 0 || t3 >= t2.length)
              return H.ioore(t2, t3);
            t3 = t2[t3] === 4098;
            t2 = t3;
          } else
            t2 = false;
          if (t2) {
            t2 = this._prefix;
            t3 = this._runningCode;
            if (typeof t3 !== "number")
              return t3.$sub();
            t3 -= 2;
            if (t3 < 0 || t3 >= t2.length)
              return H.ioore(t2, t3);
            t2[t3] = t1;
            t4 = this._currentCode;
            t5 = this._suffix;
            t6 = this._clearCode;
            if (t4 === t3) {
              t1 = this._getPrefixChar$3(t2, t1, t6);
              if (t3 >= t5.length)
                return H.ioore(t5, t3);
              t5[t3] = t1;
            } else {
              t1 = this._getPrefixChar$3(t2, t4, t6);
              if (t3 >= t5.length)
                return H.ioore(t5, t3);
              t5[t3] = t1;
            }
          }
          this._lastCode = this._currentCode;
        }
      }
      return true;
    },
    _decompressInput$0: function() {
      var t1, t2, nextByte, t3, t4, t5;
      if (J.$gt$n(this._runningBits, 12))
        return;
      while (true) {
        t1 = this._currentShiftState;
        t2 = this._runningBits;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(t1 < t2))
          break;
        nextByte = this._bufferedInput$0();
        t1 = this._currentShiftDWord;
        t2 = this._currentShiftState;
        if (typeof nextByte !== "number")
          return nextByte.$shl();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = C.JSInt_methods.$shl(nextByte, t2);
        if (typeof t1 !== "number")
          return t1.$or();
        this._currentShiftDWord = (t1 | t3) >>> 0;
        this._currentShiftState = t2 + 8;
      }
      t3 = this._currentShiftDWord;
      if (t2 >>> 0 !== t2 || t2 >= 13)
        return H.ioore(C.List_Qw3, t2);
      t4 = C.List_Qw3[t2];
      if (typeof t3 !== "number")
        return t3.$and();
      if (typeof t4 !== "number")
        return H.iae(t4);
      this._currentShiftDWord = C.JSInt_methods._shrBothPositive$1(t3, t2);
      this._currentShiftState = t1 - t2;
      t1 = this._runningCode;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 4097) {
        ++t1;
        this._runningCode = t1;
        t5 = this._maxCode1;
        if (typeof t5 !== "number")
          return H.iae(t5);
        t1 = t1 > t5 && t2 < 12;
      } else
        t1 = false;
      if (t1) {
        t1 = this._maxCode1;
        if (typeof t1 !== "number")
          return t1.$shl();
        this._maxCode1 = t1 << 1 >>> 0;
        this._runningBits = J.$add$ns(this._runningBits, 1);
      }
      return (t3 & t4) >>> 0;
    },
    _getPrefixChar$3: function(prefix, code, clearCode) {
      var i, i0, t1;
      i = 0;
      while (true) {
        if (typeof code !== "number")
          return code.$gt();
        if (typeof clearCode !== "number")
          return H.iae(clearCode);
        if (code > clearCode) {
          i0 = i + 1;
          t1 = i <= 4095;
          i = i0;
        } else
          t1 = false;
        if (!t1)
          break;
        if (code > 4095)
          return 4098;
        if (code >= prefix.length)
          return H.ioore(prefix, code);
        code = prefix[code];
      }
      return code;
    },
    _bufferedInput$0: function() {
      var t1, t2, t3, t4, pos, t5, t6, nextByte;
      t1 = this._image$_buffer;
      t2 = t1[0];
      if (t2 === 0) {
        t2 = this._input;
        t3 = t2.buffer;
        t4 = t2.offset;
        t2.offset = J.$add$ns(t4, 1);
        t1[0] = J.$index$asx(t3, t4);
        t1 = this._image$_buffer;
        t2 = t1[0];
        if (t2 === 0)
          return;
        t3 = this._input;
        t3.toString;
        pos = J.$add$ns(t3.offset, 0);
        t4 = t3.buffer;
        t5 = t3.bigEndian;
        t6 = J.$add$ns(pos, t2);
        t3.offset = J.$add$ns(t3.offset, J.$sub$n(t6, pos));
        J.setRange$3$ax(t1, 1, 1 + t2, new U.InputBuffer(t4, pos, t6, pos, t5).toUint8List$0());
        t5 = this._image$_buffer;
        nextByte = t5[1];
        t5[1] = 2;
        t5[0] = t5[0] - 1;
      } else {
        t3 = t1[1];
        t1[1] = t3 + 1;
        if (t3 >= 256)
          return H.ioore(t1, t3);
        nextByte = t1[t3];
        t1[0] = t2 - 1;
      }
      return nextByte;
    },
    static: {"^": "GifDecoder_STAMP_SIZE,GifDecoder_GIF87_STAMP,GifDecoder_GIF89_STAMP,GifDecoder_IMAGE_DESC_RECORD_TYPE,GifDecoder_EXTENSION_RECORD_TYPE,GifDecoder_TERMINATE_RECORD_TYPE,GifDecoder_GRAPHIC_CONTROL_EXT,GifDecoder_LZ_MAX_CODE,GifDecoder_LZ_BITS,GifDecoder_NO_SUCH_CODE,GifDecoder_CODE_MASKS,GifDecoder_INTERLACED_OFFSET,GifDecoder_INTERLACED_JUMP"}
  },
  JpegAdobe: {
    "^": "Object;version,flags0,flags1,transformCode"
  },
  JpegComponent: {
    "^": "Object;h<,v<,quantizationTableList,quantizationIndex,blocksPerLine<,blocksPerColumn,blocks,huffmanTableDC<,huffmanTableAC<,pred?"
  },
  JpegData: {
    "^": "Object;progressCallback,input,jfif,adobe,frame,resetInterval,quantizationTables,frames,huffmanTablesAC,huffmanTablesDC,components,_progressTotal,_progress",
    validate$1: function(bytes) {
      var marker, hasSOF, hasSOS, t1, $length;
      this.input = U.InputBuffer$(bytes, true, null, 0);
      if (!J.$eq(this._nextMarker$0(), 216))
        return false;
      marker = this._nextMarker$0();
      hasSOF = false;
      hasSOS = false;
      while (true) {
        if (!J.$eq(marker, 217)) {
          t1 = this.input;
          t1 = !J.$ge$n(t1.offset, t1.end);
        } else
          t1 = false;
        if (!t1)
          break;
        $length = this.input.readUint16$0();
        if ($length < 2)
          H.throwExpression(U.ImageException$("Invalid Block"));
        t1 = this.input;
        t1.offset = J.$add$ns(t1.offset, $length - 2);
        switch (marker) {
          case 192:
          case 193:
          case 194:
            hasSOF = true;
            break;
          case 218:
            hasSOS = true;
            break;
        }
        marker = this._nextMarker$0();
      }
      return hasSOF && hasSOS;
    },
    readInfo$1: function(bytes) {
      var marker, hasSOF, hasSOS, t1, $length, pos, t2, t3, t4;
      this.input = U.InputBuffer$(bytes, true, null, 0);
      if (!J.$eq(this._nextMarker$0(), 216))
        return;
      marker = this._nextMarker$0();
      hasSOF = false;
      hasSOS = false;
      while (true) {
        if (!J.$eq(marker, 217)) {
          t1 = this.input;
          t1 = !J.$ge$n(t1.offset, t1.end);
        } else
          t1 = false;
        if (!t1)
          break;
        switch (marker) {
          case 192:
          case 193:
          case 194:
            $length = this.input.readUint16$0();
            if ($length < 2)
              H.throwExpression(U.ImageException$("Invalid Block"));
            t1 = this.input;
            t1.toString;
            pos = J.$add$ns(t1.offset, 0);
            t2 = t1.buffer;
            t3 = t1.bigEndian;
            t4 = J.$add$ns(pos, $length - 2);
            t1.offset = J.$add$ns(t1.offset, J.$sub$n(t4, pos));
            this._readFrame$2(marker, new U.InputBuffer(t2, pos, t4, pos, t3));
            hasSOF = true;
            break;
          case 218:
            $length = this.input.readUint16$0();
            if ($length < 2)
              H.throwExpression(U.ImageException$("Invalid Block"));
            t1 = this.input;
            t1.offset = J.$add$ns(t1.offset, $length - 2);
            hasSOS = true;
            break;
          default:
            $length = this.input.readUint16$0();
            if ($length < 2)
              H.throwExpression(U.ImageException$("Invalid Block"));
            t1 = this.input;
            t1.offset = J.$add$ns(t1.offset, $length - 2);
            break;
        }
        marker = this._nextMarker$0();
      }
      t1 = this.frame;
      if (t1 != null) {
        C.JSNull_methods.set$width(null, t1.samplesPerLine);
        C.JSNull_methods.set$height(null, t1.scanLines);
      }
      this.frame = null;
      C.JSArray_methods.set$length(this.frames, 0);
      if (hasSOF && hasSOS)
        ;
      return;
    },
    read$1: function(bytes) {
      var i, t1, t2, component, t3, t4, t5, t6;
      this.input = U.InputBuffer$(bytes, true, null, 0);
      this._read$0();
      if (this.frames.length !== 1)
        throw H.wrapException(U.ImageException$("Only single frame JPEGs supported"));
      this._progressTotal = 0;
      this._progress = 0;
      for (i = 0; t1 = this.frame, t2 = t1.componentsOrder, i < t2.length; ++i) {
        component = t1.components.$index(0, t2[i]);
        t1 = this._progressTotal;
        t2 = component.blocksPerColumn;
        if (typeof t2 !== "number")
          return H.iae(t2);
        this._progressTotal = t1 + t2;
      }
      for (t1 = this.components, i = 0; t2 = this.frame, t3 = t2.componentsOrder, i < t3.length; ++i) {
        component = t2.components.$index(0, t3[i]);
        t2 = component.h;
        t3 = this.frame;
        t4 = t3.maxH;
        t5 = component.v;
        t6 = t3.maxV;
        if (typeof t5 !== "number")
          return t5.$div();
        if (typeof t6 !== "number")
          return H.iae(t6);
        t1.push(P.LinkedHashMap_LinkedHashMap$_literal(["scaleX", t2 / t4, "scaleY", t5 / t6, "lines", this._buildComponentData$2(t3, component)], null, null));
      }
    },
    get$width: function(_) {
      return this.frame.samplesPerLine;
    },
    get$height: function(_) {
      return this.frame.scanLines;
    },
    getData$2: function(width, height) {
      var t1, dataLength, data, t2, component1, offset, $Y, y, t3, t4, component1Line, x, offset0, component2, t5, component2Line, t6, component3, sy1, sy2, sy3, sx1, sx2, sx3, lines1, lines2, lines3, Cb, Cr, $R, $G, $B, component3Line, t7, t8, colorTransform, component4, $K, $C, $M, Ye, component4Line, t9, t10, t11, t12, t13, t14;
      t1 = this.components;
      dataLength = J.$mul$ns(J.$mul$ns(width, height), t1.length);
      if (typeof dataLength !== "number" || Math.floor(dataLength) !== dataLength)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(dataLength)));
      data = new Uint8Array(dataLength);
      t2 = t1.length;
      switch (t2) {
        case 1:
          if (0 >= t2)
            return H.ioore(t1, 0);
          component1 = t1[0];
          if (typeof height !== "number")
            return H.iae(height);
          t1 = data.length;
          t2 = J.getInterceptor$asx(component1);
          offset = 0;
          $Y = null;
          y = 0;
          for (; y < height; ++y) {
            t3 = t2.$index(component1, "lines");
            t4 = t2.$index(component1, "scaleY");
            if (typeof t4 !== "number")
              return H.iae(t4);
            component1Line = J.$index$asx(t3, C.JSNumber_methods.toInt$0(y * t4));
            if (typeof width !== "number")
              return H.iae(width);
            t3 = J.getInterceptor$asx(component1Line);
            x = 0;
            for (; x < width; ++x, offset = offset0) {
              t4 = t2.$index(component1, "scaleX");
              if (typeof t4 !== "number")
                return H.iae(t4);
              $Y = t3.$index(component1Line, C.JSNumber_methods.toInt$0(x * t4));
              offset0 = offset + 1;
              if (offset < 0 || offset >= t1)
                return H.ioore(data, offset);
              data[offset] = $Y;
            }
          }
          break;
        case 2:
          if (0 >= t2)
            return H.ioore(t1, 0);
          component1 = t1[0];
          if (1 >= t2)
            return H.ioore(t1, 1);
          component2 = t1[1];
          if (typeof height !== "number")
            return H.iae(height);
          t1 = data.length;
          t2 = J.getInterceptor$asx(component1);
          t3 = J.getInterceptor$asx(component2);
          offset = 0;
          $Y = null;
          y = 0;
          for (; y < height; ++y) {
            t4 = t2.$index(component1, "lines");
            t5 = t2.$index(component1, "scaleY");
            if (typeof t5 !== "number")
              return H.iae(t5);
            component1Line = J.$index$asx(t4, y * t5);
            t5 = t3.$index(component2, "lines");
            t4 = t3.$index(component2, "scaleY");
            if (typeof t4 !== "number")
              return H.iae(t4);
            component2Line = J.$index$asx(t5, y * t4);
            if (typeof width !== "number")
              return H.iae(width);
            t4 = J.getInterceptor$asx(component1Line);
            t5 = J.getInterceptor$asx(component2Line);
            x = 0;
            for (; x < width; ++x) {
              t6 = t2.$index(component1, "scaleX");
              if (typeof t6 !== "number")
                return H.iae(t6);
              $Y = t4.$index(component1Line, C.JSNumber_methods.toInt$0(x * t6));
              offset0 = offset + 1;
              if (offset < 0 || offset >= t1)
                return H.ioore(data, offset);
              data[offset] = $Y;
              t6 = t3.$index(component2, "scaleX");
              if (typeof t6 !== "number")
                return H.iae(t6);
              $Y = t5.$index(component2Line, C.JSNumber_methods.toInt$0(x * t6));
              offset = offset0 + 1;
              if (offset0 < 0 || offset0 >= t1)
                return H.ioore(data, offset0);
              data[offset0] = $Y;
            }
          }
          break;
        case 3:
          if (0 >= t2)
            return H.ioore(t1, 0);
          component1 = t1[0];
          if (1 >= t2)
            return H.ioore(t1, 1);
          component2 = t1[1];
          if (2 >= t2)
            return H.ioore(t1, 2);
          component3 = t1[2];
          t1 = J.getInterceptor$asx(component1);
          sy1 = J.toDouble$0$n(J.$mul$ns(t1.$index(component1, "scaleY"), 1));
          t2 = J.getInterceptor$asx(component2);
          sy2 = J.toDouble$0$n(J.$mul$ns(t2.$index(component2, "scaleY"), 1));
          t3 = J.getInterceptor$asx(component3);
          sy3 = J.toDouble$0$n(J.$mul$ns(t3.$index(component3, "scaleY"), 1));
          sx1 = J.toDouble$0$n(J.$mul$ns(t1.$index(component1, "scaleX"), 1));
          sx2 = J.toDouble$0$n(J.$mul$ns(t2.$index(component2, "scaleX"), 1));
          sx3 = J.toDouble$0$n(J.$mul$ns(t3.$index(component3, "scaleX"), 1));
          lines1 = t1.$index(component1, "lines");
          lines2 = t2.$index(component2, "lines");
          lines3 = t3.$index(component3, "lines");
          if (typeof height !== "number")
            return H.iae(height);
          t1 = data.length;
          t2 = J.getInterceptor$asx(lines1);
          t3 = J.getInterceptor$asx(lines2);
          t4 = J.getInterceptor$asx(lines3);
          offset = 0;
          $Y = null;
          Cb = null;
          Cr = null;
          $R = null;
          $G = null;
          $B = null;
          y = 0;
          for (; y < height; ++y) {
            component1Line = t2.$index(lines1, C.JSNumber_methods.toInt$0(y * sy1));
            component2Line = t3.$index(lines2, C.JSNumber_methods.toInt$0(y * sy2));
            component3Line = t4.$index(lines3, C.JSNumber_methods.toInt$0(y * sy3));
            if (typeof width !== "number")
              return H.iae(width);
            t5 = J.getInterceptor$asx(component1Line);
            t6 = J.getInterceptor$asx(component2Line);
            t7 = J.getInterceptor$asx(component3Line);
            x = 0;
            for (; x < width; ++x) {
              $Y = t5.$index(component1Line, C.JSNumber_methods.toInt$0(x * sx1));
              Cb = t6.$index(component2Line, C.JSNumber_methods.toInt$0(x * sx2));
              Cr = t7.$index(component3Line, C.JSNumber_methods.toInt$0(x * sx3));
              if ($Y >>> 0 !== $Y || $Y >= 256)
                return H.ioore(C.List_65X, $Y);
              t8 = C.List_65X[$Y];
              if (Cr >>> 0 !== Cr || Cr >= 256)
                return H.ioore(C.List_V7h, Cr);
              $R = J.$add$ns(t8, C.List_V7h[Cr]);
              t8 = C.List_65X[$Y];
              if (Cb >>> 0 !== Cb || Cb >= 256)
                return H.ioore(C.List_fkS, Cb);
              $G = J.$sub$n(J.$sub$n(t8, C.List_fkS[Cb]), C.List_int[Cr]);
              $B = J.$add$ns(C.List_65X[$Y], C.List_chs[Cb]);
              offset0 = offset + 1;
              if (J.getInterceptor$n($R).$gt($R, 0)) {
                if (typeof $R !== "number")
                  return $R.$shr();
                t8 = C.JSNumber_methods._shrOtherPositive$1($R, 4);
                if (t8 > 255)
                  t8 = 255;
              } else
                t8 = 0;
              if (offset < 0 || offset >= t1)
                return H.ioore(data, offset);
              data[offset] = t8;
              offset = offset0 + 1;
              if (J.getInterceptor$n($G).$gt($G, 0)) {
                if (typeof $G !== "number")
                  return $G.$shr();
                t8 = C.JSNumber_methods._shrOtherPositive$1($G, 4);
                if (t8 > 255)
                  t8 = 255;
              } else
                t8 = 0;
              if (offset0 < 0 || offset0 >= t1)
                return H.ioore(data, offset0);
              data[offset0] = t8;
              offset0 = offset + 1;
              if (J.getInterceptor$n($B).$gt($B, 0)) {
                if (typeof $B !== "number")
                  return $B.$shr();
                t8 = C.JSNumber_methods._shrOtherPositive$1($B, 4);
                if (t8 > 255)
                  t8 = 255;
              } else
                t8 = 0;
              if (offset < 0 || offset >= t1)
                return H.ioore(data, offset);
              data[offset] = t8;
              offset = offset0;
            }
          }
          break;
        case 4:
          t2 = this.adobe;
          if (t2 == null)
            throw H.wrapException(U.ImageException$("Unsupported color mode (4 components)"));
          colorTransform = !J.$eq(t2.transformCode, 0) && true;
          t2 = t1.length;
          if (0 >= t2)
            return H.ioore(t1, 0);
          component1 = t1[0];
          if (1 >= t2)
            return H.ioore(t1, 1);
          component2 = t1[1];
          if (2 >= t2)
            return H.ioore(t1, 2);
          component3 = t1[2];
          if (3 >= t2)
            return H.ioore(t1, 3);
          component4 = t1[3];
          if (typeof height !== "number")
            return H.iae(height);
          t1 = data.length;
          t2 = !colorTransform;
          t3 = J.getInterceptor$asx(component1);
          t4 = J.getInterceptor$asx(component2);
          t5 = J.getInterceptor$asx(component3);
          t6 = J.getInterceptor$asx(component4);
          offset = 0;
          $Y = null;
          Cb = null;
          Cr = null;
          $K = null;
          $C = null;
          $M = null;
          Ye = null;
          y = 0;
          for (; y < height; ++y) {
            t7 = t3.$index(component1, "lines");
            t8 = t3.$index(component1, "scaleY");
            if (typeof t8 !== "number")
              return H.iae(t8);
            component1Line = J.$index$asx(t7, y * t8);
            t8 = t4.$index(component2, "lines");
            t7 = t4.$index(component2, "scaleY");
            if (typeof t7 !== "number")
              return H.iae(t7);
            component2Line = J.$index$asx(t8, y * t7);
            t7 = t5.$index(component3, "lines");
            t8 = t5.$index(component3, "scaleY");
            if (typeof t8 !== "number")
              return H.iae(t8);
            component3Line = J.$index$asx(t7, y * t8);
            t8 = t6.$index(component4, "lines");
            t7 = t6.$index(component4, "scaleY");
            if (typeof t7 !== "number")
              return H.iae(t7);
            component4Line = J.$index$asx(t8, y * t7);
            if (typeof width !== "number")
              return H.iae(width);
            t7 = J.getInterceptor$asx(component1Line);
            t8 = J.getInterceptor$asx(component2Line);
            t9 = J.getInterceptor$asx(component3Line);
            t10 = J.getInterceptor$asx(component4Line);
            x = 0;
            for (; x < width; ++x) {
              if (t2) {
                t11 = t3.$index(component1, "scaleX");
                if (typeof t11 !== "number")
                  return H.iae(t11);
                $C = t7.$index(component1Line, x * t11);
                t11 = t4.$index(component2, "scaleX");
                if (typeof t11 !== "number")
                  return H.iae(t11);
                $M = t8.$index(component2Line, x * t11);
                t11 = t5.$index(component3, "scaleX");
                if (typeof t11 !== "number")
                  return H.iae(t11);
                Ye = t9.$index(component3Line, x * t11);
                t11 = t6.$index(component4, "scaleX");
                if (typeof t11 !== "number")
                  return H.iae(t11);
                $K = t10.$index(component4Line, x * t11);
              } else {
                t11 = t3.$index(component1, "scaleX");
                if (typeof t11 !== "number")
                  return H.iae(t11);
                $Y = t7.$index(component1Line, x * t11);
                t11 = t4.$index(component2, "scaleX");
                if (typeof t11 !== "number")
                  return H.iae(t11);
                Cb = t8.$index(component2Line, x * t11);
                t11 = t5.$index(component3, "scaleX");
                if (typeof t11 !== "number")
                  return H.iae(t11);
                Cr = t9.$index(component3Line, x * t11);
                t11 = t6.$index(component4, "scaleX");
                if (typeof t11 !== "number")
                  return H.iae(t11);
                $K = t10.$index(component4Line, x * t11);
                t11 = J.getInterceptor$n(Cr);
                t12 = t11.$sub(Cr, 128);
                if (typeof t12 !== "number")
                  return H.iae(t12);
                t13 = J.getInterceptor$ns($Y);
                t12 = J.toInt$0$n(t13.$add($Y, 1.402 * t12));
                if (t12 < 0)
                  t12 = 0;
                else if (t12 > 255)
                  t12 = 255;
                $C = 255 - t12;
                t12 = J.getInterceptor$n(Cb);
                t14 = t12.$sub(Cb, 128);
                if (typeof t14 !== "number")
                  return H.iae(t14);
                t14 = t13.$sub($Y, 0.3441363 * t14);
                t11 = t11.$sub(Cr, 128);
                if (typeof t11 !== "number")
                  return H.iae(t11);
                t11 = J.toInt$0$n(J.$sub$n(t14, 0.71413636 * t11));
                if (t11 < 0)
                  t11 = 0;
                else if (t11 > 255)
                  t11 = 255;
                $M = 255 - t11;
                t12 = t12.$sub(Cb, 128);
                if (typeof t12 !== "number")
                  return H.iae(t12);
                t12 = J.toInt$0$n(t13.$add($Y, 1.772 * t12));
                if (t12 < 0)
                  t11 = 0;
                else
                  t11 = t12 > 255 ? 255 : t12;
                Ye = 255 - t11;
              }
              offset0 = offset + 1;
              if (offset < 0 || offset >= t1)
                return H.ioore(data, offset);
              data[offset] = $C;
              offset = offset0 + 1;
              if (offset0 < 0 || offset0 >= t1)
                return H.ioore(data, offset0);
              data[offset0] = $M;
              offset0 = offset + 1;
              if (offset < 0 || offset >= t1)
                return H.ioore(data, offset);
              data[offset] = Ye;
              offset = offset0 + 1;
              if (offset0 < 0 || offset0 >= t1)
                return H.ioore(data, offset0);
              data[offset0] = $K;
            }
          }
          break;
        default:
          throw H.wrapException(U.ImageException$("Unsupported color mode"));
      }
      return data;
    },
    _read$0: function() {
      var marker, t1, t2, $length, pos, t3, t4, t5, bytes, t6, pos0;
      if (!J.$eq(this._nextMarker$0(), 216))
        throw H.wrapException(U.ImageException$("Start Of Image marker not found."));
      marker = this._nextMarker$0();
      while (true) {
        t1 = J.getInterceptor(marker);
        if (!t1.$eq(marker, 217)) {
          t2 = this.input;
          t2 = !J.$ge$n(t2.offset, t2.end);
        } else
          t2 = false;
        if (!t2)
          break;
        $length = this.input.readUint16$0();
        if ($length < 2)
          H.throwExpression(U.ImageException$("Invalid Block"));
        t2 = this.input;
        t2.toString;
        pos = J.$add$ns(t2.offset, 0);
        t3 = t2.buffer;
        t4 = t2.bigEndian;
        t5 = J.$add$ns(pos, $length - 2);
        bytes = new U.InputBuffer(t3, pos, t5, pos, t4);
        t2.offset = J.$add$ns(t2.offset, J.$sub$n(t5, pos));
        switch (marker) {
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 254:
            if (t1.$eq(marker, 224))
              if (J.$eq(J.$index$asx(t3, J.$add$ns(pos, 0)), 74) && J.$eq(J.$index$asx(t3, J.$add$ns(pos, 1)), 70) && J.$eq(J.$index$asx(t3, J.$add$ns(pos, 2)), 73) && J.$eq(J.$index$asx(t3, J.$add$ns(pos, 3)), 70) && J.$eq(J.$index$asx(t3, J.$add$ns(pos, 4)), 0)) {
                t2 = new U.JpegJfif(null, null, null, null, null, null, null, null);
                this.jfif = t2;
                t2.majorVersion = J.$index$asx(t3, J.$add$ns(pos, 5));
                this.jfif.minorVersion = J.$index$asx(t3, J.$add$ns(pos, 6));
                this.jfif.densityUnits = J.$index$asx(t3, J.$add$ns(pos, 7));
                this.jfif.xDensity = J.$or$n(J.$mul$ns(J.$index$asx(t3, J.$add$ns(pos, 8)), 256), J.$index$asx(t3, J.$add$ns(pos, 9)));
                this.jfif.yDensity = J.$or$n(J.$mul$ns(J.$index$asx(t3, J.$add$ns(pos, 10)), 256), J.$index$asx(t3, J.$add$ns(pos, 11)));
                this.jfif.thumbWidth = J.$index$asx(t3, J.$add$ns(pos, 12));
                this.jfif.thumbHeight = J.$index$asx(t3, J.$add$ns(pos, 13));
                t2 = this.jfif;
                t5 = t2.thumbWidth;
                if (typeof t5 !== "number")
                  return H.iae(t5);
                t6 = t2.thumbHeight;
                if (typeof t6 !== "number")
                  return H.iae(t6);
                pos0 = J.$add$ns(pos, 14);
                t5 = J.$add$ns(pos0, 14 + 3 * t5 * t6);
                t2.thumbData = new U.InputBuffer(t3, pos0, t5, pos0, t4);
              }
            if (t1.$eq(marker, 238))
              if (J.$eq(J.$index$asx(t3, J.$add$ns(pos, 0)), 65) && J.$eq(J.$index$asx(t3, J.$add$ns(pos, 1)), 100) && J.$eq(J.$index$asx(t3, J.$add$ns(pos, 2)), 111) && J.$eq(J.$index$asx(t3, J.$add$ns(pos, 3)), 98) && J.$eq(J.$index$asx(t3, J.$add$ns(pos, 4)), 101) && J.$eq(J.$index$asx(t3, J.$add$ns(pos, 5)), 0)) {
                t1 = new U.JpegAdobe(null, null, null, null);
                this.adobe = t1;
                t1.version = J.$index$asx(t3, J.$add$ns(pos, 6));
                this.adobe.flags0 = J.$or$n(J.$mul$ns(J.$index$asx(t3, J.$add$ns(pos, 7)), 256), J.$index$asx(t3, J.$add$ns(pos, 8)));
                this.adobe.flags1 = J.$or$n(J.$mul$ns(J.$index$asx(t3, J.$add$ns(pos, 9)), 256), J.$index$asx(t3, J.$add$ns(pos, 10)));
                this.adobe.transformCode = J.$index$asx(t3, J.$add$ns(pos, 11));
              }
            break;
          case 219:
            this._readDQT$1(bytes);
            break;
          case 192:
          case 193:
          case 194:
            this._readFrame$2(marker, bytes);
            break;
          case 195:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 205:
          case 206:
          case 207:
            throw H.wrapException(U.ImageException$("Unhandled frame type " + t1.toRadixString$1(marker, 16)));
          case 196:
            this._readDHT$1(bytes);
            break;
          case 221:
            this.resetInterval = bytes.readUint16$0();
            break;
          case 218:
            this._readSOS$1(bytes);
            break;
          default:
            t2 = this.input;
            if (J.$eq(J.$index$asx(t2.buffer, J.$add$ns(t2.offset, -3)), 255)) {
              t2 = this.input;
              if (J.$ge$n(J.$index$asx(t2.buffer, J.$add$ns(t2.offset, -2)), 192)) {
                t2 = this.input;
                t2 = J.$le$n(J.$index$asx(t2.buffer, J.$add$ns(t2.offset, -2)), 254);
              } else
                t2 = false;
            } else
              t2 = false;
            if (t2) {
              t1 = this.input;
              t1.offset = J.$sub$n(t1.offset, 3);
              break;
            }
            if (!t1.$eq(marker, 0))
              throw H.wrapException(U.ImageException$("Unknown JPEG marker " + t1.toRadixString$1(marker, 16)));
            break;
        }
        marker = this._nextMarker$0();
      }
    },
    _nextMarker$0: function() {
      var t1, t2, t3, c;
      do {
        do {
          t1 = this.input;
          t2 = t1.buffer;
          t3 = t1.offset;
          t1.offset = J.$add$ns(t3, 1);
          if (!J.$eq(J.$index$asx(t2, t3), 255)) {
            t1 = this.input;
            t1 = !J.$ge$n(t1.offset, t1.end);
          } else
            t1 = false;
        } while (t1);
        do {
          t1 = this.input;
          t2 = t1.buffer;
          t3 = t1.offset;
          t1.offset = J.$add$ns(t3, 1);
          c = J.$index$asx(t2, t3);
          t1 = J.getInterceptor(c);
          if (t1.$eq(c, 255)) {
            t2 = this.input;
            t2 = !J.$ge$n(t2.offset, t2.end);
          } else
            t2 = false;
        } while (t2);
        if (t1.$eq(c, 0)) {
          t1 = this.input;
          t1 = !J.$ge$n(t1.offset, t1.end);
        } else
          t1 = false;
      } while (t1);
      return c;
    },
    _readDQT$1: function(block) {
      var t1, t2, t3, t4, n, prec, t5, i, tmp, t6, t7;
      for (t1 = block.end, t2 = this.quantizationTables; !J.$ge$n(block.offset, t1);) {
        t3 = block.buffer;
        t4 = block.offset;
        block.offset = J.$add$ns(t4, 1);
        n = J.$index$asx(t3, t4);
        prec = J.floor$0$n(J.$div$n(n, 16));
        if (typeof n !== "number")
          return n.$and();
        n &= 15;
        if (n >= 4)
          throw H.wrapException(U.ImageException$("Invalid number of quantization tables"));
        t3 = t2[n];
        if (t3 == null) {
          t3 = new Int32Array(64);
          t2[n] = t3;
        }
        for (t4 = J.getInterceptor$ax(t3), t5 = prec !== 0, i = 0; i < 64; ++i) {
          if (t5)
            tmp = block.readUint16$0();
          else {
            t6 = block.buffer;
            t7 = block.offset;
            block.offset = J.$add$ns(t7, 1);
            tmp = J.$index$asx(t6, t7);
          }
          t4.$indexSet(t3, C.List_AZw[i], tmp);
        }
      }
      if (!J.$ge$n(block.offset, t1))
        throw H.wrapException(U.ImageException$("Bad length for DQT block"));
    },
    _readFrame$2: function(marker, block) {
      var t1, t2, t3, numComponents, i, componentId, x, t4, qId;
      if (this.frame != null)
        throw H.wrapException(U.ImageException$("Duplicate JPG frame data found."));
      t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t2 = [];
      t2.$builtinTypeInfo = [J.JSInt];
      t1 = new U.JpegFrame(null, null, null, null, null, 0, 0, null, null, t1, t2);
      this.frame = t1;
      t2 = J.getInterceptor(marker);
      t1.extended = t2.$eq(marker, 193);
      this.frame.progressive = t2.$eq(marker, 194);
      t2 = this.frame;
      t1 = block.buffer;
      t3 = block.offset;
      block.offset = J.$add$ns(t3, 1);
      t2.precision = J.$index$asx(t1, t3);
      this.frame.scanLines = block.readUint16$0();
      this.frame.samplesPerLine = block.readUint16$0();
      t3 = block.buffer;
      t1 = block.offset;
      block.offset = J.$add$ns(t1, 1);
      numComponents = J.$index$asx(t3, t1);
      if (typeof numComponents !== "number")
        return H.iae(numComponents);
      t1 = this.quantizationTables;
      i = 0;
      for (; i < numComponents; ++i) {
        t2 = block.buffer;
        t3 = block.offset;
        block.offset = J.$add$ns(t3, 1);
        componentId = J.$index$asx(t2, t3);
        t3 = block.buffer;
        t2 = block.offset;
        block.offset = J.$add$ns(t2, 1);
        x = J.$index$asx(t3, t2);
        t2 = J.floor$0$n(J.$div$n(x, 16));
        if (typeof x !== "number")
          return x.$and();
        t3 = block.buffer;
        t4 = block.offset;
        block.offset = J.$add$ns(t4, 1);
        qId = J.$index$asx(t3, t4);
        this.frame.componentsOrder.push(componentId);
        this.frame.components.$indexSet(0, componentId, new U.JpegComponent(t2 & 15, x & 15, t1, qId, null, null, null, null, null, null));
      }
      this.frame.prepare$0();
      this.frames.push(this.frame);
    },
    _readDHT$1: function(block) {
      var t1, ht, ht0, t2, t3, index, bits, count, j, huffmanValues, ht1;
      for (t1 = block.end, ht = this.huffmanTablesDC, ht0 = this.huffmanTablesAC; !J.$ge$n(block.offset, t1);) {
        t2 = block.buffer;
        t3 = block.offset;
        block.offset = J.$add$ns(t3, 1);
        index = J.$index$asx(t2, t3);
        bits = new Uint8Array(16);
        for (count = 0, j = 0; j < 16; ++j) {
          t2 = block.buffer;
          t3 = block.offset;
          block.offset = J.$add$ns(t3, 1);
          bits[j] = J.$index$asx(t2, t3);
          count += bits[j];
        }
        huffmanValues = new Uint8Array(count);
        for (j = 0; j < count; ++j) {
          t2 = block.buffer;
          t3 = block.offset;
          block.offset = J.$add$ns(t3, 1);
          t3 = J.$index$asx(t2, t3);
          if (j >= count)
            return H.ioore(huffmanValues, j);
          huffmanValues[j] = t3;
        }
        t2 = J.getInterceptor$n(index);
        if (t2.$and(index, 16) !== 0) {
          index = t2.$sub(index, 16);
          ht1 = ht0;
        } else
          ht1 = ht;
        t2 = ht1.length;
        if (typeof index !== "number")
          return H.iae(index);
        if (t2 <= index)
          C.JSArray_methods.set$length(ht1, index + 1);
        t2 = this._buildHuffmanTable$2(bits, huffmanValues);
        if (index >>> 0 !== index || index >= ht1.length)
          return H.ioore(ht1, index);
        ht1[index] = t2;
      }
    },
    _readSOS$1: function(block) {
      var t1, t2, n, components, t3, i, t4, t5, id, c, component, dc_tbl_no, ac_tbl_no, spectralStart, spectralEnd, successiveApproximation;
      t1 = block.buffer;
      t2 = block.offset;
      block.offset = J.$add$ns(t2, 1);
      n = J.$index$asx(t1, t2);
      t1 = J.getInterceptor$n(n);
      if (t1.$lt(n, 1) || t1.$gt(n, 4))
        throw H.wrapException(U.ImageException$("Invalid SOS block"));
      if (typeof n !== "number")
        return H.iae(n);
      components = Array(n);
      for (t1 = this.huffmanTablesAC, t2 = this.huffmanTablesDC, t3 = components.length, i = 0; t4 = block.buffer, t5 = block.offset, i < n; ++i) {
        block.offset = J.$add$ns(t5, 1);
        id = J.$index$asx(t4, t5);
        t4 = block.buffer;
        t5 = block.offset;
        block.offset = J.$add$ns(t5, 1);
        c = J.$index$asx(t4, t5);
        if (!this.frame.components.containsKey$1(id))
          throw H.wrapException(U.ImageException$("Invalid Component in SOS block"));
        component = this.frame.components.$index(0, id);
        if (i >= t3)
          return H.ioore(components, i);
        components[i] = component;
        dc_tbl_no = J.floor$0$n(J.$div$n(c, 16)) & 15;
        if (typeof c !== "number")
          return c.$and();
        ac_tbl_no = c & 15;
        t4 = t2.length;
        if (dc_tbl_no < t4) {
          if (dc_tbl_no >= t4)
            return H.ioore(t2, dc_tbl_no);
          component.huffmanTableDC = t2[dc_tbl_no];
        }
        t4 = t1.length;
        if (ac_tbl_no < t4) {
          if (ac_tbl_no >= t4)
            return H.ioore(t1, ac_tbl_no);
          component.huffmanTableAC = t1[ac_tbl_no];
        }
      }
      block.offset = J.$add$ns(t5, 1);
      spectralStart = J.$index$asx(t4, t5);
      t1 = block.buffer;
      t2 = block.offset;
      block.offset = J.$add$ns(t2, 1);
      spectralEnd = J.$index$asx(t1, t2);
      t2 = block.buffer;
      t1 = block.offset;
      block.offset = J.$add$ns(t1, 1);
      successiveApproximation = J.$index$asx(t2, t1);
      t1 = J.floor$0$n(J.$div$n(successiveApproximation, 16));
      if (typeof successiveApproximation !== "number")
        return successiveApproximation.$and();
      t2 = this.input;
      t3 = this.frame;
      t1 = new U.JpegScan(t2, t3, null, null, null, null, null, null, null, components, this.resetInterval, spectralStart, spectralEnd, t1 & 15, successiveApproximation & 15, 0, 0, 0, 0, null);
      t1.precision = t3.precision;
      t1.samplesPerLine = t3.samplesPerLine;
      t1.scanLines = t3.scanLines;
      t1.mcusPerLine = t3.mcusPerLine;
      t1.progressive = t3.progressive;
      t1.maxH = t3.maxH;
      t1.maxV = t3.maxV;
      t1.decode$0();
    },
    _buildHuffmanTable$2: function(codeLengths, values) {
      var code, $length, p, t1, k, q, i, j, t2, t3;
      code = [];
      $length = 16;
      while (true) {
        if (!($length > 0 && codeLengths[$length - 1] === 0))
          break;
        --$length;
      }
      code.push(P.LinkedHashMap_LinkedHashMap$_literal(["children", [], "index", 0], null, null));
      if (0 >= code.length)
        return H.ioore(code, 0);
      p = code[0];
      for (t1 = values.length, k = 0, q = null, i = 0; i < $length;) {
        for (j = 0; j < codeLengths[i]; ++j) {
          if (0 >= code.length)
            return H.ioore(code, 0);
          p = code.pop();
          t2 = J.getInterceptor$asx(p);
          if (J.$le$n(J.get$length$asx(t2.$index(p, "children")), t2.$index(p, "index")))
            J.set$length$asx(t2.$index(p, "children"), J.$add$ns(t2.$index(p, "index"), 1));
          t3 = t2.$index(p, "children");
          t2 = t2.$index(p, "index");
          if (k < 0 || k >= t1)
            return H.ioore(values, k);
          J.$indexSet$ax(t3, t2, values[k]);
          for (; t2 = J.getInterceptor$asx(p), J.$gt$n(t2.$index(p, "index"), 0);) {
            if (0 >= code.length)
              return H.ioore(code, 0);
            p = code.pop();
          }
          t2.$indexSet(p, "index", J.$add$ns(t2.$index(p, "index"), 1));
          code.push(p);
          for (; code.length <= i; p = q) {
            q = P.LinkedHashMap_LinkedHashMap$_literal(["children", [], "index", 0], null, null);
            code.push(q);
            t2 = J.getInterceptor$asx(p);
            if (J.$le$n(J.get$length$asx(t2.$index(p, "children")), t2.$index(p, "index")))
              J.set$length$asx(t2.$index(p, "children"), J.$add$ns(t2.$index(p, "index"), 1));
            J.$indexSet$ax(t2.$index(p, "children"), t2.$index(p, "index"), q.$index(0, "children"));
          }
          ++k;
        }
        ++i;
        if (i < $length) {
          q = P.LinkedHashMap_LinkedHashMap$_literal(["children", [], "index", 0], null, null);
          code.push(q);
          t2 = J.getInterceptor$asx(p);
          if (J.$le$n(J.get$length$asx(t2.$index(p, "children")), t2.$index(p, "index")))
            J.set$length$asx(t2.$index(p, "children"), J.$add$ns(t2.$index(p, "index"), 1));
          J.$indexSet$ax(t2.$index(p, "children"), t2.$index(p, "index"), q.$index(0, "children"));
          p = q;
        }
      }
      if (0 >= code.length)
        return H.ioore(code, 0);
      return J.$index$asx(code[0], "children");
    },
    _buildComponentData$2: function(frame, component) {
      var blocksPerLine, blocksPerColumn, samplesPerLine, $R, r, t1, lines, t2, t3, l, blockRow, scanLine, i, l0, t4, blockCol, t5, sample, offset, j, line, offset0;
      blocksPerLine = component.blocksPerLine;
      blocksPerColumn = component.blocksPerColumn;
      if (typeof blocksPerLine !== "number")
        return blocksPerLine.$mul();
      samplesPerLine = blocksPerLine * 8;
      $R = new Int32Array(64);
      r = new Uint8Array(64);
      if (typeof blocksPerColumn !== "number")
        return blocksPerColumn.$mul();
      t1 = blocksPerColumn * 8;
      lines = Array(t1);
      lines.fixed$length = init;
      for (t2 = component.quantizationTableList, t3 = component.quantizationIndex, l = 0, blockRow = 0; blockRow < blocksPerColumn; ++blockRow) {
        scanLine = blockRow * 8;
        for (i = 0; i < 8; ++i, l = l0) {
          l0 = l + 1;
          t4 = new Uint8Array(samplesPerLine);
          if (l < 0 || l >= t1)
            return H.ioore(lines, l);
          lines[l] = t4;
        }
        for (blockCol = 0; blockCol < blocksPerLine; ++blockCol) {
          if (t3 >>> 0 !== t3 || t3 >= 4)
            return H.ioore(t2, t3);
          t4 = t2[t3];
          t5 = component.blocks;
          if (blockRow >= t5.length)
            return H.ioore(t5, blockRow);
          this._quantizeAndInverse$4(t4, J.$index$asx(t5[blockRow], blockCol), r, $R);
          sample = blockCol * 8;
          for (offset = 0, j = 0; j < 8; ++j) {
            t4 = scanLine + j;
            if (t4 >= t1)
              return H.ioore(lines, t4);
            line = lines[t4];
            for (t4 = J.getInterceptor$ax(line), i = 0; i < 8; ++i, offset = offset0) {
              offset0 = offset + 1;
              if (offset < 0 || offset >= 64)
                return H.ioore(r, offset);
              t4.$indexSet(line, sample + i, r[offset]);
            }
          }
        }
      }
      return lines;
    },
    _quantizeAndInverse$4: function(quantizationTable, zz, dataOut, dataIn) {
      var t1, t2, i, row, v0, v1, t3, v2, t4, v3, t5, t6, v4, v7, v5, t7, v6, t, t8, t9, t10, t11;
      for (t1 = J.getInterceptor$asx(zz), t2 = J.getInterceptor$asx(quantizationTable), i = 0; i < 64; ++i)
        dataIn[i] = J.$mul$ns(t1.$index(zz, i), t2.$index(quantizationTable, i));
      for (row = 0, i = 0; i < 8; ++i, row += 8) {
        t1 = 1 + row;
        if (t1 >= 64)
          return H.ioore(dataIn, t1);
        if (dataIn[t1] === 0) {
          t2 = 2 + row;
          if (t2 >= 64)
            return H.ioore(dataIn, t2);
          if (dataIn[t2] === 0) {
            t2 = 3 + row;
            if (t2 >= 64)
              return H.ioore(dataIn, t2);
            if (dataIn[t2] === 0) {
              t2 = 4 + row;
              if (t2 >= 64)
                return H.ioore(dataIn, t2);
              if (dataIn[t2] === 0) {
                t2 = 5 + row;
                if (t2 >= 64)
                  return H.ioore(dataIn, t2);
                if (dataIn[t2] === 0) {
                  t2 = 6 + row;
                  if (t2 >= 64)
                    return H.ioore(dataIn, t2);
                  if (dataIn[t2] === 0) {
                    t2 = 7 + row;
                    if (t2 >= 64)
                      return H.ioore(dataIn, t2);
                    t2 = dataIn[t2] === 0;
                  } else
                    t2 = false;
                } else
                  t2 = false;
              } else
                t2 = false;
            } else
              t2 = false;
          } else
            t2 = false;
        } else
          t2 = false;
        if (t2) {
          if (row >= 64)
            return H.ioore(dataIn, row);
          C.NativeInt32List_methods.fillRange$3(dataIn, row, row + 8, C.JSInt_methods.floor$0((5793 * dataIn[row] + 512) / 1024));
          continue;
        }
        if (row >= 64)
          return H.ioore(dataIn, row);
        v0 = C.JSInt_methods.floor$0((5793 * dataIn[row] + 128) / 256);
        t2 = 4 + row;
        if (t2 >= 64)
          return H.ioore(dataIn, t2);
        v1 = C.JSInt_methods.floor$0((5793 * dataIn[t2] + 128) / 256);
        t3 = 2 + row;
        if (t3 >= 64)
          return H.ioore(dataIn, t3);
        v2 = dataIn[t3];
        t4 = 6 + row;
        if (t4 >= 64)
          return H.ioore(dataIn, t4);
        v3 = dataIn[t4];
        t5 = dataIn[t1];
        t6 = 7 + row;
        if (t6 >= 64)
          return H.ioore(dataIn, t6);
        v4 = C.JSInt_methods.floor$0((2896 * (t5 - dataIn[t6]) + 128) / 256);
        v7 = C.JSInt_methods.floor$0((2896 * (dataIn[t1] + dataIn[t6]) + 128) / 256);
        t5 = 3 + row;
        if (t5 >= 64)
          return H.ioore(dataIn, t5);
        v5 = dataIn[t5] * 16;
        t7 = 5 + row;
        if (t7 >= 64)
          return H.ioore(dataIn, t7);
        v6 = dataIn[t7] * 16;
        t = C.JSInt_methods.floor$0((v0 - v1 + 1) / 2);
        v0 = C.JSInt_methods.floor$0((v0 + v1 + 1) / 2);
        t8 = C.JSInt_methods.floor$0((v2 * 3784 + v3 * 1567 + 128) / 256);
        v2 = C.JSInt_methods.floor$0((v2 * 1567 - v3 * 3784 + 128) / 256);
        t9 = C.JSInt_methods.floor$0((v4 - v6 + 1) / 2);
        v4 = C.JSInt_methods.floor$0((v4 + v6 + 1) / 2);
        t10 = C.JSInt_methods.floor$0((v7 + v5 + 1) / 2);
        v5 = C.JSInt_methods.floor$0((v7 - v5 + 1) / 2);
        t11 = C.JSInt_methods.floor$0((v0 - t8 + 1) / 2);
        v0 = C.JSInt_methods.floor$0((v0 + t8 + 1) / 2);
        t8 = C.JSInt_methods.floor$0((t - v2 + 1) / 2);
        v1 = C.JSInt_methods.floor$0((t + v2 + 1) / 2);
        t = C.JSInt_methods.floor$0((v4 * 2276 + t10 * 3406 + 2048) / 4096);
        v4 = C.JSInt_methods.floor$0((v4 * 3406 - t10 * 2276 + 2048) / 4096);
        t10 = C.JSInt_methods.floor$0((v5 * 799 + t9 * 4017 + 2048) / 4096);
        v5 = C.JSInt_methods.floor$0((v5 * 4017 - t9 * 799 + 2048) / 4096);
        dataIn[row] = v0 + t;
        dataIn[t6] = v0 - t;
        dataIn[t1] = v1 + t10;
        dataIn[t4] = v1 - t10;
        dataIn[t3] = t8 + v5;
        dataIn[t7] = t8 - v5;
        dataIn[t5] = t11 + v4;
        dataIn[t2] = t11 - v4;
      }
      for (i = 0; i < 8; ++i) {
        t1 = 8 + i;
        if (dataIn[t1] === 0 && dataIn[16 + i] === 0 && dataIn[24 + i] === 0 && dataIn[32 + i] === 0 && dataIn[40 + i] === 0 && dataIn[48 + i] === 0 && dataIn[56 + i] === 0) {
          t = C.JSInt_methods.floor$0((5793 * dataIn[i] + 8192) / 16384);
          dataIn[i] = t;
          dataIn[t1] = t;
          dataIn[16 + i] = t;
          dataIn[24 + i] = t;
          dataIn[32 + i] = t;
          dataIn[40 + i] = t;
          dataIn[48 + i] = t;
          dataIn[56 + i] = t;
          continue;
        }
        v0 = C.JSInt_methods.floor$0((5793 * dataIn[i] + 2048) / 4096);
        t2 = 32 + i;
        v1 = C.JSInt_methods.floor$0((5793 * dataIn[t2] + 2048) / 4096);
        t3 = 16 + i;
        v2 = dataIn[t3];
        t4 = 48 + i;
        v3 = dataIn[t4];
        t5 = 56 + i;
        v4 = C.JSInt_methods.floor$0((2896 * (dataIn[t1] - dataIn[t5]) + 2048) / 4096);
        v7 = C.JSInt_methods.floor$0((2896 * (dataIn[t1] + dataIn[t5]) + 2048) / 4096);
        t6 = 24 + i;
        v5 = dataIn[t6];
        t7 = 40 + i;
        v6 = dataIn[t7];
        t = C.JSInt_methods.floor$0((v0 - v1 + 1) / 2);
        v0 = C.JSInt_methods.floor$0((v0 + v1 + 1) / 2);
        t8 = C.JSInt_methods.floor$0((v2 * 3784 + v3 * 1567 + 2048) / 4096);
        v2 = C.JSInt_methods.floor$0((v2 * 1567 - v3 * 3784 + 2048) / 4096);
        t9 = C.JSInt_methods.floor$0((v4 - v6 + 1) / 2);
        v4 = C.JSInt_methods.floor$0((v4 + v6 + 1) / 2);
        t10 = C.JSInt_methods.floor$0((v7 + v5 + 1) / 2);
        v5 = C.JSInt_methods.floor$0((v7 - v5 + 1) / 2);
        t11 = C.JSInt_methods.floor$0((v0 - t8 + 1) / 2);
        v0 = C.JSInt_methods.floor$0((v0 + t8 + 1) / 2);
        t8 = C.JSInt_methods.floor$0((t - v2 + 1) / 2);
        v1 = C.JSInt_methods.floor$0((t + v2 + 1) / 2);
        t = C.JSInt_methods.floor$0((v4 * 2276 + t10 * 3406 + 2048) / 4096);
        v4 = C.JSInt_methods.floor$0((v4 * 3406 - t10 * 2276 + 2048) / 4096);
        t10 = C.JSInt_methods.floor$0((v5 * 799 + t9 * 4017 + 2048) / 4096);
        v5 = C.JSInt_methods.floor$0((v5 * 4017 - t9 * 799 + 2048) / 4096);
        dataIn[i] = v0 + t;
        dataIn[t5] = v0 - t;
        dataIn[t1] = v1 + t10;
        dataIn[t4] = v1 - t10;
        dataIn[t3] = t8 + v5;
        dataIn[t7] = t8 - v5;
        dataIn[t6] = t11 + v4;
        dataIn[t2] = t11 - v4;
      }
      for (i = 0; i < 64; ++i) {
        t1 = 128 + C.JSInt_methods.floor$0((dataIn[i] + 8) / 16);
        if (t1 < 0)
          t1 = 0;
        else if (t1 > 255)
          t1 = 255;
        dataOut[i] = t1;
      }
    },
    static: {"^": "JpegData_Y16,JpegData_R_CR,JpegData_G_CB,JpegData_G_CR,JpegData_B_CB"}
  },
  JpegFrame: {
    "^": "Object;extended,progressive,precision,scanLines,samplesPerLine,maxH,maxV,mcusPerLine,mcusPerColumn,components,componentsOrder",
    prepare$0: function() {
      var t1, t2, t3, component, t4, t5, blocksPerLine, t6, blocksPerColumn, blocksPerLineForMcu, blocksPerColumnForMcu, blocks, i, row, j;
      for (t1 = this.components, t2 = t1.get$keys()._map, t3 = new P.LinkedHashMapKeyIterator(t2, t2._modifications, null, null), t3._cell = t2._first; t3.moveNext$0();) {
        component = t1.$index(0, t3._collection$_current);
        t4 = this.maxH;
        t5 = component.h;
        if (t4 < t5)
          this.maxH = t5;
        t4 = this.maxV;
        t5 = component.v;
        if (typeof t4 !== "number")
          return t4.$lt();
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (t4 < t5)
          this.maxV = t5;
      }
      t3 = this.samplesPerLine;
      if (typeof t3 !== "number")
        return t3.$div();
      this.mcusPerLine = C.JSNumber_methods.toInt$0(Math.ceil(t3 / 8 / this.maxH));
      t3 = this.scanLines;
      if (typeof t3 !== "number")
        return t3.$div();
      t4 = this.maxV;
      if (typeof t4 !== "number")
        return H.iae(t4);
      this.mcusPerColumn = C.JSNumber_methods.toInt$0(Math.ceil(t3 / 8 / t4));
      for (t3 = new P.LinkedHashMapKeyIterator(t2, t2._modifications, null, null), t3._cell = t2._first; t3.moveNext$0();) {
        component = t1.$index(0, t3._collection$_current);
        t2 = this.samplesPerLine;
        if (typeof t2 !== "number")
          return t2.$div();
        t2 = C.JSNumber_methods.toInt$0(Math.ceil(t2 / 8));
        t4 = component.h;
        blocksPerLine = C.JSNumber_methods.toInt$0(Math.ceil(t2 * t4 / this.maxH));
        t2 = this.scanLines;
        if (typeof t2 !== "number")
          return t2.$div();
        t2 = C.JSNumber_methods.toInt$0(Math.ceil(t2 / 8));
        t5 = component.v;
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = this.maxV;
        if (typeof t6 !== "number")
          return H.iae(t6);
        blocksPerColumn = C.JSNumber_methods.toInt$0(Math.ceil(t2 * t5 / t6));
        t6 = this.mcusPerLine;
        if (typeof t6 !== "number")
          return t6.$mul();
        blocksPerLineForMcu = t6 * t4;
        t4 = this.mcusPerColumn;
        t6 = component.v;
        if (typeof t4 !== "number")
          return t4.$mul();
        if (typeof t6 !== "number")
          return H.iae(t6);
        blocksPerColumnForMcu = t4 * t6;
        blocks = Array(blocksPerColumnForMcu);
        for (i = 0; i < blocksPerColumnForMcu; ++i) {
          row = Array(blocksPerLineForMcu);
          row.fixed$length = init;
          for (j = 0; j < blocksPerLineForMcu; ++j)
            row[j] = new Int32Array(64);
          if (i >= blocksPerColumnForMcu)
            return H.ioore(blocks, i);
          blocks[i] = row;
        }
        component.blocksPerLine = blocksPerLine;
        component.blocksPerColumn = blocksPerColumn;
        component.blocks = blocks;
      }
    }
  },
  JpegJfif: {
    "^": "Object;majorVersion,minorVersion,densityUnits,xDensity,yDensity,thumbWidth,thumbHeight,thumbData"
  },
  JpegScan: {
    "^": "Object;input,frame,precision,samplesPerLine,scanLines,mcusPerLine,progressive,maxH,maxV,components,resetInterval,spectralStart,spectralEnd,successivePrev,successive,bitsData,bitsCount,eobrun,successiveACState,successiveACNextValue",
    decode$0: function() {
      var t1, componentsLength, decodeFn, t2, t3, t4, mcuExpected, component, mcu, h, v, i, n, blockRow, blockCol, j, k, mcuRow, mcuCol, m1, m2;
      t1 = this.components;
      componentsLength = t1.length;
      if (this.progressive === true)
        if (J.$eq(this.spectralStart, 0))
          decodeFn = this.successivePrev === 0 ? this.get$_decodeDCFirst() : this.get$_decodeDCSuccessive();
        else
          decodeFn = this.successivePrev === 0 ? this.get$_decodeACFirst() : this.get$_decodeACSuccessive();
      else
        decodeFn = this.get$_decodeBaseline();
      t2 = componentsLength === 1;
      if (t2) {
        if (0 >= componentsLength)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = t3.get$blocksPerLine();
        t3 = t3.blocksPerColumn;
        if (typeof t4 !== "number")
          return t4.$mul();
        if (typeof t3 !== "number")
          return H.iae(t3);
        mcuExpected = t4 * t3;
      } else {
        t3 = this.mcusPerLine;
        t4 = this.frame.mcusPerColumn;
        if (typeof t3 !== "number")
          return t3.$mul();
        if (typeof t4 !== "number")
          return H.iae(t4);
        mcuExpected = t3 * t4;
      }
      t3 = this.resetInterval;
      if (t3 == null || t3 === 0)
        this.resetInterval = mcuExpected;
      for (component = null, mcu = 0, h = null, v = null; mcu < mcuExpected;) {
        for (i = 0; i < componentsLength; ++i)
          t1[i].set$pred(0);
        this.eobrun = 0;
        if (t2) {
          if (0 >= componentsLength)
            return H.ioore(t1, 0);
          component = t1[0];
          n = 0;
          while (true) {
            t3 = this.resetInterval;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(n < t3))
              break;
            t3 = component.get$blocksPerLine();
            if (typeof t3 !== "number")
              return H.iae(t3);
            blockRow = C.JSInt_methods.$tdiv(mcu, t3);
            t3 = component.blocksPerLine;
            if (typeof t3 !== "number")
              return H.iae(t3);
            blockCol = C.JSInt_methods.$mod(mcu, t3);
            t3 = component.blocks;
            if (blockRow < 0 || blockRow >= t3.length)
              return H.ioore(t3, blockRow);
            decodeFn.call$2(component, J.$index$asx(t3[blockRow], blockCol));
            ++mcu;
            ++n;
          }
        } else {
          n = 0;
          while (true) {
            t3 = this.resetInterval;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(n < t3))
              break;
            for (i = 0; i < componentsLength; ++i) {
              component = t1[i];
              h = component.get$h();
              v = component.v;
              if (typeof v !== "number")
                return H.iae(v);
              t3 = component.h;
              j = 0;
              for (; j < v; ++j)
                for (k = 0; k < h; ++k) {
                  t4 = this.mcusPerLine;
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  mcuRow = C.JSInt_methods.$tdiv(mcu, t4);
                  mcuCol = C.JSInt_methods.$mod(mcu, t4);
                  t4 = component.v;
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  blockRow = mcuRow * t4 + j;
                  t4 = component.blocks;
                  if (blockRow < 0 || blockRow >= t4.length)
                    return H.ioore(t4, blockRow);
                  decodeFn.call$2(component, J.$index$asx(t4[blockRow], mcuCol * t3 + k));
                }
            }
            ++mcu;
            ++n;
          }
        }
        this.bitsCount = 0;
        t3 = this.input;
        m1 = J.$index$asx(t3.buffer, J.$add$ns(t3.offset, 0));
        t3 = this.input;
        m2 = J.$index$asx(t3.buffer, J.$add$ns(t3.offset, 1));
        if (J.$eq(m1, 255)) {
          t3 = J.getInterceptor$n(m2);
          if (t3.$ge(m2, 208) && t3.$le(m2, 215)) {
            t3 = this.input;
            t3.offset = J.$add$ns(t3.offset, 2);
          } else
            break;
        }
      }
    },
    _readBit$0: function() {
      var t1, t2, t3, nextByte;
      t1 = this.bitsCount;
      if (t1 > 0) {
        --t1;
        this.bitsCount = t1;
        t2 = this.bitsData;
        if (typeof t2 !== "number")
          return t2.$shr();
        return C.JSNumber_methods.$shr(t2, t1) & 1;
      }
      t1 = this.input;
      t2 = t1.buffer;
      t3 = t1.offset;
      t1.offset = J.$add$ns(t3, 1);
      t3 = J.$index$asx(t2, t3);
      this.bitsData = t3;
      if (J.$eq(t3, 255)) {
        t1 = this.input;
        t2 = t1.buffer;
        t3 = t1.offset;
        t1.offset = J.$add$ns(t3, 1);
        nextByte = J.$index$asx(t2, t3);
        if (!J.$eq(nextByte, 0)) {
          t1 = this.bitsData;
          if (typeof t1 !== "number")
            return t1.$shl();
          if (typeof nextByte !== "number")
            return H.iae(nextByte);
          throw H.wrapException(U.ImageException$("unexpected marker: " + C.JSInt_methods.toRadixString$1((t1 << 8 | nextByte) >>> 0, 16)));
        }
      }
      this.bitsCount = 7;
      t1 = this.bitsData;
      if (typeof t1 !== "number")
        return t1.$shr();
      return C.JSNumber_methods._shrOtherPositive$1(t1, 7);
    },
    _image$_decodeHuffman$1: function(tree) {
      var node, bit;
      for (node = tree; bit = this._readBit$0(), true;) {
        node = J.$index$asx(node, bit);
        if (typeof node === "number")
          return C.JSNumber_methods.toInt$0(node);
      }
      return;
    },
    _receive$1: function($length) {
      var n, bit;
      n = 0;
      while (true) {
        if (typeof $length !== "number")
          return $length.$gt();
        if (!($length > 0))
          break;
        bit = this._readBit$0();
        n = (n << 1 | bit) >>> 0;
        --$length;
      }
      return n;
    },
    _receiveAndExtend$1: function($length) {
      var n, t1;
      n = this._receive$1($length);
      if (typeof $length !== "number")
        return $length.$sub();
      t1 = C.JSInt_methods.$shl(1, $length - 1);
      if (typeof n !== "number")
        return n.$ge();
      if (n >= t1)
        return n;
      return n + C.JSInt_methods.$shl(-1, $length) + 1;
    },
    _decodeBaseline$2: [function(component, zz) {
      var t, diff, t1, t2, k, rs, s, r;
      t = this._image$_decodeHuffman$1(component.get$huffmanTableDC());
      diff = t === 0 ? 0 : this._receiveAndExtend$1(t);
      t1 = component.pred;
      if (typeof t1 !== "number")
        return t1.$add();
      t1 += diff;
      component.pred = t1;
      t2 = J.getInterceptor$ax(zz);
      t2.$indexSet(zz, 0, t1);
      for (k = 1; k < 64;) {
        rs = this._image$_decodeHuffman$1(component.huffmanTableAC);
        if (typeof rs !== "number")
          return rs.$and();
        s = rs & 15;
        r = C.JSInt_methods._shrOtherPositive$1(rs, 4);
        if (s === 0) {
          if (r < 15)
            break;
          k += 16;
          continue;
        }
        k += r;
        if (k < 0 || k >= 80)
          return H.ioore(C.List_AZw, k);
        t2.$indexSet(zz, C.List_AZw[k], this._receiveAndExtend$1(s));
        ++k;
      }
    }, "call$2", "get$_decodeBaseline", 4, 0, 117],
    _decodeDCFirst$2: [function(component, zz) {
      var t, diff, t1, t2;
      t = this._image$_decodeHuffman$1(component.get$huffmanTableDC());
      if (t === 0)
        diff = 0;
      else {
        t1 = this._receiveAndExtend$1(t);
        t2 = this.successive;
        if (typeof t2 !== "number")
          return H.iae(t2);
        diff = C.JSInt_methods._shlPositive$1(t1, t2);
      }
      t1 = component.pred;
      if (typeof t1 !== "number")
        return t1.$add();
      t1 += diff;
      component.pred = t1;
      J.$indexSet$ax(zz, 0, t1);
    }, "call$2", "get$_decodeDCFirst", 4, 0, 117],
    _decodeDCSuccessive$2: [function(component, zz) {
      var t1, t2, t3, t4;
      t1 = J.getInterceptor$asx(zz);
      t2 = t1.$index(zz, 0);
      t3 = this._readBit$0();
      t4 = this.successive;
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1.$indexSet(zz, 0, J.$or$n(t2, C.JSInt_methods._shlPositive$1(t3, t4)));
    }, "call$2", "get$_decodeDCSuccessive", 4, 0, 117],
    _decodeACFirst$2: [function(component, zz) {
      var t1, k, e, t2, rs, s, r, z, t3;
      t1 = this.eobrun;
      if (t1 > 0) {
        this.eobrun = t1 - 1;
        return;
      }
      k = this.spectralStart;
      e = this.spectralEnd;
      for (t1 = J.getInterceptor$ax(zz); t2 = J.getInterceptor$n(k), t2.$le(k, e);) {
        rs = this._image$_decodeHuffman$1(component.get$huffmanTableAC());
        if (typeof rs !== "number")
          return rs.$and();
        s = rs & 15;
        r = C.JSInt_methods._shrOtherPositive$1(rs, 4);
        if (s === 0) {
          if (r < 15) {
            t1 = this._receive$1(r);
            t2 = C.JSInt_methods._shlPositive$1(1, r);
            if (typeof t1 !== "number")
              return t1.$add();
            this.eobrun = t1 + t2 - 1;
            break;
          }
          k = t2.$add(k, 16);
          continue;
        }
        k = t2.$add(k, r);
        if (k >>> 0 !== k || k >= 80)
          return H.ioore(C.List_AZw, k);
        z = C.List_AZw[k];
        t2 = this._receiveAndExtend$1(s);
        t3 = this.successive;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1.$indexSet(zz, z, t2 * C.JSInt_methods._shlPositive$1(1, t3));
        ++k;
      }
    }, "call$2", "get$_decodeACFirst", 4, 0, 117],
    _decodeACSuccessive$2: [function(component, zz) {
      var k, e, t1, t2, r, z, rs, s, r0, t3, t4;
      k = this.spectralStart;
      e = this.spectralEnd;
      for (t1 = J.getInterceptor$asx(zz), t2 = this.successive, r = 0; J.$le$n(k, e);) {
        if (k >>> 0 !== k || k >= 80)
          return H.ioore(C.List_AZw, k);
        z = C.List_AZw[k];
        switch (this.successiveACState) {
          case 0:
            rs = this._image$_decodeHuffman$1(component.get$huffmanTableAC());
            if (typeof rs !== "number")
              return rs.$and();
            s = rs & 15;
            r0 = C.JSInt_methods._shrOtherPositive$1(rs, 4);
            if (s === 0)
              if (r0 < 15) {
                t3 = this._receive$1(r0);
                t4 = C.JSInt_methods._shlPositive$1(1, r0);
                if (typeof t3 !== "number")
                  return t3.$add();
                this.eobrun = t3 + t4;
                this.successiveACState = 4;
              } else
                this.successiveACState = 1;
            else {
              if (s !== 1)
                throw H.wrapException(U.ImageException$("invalid ACn encoding"));
              this.successiveACNextValue = this._receiveAndExtend$1(s);
              this.successiveACState = r0 !== 0 ? 2 : 3;
            }
            continue;
          case 1:
          case 2:
            if (!J.$eq(t1.$index(zz, z), 0)) {
              t3 = t1.$index(zz, z);
              t4 = this._readBit$0();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t1.$indexSet(zz, z, J.$add$ns(t3, C.JSInt_methods._shlPositive$1(t4, t2)));
            } else {
              --r;
              if (r === 0)
                this.successiveACState = this.successiveACState === 2 ? 3 : 0;
            }
            break;
          case 3:
            if (!J.$eq(t1.$index(zz, z), 0)) {
              t3 = t1.$index(zz, z);
              t4 = this._readBit$0();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t1.$indexSet(zz, z, J.$add$ns(t3, C.JSInt_methods._shlPositive$1(t4, t2)));
            } else {
              t3 = this.successiveACNextValue;
              if (typeof t3 !== "number")
                return t3.$shl();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t1.$indexSet(zz, z, C.JSInt_methods._shlPositive$1(t3, t2));
              this.successiveACState = 0;
            }
            break;
          case 4:
            if (!J.$eq(t1.$index(zz, z), 0)) {
              t3 = t1.$index(zz, z);
              t4 = this._readBit$0();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t1.$indexSet(zz, z, J.$add$ns(t3, C.JSInt_methods._shlPositive$1(t4, t2)));
            }
            break;
        }
        ++k;
      }
      if (this.successiveACState === 4)
        if (--this.eobrun === 0)
          this.successiveACState = 0;
    }, "call$2", "get$_decodeACSuccessive", 4, 0, 118]
  },
  JpegDecoder: {
    "^": "Decoder;info,input,progressCallback",
    startDecode$1: function(data) {
      var t1;
      this.input = U.InputBuffer$(data, true, null, 0);
      t1 = new U.JpegData(null, null, null, null, null, null, Array(4), [], [], [], [], 0, 0).readInfo$1(data);
      this.info = t1;
      return t1;
    },
    decodeFrame$1: function(frame) {
      var t1, t2, jpeg, image;
      t1 = this.input;
      if (t1 == null)
        return;
      t2 = [];
      jpeg = new U.JpegData(null, null, null, null, null, null, Array(4), t2, [], [], [], 0, 0);
      jpeg.progressCallback = this.progressCallback;
      jpeg.read$1(t1.buffer);
      if (t2.length !== 1)
        throw H.wrapException(U.ImageException$("only single frame JPEGs supported"));
      t1 = jpeg.frame;
      image = U.Image$(t1.samplesPerLine, t1.scanLines, 3);
      this._copyToImage$2(jpeg, image);
      return image;
    },
    _copyToImage$2: function(jpeg, imageData) {
      var width, height, data, t1, t2, t3, i, j, y, x, i0, $Y, j0, t4, t5, t6, t7, $R, $G, $B, $C, $M, $K;
      width = imageData.width;
      height = imageData.height;
      data = jpeg.getData$2(width, height);
      switch (jpeg.components.length) {
        case 1:
          if (typeof height !== "number")
            return H.iae(height);
          t1 = data.length;
          t2 = imageData.data;
          t3 = t2.length;
          i = 0;
          j = 0;
          y = 0;
          for (; y < height; ++y) {
            if (typeof width !== "number")
              return H.iae(width);
            x = 0;
            for (; x < width; ++x, j = j0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(data, i);
              $Y = data[i];
              j0 = j + 1;
              t4 = C.JSInt_methods.clamp$2(255, 0, 255);
              t5 = C.JSInt_methods.clamp$2($Y, 0, 255);
              t6 = C.JSInt_methods.clamp$2($Y, 0, 255);
              t7 = C.JSInt_methods.clamp$2($Y, 0, 255);
              if (j < 0 || j >= t3)
                return H.ioore(t2, j);
              t2[j] = (t4 << 24 | t5 << 16 | t6 << 8 | t7) >>> 0;
            }
          }
          break;
        case 3:
          if (typeof height !== "number")
            return H.iae(height);
          t1 = data.length;
          t2 = imageData.data;
          t3 = t2.length;
          i = 0;
          j = 0;
          y = 0;
          for (; y < height; ++y) {
            if (typeof width !== "number")
              return H.iae(width);
            x = 0;
            for (; x < width; ++x, j = j0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(data, i);
              $R = data[i];
              i = i0 + 1;
              if (i0 < 0 || i0 >= t1)
                return H.ioore(data, i0);
              $G = data[i0];
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(data, i);
              $B = data[i];
              t4 = C.JSInt_methods.clamp$2(255, 0, 255);
              t5 = C.JSInt_methods.clamp$2($B, 0, 255);
              t6 = C.JSInt_methods.clamp$2($G, 0, 255);
              t7 = C.JSInt_methods.clamp$2($R, 0, 255);
              j0 = j + 1;
              if (j < 0 || j >= t3)
                return H.ioore(t2, j);
              t2[j] = (t4 << 24 | t5 << 16 | t6 << 8 | t7) >>> 0;
            }
          }
          break;
        case 4:
          if (typeof height !== "number")
            return H.iae(height);
          t1 = imageData.data;
          t2 = t1.length;
          t3 = data.length;
          i = 0;
          j = 0;
          y = 0;
          for (; y < height; ++y) {
            if (typeof width !== "number")
              return H.iae(width);
            x = 0;
            for (; x < width; ++x, j = j0) {
              i0 = i + 1;
              if (i < 0 || i >= t3)
                return H.ioore(data, i);
              $C = data[i];
              i = i0 + 1;
              if (i0 < 0 || i0 >= t3)
                return H.ioore(data, i0);
              $M = data[i0];
              i0 = i + 1;
              if (i < 0 || i >= t3)
                return H.ioore(data, i);
              $Y = data[i];
              i = i0 + 1;
              if (i0 < 0 || i0 >= t3)
                return H.ioore(data, i0);
              $K = data[i0];
              t4 = 1 - ($K / 255 | 0);
              t5 = $C * t4 + $K;
              if (t5 < 0)
                t5 = 0;
              else if (t5 > 255)
                t5 = 255;
              t6 = $M * t4 + $K;
              if (t6 < 0)
                t6 = 0;
              else if (t6 > 255)
                t6 = 255;
              t4 = $Y * t4 + $K;
              if (t4 < 0)
                t4 = 0;
              else if (t4 > 255)
                t4 = 255;
              j0 = j + 1;
              t7 = C.JSInt_methods.clamp$2(255, 0, 255);
              t4 = C.JSInt_methods.clamp$2(255 - t4, 0, 255);
              t6 = C.JSInt_methods.clamp$2(255 - t6, 0, 255);
              t5 = C.JSInt_methods.clamp$2(255 - t5, 0, 255);
              if (j < 0 || j >= t2)
                return H.ioore(t1, j);
              t1[j] = (t7 << 24 | t4 << 16 | t6 << 8 | t5) >>> 0;
            }
          }
          break;
        default:
          throw H.wrapException("Unsupported color mode");
      }
    }
  },
  PngFrame: {
    "^": "Object;sequenceNumber,width>,height>,xOffset,yOffset,delayNum,delayDen,dispose,blend,_fdat<",
    static: {"^": "PngFrame_APNG_DISPOSE_OP_NONE,PngFrame_APNG_DISPOSE_OP_BACKGROUND,PngFrame_APNG_DISPOSE_OP_PREVIOUS,PngFrame_APNG_BLEND_OP_SOURCE,PngFrame_APNG_BLEND_OP_OVER"}
  },
  PngInfo: {
    "^": "DecodeInfo;bits,colorType,compressionMethod,filterMethod,interlaceMethod,palette,transparency,colorLut,gamma,image$PngInfo$backgroundColor,numFrames,repeat,frames,_idat,width,height,backgroundColor"
  },
  PngDecoder: {
    "^": "Decoder;info,_image$_bitBuffer,_image$_bitBufferLen,_input,_progressY,_frame,_numFrames,progressCallback",
    isValidFile$1: function(data) {
      var pngHeader, i;
      pngHeader = U.InputBuffer$(data, true, null, 0).readBytes$1(8);
      for (i = 0; i < 8; ++i)
        if (!J.$eq(J.$index$asx(pngHeader.buffer, J.$add$ns(pngHeader.offset, i)), C.List_2Vk[i]))
          return false;
      return true;
    },
    startDecode$1: function(data) {
      var t1, pngHeader, i, inputPos, chunkSize, chunkType, pos, t2, t3, t4, hdr, hdrBytes, t5, gammaInt, frame;
      t1 = U.InputBuffer$(data, true, null, 0);
      this._input = t1;
      pngHeader = t1.readBytes$1(8);
      for (i = 0; i < 8; ++i)
        if (!J.$eq(J.$index$asx(pngHeader.buffer, J.$add$ns(pngHeader.offset, i)), C.List_2Vk[i]))
          return;
      for (; true;) {
        t1 = this._input;
        inputPos = J.$sub$n(t1.offset, t1.start);
        chunkSize = this._input.readUint32$0();
        chunkType = this._input.readString$1(4);
        switch (chunkType) {
          case "IHDR":
            t1 = this._input;
            t1.toString;
            pos = J.$add$ns(t1.offset, 0);
            t2 = t1.buffer;
            t3 = t1.bigEndian;
            t4 = J.$add$ns(pos, chunkSize);
            t1.offset = J.$add$ns(t1.offset, J.$sub$n(t4, pos));
            hdr = U.InputBuffer$from(new U.InputBuffer(t2, pos, t4, pos, t3), null, 0);
            hdrBytes = hdr.toUint8List$0();
            t3 = new U.PngInfo(null, null, null, null, null, null, null, null, null, 16777215, 1, 0, [], [], 0, 0, 4294967295);
            this.info = t3;
            t3.width = hdr.readUint32$0();
            this.info.height = hdr.readUint32$0();
            t3 = this.info;
            t4 = hdr.buffer;
            t2 = hdr.offset;
            hdr.offset = J.$add$ns(t2, 1);
            t3.bits = J.$index$asx(t4, t2);
            t2 = this.info;
            t4 = hdr.buffer;
            t3 = hdr.offset;
            hdr.offset = J.$add$ns(t3, 1);
            t2.colorType = J.$index$asx(t4, t3);
            t3 = this.info;
            t4 = hdr.buffer;
            t2 = hdr.offset;
            hdr.offset = J.$add$ns(t2, 1);
            t3.compressionMethod = J.$index$asx(t4, t2);
            t2 = this.info;
            t4 = hdr.buffer;
            t3 = hdr.offset;
            hdr.offset = J.$add$ns(t3, 1);
            t2.filterMethod = J.$index$asx(t4, t3);
            t3 = this.info;
            t4 = hdr.buffer;
            t2 = hdr.offset;
            hdr.offset = J.$add$ns(t2, 1);
            t3.interlaceMethod = J.$index$asx(t4, t2);
            if (!C.JSArray_methods.contains$1([0, 2, 3, 4, 6], this.info.colorType))
              return;
            if (!J.$eq(this.info.filterMethod, 0))
              return;
            t1 = this.info;
            switch (t1.colorType) {
              case 0:
                if (!C.JSArray_methods.contains$1([1, 2, 4, 8, 16], t1.bits))
                  return;
                break;
              case 2:
                if (!C.JSArray_methods.contains$1([8, 16], t1.bits))
                  return;
                break;
              case 3:
                if (!C.JSArray_methods.contains$1([1, 2, 4, 8], t1.bits))
                  return;
                break;
              case 4:
                if (!C.JSArray_methods.contains$1([8, 16], t1.bits))
                  return;
                break;
              case 6:
                if (!C.JSArray_methods.contains$1([8, 16], t1.bits))
                  return;
                break;
            }
            if (this._input.readUint32$0() !== T.getCrc32(hdrBytes, T.getCrc32(new J._CodeUnits(chunkType), 0)))
              throw H.wrapException(U.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "PLTE":
            t1 = this.info;
            t2 = this._input;
            t2.toString;
            pos = J.$add$ns(t2.offset, 0);
            t3 = t2.buffer;
            t4 = t2.bigEndian;
            t5 = J.$add$ns(pos, chunkSize);
            t2.offset = J.$add$ns(t2.offset, J.$sub$n(t5, pos));
            t1.palette = new U.InputBuffer(t3, pos, t5, pos, t4).toUint8List$0();
            if (this._input.readUint32$0() !== T.getCrc32(this.info.palette, T.getCrc32(new J._CodeUnits(chunkType), 0)))
              throw H.wrapException(U.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "tRNS":
            t1 = this.info;
            t2 = this._input;
            t2.toString;
            pos = J.$add$ns(t2.offset, 0);
            t3 = t2.buffer;
            t4 = t2.bigEndian;
            t5 = J.$add$ns(pos, chunkSize);
            t2.offset = J.$add$ns(t2.offset, J.$sub$n(t5, pos));
            t1.transparency = new U.InputBuffer(t3, pos, t5, pos, t4).toUint8List$0();
            if (this._input.readUint32$0() !== T.getCrc32(this.info.transparency, T.getCrc32(new J._CodeUnits(chunkType), 0)))
              throw H.wrapException(U.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "IEND":
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, 4);
            break;
          case "gAMA":
            if (chunkSize !== 4)
              throw H.wrapException(U.ImageException$("Invalid gAMA chunk"));
            gammaInt = this._input.readUint32$0();
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, 4);
            if (gammaInt !== 100000)
              this.info.gamma = gammaInt / 100000;
            break;
          case "IDAT":
            this.info._idat.push(inputPos);
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, chunkSize);
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, 4);
            break;
          case "acTL":
            this.info.numFrames = this._input.readUint32$0();
            this.info.repeat = this._input.readUint32$0();
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, 4);
            break;
          case "fcTL":
            frame = new U.PngFrame(null, null, null, null, null, null, null, null, null, []);
            this.info.frames.push(frame);
            frame.sequenceNumber = this._input.readUint32$0();
            frame.width = this._input.readUint32$0();
            frame.height = this._input.readUint32$0();
            frame.xOffset = this._input.readUint32$0();
            frame.yOffset = this._input.readUint32$0();
            frame.delayNum = this._input.readUint16$0();
            frame.delayDen = this._input.readUint16$0();
            t1 = this._input;
            t2 = t1.buffer;
            t3 = t1.offset;
            t1.offset = J.$add$ns(t3, 1);
            frame.dispose = J.$index$asx(t2, t3);
            t3 = this._input;
            t2 = t3.buffer;
            t1 = t3.offset;
            t3.offset = J.$add$ns(t1, 1);
            frame.blend = J.$index$asx(t2, t1);
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, 4);
            break;
          case "fdAT":
            this._input.readUint32$0();
            C.JSArray_methods.get$last(this.info.frames).get$_fdat().push(inputPos);
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, chunkSize - 4);
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, 4);
            break;
          case "bKGD":
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, chunkSize);
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, 4);
            break;
          default:
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, chunkSize);
            t1 = this._input;
            t1.offset = J.$add$ns(t1.offset, 4);
            break;
        }
        if (chunkType === "IEND")
          break;
        t1 = this._input;
        if (J.$ge$n(t1.offset, t1.end))
          return;
      }
      return this.info;
    },
    decodeFrame$1: function(frame) {
      var t1, imageData, width, height, t2, t3, len, i, chunkSize, chunkType, pos, t4, data, f, t5, t6, image, input, c, origW, origH;
      t1 = this.info;
      if (t1 == null)
        return;
      imageData = [];
      width = t1.width;
      height = t1.height;
      t2 = t1.frames;
      t3 = t2.length;
      if (t3 === 0 || frame === 0)
        for (len = t1._idat.length, i = 0; i < len; ++i) {
          t1 = this._input;
          t2 = this.info._idat;
          if (i >= t2.length)
            return H.ioore(t2, i);
          t1.offset = t2[i];
          chunkSize = t1.readUint32$0();
          chunkType = this._input.readString$1(4);
          t1 = this._input;
          t1.toString;
          pos = J.$add$ns(t1.offset, 0);
          t2 = t1.buffer;
          t3 = t1.bigEndian;
          t4 = J.$add$ns(pos, chunkSize);
          t1.offset = J.$add$ns(t1.offset, J.$sub$n(t4, pos));
          data = new U.InputBuffer(t2, pos, t4, pos, t3).toUint8List$0();
          C.JSArray_methods.addAll$1(imageData, data);
          if (this._input.readUint32$0() !== T.getCrc32(data, T.getCrc32(new J._CodeUnits(chunkType), 0)))
            throw H.wrapException(U.ImageException$("Invalid " + chunkType + " checksum"));
        }
      else {
        if (frame >= t3)
          throw H.wrapException(U.ImageException$("Invalid Frame Number: " + frame));
        if (frame >= t3)
          return H.ioore(t2, frame);
        f = t2[frame];
        t1 = J.getInterceptor$x(f);
        width = t1.get$width(f);
        height = t1.get$height(f);
        for (t1 = f.get$_fdat(), t2 = f._fdat, i = 0; i < t1.length; ++i) {
          t3 = this._input;
          if (i >= t2.length)
            return H.ioore(t2, i);
          t3.offset = t2[i];
          chunkSize = t3.readUint32$0();
          this._input.readString$1(4);
          t3 = this._input;
          t3.offset = J.$add$ns(t3.offset, 4);
          t3 = this._input;
          t3.toString;
          pos = J.$add$ns(t3.offset, 0);
          t4 = t3.buffer;
          t5 = t3.bigEndian;
          t6 = J.$add$ns(pos, chunkSize);
          t3.offset = J.$add$ns(t3.offset, J.$sub$n(t6, pos));
          C.JSArray_methods.addAll$1(imageData, new U.InputBuffer(t4, pos, t6, pos, t5).toUint8List$0());
        }
        this._frame = frame;
        this._numFrames = this.info.numFrames;
      }
      image = U.Image$(width, height, J.$eq(this.info.colorType, 4) || J.$eq(this.info.colorType, 6) || this.info.transparency != null ? 4 : 3);
      input = U.InputBuffer$(new T.ZLibDecoder().decodeBuffer$2$verify(T.InputStream$(imageData, 1, null, 0), true), true, null, 0);
      this._image$_bitBuffer = 0;
      this._image$_bitBufferLen = 0;
      t1 = this.info;
      if (t1.colorLut == null) {
        t1.colorLut = H.setRuntimeTypeInfo(Array(256), [J.JSInt]);
        for (i = 0; i < 256; ++i) {
          t1 = this.info.gamma;
          if (t1 != null) {
            if (typeof t1 !== "number")
              H.throwExpression(P.ArgumentError$(t1));
            c = C.JSNumber_methods.toInt$0(Math.pow(i / 255, t1) * 255);
          } else
            c = i;
          this.info.colorLut[i] = c;
        }
        t1 = this.info;
        t2 = t1.palette;
        if (t2 != null && t1.gamma != null)
          for (t3 = t2.length, i = 0; i < t3; ++i) {
            t4 = t1.colorLut;
            t5 = t2[i];
            t4.length;
            if (t5 >= 256)
              return H.ioore(t4, t5);
            t2[i] = t4[t5];
          }
      }
      t1 = this.info;
      origW = t1.width;
      origH = t1.height;
      t1.width = width;
      t1.height = height;
      this._progressY = 0;
      if (!J.$eq(t1.interlaceMethod, 0)) {
        t1 = J.getInterceptor$ns(width);
        t2 = t1.$add(width, 7);
        if (typeof t2 !== "number")
          return t2.$shr();
        t2 = C.JSNumber_methods._shrOtherPositive$1(t2, 3);
        t3 = J.getInterceptor$ns(height);
        t4 = t3.$add(height, 7);
        if (typeof t4 !== "number")
          return t4.$shr();
        this._processPass$8(input, image, 0, 0, 8, 8, t2, C.JSNumber_methods._shrOtherPositive$1(t4, 3));
        t4 = t1.$add(width, 3);
        if (typeof t4 !== "number")
          return t4.$shr();
        t4 = C.JSNumber_methods._shrOtherPositive$1(t4, 3);
        t2 = t3.$add(height, 7);
        if (typeof t2 !== "number")
          return t2.$shr();
        this._processPass$8(input, image, 4, 0, 8, 8, t4, C.JSNumber_methods._shrOtherPositive$1(t2, 3));
        t2 = t1.$add(width, 3);
        if (typeof t2 !== "number")
          return t2.$shr();
        t2 = C.JSNumber_methods._shrOtherPositive$1(t2, 2);
        t4 = t3.$add(height, 3);
        if (typeof t4 !== "number")
          return t4.$shr();
        this._processPass$8(input, image, 0, 4, 4, 8, t2, C.JSNumber_methods._shrOtherPositive$1(t4, 3));
        t4 = t1.$add(width, 1);
        if (typeof t4 !== "number")
          return t4.$shr();
        t4 = C.JSNumber_methods._shrOtherPositive$1(t4, 2);
        t2 = t3.$add(height, 3);
        if (typeof t2 !== "number")
          return t2.$shr();
        this._processPass$8(input, image, 2, 0, 4, 4, t4, C.JSNumber_methods._shrOtherPositive$1(t2, 2));
        t1 = t1.$add(width, 1);
        if (typeof t1 !== "number")
          return t1.$shr();
        t1 = C.JSNumber_methods._shrOtherPositive$1(t1, 1);
        t2 = t3.$add(height, 1);
        if (typeof t2 !== "number")
          return t2.$shr();
        this._processPass$8(input, image, 0, 2, 2, 4, t1, C.JSNumber_methods._shrOtherPositive$1(t2, 2));
        if (typeof width !== "number")
          return width.$shr();
        t2 = C.JSNumber_methods._shrOtherPositive$1(width, 1);
        t3 = t3.$add(height, 1);
        if (typeof t3 !== "number")
          return t3.$shr();
        this._processPass$8(input, image, 1, 0, 2, 2, t2, C.JSNumber_methods._shrOtherPositive$1(t3, 1));
        if (typeof height !== "number")
          return height.$shr();
        this._processPass$8(input, image, 0, 1, 1, 2, width, C.JSNumber_methods._shrOtherPositive$1(height, 1));
      } else
        this._process$2(input, image);
      t1 = this.info;
      t1.width = origW;
      t1.height = origH;
      return image;
    },
    _processPass$8: function(input, image, xOffset, yOffset, xStep, yStep, passWidth, passHeight) {
      var channels, t1, pixelDepth, bpp, rowBytes, line, inData, pixel, t2, t3, t4, t5, blockWidth, dstY, srcY, ri, t6, t7, filterType, pos, t8, rowInput, dstX, srcX, c, i, j, t9;
      if (J.$eq(this.info.colorType, 4))
        channels = 2;
      else if (J.$eq(this.info.colorType, 2))
        channels = 3;
      else {
        t1 = J.$eq(this.info.colorType, 6) ? 4 : 1;
        channels = t1;
      }
      t1 = this.info.bits;
      if (typeof t1 !== "number")
        return H.iae(t1);
      pixelDepth = channels * t1;
      bpp = C.JSNumber_methods._shrOtherPositive$1(pixelDepth + 7, 3);
      rowBytes = C.JSNumber_methods._shrOtherPositive$1(pixelDepth * passWidth + 7, 3);
      line = P.List_List$filled(rowBytes, 0, J.JSInt);
      inData = [line, line];
      pixel = [0, 0, 0, 0];
      t1 = image.width;
      t2 = image.height;
      t3 = image.data;
      t4 = t3.length;
      t5 = xStep > 1;
      blockWidth = xStep - xOffset;
      dstY = yOffset;
      srcY = 0;
      ri = 0;
      while (srcY < passHeight) {
        t6 = input.buffer;
        t7 = input.offset;
        input.offset = J.$add$ns(t7, 1);
        filterType = J.$index$asx(t6, t7);
        pos = J.$add$ns(input.offset, 0);
        t6 = input.buffer;
        t7 = input.bigEndian;
        t8 = J.$add$ns(pos, rowBytes);
        input.offset = J.$add$ns(input.offset, J.$sub$n(t8, pos));
        t7 = new U.InputBuffer(t6, pos, t8, pos, t7).toUint8List$0();
        if (ri < 0 || ri >= 2)
          return H.ioore(inData, ri);
        inData[ri] = t7;
        ri = 1 - ri;
        this._unfilter$4(filterType, bpp, t7, inData[ri]);
        this._image$_bitBuffer = 0;
        this._image$_bitBufferLen = 0;
        t6 = t7.length;
        rowInput = new U.InputBuffer(t7, 0, t6, 0, true);
        P.min(dstY + xStep, this.info.height);
        for (t6 = blockWidth <= 1, dstX = xOffset, srcX = 0; srcX < passWidth; ++srcX, dstX += xStep) {
          this._readPixel$2(rowInput, pixel);
          c = this._getColor$1(pixel);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (dstX < t1) {
            if (typeof t2 !== "number")
              return H.iae(t2);
            t7 = dstY < t2;
          } else
            t7 = false;
          if (t7) {
            if (typeof t1 !== "number")
              return H.iae(t1);
            t7 = dstY * t1 + dstX;
            if (t7 >>> 0 !== t7 || t7 >= t4)
              return H.ioore(t3, t7);
            t3[t7] = c;
          }
          if (!t6 || t5) {
            P.min(dstX + blockWidth, this.info.width);
            for (i = 0; i < xStep; ++i)
              for (j = 0; j < blockWidth; ++j) {
                t7 = dstX + j;
                t8 = dstY + j;
                if (typeof t1 !== "number")
                  return H.iae(t1);
                if (t7 < t1) {
                  if (typeof t2 !== "number")
                    return H.iae(t2);
                  t9 = t8 < t2;
                } else
                  t9 = false;
                if (t9) {
                  if (typeof t1 !== "number")
                    return H.iae(t1);
                  t7 = t8 * t1 + t7;
                  if (t7 >>> 0 !== t7 || t7 >= t4)
                    return H.ioore(t3, t7);
                  t3[t7] = c;
                }
              }
          }
        }
        ++srcY;
        dstY += yStep;
        t6 = this._progressY;
        if (typeof t6 !== "number")
          return t6.$add();
        this._progressY = t6 + 1;
      }
    },
    _process$2: function(input, image) {
      var channels, t1, t2, pixelDepth, w, h, bpp, line, inData, pixel, t3, y, pi, ri, t4, t5, filterType, pos, t6, ri0, rowInput, x, pi0;
      if (J.$eq(this.info.colorType, 4))
        channels = 2;
      else if (J.$eq(this.info.colorType, 2))
        channels = 3;
      else {
        t1 = J.$eq(this.info.colorType, 6) ? 4 : 1;
        channels = t1;
      }
      t1 = this.info;
      t2 = t1.bits;
      if (typeof t2 !== "number")
        return H.iae(t2);
      pixelDepth = channels * t2;
      w = t1.width;
      h = t1.height;
      t1 = J.$add$ns(J.$mul$ns(w, pixelDepth), 7);
      if (typeof t1 !== "number")
        return t1.$shr();
      t1 = C.JSNumber_methods._shrOtherPositive$1(t1, 3);
      bpp = C.JSNumber_methods._shrOtherPositive$1(pixelDepth + 7, 3);
      line = P.List_List$filled(t1, 0, J.JSInt);
      inData = [line, line];
      pixel = [0, 0, 0, 0];
      if (typeof h !== "number")
        return H.iae(h);
      t2 = image.data;
      t3 = t2.length;
      y = 0;
      pi = 0;
      ri = 0;
      for (; y < h; ++y, ri = ri0) {
        t4 = input.buffer;
        t5 = input.offset;
        input.offset = J.$add$ns(t5, 1);
        filterType = J.$index$asx(t4, t5);
        pos = J.$add$ns(input.offset, 0);
        t4 = input.buffer;
        t5 = input.bigEndian;
        t6 = J.$add$ns(pos, t1);
        input.offset = J.$add$ns(input.offset, J.$sub$n(t6, pos));
        t5 = new U.InputBuffer(t4, pos, t6, pos, t5).toUint8List$0();
        if (ri < 0 || ri >= 2)
          return H.ioore(inData, ri);
        inData[ri] = t5;
        ri0 = 1 - ri;
        this._unfilter$4(filterType, bpp, t5, inData[ri0]);
        this._image$_bitBuffer = 0;
        this._image$_bitBufferLen = 0;
        t5 = inData[ri];
        t4 = J.get$length$asx(t5);
        rowInput = new U.InputBuffer(t5, 0, t4, 0, true);
        if (typeof w !== "number")
          return H.iae(w);
        x = 0;
        for (; x < w; ++x, pi = pi0) {
          this._readPixel$2(rowInput, pixel);
          pi0 = pi + 1;
          t4 = this._getColor$1(pixel);
          if (pi < 0 || pi >= t3)
            return H.ioore(t2, pi);
          t2[pi] = t4;
        }
      }
    },
    _unfilter$4: function(filterType, bpp, row, prevRow) {
      var t1, rowBytes, x, t2, a, b, t3, t4, c, p, pa, pb, pc, paeth;
      t1 = J.getInterceptor$asx(row);
      rowBytes = t1.get$length(row);
      switch (filterType) {
        case 0:
          break;
        case 1:
          if (typeof rowBytes !== "number")
            return H.iae(rowBytes);
          x = bpp;
          for (; x < rowBytes; ++x)
            t1.$indexSet(row, x, J.$and$n(J.$add$ns(t1.$index(row, x), t1.$index(row, x - bpp)), 255));
          break;
        case 2:
          if (typeof rowBytes !== "number")
            return H.iae(rowBytes);
          t2 = J.getInterceptor$asx(prevRow);
          x = 0;
          for (; x < rowBytes; ++x)
            t1.$indexSet(row, x, J.$and$n(J.$add$ns(t1.$index(row, x), t2.$index(prevRow, x)), 255));
          break;
        case 3:
          if (typeof rowBytes !== "number")
            return H.iae(rowBytes);
          t2 = J.getInterceptor$asx(prevRow);
          x = 0;
          for (; x < rowBytes; ++x) {
            a = x < bpp ? 0 : t1.$index(row, x - bpp);
            b = t2.$index(prevRow, x);
            t3 = t1.$index(row, x);
            t4 = J.$add$ns(a, b);
            if (typeof t4 !== "number")
              return t4.$shr();
            t1.$indexSet(row, x, J.$and$n(J.$add$ns(t3, C.JSNumber_methods._shrOtherPositive$1(t4, 1)), 255));
          }
          break;
        case 4:
          if (typeof rowBytes !== "number")
            return H.iae(rowBytes);
          t2 = J.getInterceptor$asx(prevRow);
          x = 0;
          for (; x < rowBytes; ++x) {
            t3 = x < bpp;
            a = t3 ? 0 : t1.$index(row, x - bpp);
            b = t2.$index(prevRow, x);
            c = t3 ? 0 : t2.$index(prevRow, x - bpp);
            p = J.$sub$n(J.$add$ns(a, b), c);
            t3 = J.getInterceptor$n(p);
            pa = J.abs$0$n(t3.$sub(p, a));
            pb = J.abs$0$n(t3.$sub(p, b));
            pc = J.abs$0$n(t3.$sub(p, c));
            if (pa <= pb && pa <= pc)
              paeth = a;
            else
              paeth = pb <= pc ? b : c;
            t1.$indexSet(row, x, J.$and$n(J.$add$ns(t1.$index(row, x), paeth), 255));
          }
          break;
        default:
          throw H.wrapException(U.ImageException$("Invalid filter value: " + H.S(filterType)));
      }
    },
    _image$_readBits$2: function(input, numBits) {
      var t1, t2, t3, octet, mask;
      t1 = J.getInterceptor(numBits);
      if (t1.$eq(numBits, 0))
        return 0;
      if (t1.$eq(numBits, 8)) {
        t1 = input.buffer;
        t2 = input.offset;
        input.offset = J.$add$ns(t2, 1);
        return J.$index$asx(t1, t2);
      }
      if (t1.$eq(numBits, 16))
        return input.readUint16$0();
      if (typeof numBits !== "number")
        return H.iae(numBits);
      t1 = input.end;
      for (; t2 = this._image$_bitBufferLen, t2 < numBits;) {
        if (J.$ge$n(input.offset, t1))
          throw H.wrapException(U.ImageException$("Invalid PNG data."));
        t2 = input.buffer;
        t3 = input.offset;
        input.offset = J.$add$ns(t3, 1);
        octet = J.$index$asx(t2, t3);
        t3 = this._image$_bitBufferLen;
        if (typeof octet !== "number")
          return octet.$shl();
        this._image$_bitBuffer = C.JSNumber_methods.$shl(octet, t3);
        this._image$_bitBufferLen = t3 + 8;
      }
      if (numBits === 1)
        mask = 1;
      else if (numBits === 2)
        mask = 3;
      else {
        if (numBits === 4)
          t1 = 15;
        else if (numBits === 8)
          t1 = 255;
        else
          t1 = numBits === 16 ? 65535 : 0;
        mask = t1;
      }
      t1 = t2 - numBits;
      t2 = C.JSInt_methods._shrReceiverPositive$1(this._image$_bitBuffer, t1);
      this._image$_bitBufferLen = t1;
      return t2 & mask;
    },
    _readPixel$2: function(input, pixel) {
      var t1, t2;
      t1 = this.info;
      t2 = t1.colorType;
      switch (t2) {
        case 0:
          pixel[0] = this._image$_readBits$2(input, t1.bits);
          return;
        case 2:
          pixel[0] = this._image$_readBits$2(input, t1.bits);
          pixel[1] = this._image$_readBits$2(input, this.info.bits);
          pixel[2] = this._image$_readBits$2(input, this.info.bits);
          return;
        case 3:
          pixel[0] = this._image$_readBits$2(input, t1.bits);
          return;
        case 4:
          pixel[0] = this._image$_readBits$2(input, t1.bits);
          pixel[1] = this._image$_readBits$2(input, this.info.bits);
          return;
        case 6:
          pixel[0] = this._image$_readBits$2(input, t1.bits);
          pixel[1] = this._image$_readBits$2(input, this.info.bits);
          pixel[2] = this._image$_readBits$2(input, this.info.bits);
          pixel[3] = this._image$_readBits$2(input, this.info.bits);
          return;
      }
      throw H.wrapException(U.ImageException$("Invalid color type: " + H.S(t2) + "."));
    },
    _getColor$1: function(raw) {
      var t1, t2, g, t3, t4, r, b, t5, t6, t7, p, a;
      t1 = this.info;
      t2 = t1.colorType;
      switch (t2) {
        case 0:
          switch (t1.bits) {
            case 1:
              g = J.$eq(raw[0], 0) ? 0 : 255;
              break;
            case 2:
              g = J.$mul$ns(raw[0], 85);
              break;
            case 4:
              t1 = raw[0];
              if (typeof t1 !== "number")
                return t1.$shl();
              g = t1 << 4 >>> 0;
              break;
            case 8:
              g = raw[0];
              break;
            case 16:
              t1 = raw[0];
              if (typeof t1 !== "number")
                return t1.$shr();
              g = C.JSNumber_methods._shrOtherPositive$1(t1, 8);
              break;
            default:
              g = null;
          }
          t1 = this.info;
          t2 = t1.colorLut;
          t2.length;
          if (g >>> 0 !== g || g >= 256)
            return H.ioore(t2, g);
          g = t2[g];
          t1 = t1.transparency;
          if (t1 != null) {
            t2 = t1.length;
            if (0 >= t2)
              return H.ioore(t1, 0);
            t3 = t1[0];
            if (1 >= t2)
              return H.ioore(t1, 1);
            t1 = t1[1];
            if (J.$eq(raw[0], ((t3 & 255) << 24 | t1 & 255) >>> 0)) {
              t1 = C.JSInt_methods.clamp$2(0, 0, 255);
              t2 = J.getInterceptor$n(g);
              t3 = t2.clamp$2(g, 0, 255);
              if (typeof t3 !== "number")
                return t3.$shl();
              t4 = t2.clamp$2(g, 0, 255);
              if (typeof t4 !== "number")
                return t4.$shl();
              t2 = t2.clamp$2(g, 0, 255);
              if (typeof t2 !== "number")
                return H.iae(t2);
              return (t1 << 24 | t3 << 16 | t4 << 8 | t2) >>> 0;
            }
          }
          t1 = C.JSInt_methods.clamp$2(255, 0, 255);
          t2 = J.getInterceptor$n(g);
          t3 = t2.clamp$2(g, 0, 255);
          if (typeof t3 !== "number")
            return t3.$shl();
          t4 = t2.clamp$2(g, 0, 255);
          if (typeof t4 !== "number")
            return t4.$shl();
          t2 = t2.clamp$2(g, 0, 255);
          if (typeof t2 !== "number")
            return H.iae(t2);
          return (t1 << 24 | t3 << 16 | t4 << 8 | t2) >>> 0;
        case 2:
          switch (t1.bits) {
            case 1:
              r = J.$eq(raw[0], 0) ? 0 : 255;
              g = J.$eq(raw[1], 0) ? 0 : 255;
              b = J.$eq(raw[2], 0) ? 0 : 255;
              break;
            case 2:
              r = J.$mul$ns(raw[0], 85);
              g = J.$mul$ns(raw[1], 85);
              b = J.$mul$ns(raw[2], 85);
              break;
            case 4:
              t1 = raw[0];
              if (typeof t1 !== "number")
                return t1.$shl();
              r = t1 << 4 >>> 0;
              t1 = raw[1];
              if (typeof t1 !== "number")
                return t1.$shl();
              g = t1 << 4 >>> 0;
              t1 = raw[2];
              if (typeof t1 !== "number")
                return t1.$shl();
              b = t1 << 4 >>> 0;
              break;
            case 8:
              r = raw[0];
              g = raw[1];
              b = raw[2];
              break;
            case 16:
              t1 = raw[0];
              if (typeof t1 !== "number")
                return t1.$shr();
              r = C.JSNumber_methods._shrOtherPositive$1(t1, 8);
              t1 = raw[1];
              if (typeof t1 !== "number")
                return t1.$shr();
              g = C.JSNumber_methods._shrOtherPositive$1(t1, 8);
              t1 = raw[2];
              if (typeof t1 !== "number")
                return t1.$shr();
              b = C.JSNumber_methods._shrOtherPositive$1(t1, 8);
              break;
            default:
              r = null;
              g = null;
              b = null;
          }
          t1 = this.info;
          t2 = t1.colorLut;
          t2.length;
          if (r >>> 0 !== r || r >= 256)
            return H.ioore(t2, r);
          r = t2[r];
          if (g >>> 0 !== g || g >= 256)
            return H.ioore(t2, g);
          g = t2[g];
          if (b >>> 0 !== b || b >= 256)
            return H.ioore(t2, b);
          b = t2[b];
          t1 = t1.transparency;
          if (t1 != null) {
            t2 = t1.length;
            if (0 >= t2)
              return H.ioore(t1, 0);
            t3 = t1[0];
            if (1 >= t2)
              return H.ioore(t1, 1);
            t4 = t1[1];
            if (2 >= t2)
              return H.ioore(t1, 2);
            t5 = t1[2];
            if (3 >= t2)
              return H.ioore(t1, 3);
            t6 = t1[3];
            if (4 >= t2)
              return H.ioore(t1, 4);
            t7 = t1[4];
            if (5 >= t2)
              return H.ioore(t1, 5);
            t1 = t1[5];
            if (J.$eq(raw[0], ((t3 & 255) << 8 | t4 & 255) >>> 0) && J.$eq(raw[1], ((t5 & 255) << 8 | t6 & 255) >>> 0) && J.$eq(raw[2], ((t7 & 255) << 8 | t1 & 255) >>> 0)) {
              t1 = C.JSInt_methods.clamp$2(0, 0, 255);
              t2 = J.clamp$2$n(b, 0, 255);
              if (typeof t2 !== "number")
                return t2.$shl();
              t3 = J.clamp$2$n(g, 0, 255);
              if (typeof t3 !== "number")
                return t3.$shl();
              t4 = J.clamp$2$n(r, 0, 255);
              if (typeof t4 !== "number")
                return H.iae(t4);
              return (t1 << 24 | t2 << 16 | t3 << 8 | t4) >>> 0;
            }
          }
          t1 = C.JSInt_methods.clamp$2(255, 0, 255);
          t2 = J.clamp$2$n(b, 0, 255);
          if (typeof t2 !== "number")
            return t2.$shl();
          t3 = J.clamp$2$n(g, 0, 255);
          if (typeof t3 !== "number")
            return t3.$shl();
          t4 = J.clamp$2$n(r, 0, 255);
          if (typeof t4 !== "number")
            return H.iae(t4);
          return (t1 << 24 | t2 << 16 | t3 << 8 | t4) >>> 0;
        case 3:
          p = J.$mul$ns(raw[0], 3);
          t1 = this.info.transparency;
          if (t1 != null && J.$lt$n(raw[0], t1.length)) {
            t1 = this.info.transparency;
            t2 = raw[0];
            if (t2 >>> 0 !== t2 || t2 >= t1.length)
              return H.ioore(t1, t2);
            a = t1[t2];
          } else
            a = 255;
          if (J.$ge$n(p, this.info.palette.length))
            return (C.JSInt_methods.clamp$2(a, 0, 255) << 24 | C.JSInt_methods.clamp$2(255, 0, 255) << 16 | C.JSInt_methods.clamp$2(255, 0, 255) << 8 | C.JSInt_methods.clamp$2(255, 0, 255)) >>> 0;
          t1 = this.info;
          t2 = t1.colorLut;
          t1 = t1.palette;
          t3 = t1.length;
          if (p >>> 0 !== p || p >= t3)
            return H.ioore(t1, p);
          t4 = t1[p];
          t2.length;
          if (t4 >= 256)
            return H.ioore(t2, t4);
          r = t2[t4];
          t4 = p + 1;
          if (t4 >= t3)
            return H.ioore(t1, t4);
          t4 = t1[t4];
          if (t4 >= 256)
            return H.ioore(t2, t4);
          g = t2[t4];
          t4 = p + 2;
          if (t4 >= t3)
            return H.ioore(t1, t4);
          t4 = t1[t4];
          if (t4 >= 256)
            return H.ioore(t2, t4);
          b = t2[t4];
          t4 = C.JSInt_methods.clamp$2(a, 0, 255);
          t2 = J.clamp$2$n(b, 0, 255);
          if (typeof t2 !== "number")
            return t2.$shl();
          t1 = J.clamp$2$n(g, 0, 255);
          if (typeof t1 !== "number")
            return t1.$shl();
          t3 = J.clamp$2$n(r, 0, 255);
          if (typeof t3 !== "number")
            return H.iae(t3);
          return (t4 << 24 | t2 << 16 | t1 << 8 | t3) >>> 0;
        case 4:
          switch (t1.bits) {
            case 1:
              g = J.$eq(raw[0], 0) ? 0 : 255;
              a = J.$eq(raw[1], 0) ? 0 : 255;
              break;
            case 2:
              g = J.$mul$ns(raw[0], 85);
              a = J.$mul$ns(raw[1], 85);
              break;
            case 4:
              t1 = raw[0];
              if (typeof t1 !== "number")
                return t1.$shl();
              g = t1 << 4 >>> 0;
              t1 = raw[1];
              if (typeof t1 !== "number")
                return t1.$shl();
              a = t1 << 4 >>> 0;
              break;
            case 8:
              g = raw[0];
              a = raw[1];
              break;
            case 16:
              t1 = raw[0];
              if (typeof t1 !== "number")
                return t1.$shr();
              g = C.JSNumber_methods._shrOtherPositive$1(t1, 8);
              t1 = raw[1];
              if (typeof t1 !== "number")
                return t1.$shr();
              a = C.JSNumber_methods._shrOtherPositive$1(t1, 8);
              break;
            default:
              g = null;
              a = null;
          }
          t1 = this.info.colorLut;
          t1.length;
          if (g >>> 0 !== g || g >= 256)
            return H.ioore(t1, g);
          g = t1[g];
          if (a >>> 0 !== a || a >= 256)
            return H.ioore(t1, a);
          t1 = J.clamp$2$n(t1[a], 0, 255);
          if (typeof t1 !== "number")
            return t1.$shl();
          t2 = J.getInterceptor$n(g);
          t3 = t2.clamp$2(g, 0, 255);
          if (typeof t3 !== "number")
            return t3.$shl();
          t4 = t2.clamp$2(g, 0, 255);
          if (typeof t4 !== "number")
            return t4.$shl();
          t2 = t2.clamp$2(g, 0, 255);
          if (typeof t2 !== "number")
            return H.iae(t2);
          return (t1 << 24 | t3 << 16 | t4 << 8 | t2) >>> 0;
        case 6:
          switch (t1.bits) {
            case 1:
              r = J.$eq(raw[0], 0) ? 0 : 255;
              g = J.$eq(raw[1], 0) ? 0 : 255;
              b = J.$eq(raw[2], 0) ? 0 : 255;
              a = J.$eq(raw[3], 0) ? 0 : 255;
              break;
            case 2:
              r = J.$mul$ns(raw[0], 85);
              g = J.$mul$ns(raw[1], 85);
              b = J.$mul$ns(raw[2], 85);
              a = J.$mul$ns(raw[3], 85);
              break;
            case 4:
              t1 = raw[0];
              if (typeof t1 !== "number")
                return t1.$shl();
              r = t1 << 4 >>> 0;
              t1 = raw[1];
              if (typeof t1 !== "number")
                return t1.$shl();
              g = t1 << 4 >>> 0;
              t1 = raw[2];
              if (typeof t1 !== "number")
                return t1.$shl();
              b = t1 << 4 >>> 0;
              t1 = raw[3];
              if (typeof t1 !== "number")
                return t1.$shl();
              a = t1 << 4 >>> 0;
              break;
            case 8:
              r = raw[0];
              g = raw[1];
              b = raw[2];
              a = raw[3];
              break;
            case 16:
              t1 = raw[0];
              if (typeof t1 !== "number")
                return t1.$shr();
              r = C.JSNumber_methods._shrOtherPositive$1(t1, 8);
              t1 = raw[1];
              if (typeof t1 !== "number")
                return t1.$shr();
              g = C.JSNumber_methods._shrOtherPositive$1(t1, 8);
              t1 = raw[2];
              if (typeof t1 !== "number")
                return t1.$shr();
              b = C.JSNumber_methods._shrOtherPositive$1(t1, 8);
              t1 = raw[3];
              if (typeof t1 !== "number")
                return t1.$shr();
              a = C.JSNumber_methods._shrOtherPositive$1(t1, 8);
              break;
            default:
              r = null;
              g = null;
              b = null;
              a = null;
          }
          t1 = this.info.colorLut;
          t1.length;
          if (r >>> 0 !== r || r >= 256)
            return H.ioore(t1, r);
          r = t1[r];
          if (g >>> 0 !== g || g >= 256)
            return H.ioore(t1, g);
          g = t1[g];
          if (b >>> 0 !== b || b >= 256)
            return H.ioore(t1, b);
          b = t1[b];
          if (a >>> 0 !== a || a >= 256)
            return H.ioore(t1, a);
          t1 = J.clamp$2$n(t1[a], 0, 255);
          if (typeof t1 !== "number")
            return t1.$shl();
          t2 = J.clamp$2$n(b, 0, 255);
          if (typeof t2 !== "number")
            return t2.$shl();
          t3 = J.clamp$2$n(g, 0, 255);
          if (typeof t3 !== "number")
            return t3.$shl();
          t4 = J.clamp$2$n(r, 0, 255);
          if (typeof t4 !== "number")
            return H.iae(t4);
          return (t1 << 24 | t2 << 16 | t3 << 8 | t4) >>> 0;
      }
      throw H.wrapException(U.ImageException$("Invalid color type: " + H.S(t2) + "."));
    },
    static: {"^": "PngDecoder_GRAYSCALE,PngDecoder_RGB,PngDecoder_INDEXED,PngDecoder_GRAYSCALE_ALPHA,PngDecoder_RGBA,PngDecoder_FILTER_NONE,PngDecoder_FILTER_SUB,PngDecoder_FILTER_UP,PngDecoder_FILTER_AVERAGE,PngDecoder_FILTER_PAETH"}
  },
  PsdLayerAdditionalData: {
    "^": "PsdLayerData;data>,tag"
  },
  PsdLayerSectionDivider: {
    "^": "PsdLayerData;type>,key,subType,tag",
    PsdLayerSectionDivider$2: function(tag, data) {
      var len, t1;
      len = J.$sub$n(data.end, data.offset);
      this.type = data.readUint32$0();
      t1 = J.getInterceptor$n(len);
      if (t1.$ge(len, 12)) {
        if (data.readString$1(4) !== "8BIM")
          throw H.wrapException(U.ImageException$("Invalid key in layer additional data"));
        this.key = data.readString$1(4);
      }
      if (t1.$ge(len, 16))
        this.subType = data.readUint32$0();
    },
    static: {"^": "PsdLayerSectionDivider_TAG,PsdLayerSectionDivider_NORMAL,PsdLayerSectionDivider_OPEN_FOLDER,PsdLayerSectionDivider_CLOSED_FOLDER,PsdLayerSectionDivider_SECTION_DIVIDER,PsdLayerSectionDivider_SUBTYPE_NORMAL,PsdLayerSectionDivider_SUBTYPE_SCENE_GROUP"}
  },
  PsdBlendingRanges: {
    "^": "Object;grayBlackSrc,grayWhiteSrc,grayBlackDst,grayWhiteDst,blackSrc,whiteSrc,blackDst,whiteDst",
    PsdBlendingRanges$1: function(input) {
      var numChannels, t1, i, t2;
      this.grayBlackSrc = input.readUint16$0();
      this.grayWhiteSrc = input.readUint16$0();
      this.grayBlackDst = input.readUint16$0();
      this.grayWhiteDst = input.readUint16$0();
      numChannels = J.$tdiv$n(J.$sub$n(input.end, input.offset), 8);
      if (J.$gt$n(numChannels, 0)) {
        t1 = typeof numChannels !== "number" || Math.floor(numChannels) !== numChannels;
        if (t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(numChannels)));
        this.blackSrc = new Uint16Array(numChannels);
        if (t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(numChannels)));
        this.whiteSrc = new Uint16Array(numChannels);
        if (t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(numChannels)));
        this.blackDst = new Uint16Array(numChannels);
        if (t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(numChannels)));
        this.whiteDst = new Uint16Array(numChannels);
        if (typeof numChannels !== "number")
          return H.iae(numChannels);
        i = 0;
        for (; i < numChannels; ++i) {
          t1 = this.blackSrc;
          t2 = input.readUint16$0();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
          t2 = this.whiteSrc;
          t1 = input.readUint16$0();
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t1;
          t1 = this.blackDst;
          t2 = input.readUint16$0();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
          t2 = this.whiteDst;
          t1 = input.readUint16$0();
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t1;
        }
      }
    },
    static: {PsdBlendingRanges$: function(input) {
        var t1 = new U.PsdBlendingRanges(null, null, null, null, null, null, null, null);
        t1.PsdBlendingRanges$1(input);
        return t1;
      }}
  },
  PsdChannel: {
    "^": "Object;id>,dataLength,data>",
    readPlane$7: function(input, width, height, bitDepth, compression, lineLengths, planeNum) {
      if (compression == null)
        compression = input.readUint16$0();
      switch (compression) {
        case 0:
          this._readPlaneUncompressed$4(input, width, height, bitDepth);
          break;
        case 1:
          this._readPlaneRleCompressed$6(input, width, height, bitDepth, lineLengths == null ? this._readLineLengths$2(input, height) : lineLengths, planeNum);
          break;
        default:
          throw H.wrapException(U.ImageException$("Unsupported compression: " + H.S(compression)));
      }
    },
    readPlane$4: function(input, width, height, bitDepth) {
      return this.readPlane$7(input, width, height, bitDepth, null, null, 0);
    },
    _readLineLengths$2: function(input, height) {
      var lineLengths, t1, i, t2;
      if (typeof height !== "number" || Math.floor(height) !== height)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(height)));
      lineLengths = new Uint16Array(height);
      if (typeof height !== "number")
        return H.iae(height);
      t1 = lineLengths.length;
      i = 0;
      for (; i < height; ++i) {
        t2 = input.readUint16$0();
        if (i >= t1)
          return H.ioore(lineLengths, i);
        lineLengths[i] = t2;
      }
      return lineLengths;
    },
    _readPlaneUncompressed$4: function(input, width, height, bitDepth) {
      var len, t1;
      len = J.$mul$ns(width, height);
      if (bitDepth === 16)
        len = J.$mul$ns(len, 2);
      if (J.$gt$n(len, J.$sub$n(input.end, input.offset))) {
        if (typeof len !== "number" || Math.floor(len) !== len)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(len)));
        t1 = new Uint8Array(len);
        this.data = t1;
        C.NativeUint8List_methods.fillRange$3(t1, 0, len, 255);
        return;
      }
      this.data = input.readBytes$1(len).toUint8List$0();
    },
    _readPlaneRleCompressed$6: function(input, width, height, bitDepth, lineLengths, planeNum) {
      var len, t1, lineIndex, t2, pos, i, lineIndex0, pos0, t3, t4;
      len = J.$mul$ns(width, height);
      if (bitDepth === 16)
        len = J.$mul$ns(len, 2);
      if (typeof len !== "number" || Math.floor(len) !== len)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(len)));
      t1 = new Uint8Array(len);
      this.data = t1;
      if (typeof height !== "number")
        return H.iae(height);
      lineIndex = planeNum * height;
      t2 = lineLengths.length;
      if (lineIndex >= t2) {
        C.NativeUint8List_methods.fillRange$3(t1, 0, t1.length, 255);
        return;
      }
      for (pos = 0, i = 0; i < height; ++i, lineIndex = lineIndex0) {
        lineIndex0 = lineIndex + 1;
        if (lineIndex >>> 0 !== lineIndex || lineIndex >= t2)
          return H.ioore(lineLengths, lineIndex);
        len = lineLengths[lineIndex];
        input.toString;
        pos0 = J.$add$ns(input.offset, 0);
        t1 = input.buffer;
        t3 = input.bigEndian;
        t4 = J.$add$ns(pos0, len);
        input.offset = J.$add$ns(input.offset, J.$sub$n(t4, pos0));
        this._decodeRLE$3(new U.InputBuffer(t1, pos0, t4, pos0, t3), this.data, pos);
        if (typeof width !== "number")
          return H.iae(width);
        pos += width;
      }
    },
    _decodeRLE$3: function(src, dst, dstIndex) {
      var t1, t2, t3, n, b, i, dstIndex0;
      for (t1 = src.end; !J.$ge$n(src.offset, t1);) {
        t2 = src.buffer;
        t3 = src.offset;
        src.offset = J.$add$ns(t3, 1);
        t3 = J.$index$asx(t2, t3);
        $.get$__uint8()[0] = t3;
        t3 = $.get$__uint8ToInt8();
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        n = t3[0];
        if (n < 0) {
          n = 1 - n;
          t2 = src.buffer;
          t3 = src.offset;
          src.offset = J.$add$ns(t3, 1);
          b = J.$index$asx(t2, t3);
          for (i = 0; i < n; ++i, dstIndex = dstIndex0) {
            dstIndex0 = dstIndex + 1;
            if (dstIndex >>> 0 !== dstIndex || dstIndex >= dst.length)
              return H.ioore(dst, dstIndex);
            dst[dstIndex] = b;
          }
        } else {
          ++n;
          for (i = 0; i < n; ++i, dstIndex = dstIndex0) {
            dstIndex0 = dstIndex + 1;
            t2 = src.buffer;
            t3 = src.offset;
            src.offset = J.$add$ns(t3, 1);
            t3 = J.$index$asx(t2, t3);
            if (dstIndex >>> 0 !== dstIndex || dstIndex >= dst.length)
              return H.ioore(dst, dstIndex);
            dst[dstIndex] = t3;
          }
        }
      }
    },
    static: {"^": "PsdChannel_RED,PsdChannel_GREEN,PsdChannel_BLUE,PsdChannel_BLACK,PsdChannel_ALPHA,PsdChannel_MASK,PsdChannel_REAL_MASK,PsdChannel_COMPRESS_NONE,PsdChannel_COMPRESS_RLE,PsdChannel_COMPRESS_ZIP,PsdChannel_COMPRESS_ZIP_PREDICTOR"}
  },
  PsdImage: {
    "^": "DecodeInfo;signature,version,channels,depth,colorMode,layers,mergeImageChannels,mergedImage,imageResources,hasAlpha,_input,_colorData,_imageResourceData,_layerAndMaskData,_imageData,width,height,backgroundColor",
    decode$0: function() {
      if (this.signature !== 943870035 || this._input == null)
        return false;
      this._readImageResources$0();
      this._readLayerAndMaskData$0();
      this._readMergeImageData$0();
      this._input = null;
      this._colorData = null;
      this._imageResourceData = null;
      this._layerAndMaskData = null;
      this._imageData = null;
      return true;
    },
    decodeImage$0: function() {
      if (!this.decode$0())
        return;
      return this.renderImage$0();
    },
    renderImage$0: function() {
      var t1, pixels, li, t2, layer, opacity, blendMode, srcP, sy, y, si, t3, t4, sx, di, x, si0, br, bg, bb, ba, ar, ag, t5, ab, aa, da, b, g, r, di0, di1;
      t1 = this.mergedImage;
      if (t1 != null)
        return t1;
      t1 = U.Image$(this.width, this.height, 4);
      this.mergedImage = t1;
      t1 = t1.data;
      C.NativeUint32List_methods.fillRange$3(t1, 0, t1.length, this.backgroundColor);
      pixels = H.NativeUint8List_NativeUint8List$view(this.mergedImage.data.buffer, 0, null);
      for (t1 = pixels.length, li = 0; t2 = this.layers, li < t2.length; ++li) {
        layer = t2[li];
        if (!layer.isVisible$0())
          continue;
        opacity = J.$div$n(layer.opacity, 255);
        blendMode = layer.blendMode;
        if (this.depth === 16)
          ;
        t2 = layer.layerImage.data.buffer;
        H._checkViewArguments(t2, 0, null);
        srcP = new Uint8Array(t2, 0);
        for (sy = layer.top, t2 = srcP.length, y = 0, si = 0; y < layer.height; ++y, ++sy) {
          t3 = layer.top;
          t4 = this.width;
          if (typeof t4 !== "number")
            return H.iae(t4);
          sx = layer.left;
          di = (t3 + y) * t4 * 4 + sx * 4;
          for (t3 = sy >= 0, x = 0; x < layer.width; ++x, ++sx) {
            si0 = si + 1;
            if (si < 0 || si >= t2)
              return H.ioore(srcP, si);
            br = srcP[si];
            si = si0 + 1;
            if (si0 < 0 || si0 >= t2)
              return H.ioore(srcP, si0);
            bg = srcP[si0];
            si0 = si + 1;
            if (si < 0 || si >= t2)
              return H.ioore(srcP, si);
            bb = srcP[si];
            si = si0 + 1;
            if (si0 < 0 || si0 >= t2)
              return H.ioore(srcP, si0);
            ba = srcP[si0];
            if (sx >= 0) {
              t4 = this.width;
              if (typeof t4 !== "number")
                return H.iae(t4);
              if (sx < t4)
                if (t3) {
                  t4 = this.height;
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  t4 = sy < t4;
                } else
                  t4 = false;
              else
                t4 = false;
            } else
              t4 = false;
            if (t4) {
              if (di >>> 0 !== di || di >= t1)
                return H.ioore(pixels, di);
              ar = pixels[di];
              t4 = di + 1;
              if (t4 >= t1)
                return H.ioore(pixels, t4);
              ag = pixels[t4];
              t5 = di + 2;
              if (t5 >= t1)
                return H.ioore(pixels, t5);
              ab = pixels[t5];
              t5 = di + 3;
              if (t5 >= t1)
                return H.ioore(pixels, t5);
              aa = pixels[t5];
              if (typeof opacity !== "number")
                return H.iae(opacity);
              da = ba / 255 * opacity;
              switch (blendMode) {
                case 1885434739:
                  b = ab;
                  g = ag;
                  r = ar;
                  break;
                case 1852797549:
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1684632435:
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1684107883:
                  r = P.min(ar, br);
                  g = P.min(ag, bg);
                  b = P.min(ab, bb);
                  break;
                case 1836411936:
                  r = ar * br >>> 8;
                  g = ag * bg >>> 8;
                  b = ab * bb >>> 8;
                  break;
                case 1768188278:
                  r = U.PsdImage__blendColorBurn(ar, br);
                  g = U.PsdImage__blendColorBurn(ag, bg);
                  b = U.PsdImage__blendColorBurn(ab, bb);
                  break;
                case 1818391150:
                  r = C.JSInt_methods.clamp$2(ar + br - 255, 0, 255);
                  g = C.JSInt_methods.clamp$2(ag + bg - 255, 0, 255);
                  b = C.JSInt_methods.clamp$2(ab + bb - 255, 0, 255);
                  break;
                case 1684751212:
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1818850405:
                  r = P.max(ar, br);
                  g = P.max(ag, bg);
                  b = P.max(ab, bb);
                  break;
                case 1935897198:
                  r = C.JSInt_methods.clamp$2(255 - (255 - br) * (255 - ar), 0, 255);
                  g = C.JSInt_methods.clamp$2(255 - (255 - bg) * (255 - ag), 0, 255);
                  b = C.JSInt_methods.clamp$2(255 - (255 - bb) * (255 - ab), 0, 255);
                  break;
                case 1684633120:
                  r = U.PsdImage__blendColorDodge(ar, br);
                  g = U.PsdImage__blendColorDodge(ag, bg);
                  b = U.PsdImage__blendColorDodge(ab, bb);
                  break;
                case 1818518631:
                  r = br + ar > 255 ? 255 : ar + br;
                  g = bg + ag > 255 ? 255 : ag + bg;
                  b = bb + ab > 255 ? 255 : ab + bb;
                  break;
                case 1818706796:
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1870030194:
                  r = U.PsdImage__blendOverlay(ar, br, aa, ba);
                  g = U.PsdImage__blendOverlay(ag, bg, aa, ba);
                  b = U.PsdImage__blendOverlay(ab, bb, aa, ba);
                  break;
                case 1934387572:
                  r = U.PsdImage__blendSoftLight(ar, br);
                  g = U.PsdImage__blendSoftLight(ag, bg);
                  b = U.PsdImage__blendSoftLight(ab, bb);
                  break;
                case 1749838196:
                  r = U.PsdImage__blendHardLight(ar, br);
                  g = U.PsdImage__blendHardLight(ag, bg);
                  b = U.PsdImage__blendHardLight(ab, bb);
                  break;
                case 1984719220:
                  r = U.PsdImage__blendVividLight(ar, br);
                  g = U.PsdImage__blendVividLight(ag, bg);
                  b = U.PsdImage__blendVividLight(ab, bb);
                  break;
                case 1816947060:
                  r = U.PsdImage__blendLinearLight(ar, br);
                  g = U.PsdImage__blendLinearLight(ag, bg);
                  b = U.PsdImage__blendLinearLight(ab, bb);
                  break;
                case 1884055924:
                  r = br < 128 ? P.min(ar, 2 * br) : P.max(ar, 2 * (br - 128));
                  g = bg < 128 ? P.min(ag, 2 * bg) : P.max(ag, 2 * (bg - 128));
                  b = bb < 128 ? P.min(ab, 2 * bb) : P.max(ab, 2 * (bb - 128));
                  break;
                case 1749903736:
                  r = br < 255 - ar ? 0 : 255;
                  g = bg < 255 - ag ? 0 : 255;
                  b = bb < 255 - ab ? 0 : 255;
                  break;
                case 1684629094:
                  r = Math.abs(br - ar);
                  g = Math.abs(bg - ag);
                  b = Math.abs(bb - ab);
                  break;
                case 1936553316:
                  r = C.JSNumber_methods.toInt$0(C.JSInt_methods.roundToDouble$0(br + ar - 2 * br * ar / 255));
                  g = C.JSNumber_methods.toInt$0(C.JSInt_methods.roundToDouble$0(bg + ag - 2 * bg * ag / 255));
                  b = C.JSNumber_methods.toInt$0(C.JSInt_methods.roundToDouble$0(bb + ab - 2 * bb * ab / 255));
                  break;
                case 1718842722:
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1717856630:
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1752524064:
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1935766560:
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1668246642:
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1819634976:
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                default:
                  b = bb;
                  g = bg;
                  r = br;
              }
              t5 = 1 - da;
              r = C.JSNumber_methods.toInt$0(ar * t5 + r * da);
              g = C.JSNumber_methods.toInt$0(ag * t5 + g * da);
              b = C.JSNumber_methods.toInt$0(ab * t5 + b * da);
              pixels[di] = r;
              di0 = t4 + 1;
              pixels[t4] = g;
              di1 = di0 + 1;
              if (di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = b;
              if (di1 >= t1)
                return H.ioore(pixels, di1);
              pixels[di1] = aa;
              di += 4;
            }
          }
        }
      }
      return this.mergedImage;
    },
    _readHeader$0: function() {
      var t1, padding, i;
      this.signature = this._input.readUint32$0();
      t1 = this._input.readUint16$0();
      this.version = t1;
      if (t1 !== 1) {
        this.signature = 0;
        return;
      }
      padding = this._input.readBytes$1(6);
      for (i = 0; i < 6; ++i)
        if (!J.$eq(J.$index$asx(padding.buffer, J.$add$ns(padding.offset, i)), 0)) {
          this.signature = 0;
          return;
        }
      this.channels = this._input.readUint16$0();
      this.height = this._input.readUint32$0();
      this.width = this._input.readUint32$0();
      this.depth = this._input.readUint16$0();
      this.colorMode = this._input.readUint16$0();
    },
    _readImageResources$0: function() {
      var t1, t2, blockSignature, blockId, t3, t4, len, blockName, pos, t5;
      t1 = this._imageResourceData;
      t1.offset = t1.start;
      for (t1 = this.imageResources; t2 = this._imageResourceData, !J.$ge$n(t2.offset, t2.end);) {
        blockSignature = this._imageResourceData.readUint32$0();
        blockId = this._imageResourceData.readUint16$0();
        t2 = this._imageResourceData;
        t3 = t2.buffer;
        t4 = t2.offset;
        t2.offset = J.$add$ns(t4, 1);
        len = J.$index$asx(t3, t4);
        blockName = this._imageResourceData.readString$1(len);
        if (J.$and$n(len, 1) === 0) {
          t2 = this._imageResourceData;
          t2.offset = J.$add$ns(t2.offset, 1);
        }
        len = this._imageResourceData.readUint32$0();
        t2 = this._imageResourceData;
        t2.toString;
        pos = J.$add$ns(t2.offset, 0);
        t3 = t2.buffer;
        t4 = t2.bigEndian;
        t5 = J.$add$ns(pos, len);
        t2.offset = J.$add$ns(t2.offset, J.$sub$n(t5, pos));
        if ((len & 1) === 1) {
          t2 = this._imageResourceData;
          t2.offset = J.$add$ns(t2.offset, 1);
        }
        if (blockSignature === 943868237)
          t1.$indexSet(0, blockId, new U.PsdImageResource(blockId, blockName, new U.InputBuffer(t3, pos, t5, pos, t4)));
      }
    },
    _readLayerAndMaskData$0: function() {
      var t1, len, layerData, count, i, layer, maskData, t2;
      t1 = this._layerAndMaskData;
      t1.offset = t1.start;
      len = t1.readUint32$0();
      if ((len & 1) !== 0)
        ++len;
      layerData = this._layerAndMaskData.readBytes$1(len);
      this.layers = [];
      if (len > 0) {
        t1 = layerData.readUint16$0();
        $.get$__uint16()[0] = t1;
        t1 = $.get$__uint16ToInt16();
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        count = t1[0];
        if (count < 0) {
          this.hasAlpha = true;
          count = -count;
        }
        for (i = 0; i < count; ++i) {
          layer = U.PsdLayer$(layerData);
          this.layers.push(layer);
        }
      }
      for (i = 0; t1 = this.layers, i < t1.length; ++i)
        t1[i].readImageData$2(layerData, this);
      len = this._layerAndMaskData.readUint32$0();
      maskData = this._layerAndMaskData.readBytes$1(len);
      if (len > 0) {
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        t1 = maskData.buffer;
        t2 = maskData.offset;
        maskData.offset = J.$add$ns(t2, 1);
        J.$index$asx(t1, t2);
      }
    },
    _readMergeImageData$0: function() {
      var t1, compression, numLines, lineLengths, i, t2, t3;
      t1 = this._imageData;
      t1.offset = t1.start;
      compression = t1.readUint16$0();
      if (compression === 1) {
        numLines = J.$mul$ns(this.height, this.channels);
        if (typeof numLines !== "number" || Math.floor(numLines) !== numLines)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(numLines)));
        lineLengths = new Uint16Array(numLines);
        if (typeof numLines !== "number")
          return H.iae(numLines);
        t1 = lineLengths.length;
        i = 0;
        for (; i < numLines; ++i) {
          t2 = this._imageData.readUint16$0();
          if (i >= t1)
            return H.ioore(lineLengths, i);
          lineLengths[i] = t2;
        }
      } else
        lineLengths = null;
      this.mergeImageChannels = [];
      i = 0;
      while (true) {
        t1 = this.channels;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.mergeImageChannels;
        if (!(i < t1))
          break;
        t1 = this._imageData;
        t3 = i === 3 ? -1 : i;
        t3 = new U.PsdChannel(t3, null, null);
        t3.readPlane$7(t1, this.width, this.height, this.depth, compression, lineLengths, i);
        t2.push(t3);
        ++i;
      }
      this.mergedImage = U.PsdImage_createImageFromChannels(this.colorMode, this.depth, this.width, this.height, t2);
    },
    PsdImage$1: function(bytes) {
      var len, t1;
      this._input = U.InputBuffer$(bytes, true, null, 0);
      this._readHeader$0();
      if (this.signature !== 943870035)
        return;
      len = this._input.readUint32$0();
      this._colorData = this._input.readBytes$1(len);
      len = this._input.readUint32$0();
      this._imageResourceData = this._input.readBytes$1(len);
      len = this._input.readUint32$0();
      this._layerAndMaskData = this._input.readBytes$1(len);
      t1 = this._input;
      this._imageData = t1.readBytes$1(J.$sub$n(t1.end, t1.offset));
    },
    static: {"^": "PsdImage_SIGNATURE,PsdImage_COLORMODE_BITMAP,PsdImage_COLORMODE_GRAYSCALE,PsdImage_COLORMODE_INDEXED,PsdImage_COLORMODE_RGB,PsdImage_COLORMODE_CMYK,PsdImage_COLORMODE_MULTICHANNEL,PsdImage_COLORMODE_DUOTONE,PsdImage_COLORMODE_LAB,PsdImage_RESOURCE_BLOCK_SIGNATURE", PsdImage$: function(bytes) {
        var t1 = new U.PsdImage(null, null, null, null, null, null, null, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null), false, null, null, null, null, null, 0, 0, 4294967295);
        t1.PsdImage$1(bytes);
        return t1;
      }, PsdImage__blendOverlay: function(a, b, aAlpha, bAlpha) {
        var x, y, aa, ba, t1, t2;
        x = a / 255;
        y = b / 255;
        aa = aAlpha / 255;
        ba = bAlpha / 255;
        t1 = 1 - aa;
        t2 = 1 - ba;
        return C.JSInt_methods.clamp$2(C.JSInt_methods.toInt$0((2 * x < aa ? 2 * y * x + y * t1 + x * t2 : ba * aa - 2 * (aa - x) * (ba - y) + y * t1 + x * t2) * 255), 0, 255);
      }, PsdImage__blendColorBurn: function(a, b) {
        if (b === 0)
          return 0;
        return C.JSInt_methods.clamp$2(C.JSInt_methods.toInt$0(255 * (1 - (1 - a / 255) / (b / 255))), 0, 255);
      }, PsdImage__blendColorDodge: function(a, b) {
        if (b === 255)
          return 255;
        return C.JSInt_methods.clamp$2(C.JSInt_methods.toInt$0(a / 255 / (1 - b / 255) * 255), 0, 255);
      }, PsdImage__blendSoftLight: function(a, b) {
        var aa, bb, t1;
        aa = a / 255;
        bb = b / 255;
        t1 = 1 - bb;
        return C.JSNumber_methods.toInt$0(C.JSInt_methods.roundToDouble$0(255 * (t1 * bb * aa + bb * (1 - t1 * (1 - aa)))));
      }, PsdImage__blendHardLight: function(bottom, $top) {
        var a, b;
        a = $top / 255;
        b = bottom / 255;
        if (b < 0.5)
          return C.JSNumber_methods.toInt$0(C.JSInt_methods.roundToDouble$0(510 * a * b));
        else
          return C.JSNumber_methods.toInt$0(C.JSInt_methods.roundToDouble$0(255 * (1 - 2 * (1 - a) * (1 - b))));
      }, PsdImage__blendVividLight: function(bottom, $top) {
        if ($top < 128)
          return U.PsdImage__blendColorBurn(bottom, 2 * $top);
        else
          return U.PsdImage__blendColorDodge(bottom, 2 * ($top - 128));
      }, PsdImage__blendLinearLight: function(bottom, $top) {
        var t1;
        if ($top < 128)
          return C.JSInt_methods.clamp$2(bottom + 2 * $top - 255, 0, 255);
        else {
          t1 = 2 * ($top - 128);
          return t1 + bottom > 255 ? 255 : bottom + t1;
        }
      }, PsdImage_createImageFromChannels: function(colorMode, bitDepth, width, height, channelList) {
        var output, pixels, channels, t1, ch, numChannels, ns, t2, t3, t4, t5, t6, y, di, si, x, di0, t7, t8, t9, t10, a, b, alpha, y0, x0, z, y3, x3, z3, $R, $G, $B, rgb, gray, c, m, k, r, g;
        output = U.Image$(width, height, 4);
        pixels = H.NativeUint8List_NativeUint8List$view(output.data.buffer, 0, null);
        channels = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        for (t1 = new H.ListIterator(channelList, channelList.length, 0, null); t1.moveNext$0();) {
          ch = t1._current;
          channels.$indexSet(0, J.get$id$x(ch), ch);
        }
        numChannels = channelList.length;
        if (bitDepth === 8)
          ns = 1;
        else
          ns = bitDepth === 16 ? 2 : -1;
        if (ns === -1)
          throw H.wrapException(U.ImageException$("PSD: unsupported bit depth: " + H.S(bitDepth)));
        if (typeof height !== "number")
          return H.iae(height);
        t1 = pixels.length;
        t2 = numChannels >= 5;
        t3 = ns === 1;
        t4 = numChannels === 4;
        t5 = numChannels >= 2;
        t6 = numChannels >= 4;
        y = 0;
        di = 0;
        si = 0;
        for (; y < height; ++y) {
          if (typeof width !== "number")
            return H.iae(width);
          x = 0;
          for (; x < width; ++x, si += ns)
            switch (colorMode) {
              case 3:
                di0 = di + 1;
                t7 = J.get$data$x(channels.$index(0, 0));
                t8 = J.getInterceptor$asx(t7);
                if (t3)
                  t7 = t8.$index(t7, si);
                else {
                  t9 = t8.$index(t7, si);
                  if (typeof t9 !== "number")
                    return t9.$shl();
                  t7 = t8.$index(t7, si + 1);
                  if (typeof t7 !== "number")
                    return H.iae(t7);
                  t7 = (t9 << 8 | t7) >>> 8;
                }
                if (di < 0 || di >= t1)
                  return H.ioore(pixels, di);
                pixels[di] = t7;
                di = di0 + 1;
                t7 = J.get$data$x(channels.$index(0, 1));
                t8 = J.getInterceptor$asx(t7);
                if (t3)
                  t7 = t8.$index(t7, si);
                else {
                  t9 = t8.$index(t7, si);
                  if (typeof t9 !== "number")
                    return t9.$shl();
                  t7 = t8.$index(t7, si + 1);
                  if (typeof t7 !== "number")
                    return H.iae(t7);
                  t7 = (t9 << 8 | t7) >>> 8;
                }
                if (di0 < 0 || di0 >= t1)
                  return H.ioore(pixels, di0);
                pixels[di0] = t7;
                di0 = di + 1;
                t7 = J.get$data$x(channels.$index(0, 2));
                t8 = J.getInterceptor$asx(t7);
                if (t3)
                  t7 = t8.$index(t7, si);
                else {
                  t9 = t8.$index(t7, si);
                  if (typeof t9 !== "number")
                    return t9.$shl();
                  t7 = t8.$index(t7, si + 1);
                  if (typeof t7 !== "number")
                    return H.iae(t7);
                  t7 = (t9 << 8 | t7) >>> 8;
                }
                if (di < 0 || di >= t1)
                  return H.ioore(pixels, di);
                pixels[di] = t7;
                di = di0 + 1;
                if (t6) {
                  t7 = J.get$data$x(channels.$index(0, -1));
                  t8 = J.getInterceptor$asx(t7);
                  if (t3)
                    t7 = t8.$index(t7, si);
                  else {
                    t9 = t8.$index(t7, si);
                    if (typeof t9 !== "number")
                      return t9.$shl();
                    t7 = t8.$index(t7, si + 1);
                    if (typeof t7 !== "number")
                      return H.iae(t7);
                    t7 = (t9 << 8 | t7) >>> 8;
                  }
                } else
                  t7 = 255;
                if (di0 < 0 || di0 >= t1)
                  return H.ioore(pixels, di0);
                pixels[di0] = t7;
                break;
              case 9:
                t7 = J.get$data$x(channels.$index(0, 0));
                t8 = J.getInterceptor$asx(t7);
                if (t3)
                  t7 = t8.$index(t7, si);
                else {
                  t9 = t8.$index(t7, si);
                  if (typeof t9 !== "number")
                    return t9.$shl();
                  t7 = t8.$index(t7, si + 1);
                  if (typeof t7 !== "number")
                    return H.iae(t7);
                  t7 = (t9 << 8 | t7) >>> 8;
                }
                t7 = J.$mul$ns(t7, 100);
                if (typeof t7 !== "number")
                  return t7.$shr();
                t7 = C.JSNumber_methods._shrOtherPositive$1(t7, 8);
                t8 = J.get$data$x(channels.$index(0, 1));
                t9 = J.getInterceptor$asx(t8);
                if (t3)
                  t8 = t9.$index(t8, si);
                else {
                  t10 = t9.$index(t8, si);
                  if (typeof t10 !== "number")
                    return t10.$shl();
                  t8 = t9.$index(t8, si + 1);
                  if (typeof t8 !== "number")
                    return H.iae(t8);
                  t8 = (t10 << 8 | t8) >>> 8;
                }
                a = J.$sub$n(t8, 128);
                t8 = J.get$data$x(channels.$index(0, 2));
                t9 = J.getInterceptor$asx(t8);
                if (t3)
                  t8 = t9.$index(t8, si);
                else {
                  t10 = t9.$index(t8, si);
                  if (typeof t10 !== "number")
                    return t10.$shl();
                  t8 = t9.$index(t8, si + 1);
                  if (typeof t8 !== "number")
                    return H.iae(t8);
                  t8 = (t10 << 8 | t8) >>> 8;
                }
                b = J.$sub$n(t8, 128);
                if (t6) {
                  t8 = J.get$data$x(channels.$index(0, -1));
                  t9 = J.getInterceptor$asx(t8);
                  if (t3) {
                    t8 = t9.$index(t8, si);
                    alpha = t8;
                  } else {
                    t10 = t9.$index(t8, si);
                    if (typeof t10 !== "number")
                      return t10.$shl();
                    t8 = t9.$index(t8, si + 1);
                    if (typeof t8 !== "number")
                      return H.iae(t8);
                    t8 = (t10 << 8 | t8) >>> 8;
                    alpha = t8;
                  }
                } else
                  alpha = 255;
                y0 = (t7 + 16) / 116;
                x0 = J.$add$ns(J.$div$n(a, 500), y0);
                t7 = J.$div$n(b, 200);
                if (typeof t7 !== "number")
                  return H.iae(t7);
                z = y0 - t7;
                y3 = Math.pow(y0, 3);
                y0 = y3 > 0.008856 ? y3 : (y0 - 0.13793103448275862) / 7.787;
                if (typeof x0 !== "number")
                  H.throwExpression(P.ArgumentError$(x0));
                x3 = Math.pow(x0, 3);
                x0 = x3 > 0.008856 ? x3 : J.$div$n(J.$sub$n(x0, 0.13793103448275862), 7.787);
                z3 = Math.pow(z, 3);
                z = z3 > 0.008856 ? z3 : (z - 0.13793103448275862) / 7.787;
                x0 = J.$div$n(J.$mul$ns(x0, 95.047), 100);
                y0 = y0 * 100 / 100;
                z = z * 108.883 / 100;
                t7 = J.getInterceptor$ns(x0);
                $R = J.$add$ns(J.$add$ns(t7.$mul(x0, 3.2406), y0 * -1.5372), z * -0.4986);
                $G = J.$add$ns(J.$add$ns(t7.$mul(x0, -0.9689), y0 * 1.8758), z * 0.0415);
                $B = J.$add$ns(J.$add$ns(t7.$mul(x0, 0.0557), y0 * -0.204), z * 1.057);
                if (J.$gt$n($R, 0.0031308)) {
                  if (typeof $R !== "number")
                    H.throwExpression(P.ArgumentError$($R));
                  $R = 1.055 * Math.pow($R, 0.4166666666666667) - 0.055;
                } else {
                  if (typeof $R !== "number")
                    return H.iae($R);
                  $R = 12.92 * $R;
                }
                if (J.$gt$n($G, 0.0031308)) {
                  if (typeof $G !== "number")
                    H.throwExpression(P.ArgumentError$($G));
                  $G = 1.055 * Math.pow($G, 0.4166666666666667) - 0.055;
                } else {
                  if (typeof $G !== "number")
                    return H.iae($G);
                  $G = 12.92 * $G;
                }
                if (J.$gt$n($B, 0.0031308)) {
                  if (typeof $B !== "number")
                    H.throwExpression(P.ArgumentError$($B));
                  $B = 1.055 * Math.pow($B, 0.4166666666666667) - 0.055;
                } else {
                  if (typeof $B !== "number")
                    return H.iae($B);
                  $B = 12.92 * $B;
                }
                rgb = [C.JSInt_methods.clamp$2(C.JSDouble_methods.toInt$0($R * 255), 0, 255), C.JSInt_methods.clamp$2(C.JSDouble_methods.toInt$0($G * 255), 0, 255), C.JSInt_methods.clamp$2(C.JSDouble_methods.toInt$0($B * 255), 0, 255)];
                di0 = di + 1;
                t7 = rgb[0];
                if (di < 0 || di >= t1)
                  return H.ioore(pixels, di);
                pixels[di] = t7;
                di = di0 + 1;
                t7 = rgb[1];
                if (di0 < 0 || di0 >= t1)
                  return H.ioore(pixels, di0);
                pixels[di0] = t7;
                di0 = di + 1;
                t7 = rgb[2];
                if (di < 0 || di >= t1)
                  return H.ioore(pixels, di);
                pixels[di] = t7;
                di = di0 + 1;
                if (di0 < 0 || di0 >= t1)
                  return H.ioore(pixels, di0);
                pixels[di0] = alpha;
                break;
              case 1:
                t7 = J.get$data$x(channels.$index(0, 0));
                t8 = J.getInterceptor$asx(t7);
                if (t3)
                  gray = t8.$index(t7, si);
                else {
                  t9 = t8.$index(t7, si);
                  if (typeof t9 !== "number")
                    return t9.$shl();
                  t7 = t8.$index(t7, si + 1);
                  if (typeof t7 !== "number")
                    return H.iae(t7);
                  gray = (t9 << 8 | t7) >>> 8;
                }
                if (t5) {
                  t7 = J.get$data$x(channels.$index(0, -1));
                  t8 = J.getInterceptor$asx(t7);
                  if (t3) {
                    t7 = t8.$index(t7, si);
                    alpha = t7;
                  } else {
                    t9 = t8.$index(t7, si);
                    if (typeof t9 !== "number")
                      return t9.$shl();
                    t7 = t8.$index(t7, si + 1);
                    if (typeof t7 !== "number")
                      return H.iae(t7);
                    t7 = (t9 << 8 | t7) >>> 8;
                    alpha = t7;
                  }
                } else
                  alpha = 255;
                di0 = di + 1;
                if (di < 0 || di >= t1)
                  return H.ioore(pixels, di);
                pixels[di] = gray;
                di = di0 + 1;
                if (di0 < 0 || di0 >= t1)
                  return H.ioore(pixels, di0);
                pixels[di0] = gray;
                di0 = di + 1;
                if (di < 0 || di >= t1)
                  return H.ioore(pixels, di);
                pixels[di] = gray;
                di = di0 + 1;
                if (di0 < 0 || di0 >= t1)
                  return H.ioore(pixels, di0);
                pixels[di0] = alpha;
                break;
              case 4:
                t7 = J.get$data$x(channels.$index(0, 0));
                t8 = J.getInterceptor$asx(t7);
                if (t3)
                  c = t8.$index(t7, si);
                else {
                  t9 = t8.$index(t7, si);
                  if (typeof t9 !== "number")
                    return t9.$shl();
                  t7 = t8.$index(t7, si + 1);
                  if (typeof t7 !== "number")
                    return H.iae(t7);
                  c = (t9 << 8 | t7) >>> 8;
                }
                t7 = J.get$data$x(channels.$index(0, 1));
                t8 = J.getInterceptor$asx(t7);
                if (t3)
                  m = t8.$index(t7, si);
                else {
                  t9 = t8.$index(t7, si);
                  if (typeof t9 !== "number")
                    return t9.$shl();
                  t7 = t8.$index(t7, si + 1);
                  if (typeof t7 !== "number")
                    return H.iae(t7);
                  m = (t9 << 8 | t7) >>> 8;
                }
                t7 = J.get$data$x(channels.$index(0, 2));
                t8 = J.getInterceptor$asx(t7);
                if (t3)
                  y0 = t8.$index(t7, si);
                else {
                  t9 = t8.$index(t7, si);
                  if (typeof t9 !== "number")
                    return t9.$shl();
                  t7 = t8.$index(t7, si + 1);
                  if (typeof t7 !== "number")
                    return H.iae(t7);
                  y0 = (t9 << 8 | t7) >>> 8;
                }
                t7 = J.get$data$x(channels.$index(0, t4 ? -1 : 3));
                t8 = J.getInterceptor$asx(t7);
                if (t3)
                  k = t8.$index(t7, si);
                else {
                  t9 = t8.$index(t7, si);
                  if (typeof t9 !== "number")
                    return t9.$shl();
                  t7 = t8.$index(t7, si + 1);
                  if (typeof t7 !== "number")
                    return H.iae(t7);
                  k = (t9 << 8 | t7) >>> 8;
                }
                if (t2) {
                  t7 = J.get$data$x(channels.$index(0, -1));
                  t8 = J.getInterceptor$asx(t7);
                  if (t3) {
                    t7 = t8.$index(t7, si);
                    alpha = t7;
                  } else {
                    t9 = t8.$index(t7, si);
                    if (typeof t9 !== "number")
                      return t9.$shl();
                    t7 = t8.$index(t7, si + 1);
                    if (typeof t7 !== "number")
                      return H.iae(t7);
                    t7 = (t9 << 8 | t7) >>> 8;
                    alpha = t7;
                  }
                } else
                  alpha = 255;
                if (typeof c !== "number")
                  return H.iae(c);
                if (typeof m !== "number")
                  return H.iae(m);
                if (typeof y0 !== "number")
                  return H.iae(y0);
                if (typeof k !== "number")
                  return H.iae(k);
                t7 = 255 - k;
                t8 = 255 - t7;
                t7 = t7 << 8 >>> 0;
                r = C.JSNumber_methods._shrOtherPositive$1(65535 - ((255 - c) * t8 + t7), 8);
                g = C.JSNumber_methods._shrOtherPositive$1(65535 - ((255 - m) * t8 + t7), 8);
                b = C.JSNumber_methods._shrOtherPositive$1(65535 - ((255 - y0) * t8 + t7), 8);
                rgb = [C.JSInt_methods.clamp$2(r, 0, 255), C.JSInt_methods.clamp$2(g, 0, 255), C.JSInt_methods.clamp$2(b, 0, 255)];
                di0 = di + 1;
                t7 = rgb[0];
                if (di < 0 || di >= t1)
                  return H.ioore(pixels, di);
                pixels[di] = t7;
                di = di0 + 1;
                t7 = rgb[1];
                if (di0 < 0 || di0 >= t1)
                  return H.ioore(pixels, di0);
                pixels[di0] = t7;
                di0 = di + 1;
                t7 = rgb[2];
                if (di < 0 || di >= t1)
                  return H.ioore(pixels, di);
                pixels[di] = t7;
                di = di0 + 1;
                if (di0 < 0 || di0 >= t1)
                  return H.ioore(pixels, di0);
                pixels[di0] = alpha;
                break;
              default:
                throw H.wrapException(U.ImageException$("Unhandled color mode: " + H.S(colorMode)));
            }
        }
        return output;
      }}
  },
  PsdImageResource: {
    "^": "Object;id>,name>,data>"
  },
  PsdLayer: {
    "^": "Object;top,left,bottom,right,width>,height>,blendMode,opacity,clipping,flags,compression,name>,channels,mask,blendingRanges,additionalData,children>,parent,layerImage",
    isVisible$0: function() {
      return J.$and$n(this.flags, 2) === 0;
    },
    type$0: [function(_) {
      var t1, section;
      t1 = this.additionalData;
      if (t1.containsKey$1("lsct")) {
        section = t1.$index(0, "lsct");
        return section.get$type(section);
      }
      return 0;
    }, "call$0", "get$type", 0, 0, 97],
    readImageData$2: function(input, psd) {
      var i, t1, t2, t3, t4, t5;
      for (i = 0; t1 = this.channels, t2 = t1.length, t3 = psd.depth, t4 = this.width, t5 = this.height, i < t2; ++i)
        t1[i].readPlane$4(input, t4, t5, t3);
      this.layerImage = U.PsdImage_createImageFromChannels(psd.colorMode, t3, t4, t5, t1);
    },
    PsdLayer$1: function(input) {
      var t1, t2, numChannels, i, id, len, sig, extra, padding, tag, pos, t3, t4, t5, t6;
      t1 = input.readUint32$0();
      t2 = $.get$__uint32();
      t2[0] = t1;
      t1 = $.get$__uint32ToInt32();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      this.top = t1[0];
      t2[0] = input.readUint32$0();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      this.left = t1[0];
      t2[0] = input.readUint32$0();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      this.bottom = t1[0];
      t2[0] = input.readUint32$0();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = t1[0];
      this.right = t1;
      this.width = t1 - this.left;
      this.height = this.bottom - this.top;
      this.channels = [];
      numChannels = input.readUint16$0();
      for (i = 0; i < numChannels; ++i) {
        t1 = input.readUint16$0();
        $.get$__uint16()[0] = t1;
        t1 = $.get$__uint16ToInt16();
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        id = t1[0];
        len = input.readUint32$0();
        this.channels.push(new U.PsdChannel(id, len, null));
      }
      sig = input.readUint32$0();
      if (sig !== 943868237)
        throw H.wrapException(U.ImageException$("Invalid PSD layer signature: " + C.JSInt_methods.toRadixString$1(sig, 16)));
      this.blendMode = input.readUint32$0();
      t1 = input.buffer;
      t2 = input.offset;
      input.offset = J.$add$ns(t2, 1);
      this.opacity = J.$index$asx(t1, t2);
      t2 = input.buffer;
      t1 = input.offset;
      input.offset = J.$add$ns(t1, 1);
      this.clipping = J.$index$asx(t2, t1);
      t1 = input.buffer;
      t2 = input.offset;
      input.offset = J.$add$ns(t2, 1);
      this.flags = J.$index$asx(t1, t2);
      t2 = input.buffer;
      t1 = input.offset;
      input.offset = J.$add$ns(t1, 1);
      if (!J.$eq(J.$index$asx(t2, t1), 0))
        throw H.wrapException(U.ImageException$("Invalid PSD layer data"));
      len = input.readUint32$0();
      extra = input.readBytes$1(len);
      if (len > 0) {
        len = extra.readUint32$0();
        if (len > 0) {
          t1 = new U.PsdMask(null, null, null, null, null, null, 0);
          t1.PsdMask$1(extra.readBytes$1(len));
          this.mask = t1;
        }
        len = extra.readUint32$0();
        if (len > 0)
          this.blendingRanges = U.PsdBlendingRanges$(extra.readBytes$1(len));
        t1 = extra.buffer;
        t2 = extra.offset;
        extra.offset = J.$add$ns(t2, 1);
        len = J.$index$asx(t1, t2);
        this.name = extra.readString$1(len);
        t2 = J.$mod$n(len, 4);
        if (typeof t2 !== "number")
          return H.iae(t2);
        padding = 4 - t2 - 1;
        if (padding > 0)
          extra.offset = J.$add$ns(extra.offset, padding);
        for (t1 = extra.end, t2 = this.additionalData; !J.$ge$n(extra.offset, t1);) {
          sig = extra.readUint32$0();
          if (sig !== 943868237)
            throw H.wrapException(U.ImageException$("PSD invalid signature for layer additional data: " + C.JSInt_methods.toRadixString$1(sig, 16)));
          tag = extra.readString$1(4);
          len = extra.readUint32$0();
          pos = J.$add$ns(extra.offset, 0);
          t3 = extra.buffer;
          t4 = extra.bigEndian;
          t5 = J.$add$ns(pos, len);
          t6 = J.$add$ns(extra.offset, J.$sub$n(t5, pos));
          extra.offset = t6;
          if ((len & 1) === 1)
            extra.offset = J.$add$ns(t6, 1);
          t2.$indexSet(0, tag, U.PsdLayerData_PsdLayerData(tag, new U.InputBuffer(t3, pos, t5, pos, t4)));
        }
      }
    },
    static: {"^": "PsdLayer_SIGNATURE,PsdLayer_BLEND_PASSTHROUGH,PsdLayer_BLEND_NORMAL,PsdLayer_BLEND_DISSOLVE,PsdLayer_BLEND_DARKEN,PsdLayer_BLEND_MULTIPLY,PsdLayer_BLEND_COLOR_BURN,PsdLayer_BLEND_LINEAR_BURN,PsdLayer_BLEND_DARKEN_COLOR,PsdLayer_BLEND_LIGHTEN,PsdLayer_BLEND_SCREEN,PsdLayer_BLEND_COLOR_DODGE,PsdLayer_BLEND_LINEAR_DODGE,PsdLayer_BLEND_LIGHTER_COLOR,PsdLayer_BLEND_OVERLAY,PsdLayer_BLEND_SOFT_LIGHT,PsdLayer_BLEND_HARD_LIGHT,PsdLayer_BLEND_VIVID_LIGHT,PsdLayer_BLEND_LINEAR_LIGHT,PsdLayer_BLEND_PIN_LIGHT,PsdLayer_BLEND_HARD_MIX,PsdLayer_BLEND_DIFFERENCE,PsdLayer_BLEND_EXCLUSION,PsdLayer_BLEND_SUBTRACT,PsdLayer_BLEND_DIVIDE,PsdLayer_BLEND_HUE,PsdLayer_BLEND_SATURATION,PsdLayer_BLEND_COLOR,PsdLayer_BLEND_LUMINOSITY,PsdLayer_FLAG_TRANSPARENCY_PROTECTED,PsdLayer_FLAG_HIDDEN,PsdLayer_FLAG_OBSOLETE,PsdLayer_FLAG_PHOTOSHOP_5,PsdLayer_FLAG_PIXEL_DATA_IRRELEVANT_TO_APPEARANCE", PsdLayer$: function(input) {
        var t1 = new U.PsdLayer(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null), [], null, null);
        t1.PsdLayer$1(input);
        return t1;
      }}
  },
  PsdLayerData: {
    "^": "Object;tag",
    static: {PsdLayerData_PsdLayerData: function(tag, data) {
        var t1;
        switch (tag) {
          case "lsct":
            t1 = new U.PsdLayerSectionDivider(null, null, 0, tag);
            t1.PsdLayerSectionDivider$2(tag, data);
            return t1;
          default:
            return new U.PsdLayerAdditionalData(data, tag);
        }
      }}
  },
  PsdMask: {
    "^": "Object;top,left,right,bottom,defaultColor,flags,params",
    PsdMask$1: function(input) {
      var len, t1, t2;
      len = J.$sub$n(input.end, input.offset);
      this.top = input.readUint32$0();
      this.left = input.readUint32$0();
      this.right = input.readUint32$0();
      this.bottom = input.readUint32$0();
      t1 = input.buffer;
      t2 = input.offset;
      input.offset = J.$add$ns(t2, 1);
      this.defaultColor = J.$index$asx(t1, t2);
      t2 = input.buffer;
      t1 = input.offset;
      input.offset = J.$add$ns(t1, 1);
      this.flags = J.$index$asx(t2, t1);
      t1 = J.$eq(len, 20);
      t2 = input.offset;
      if (t1)
        input.offset = J.$add$ns(t2, 2);
      else {
        t1 = input.buffer;
        input.offset = J.$add$ns(t2, 1);
        this.flags = J.$index$asx(t1, t2);
        t2 = input.buffer;
        t1 = input.offset;
        input.offset = J.$add$ns(t1, 1);
        this.defaultColor = J.$index$asx(t2, t1);
        this.top = input.readUint32$0();
        this.left = input.readUint32$0();
        this.right = input.readUint32$0();
        this.bottom = input.readUint32$0();
      }
    }
  },
  PsdDecoder: {
    "^": "Decoder;info,progressCallback",
    startDecode$1: function(bytes) {
      var t1 = U.PsdImage$(bytes);
      this.info = t1;
      return t1;
    },
    decodeFrame$1: function(frame) {
      var t1 = this.info;
      if (t1 == null)
        return;
      return t1.decodeImage$0();
    }
  },
  TiffBitReader: {
    "^": "Object;input,_image$_bitBuffer,_bitPos",
    readBits$1: function(numBits) {
      var t1, t2, t3, value, t4;
      if (numBits === 0)
        return 0;
      if (this._bitPos === 0) {
        this._bitPos = 8;
        t1 = this.input;
        t2 = t1.buffer;
        t3 = t1.offset;
        t1.offset = J.$add$ns(t3, 1);
        this._image$_bitBuffer = J.$index$asx(t2, t3);
      }
      for (value = 0; t1 = this._bitPos, numBits > t1;) {
        t2 = C.JSInt_methods.$shl(value, t1);
        t3 = this._image$_bitBuffer;
        if (t1 < 0 || t1 >= 9)
          return H.ioore(C.List_knt, t1);
        t1 = J.$and$n(t3, C.List_knt[t1]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        value = t2 + t1;
        numBits -= this._bitPos;
        this._bitPos = 8;
        t1 = this.input;
        t2 = t1.buffer;
        t3 = t1.offset;
        t1.offset = J.$add$ns(t3, 1);
        this._image$_bitBuffer = J.$index$asx(t2, t3);
      }
      if (numBits > 0) {
        if (t1 === 0) {
          this._bitPos = 8;
          t1 = this.input;
          t2 = t1.buffer;
          t3 = t1.offset;
          t1.offset = J.$add$ns(t3, 1);
          this._image$_bitBuffer = J.$index$asx(t2, t3);
        }
        t1 = C.JSInt_methods.$shl(value, numBits);
        t2 = this._image$_bitBuffer;
        t3 = this._bitPos - numBits;
        if (typeof t2 !== "number")
          return t2.$shr();
        t2 = C.JSNumber_methods.$shr(t2, t3);
        if (numBits >= 9)
          return H.ioore(C.List_knt, numBits);
        t4 = C.List_knt[numBits];
        if (typeof t4 !== "number")
          return H.iae(t4);
        value = t1 + ((t2 & t4) >>> 0);
        this._bitPos = t3;
      }
      return value;
    },
    static: {"^": "TiffBitReader__BIT_MASK"}
  },
  TiffEntry: {
    "^": "Object;tag,type>,numValues,valueOffset",
    toString$0: function(_) {
      var t1 = this.tag;
      if (C.Map_Od2I8.containsKey$1(t1) === true)
        return H.S(C.Map_Od2I8.$index(0, t1)) + ": " + this.type + " " + this.numValues;
      return "<" + t1 + ">: " + this.type + " " + this.numValues;
    },
    readValues$1: function(p) {
      var values, t1, i;
      p.offset = this.valueOffset;
      values = [];
      for (t1 = this.numValues, i = 0; i < t1; ++i)
        values.push(this._readValue$1(p));
      return values;
    },
    _readValue$1: function(p) {
      var t1, t2, num, den;
      switch (this.type) {
        case 1:
        case 2:
          t1 = p.buffer;
          t2 = p.offset;
          p.offset = J.$add$ns(t2, 1);
          return J.$index$asx(t1, t2);
        case 3:
          return p.readUint16$0();
        case 4:
          return p.readUint32$0();
        case 5:
          num = p.readUint32$0();
          den = p.readUint32$0();
          if (den === 0)
            return 0;
          return num / den;
        case 6:
          throw H.wrapException(U.ImageException$("Unhandled value type: SBYTE"));
        case 7:
          t1 = p.buffer;
          t2 = p.offset;
          p.offset = J.$add$ns(t2, 1);
          return J.$index$asx(t1, t2);
        case 8:
          throw H.wrapException(U.ImageException$("Unhandled value type: SSHORT"));
        case 9:
          throw H.wrapException(U.ImageException$("Unhandled value type: SLONG"));
        case 10:
          throw H.wrapException(U.ImageException$("Unhandled value type: SRATIONAL"));
        case 11:
          throw H.wrapException(U.ImageException$("Unhandled value type: FLOAT"));
        case 12:
          throw H.wrapException(U.ImageException$("Unhandled value type: DOUBLE"));
      }
      return 0;
    },
    static: {"^": "TiffEntry_TYPE_BYTE,TiffEntry_TYPE_ASCII,TiffEntry_TYPE_SHORT,TiffEntry_TYPE_LONG,TiffEntry_TYPE_RATIONAL,TiffEntry_TYPE_SBYTE,TiffEntry_TYPE_UNDEFINED,TiffEntry_TYPE_SSHORT,TiffEntry_TYPE_SLONG,TiffEntry_TYPE_SRATIONAL,TiffEntry_TYPE_FLOAT,TiffEntry_TYPE_DOUBLE,TiffEntry_SIZE_OF_TYPE"}
  },
  TiffFaxDecoder: {
    "^": "Object;width>,height>,fillOrder,changingElemSize,prevChangingElems,currChangingElems,data>,bitPointer,bytePointer,lastChangingElement,compression,uncompressedMode,fillBits,oneD",
    decode1D$4: function(out, compData, startX, height) {
      var scanlineStride, lineOffset, i;
      this.data = compData;
      this.bitPointer = 0;
      this.bytePointer = 0;
      scanlineStride = J.$tdiv$n(J.$add$ns(this.width, 7), 8);
      if (typeof height !== "number")
        return H.iae(height);
      lineOffset = 0;
      i = 0;
      for (; i < height; ++i) {
        this._decodeNextScanline$3(out, lineOffset, startX);
        if (typeof scanlineStride !== "number")
          return H.iae(scanlineStride);
        lineOffset += scanlineStride;
      }
    },
    _decodeNextScanline$3: function(buffer, lineOffset, bitOffset) {
      var bits, code, isT, current, entry, twoBits, isWhite, t1, t2;
      this.changingElemSize = 0;
      bits = 0;
      code = 0;
      isT = 0;
      current = null;
      entry = null;
      twoBits = null;
      isWhite = true;
      while (true) {
        t1 = this.width;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(bitOffset < t1))
          break;
        for (; isWhite;) {
          current = this._nextNBits$1(10);
          if (current >= 1024)
            return H.ioore(C.List_VSP, current);
          entry = C.List_VSP[current];
          isT = J.getInterceptor$n(entry).$and(entry, 1);
          if (typeof entry !== "number")
            return entry.$shr();
          bits = C.JSNumber_methods._shrOtherPositive$1(entry, 1) & 15;
          if (bits === 12) {
            twoBits = this._nextLesserThan8Bits$1(2);
            current = (current << 2 & 12 | twoBits) >>> 0;
            if (current >= 16)
              return H.ioore(C.List_MEg, current);
            entry = C.List_MEg[current];
            if (typeof entry !== "number")
              return entry.$shr();
            bits = C.JSNumber_methods._shrOtherPositive$1(entry, 1) & 7;
            code = C.JSNumber_methods._shrOtherPositive$1(entry, 4) & 4095;
            bitOffset += code;
            this._updatePointer$1(4 - bits);
          } else if (bits === 0)
            throw H.wrapException(U.ImageException$("TIFFFaxDecoder0"));
          else if (bits === 15)
            throw H.wrapException(U.ImageException$("TIFFFaxDecoder1"));
          else {
            code = C.JSNumber_methods._shrOtherPositive$1(entry, 5) & 2047;
            bitOffset += code;
            this._updatePointer$1(10 - bits);
            if (isT === 0) {
              t1 = this.currChangingElems;
              t2 = this.changingElemSize++;
              if (t2 >= t1.length)
                return H.ioore(t1, t2);
              t1[t2] = bitOffset;
              isWhite = false;
            }
          }
        }
        if (bitOffset === this.width) {
          if (this.compression === 2)
            if (this.bitPointer !== 0) {
              t1 = this.bytePointer;
              if (typeof t1 !== "number")
                return t1.$add();
              this.bytePointer = t1 + 1;
              this.bitPointer = 0;
            }
          break;
        }
        for (; !isWhite;) {
          current = this._nextLesserThan8Bits$1(4);
          if (current >= 16)
            return H.ioore(C.List_89P, current);
          entry = C.List_89P[current];
          isT = J.getInterceptor$n(entry).$and(entry, 1);
          if (typeof entry !== "number")
            return entry.$shr();
          bits = C.JSNumber_methods._shrOtherPositive$1(entry, 1) & 15;
          code = C.JSNumber_methods._shrOtherPositive$1(entry, 5) & 2047;
          if (code === 100) {
            current = this._nextNBits$1(9);
            if (current >= 512)
              return H.ioore(C.List_nLG, current);
            entry = C.List_nLG[current];
            isT = J.getInterceptor$n(entry).$and(entry, 1);
            if (typeof entry !== "number")
              return entry.$shr();
            bits = C.JSNumber_methods._shrOtherPositive$1(entry, 1) & 15;
            code = C.JSNumber_methods._shrOtherPositive$1(entry, 5) & 2047;
            if (bits === 12) {
              this._updatePointer$1(5);
              current = this._nextLesserThan8Bits$1(4);
              if (current >= 16)
                return H.ioore(C.List_MEg, current);
              entry = C.List_MEg[current];
              if (typeof entry !== "number")
                return entry.$shr();
              bits = C.JSNumber_methods._shrOtherPositive$1(entry, 1) & 7;
              code = C.JSNumber_methods._shrOtherPositive$1(entry, 4) & 4095;
              this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              this._updatePointer$1(4 - bits);
            } else if (bits === 15)
              throw H.wrapException(U.ImageException$("TIFFFaxDecoder2"));
            else {
              this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              this._updatePointer$1(9 - bits);
              if (isT === 0) {
                t1 = this.currChangingElems;
                t2 = this.changingElemSize++;
                if (t2 >= t1.length)
                  return H.ioore(t1, t2);
                t1[t2] = bitOffset;
                isWhite = true;
              }
            }
          } else {
            if (code === 200) {
              current = this._nextLesserThan8Bits$1(2);
              if (current >= 4)
                return H.ioore(C.List_292_260_226_226, current);
              entry = C.List_292_260_226_226[current];
              if (typeof entry !== "number")
                return entry.$shr();
              code = C.JSNumber_methods._shrOtherPositive$1(entry, 5) & 2047;
              bits = C.JSNumber_methods._shrOtherPositive$1(entry, 1) & 15;
              this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              this._updatePointer$1(2 - bits);
              t1 = this.currChangingElems;
              t2 = this.changingElemSize++;
              if (t2 >= t1.length)
                return H.ioore(t1, t2);
              t1[t2] = bitOffset;
            } else {
              this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              this._updatePointer$1(4 - bits);
              t1 = this.currChangingElems;
              t2 = this.changingElemSize++;
              if (t2 >= t1.length)
                return H.ioore(t1, t2);
              t1[t2] = bitOffset;
            }
            isWhite = true;
          }
        }
        if (bitOffset === this.width) {
          if (this.compression === 2)
            if (this.bitPointer !== 0) {
              t1 = this.bytePointer;
              if (typeof t1 !== "number")
                return t1.$add();
              this.bytePointer = t1 + 1;
              this.bitPointer = 0;
            }
          break;
        }
      }
      t1 = this.currChangingElems;
      t2 = this.changingElemSize++;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = bitOffset;
    },
    decode2D$5: function(out, compData, startX, height, tiffT4Options) {
      var scanlineStride, b, t1, lineOffset, a0, a1, b1, b2, entry, code, bits, isWhite, currIndex, temp, bitOffset, lines, currIndex0, number;
      this.data = compData;
      this.compression = 3;
      this.bitPointer = 0;
      this.bytePointer = 0;
      scanlineStride = J.$tdiv$n(J.$add$ns(this.width, 7), 8);
      b = H.setRuntimeTypeInfo(Array(2), [J.JSInt]);
      t1 = J.getInterceptor$n(tiffT4Options);
      this.oneD = t1.$and(tiffT4Options, 1);
      this.uncompressedMode = t1.$and(tiffT4Options, 2) >>> 1;
      this.fillBits = t1.$and(tiffT4Options, 4) >>> 2;
      if (this._readEOL$0() !== 1)
        throw H.wrapException(U.ImageException$("TIFFFaxDecoder3"));
      this._decodeNextScanline$3(out, 0, startX);
      if (typeof scanlineStride !== "number")
        return H.iae(scanlineStride);
      lineOffset = 0 + scanlineStride;
      if (typeof height !== "number")
        return H.iae(height);
      a0 = null;
      a1 = null;
      b1 = null;
      b2 = null;
      entry = null;
      code = null;
      bits = null;
      isWhite = null;
      currIndex = 0;
      temp = null;
      bitOffset = null;
      lines = 1;
      for (; lines < height; ++lines) {
        if (this._readEOL$0() === 0) {
          temp = this.prevChangingElems;
          this.prevChangingElems = this.currChangingElems;
          this.currChangingElems = temp;
          this.lastChangingElement = 0;
          for (bitOffset = startX, a0 = -1, isWhite = true, currIndex = 0; t1 = J.getInterceptor$n(bitOffset), t1.$lt(bitOffset, this.width);) {
            this._getNextChangingElement$3(a0, isWhite, b);
            b1 = b[0];
            b2 = b[1];
            entry = this._nextLesserThan8Bits$1(7);
            if (entry >= 128)
              return H.ioore(C.List_8co, entry);
            entry = J.$and$n(C.List_8co[entry], 255);
            code = (entry & 120) >>> 3;
            bits = entry & 7;
            if (code === 0) {
              if (!isWhite)
                this._setToBlack$4(out, lineOffset, bitOffset, J.$sub$n(b2, bitOffset));
              this._updatePointer$1(7 - bits);
              bitOffset = b2;
              a0 = bitOffset;
            } else if (code === 1) {
              this._updatePointer$1(7 - bits);
              currIndex0 = currIndex + 1;
              if (isWhite) {
                bitOffset = t1.$add(bitOffset, this._decodeWhiteCodeWord$0());
                t1 = this.currChangingElems;
                if (currIndex >= t1.length)
                  return H.ioore(t1, currIndex);
                t1[currIndex] = bitOffset;
                number = this._decodeBlackCodeWord$0();
                this._setToBlack$4(out, lineOffset, bitOffset, number);
                bitOffset = J.$add$ns(bitOffset, number);
                t1 = this.currChangingElems;
                currIndex = currIndex0 + 1;
                if (currIndex0 >= t1.length)
                  return H.ioore(t1, currIndex0);
                t1[currIndex0] = bitOffset;
              } else {
                number = this._decodeBlackCodeWord$0();
                this._setToBlack$4(out, lineOffset, bitOffset, number);
                bitOffset = t1.$add(bitOffset, number);
                t1 = this.currChangingElems;
                if (currIndex >= t1.length)
                  return H.ioore(t1, currIndex);
                t1[currIndex] = bitOffset;
                bitOffset = J.$add$ns(bitOffset, this._decodeWhiteCodeWord$0());
                t1 = this.currChangingElems;
                currIndex = currIndex0 + 1;
                if (currIndex0 >= t1.length)
                  return H.ioore(t1, currIndex0);
                t1[currIndex0] = bitOffset;
              }
              a0 = bitOffset;
            } else {
              if (code <= 8) {
                a1 = J.$add$ns(b1, code - 5);
                t1 = this.currChangingElems;
                currIndex0 = currIndex + 1;
                if (currIndex >= t1.length)
                  return H.ioore(t1, currIndex);
                t1[currIndex] = a1;
                isWhite = !isWhite;
                if (isWhite)
                  this._setToBlack$4(out, lineOffset, bitOffset, J.$sub$n(a1, bitOffset));
                this._updatePointer$1(7 - bits);
              } else
                throw H.wrapException(U.ImageException$("TIFFFaxDecoder4"));
              bitOffset = a1;
              currIndex = currIndex0;
              a0 = bitOffset;
            }
          }
          t1 = this.currChangingElems;
          currIndex0 = currIndex + 1;
          if (currIndex >= t1.length)
            return H.ioore(t1, currIndex);
          t1[currIndex] = bitOffset;
          this.changingElemSize = currIndex0;
          currIndex = currIndex0;
        } else
          this._decodeNextScanline$3(out, lineOffset, startX);
        lineOffset += scanlineStride;
      }
    },
    decodeT6$5: function(out, compData, startX, height, tiffT6Options) {
      var scanlineStride, b, cce, t1, t2, a1, b1, b2, entry, code, bits, lineOffset, lines, temp, bitOffset, a0, isWhite, currIndex, currIndex0, number, zeros, exit;
      this.data = compData;
      this.compression = 4;
      this.bitPointer = 0;
      this.bytePointer = 0;
      scanlineStride = J.$tdiv$n(J.$add$ns(this.width, 7), 8);
      b = H.setRuntimeTypeInfo(Array(2), [J.JSInt]);
      this.uncompressedMode = J.$and$n(tiffT6Options, 2) >>> 1;
      cce = this.currChangingElems;
      this.changingElemSize = 0;
      this.changingElemSize = 1;
      t1 = this.width;
      t2 = cce.length;
      if (0 >= t2)
        return H.ioore(cce, 0);
      cce[0] = t1;
      this.changingElemSize = 2;
      if (1 >= t2)
        return H.ioore(cce, 1);
      cce[1] = t1;
      if (typeof height !== "number")
        return H.iae(height);
      a1 = null;
      b1 = null;
      b2 = null;
      entry = null;
      code = null;
      bits = null;
      lineOffset = 0;
      lines = 0;
      for (; lines < height; ++lines) {
        temp = this.prevChangingElems;
        this.prevChangingElems = this.currChangingElems;
        this.currChangingElems = temp;
        this.lastChangingElement = 0;
        for (t1 = temp.length, bitOffset = startX, a0 = -1, isWhite = true, currIndex = 0; t2 = J.getInterceptor$n(bitOffset), t2.$lt(bitOffset, this.width);) {
          this._getNextChangingElement$3(a0, isWhite, b);
          b1 = b[0];
          b2 = b[1];
          entry = this._nextLesserThan8Bits$1(7);
          if (entry >= 128)
            return H.ioore(C.List_8co, entry);
          entry = J.$and$n(C.List_8co[entry], 255);
          code = (entry & 120) >>> 3;
          bits = entry & 7;
          if (code === 0) {
            if (!isWhite)
              this._setToBlack$4(out, lineOffset, bitOffset, J.$sub$n(b2, bitOffset));
            this._updatePointer$1(7 - bits);
            bitOffset = b2;
            a0 = bitOffset;
          } else if (code === 1) {
            this._updatePointer$1(7 - bits);
            currIndex0 = currIndex + 1;
            if (isWhite) {
              bitOffset = t2.$add(bitOffset, this._decodeWhiteCodeWord$0());
              if (currIndex < 0 || currIndex >= t1)
                return H.ioore(temp, currIndex);
              temp[currIndex] = bitOffset;
              number = this._decodeBlackCodeWord$0();
              this._setToBlack$4(out, lineOffset, bitOffset, number);
              bitOffset = J.$add$ns(bitOffset, number);
              currIndex = currIndex0 + 1;
              if (currIndex0 < 0 || currIndex0 >= t1)
                return H.ioore(temp, currIndex0);
              temp[currIndex0] = bitOffset;
            } else {
              number = this._decodeBlackCodeWord$0();
              this._setToBlack$4(out, lineOffset, bitOffset, number);
              bitOffset = t2.$add(bitOffset, number);
              if (currIndex < 0 || currIndex >= t1)
                return H.ioore(temp, currIndex);
              temp[currIndex] = bitOffset;
              bitOffset = J.$add$ns(bitOffset, this._decodeWhiteCodeWord$0());
              currIndex = currIndex0 + 1;
              if (currIndex0 < 0 || currIndex0 >= t1)
                return H.ioore(temp, currIndex0);
              temp[currIndex0] = bitOffset;
            }
            a0 = bitOffset;
          } else if (code <= 8) {
            a1 = J.$add$ns(b1, code - 5);
            currIndex0 = currIndex + 1;
            if (currIndex < 0 || currIndex >= t1)
              return H.ioore(temp, currIndex);
            temp[currIndex] = a1;
            isWhite = !isWhite;
            if (isWhite)
              this._setToBlack$4(out, lineOffset, bitOffset, J.$sub$n(a1, bitOffset));
            this._updatePointer$1(7 - bits);
            bitOffset = a1;
            currIndex = currIndex0;
            a0 = bitOffset;
          } else if (code === 11) {
            if (this._nextLesserThan8Bits$1(3) !== 7)
              throw H.wrapException(U.ImageException$("TIFFFaxDecoder5"));
            for (zeros = 0, exit = false; !exit;) {
              for (; this._nextLesserThan8Bits$1(1) !== 1;)
                ++zeros;
              if (zeros > 5) {
                zeros -= 6;
                if (!isWhite && zeros > 0) {
                  currIndex0 = currIndex + 1;
                  if (currIndex < 0 || currIndex >= t1)
                    return H.ioore(temp, currIndex);
                  temp[currIndex] = bitOffset;
                  currIndex = currIndex0;
                }
                bitOffset = J.$add$ns(bitOffset, zeros);
                if (zeros > 0)
                  isWhite = true;
                if (this._nextLesserThan8Bits$1(1) === 0) {
                  if (!isWhite) {
                    currIndex0 = currIndex + 1;
                    if (currIndex < 0 || currIndex >= t1)
                      return H.ioore(temp, currIndex);
                    temp[currIndex] = bitOffset;
                    currIndex = currIndex0;
                  }
                  isWhite = true;
                } else {
                  if (isWhite) {
                    currIndex0 = currIndex + 1;
                    if (currIndex < 0 || currIndex >= t1)
                      return H.ioore(temp, currIndex);
                    temp[currIndex] = bitOffset;
                    currIndex = currIndex0;
                  }
                  isWhite = false;
                }
                exit = true;
              }
              if (zeros === 5) {
                if (!isWhite) {
                  currIndex0 = currIndex + 1;
                  if (currIndex < 0 || currIndex >= t1)
                    return H.ioore(temp, currIndex);
                  temp[currIndex] = bitOffset;
                  currIndex = currIndex0;
                }
                bitOffset = J.$add$ns(bitOffset, zeros);
                isWhite = true;
              } else {
                bitOffset = J.$add$ns(bitOffset, zeros);
                currIndex0 = currIndex + 1;
                if (currIndex < 0 || currIndex >= t1)
                  return H.ioore(temp, currIndex);
                temp[currIndex] = bitOffset;
                this._setToBlack$4(out, lineOffset, bitOffset, 1);
                bitOffset = J.$add$ns(bitOffset, 1);
                currIndex = currIndex0;
                isWhite = false;
              }
            }
          } else
            throw H.wrapException(U.ImageException$("TIFFFaxDecoder5 " + code));
        }
        if (currIndex < 0 || currIndex >= t1)
          return H.ioore(temp, currIndex);
        temp[currIndex] = bitOffset;
        this.changingElemSize = currIndex + 1;
        if (typeof scanlineStride !== "number")
          return H.iae(scanlineStride);
        lineOffset += scanlineStride;
      }
    },
    _decodeWhiteCodeWord$0: function() {
      var twoBits, runLength, isWhite, current, entry, isT, bits, t1;
      for (twoBits = null, runLength = 0, isWhite = true; isWhite;) {
        current = this._nextNBits$1(10);
        if (current >= 1024)
          return H.ioore(C.List_VSP, current);
        entry = C.List_VSP[current];
        isT = J.getInterceptor$n(entry).$and(entry, 1);
        if (typeof entry !== "number")
          return entry.$shr();
        bits = C.JSNumber_methods._shrOtherPositive$1(entry, 1) & 15;
        if (bits === 12) {
          twoBits = this._nextLesserThan8Bits$1(2);
          current = (current << 2 & 12 | twoBits) >>> 0;
          if (current >= 16)
            return H.ioore(C.List_MEg, current);
          entry = C.List_MEg[current];
          if (typeof entry !== "number")
            return entry.$shr();
          t1 = C.JSNumber_methods._shrOtherPositive$1(entry, 1);
          runLength += C.JSNumber_methods._shrOtherPositive$1(entry, 4) & 4095;
          this._updatePointer$1(4 - (t1 & 7));
        } else if (bits === 0)
          throw H.wrapException(U.ImageException$("TIFFFaxDecoder0"));
        else if (bits === 15)
          throw H.wrapException(U.ImageException$("TIFFFaxDecoder1"));
        else {
          runLength += C.JSNumber_methods._shrOtherPositive$1(entry, 5) & 2047;
          this._updatePointer$1(10 - bits);
          if (isT === 0)
            isWhite = false;
        }
      }
      return runLength;
    },
    _decodeBlackCodeWord$0: function() {
      var runLength, isWhite, current, entry, t1, code, isT, bits;
      for (runLength = 0, isWhite = false; !isWhite;) {
        current = this._nextLesserThan8Bits$1(4);
        if (current >= 16)
          return H.ioore(C.List_89P, current);
        entry = C.List_89P[current];
        J.getInterceptor$n(entry).$and(entry, 1);
        if (typeof entry !== "number")
          return entry.$shr();
        t1 = C.JSNumber_methods._shrOtherPositive$1(entry, 1);
        code = C.JSNumber_methods._shrOtherPositive$1(entry, 5) & 2047;
        if (code === 100) {
          current = this._nextNBits$1(9);
          if (current >= 512)
            return H.ioore(C.List_nLG, current);
          entry = C.List_nLG[current];
          isT = J.getInterceptor$n(entry).$and(entry, 1);
          if (typeof entry !== "number")
            return entry.$shr();
          bits = C.JSNumber_methods._shrOtherPositive$1(entry, 1) & 15;
          t1 = C.JSNumber_methods._shrOtherPositive$1(entry, 5);
          if (bits === 12) {
            this._updatePointer$1(5);
            current = this._nextLesserThan8Bits$1(4);
            if (current >= 16)
              return H.ioore(C.List_MEg, current);
            entry = C.List_MEg[current];
            if (typeof entry !== "number")
              return entry.$shr();
            t1 = C.JSNumber_methods._shrOtherPositive$1(entry, 1);
            runLength += C.JSNumber_methods._shrOtherPositive$1(entry, 4) & 4095;
            this._updatePointer$1(4 - (t1 & 7));
          } else if (bits === 15)
            throw H.wrapException(U.ImageException$("TIFFFaxDecoder2"));
          else {
            runLength += t1 & 2047;
            this._updatePointer$1(9 - bits);
            if (isT === 0)
              isWhite = true;
          }
        } else {
          if (code === 200) {
            current = this._nextLesserThan8Bits$1(2);
            if (current >= 4)
              return H.ioore(C.List_292_260_226_226, current);
            entry = C.List_292_260_226_226[current];
            if (typeof entry !== "number")
              return entry.$shr();
            runLength += C.JSNumber_methods._shrOtherPositive$1(entry, 5) & 2047;
            this._updatePointer$1(2 - (C.JSNumber_methods._shrOtherPositive$1(entry, 1) & 15));
          } else {
            runLength += code;
            this._updatePointer$1(4 - (t1 & 15));
          }
          isWhite = true;
        }
      }
      return runLength;
    },
    _readEOL$0: function() {
      var t1, bitsLeft, n;
      t1 = this.fillBits;
      if (t1 === 0) {
        if (this._nextNBits$1(12) !== 1)
          throw H.wrapException(U.ImageException$("TIFFFaxDecoder6"));
      } else if (t1 === 1) {
        t1 = this.bitPointer;
        if (typeof t1 !== "number")
          return H.iae(t1);
        bitsLeft = 8 - t1;
        if (this._nextNBits$1(bitsLeft) !== 0)
          throw H.wrapException(U.ImageException$("TIFFFaxDecoder8"));
        if (bitsLeft < 4)
          if (this._nextNBits$1(8) !== 0)
            throw H.wrapException(U.ImageException$("TIFFFaxDecoder8"));
        for (; n = this._nextNBits$1(8), n !== 1;)
          if (n !== 0)
            throw H.wrapException(U.ImageException$("TIFFFaxDecoder8"));
      }
      if (this.oneD === 0)
        return 1;
      else
        return this._nextLesserThan8Bits$1(1);
    },
    _getNextChangingElement$3: function(a0, isWhite, ret) {
      var pce, ces, t1, start, i, temp, t2;
      pce = this.prevChangingElems;
      ces = this.changingElemSize;
      t1 = this.lastChangingElement;
      start = t1 > 0 ? t1 - 1 : 0;
      start = isWhite ? (start & 4294967294) >>> 0 : (start | 1) >>> 0;
      for (t1 = pce.length, i = start; i < ces; i += 2) {
        if (i >= t1)
          return H.ioore(pce, i);
        temp = pce[i];
        if (J.$gt$n(temp, a0)) {
          this.lastChangingElement = i;
          ret[0] = temp;
          break;
        }
      }
      t2 = i + 1;
      if (t2 < ces) {
        if (t2 >= t1)
          return H.ioore(pce, t2);
        ret[1] = pce[t2];
      }
    },
    _setToBlack$4: function(buffer, lineOffset, bitOffset, numBits) {
      var bitNum, lastBit, byteNum, shift, maskVal, val, t1, byteNum0;
      if (typeof bitOffset !== "number")
        return H.iae(bitOffset);
      bitNum = 8 * lineOffset + bitOffset;
      if (typeof numBits !== "number")
        return H.iae(numBits);
      lastBit = bitNum + numBits;
      byteNum = C.JSNumber_methods._shrOtherPositive$1(bitNum, 3);
      shift = bitNum & 7;
      if (shift > 0) {
        maskVal = C.JSInt_methods.$shl(1, 7 - shift);
        val = J.$index$asx(buffer.buffer, J.$add$ns(buffer.offset, byteNum));
        while (true) {
          if (!(maskVal > 0 && bitNum < lastBit))
            break;
          val = J.$or$n(val, maskVal);
          maskVal = maskVal >>> 1;
          ++bitNum;
        }
        J.$indexSet$ax(buffer.buffer, J.$add$ns(buffer.offset, byteNum), val);
      }
      byteNum = C.JSNumber_methods._shrOtherPositive$1(bitNum, 3);
      for (t1 = lastBit - 7; bitNum < t1; byteNum = byteNum0) {
        byteNum0 = byteNum + 1;
        J.$indexSet$ax(buffer.buffer, J.$add$ns(buffer.offset, byteNum), 255);
        bitNum += 8;
      }
      for (; bitNum < lastBit;) {
        byteNum = C.JSNumber_methods._shrOtherPositive$1(bitNum, 3);
        t1 = J.$or$n(J.$index$asx(buffer.buffer, J.$add$ns(buffer.offset, byteNum)), C.JSInt_methods.$shl(1, 7 - (bitNum & 7)));
        J.$indexSet$ax(buffer.buffer, J.$add$ns(buffer.offset, byteNum), t1);
        ++bitNum;
      }
    },
    _nextNBits$1: function(bitsToGet) {
      var t1, l, bp, b, next, next2next, t2, bitsLeft, bitsFromNextByte, bitsFromNext2NextByte, bitsFromNextByte0, i2;
      t1 = this.data;
      l = J.$sub$n(J.$sub$n(t1.end, t1.offset), 1);
      bp = this.bytePointer;
      if (J.$eq(this.fillOrder, 1)) {
        t1 = this.data;
        b = J.$index$asx(t1.buffer, J.$add$ns(t1.offset, bp));
        if (bp == null ? l == null : bp === l) {
          next = 0;
          next2next = 0;
        } else {
          if (typeof bp !== "number")
            return bp.$add();
          t1 = bp + 1;
          t2 = this.data;
          if (t1 === l) {
            next = J.$index$asx(t2.buffer, J.$add$ns(t2.offset, t1));
            next2next = 0;
          } else {
            next = J.$index$asx(t2.buffer, J.$add$ns(t2.offset, t1));
            t1 = this.data;
            next2next = J.$index$asx(t1.buffer, J.$add$ns(t1.offset, bp + 2));
          }
        }
      } else if (J.$eq(this.fillOrder, 2)) {
        t1 = this.data;
        t1 = J.$and$n(J.$index$asx(t1.buffer, J.$add$ns(t1.offset, bp)), 255);
        if (t1 >= 256)
          return H.ioore(C.List_VvJ, t1);
        b = C.List_VvJ[t1];
        if (bp == null ? l == null : bp === l) {
          next = 0;
          next2next = 0;
        } else {
          if (typeof bp !== "number")
            return bp.$add();
          t1 = bp + 1;
          t2 = this.data;
          if (t1 === l) {
            t1 = J.$and$n(J.$index$asx(t2.buffer, J.$add$ns(t2.offset, t1)), 255);
            if (t1 >= 256)
              return H.ioore(C.List_VvJ, t1);
            next = C.List_VvJ[t1];
            next2next = 0;
          } else {
            t1 = J.$and$n(J.$index$asx(t2.buffer, J.$add$ns(t2.offset, t1)), 255);
            if (t1 >= 256)
              return H.ioore(C.List_VvJ, t1);
            next = C.List_VvJ[t1];
            t1 = this.data;
            t1 = J.$and$n(J.$index$asx(t1.buffer, J.$add$ns(t1.offset, bp + 2)), 255);
            if (t1 >= 256)
              return H.ioore(C.List_VvJ, t1);
            next2next = C.List_VvJ[t1];
          }
        }
      } else
        throw H.wrapException(U.ImageException$("TIFFFaxDecoder7"));
      t1 = this.bitPointer;
      if (typeof t1 !== "number")
        return H.iae(t1);
      bitsLeft = 8 - t1;
      bitsFromNextByte = bitsToGet - bitsLeft;
      if (bitsFromNextByte > 8) {
        bitsFromNext2NextByte = bitsFromNextByte - 8;
        bitsFromNextByte0 = 8;
      } else {
        bitsFromNextByte0 = bitsFromNextByte;
        bitsFromNext2NextByte = 0;
      }
      t1 = this.bytePointer;
      if (typeof t1 !== "number")
        return t1.$add();
      this.bytePointer = t1 + 1;
      if (bitsLeft >>> 0 !== bitsLeft || bitsLeft >= 9)
        return H.ioore(C.List_knt, bitsLeft);
      t1 = J.$and$n(b, C.List_knt[bitsLeft]);
      if (typeof t1 !== "number")
        return t1.$shl();
      t1 = C.JSInt_methods.$shl(t1, bitsFromNextByte);
      if (bitsFromNextByte0 >>> 0 !== bitsFromNextByte0 || bitsFromNextByte0 >= 9)
        return H.ioore(C.List_knt0, bitsFromNextByte0);
      t2 = J.$and$n(next, C.List_knt0[bitsFromNextByte0]);
      if (typeof t2 !== "number")
        return t2.$shr();
      i2 = C.JSInt_methods._shrReceiverPositive$1(t2, 8 - bitsFromNextByte0);
      if (bitsFromNext2NextByte !== 0) {
        i2 = C.JSInt_methods.$shl(i2, bitsFromNext2NextByte);
        if (bitsFromNext2NextByte >>> 0 !== bitsFromNext2NextByte || bitsFromNext2NextByte >= 9)
          return H.ioore(C.List_knt0, bitsFromNext2NextByte);
        t2 = J.$and$n(next2next, C.List_knt0[bitsFromNext2NextByte]);
        if (typeof t2 !== "number")
          return t2.$shr();
        i2 |= C.JSInt_methods._shrReceiverPositive$1(t2, 8 - bitsFromNext2NextByte);
        t2 = this.bytePointer;
        if (typeof t2 !== "number")
          return t2.$add();
        this.bytePointer = t2 + 1;
        this.bitPointer = bitsFromNext2NextByte;
      } else if (bitsFromNextByte0 === 8) {
        this.bitPointer = 0;
        t2 = this.bytePointer;
        if (typeof t2 !== "number")
          return t2.$add();
        this.bytePointer = t2 + 1;
      } else
        this.bitPointer = bitsFromNextByte0;
      return (t1 | i2) >>> 0;
    },
    _nextLesserThan8Bits$1: function(bitsToGet) {
      var t1, l, bp, b, next, bitsLeft, bitsFromNextByte, shift, i1, t2;
      t1 = this.data;
      l = J.$sub$n(J.$sub$n(t1.end, t1.offset), 1);
      bp = this.bytePointer;
      if (J.$eq(this.fillOrder, 1)) {
        t1 = this.data;
        b = J.$index$asx(t1.buffer, J.$add$ns(t1.offset, bp));
        if (bp == null ? l == null : bp === l)
          next = 0;
        else {
          t1 = this.data;
          if (typeof bp !== "number")
            return bp.$add();
          next = J.$index$asx(t1.buffer, J.$add$ns(t1.offset, bp + 1));
        }
      } else if (J.$eq(this.fillOrder, 2)) {
        t1 = this.data;
        t1 = J.$and$n(J.$index$asx(t1.buffer, J.$add$ns(t1.offset, bp)), 255);
        if (t1 >= 256)
          return H.ioore(C.List_VvJ, t1);
        b = C.List_VvJ[t1];
        if (bp == null ? l == null : bp === l)
          next = 0;
        else {
          t1 = this.data;
          if (typeof bp !== "number")
            return bp.$add();
          t1 = J.$and$n(J.$index$asx(t1.buffer, J.$add$ns(t1.offset, bp + 1)), 255);
          if (t1 >= 256)
            return H.ioore(C.List_VvJ, t1);
          next = C.List_VvJ[t1];
        }
      } else
        throw H.wrapException(U.ImageException$("TIFFFaxDecoder7"));
      t1 = this.bitPointer;
      if (typeof t1 !== "number")
        return H.iae(t1);
      bitsLeft = 8 - t1;
      bitsFromNextByte = bitsToGet - bitsLeft;
      shift = bitsLeft - bitsToGet;
      t1 = J.getInterceptor$n(b);
      if (shift >= 0) {
        if (bitsLeft >>> 0 !== bitsLeft || bitsLeft >= 9)
          return H.ioore(C.List_knt, bitsLeft);
        t1 = t1.$and(b, C.List_knt[bitsLeft]);
        if (typeof t1 !== "number")
          return t1.$shr();
        i1 = C.JSInt_methods._shrReceiverPositive$1(t1, shift);
        t1 = this.bitPointer;
        if (typeof t1 !== "number")
          return t1.$add();
        t1 += bitsToGet;
        this.bitPointer = t1;
        if (t1 === 8) {
          this.bitPointer = 0;
          t1 = this.bytePointer;
          if (typeof t1 !== "number")
            return t1.$add();
          this.bytePointer = t1 + 1;
        }
      } else {
        if (bitsLeft >>> 0 !== bitsLeft || bitsLeft >= 9)
          return H.ioore(C.List_knt, bitsLeft);
        t1 = t1.$and(b, C.List_knt[bitsLeft]);
        if (typeof t1 !== "number")
          return t1.$shl();
        t1 = C.JSInt_methods.$shl(t1, -shift);
        if (bitsFromNextByte >>> 0 !== bitsFromNextByte || bitsFromNextByte >= 9)
          return H.ioore(C.List_knt0, bitsFromNextByte);
        t2 = J.$and$n(next, C.List_knt0[bitsFromNextByte]);
        if (typeof t2 !== "number")
          return t2.$shr();
        i1 = (t1 | C.JSInt_methods._shrReceiverPositive$1(t2, 8 - bitsFromNextByte)) >>> 0;
        t2 = this.bytePointer;
        if (typeof t2 !== "number")
          return t2.$add();
        this.bytePointer = t2 + 1;
        this.bitPointer = bitsFromNextByte;
      }
      return i1;
    },
    _updatePointer$1: function(bitsToMoveBack) {
      var t1, i;
      t1 = this.bitPointer;
      if (typeof t1 !== "number")
        return t1.$sub();
      i = t1 - bitsToMoveBack;
      if (i < 0) {
        t1 = this.bytePointer;
        if (typeof t1 !== "number")
          return t1.$sub();
        this.bytePointer = t1 - 1;
        this.bitPointer = 8 + i;
      } else
        this.bitPointer = i;
    },
    TiffFaxDecoder$3: function(fillOrder, width, height) {
      var t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.prevChangingElems = H.setRuntimeTypeInfo(Array(t1), [J.JSInt]);
      t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.currChangingElems = H.setRuntimeTypeInfo(Array(t1), [J.JSInt]);
    },
    static: {"^": "TiffFaxDecoder_TABLE1,TiffFaxDecoder_TABLE2,TiffFaxDecoder_FLIP_TABLE,TiffFaxDecoder_WHITE,TiffFaxDecoder_ADDITIONAL_MAKEUP,TiffFaxDecoder_INIT_BLACK,TiffFaxDecoder_TWO_BIT_BLACK,TiffFaxDecoder_BLACK,TiffFaxDecoder_TWO_D_CODES", TiffFaxDecoder$: function(fillOrder, width, height) {
        var t1 = new U.TiffFaxDecoder(width, height, fillOrder, 0, null, null, null, null, null, 0, 2, 0, 0, null);
        t1.TiffFaxDecoder$3(fillOrder, width, height);
        return t1;
      }}
  },
  TiffImage: {
    "^": "Object;tags,width>,height>,photometricType,compression,bitsPerSample<,samplesPerPixel<,imageType,isWhiteZero,predictor,chromaSubH,chromaSubV,tiled,tileWidth,tileHeight,tileOffsets,tileByteCounts,tilesX,tilesY,tileSize,fillOrder,t4Options,t6Options,extraSamples,colorMap<,colorMapRed,colorMapGreen,colorMapBlue,image",
    decode$1: function(p) {
      var tileY, ti, t1, tileX;
      this.image = U.Image$(this.width, this.height, 4);
      tileY = 0;
      ti = 0;
      while (true) {
        t1 = this.tilesY;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(tileY < t1))
          break;
        tileX = 0;
        while (true) {
          t1 = this.tilesX;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(tileX < t1))
            break;
          this._decodeTile$3(p, tileX, tileY);
          ++tileX;
          ++ti;
        }
        ++tileY;
      }
      return this.image;
    },
    _decodeTile$3: function(p, tileX, tileY) {
      var byteCount, bdata, decoder, t1, tileIndex, outX, t2, outY, t3, bytesInThisTile, exception, j, count, i, len, t4, t5, t6, t7, t8, data, outData, jpeg, py, pi, y, px, x, pi0, gray, c;
      if (this.imageType === 0) {
        this._decodeBilevelTile$3(p, tileX, tileY);
        return;
      }
      t1 = this.tilesX;
      if (typeof t1 !== "number")
        return H.iae(t1);
      tileIndex = tileY * t1 + tileX;
      t1 = this.tileOffsets;
      if (tileIndex >>> 0 !== tileIndex || tileIndex >= t1.length)
        return H.ioore(t1, tileIndex);
      J.set$offset$x(p, t1[tileIndex]);
      t1 = this.tileWidth;
      if (typeof t1 !== "number")
        return H.iae(t1);
      outX = tileX * t1;
      t2 = this.tileHeight;
      if (typeof t2 !== "number")
        return H.iae(t2);
      outY = tileY * t2;
      t3 = this.tileByteCounts;
      if (tileIndex >= t3.length)
        return H.ioore(t3, tileIndex);
      byteCount = t3[tileIndex];
      t3 = this.samplesPerPixel;
      if (typeof t3 !== "number")
        return H.iae(t3);
      bytesInThisTile = t1 * t2 * t3;
      if (J.$eq(this.bitsPerSample, 16))
        bytesInThisTile *= 2;
      bdata = null;
      if (J.$eq(this.bitsPerSample, 8) || J.$eq(this.bitsPerSample, 16)) {
        if (J.$eq(this.compression, 1))
          bdata = p;
        else if (J.$eq(this.compression, 5)) {
          if (typeof bytesInThisTile !== "number" || Math.floor(bytesInThisTile) !== bytesInThisTile)
            H.throwExpression(P.ArgumentError$("Invalid length " + H.S(bytesInThisTile)));
          t1 = new Uint8Array(bytesInThisTile);
          t2 = t1.length;
          bdata = new U.InputBuffer(t1, 0, t2, 0, false);
          decoder = new U.LzwDecoder(9, 0, 0, 0, 0, null, null, null, null, new Uint8Array(4096), null, null, null, null);
          try {
            decoder.decode$2(U.InputBuffer$from(p, byteCount, 0), J.get$buffer$x(bdata));
          } catch (exception) {
            H.unwrapException(exception);
          }

          if (J.$eq(this.predictor, 2)) {
            j = 0;
            while (true) {
              t1 = this.tileHeight;
              if (typeof t1 !== "number")
                return H.iae(t1);
              if (!(j < t1))
                break;
              t1 = this.samplesPerPixel;
              t2 = this.tileWidth;
              if (typeof t2 !== "number")
                return H.iae(t2);
              count = J.$mul$ns(t1, j * t2 + 1);
              for (i = this.samplesPerPixel, len = J.$mul$ns(this.tileWidth, i); t1 = J.getInterceptor$n(i), t1.$lt(i, len); i = t1.$add(i, 1)) {
                t2 = bdata;
                t3 = J.getInterceptor$x(t2);
                t4 = J.$index$asx(t3.get$buffer(t2), J.$add$ns(t3.get$offset(t2), count));
                t5 = bdata;
                t6 = J.getInterceptor$n(count);
                t7 = t6.$sub(count, this.samplesPerPixel);
                t8 = J.getInterceptor$x(t5);
                t7 = J.$add$ns(t4, J.$index$asx(t8.get$buffer(t5), J.$add$ns(t8.get$offset(t5), t7)));
                J.$indexSet$ax(t3.get$buffer(t2), J.$add$ns(t3.get$offset(t2), count), t7);
                count = t6.$add(count, 1);
              }
              ++j;
            }
          }
        } else if (J.$eq(this.compression, 32773)) {
          if (typeof bytesInThisTile !== "number" || Math.floor(bytesInThisTile) !== bytesInThisTile)
            H.throwExpression(P.ArgumentError$("Invalid length " + H.S(bytesInThisTile)));
          t1 = new Uint8Array(bytesInThisTile);
          t2 = t1.length;
          bdata = new U.InputBuffer(t1, 0, t2, 0, false);
          this._decodePackbits$3(p, bytesInThisTile, J.get$buffer$x(bdata));
        } else if (J.$eq(this.compression, 32946)) {
          data = J.toList$2$ax(p, 0, byteCount);
          t1 = T.HuffmanTable$(C.List_2Bc);
          t2 = T.HuffmanTable$(C.List_X3d);
          t3 = new T.InputStream(data, null, 0, 0, null);
          t3._archive$_length = data.length;
          t3.offset = 0;
          t4 = new T.OutputStream(0, 0, new Uint8Array(32768));
          new T.Inflate(t3, t4, 0, 0, 0, t1, t2)._inflate$0();
          t2 = t4._archive$_buffer.buffer;
          t4 = t4.length;
          H._checkViewArguments(t2, 0, t4);
          outData = t4 == null ? new Uint8Array(t2, 0) : new Uint8Array(t2, 0, t4);
          t1 = outData.length;
          bdata = new U.InputBuffer(outData, 0, t1, 0, false);
        } else if (J.$eq(this.compression, 8)) {
          data = J.toList$2$ax(p, 0, byteCount);
          t1 = new T.InputStream(data, null, 0, 1, null);
          t1._archive$_length = data.length;
          t1.offset = 0;
          outData = new T.ZLibDecoder().decodeBuffer$2$verify(t1, true);
          t1 = outData.length;
          bdata = new U.InputBuffer(outData, 0, t1, 0, false);
        } else if (J.$eq(this.compression, 6)) {
          jpeg = new U.JpegData(null, null, null, null, null, null, Array(4), [], [], [], [], 0, 0);
          jpeg.read$1(J.toList$2$ax(p, 0, byteCount));
          this._jpegToImage$6(jpeg, this.image, outX, outY, this.tileWidth, this.tileHeight);
          return;
        } else
          throw H.wrapException(U.ImageException$("Unsupported Compression Type: " + H.S(this.compression)));
        if (bdata == null)
          return;
        py = outY;
        pi = 0;
        y = 0;
        while (true) {
          t1 = this.tileHeight;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (y < t1) {
            t1 = this.height;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = py < t1;
          } else
            t1 = false;
          if (!t1)
            break;
          t1 = py >= 0;
          px = outX;
          x = 0;
          while (true) {
            t2 = this.tileWidth;
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (x < t2) {
              t2 = this.width;
              if (typeof t2 !== "number")
                return H.iae(t2);
              t2 = px < t2;
            } else
              t2 = false;
            if (!t2)
              break;
            if (J.$eq(this.samplesPerPixel, 1)) {
              t2 = bdata;
              pi0 = pi + 1;
              t3 = J.getInterceptor$x(t2);
              gray = J.$index$asx(t3.get$buffer(t2), J.$add$ns(t3.get$offset(t2), pi));
              if (J.$eq(this.photometricType, 3) && this.colorMap != null) {
                t2 = this.colorMap;
                t3 = this.colorMapRed;
                if (typeof t3 !== "number")
                  return t3.$add();
                if (typeof gray !== "number")
                  return H.iae(gray);
                t3 += gray;
                t4 = t2.length;
                if (t3 >>> 0 !== t3 || t3 >= t4)
                  return H.ioore(t2, t3);
                t3 = t2[t3];
                t5 = this.colorMapGreen;
                if (typeof t5 !== "number")
                  return t5.$add();
                t5 += gray;
                if (t5 >>> 0 !== t5 || t5 >= t4)
                  return H.ioore(t2, t5);
                t5 = t2[t5];
                t6 = this.colorMapBlue;
                if (typeof t6 !== "number")
                  return t6.$add();
                t6 += gray;
                if (t6 >>> 0 !== t6 || t6 >= t4)
                  return H.ioore(t2, t6);
                t6 = t2[t6];
                t2 = C.JSInt_methods.clamp$2(255, 0, 255);
                t6 = J.clamp$2$n(t6, 0, 255);
                if (typeof t6 !== "number")
                  return t6.$shl();
                t5 = J.clamp$2$n(t5, 0, 255);
                if (typeof t5 !== "number")
                  return t5.$shl();
                t3 = J.clamp$2$n(t3, 0, 255);
                if (typeof t3 !== "number")
                  return H.iae(t3);
                c = (t2 << 24 | t6 << 16 | t5 << 8 | t3) >>> 0;
              } else {
                t2 = C.JSInt_methods.clamp$2(255, 0, 255);
                t3 = J.getInterceptor$n(gray);
                t4 = t3.clamp$2(gray, 0, 255);
                if (typeof t4 !== "number")
                  return t4.$shl();
                t5 = t3.clamp$2(gray, 0, 255);
                if (typeof t5 !== "number")
                  return t5.$shl();
                t3 = t3.clamp$2(gray, 0, 255);
                if (typeof t3 !== "number")
                  return H.iae(t3);
                c = (t2 << 24 | t4 << 16 | t5 << 8 | t3) >>> 0;
              }
              t2 = this.image;
              t2.toString;
              if (px >= 0) {
                t3 = t2.width;
                if (typeof t3 !== "number")
                  return H.iae(t3);
                if (px < t3)
                  if (t1) {
                    t3 = t2.height;
                    if (typeof t3 !== "number")
                      return H.iae(t3);
                    t3 = py < t3;
                  } else
                    t3 = false;
                else
                  t3 = false;
              } else
                t3 = false;
              if (t3) {
                t3 = t2.data;
                t2 = t2.width;
                if (typeof t2 !== "number")
                  return H.iae(t2);
                t2 = py * t2 + px;
                if (t2 >>> 0 !== t2 || t2 >= t3.length)
                  return H.ioore(t3, t2);
                t3[t2] = c;
              }
              pi = pi0;
            } else if (J.$eq(this.samplesPerPixel, 2)) {
              t2 = bdata;
              pi0 = pi + 1;
              t3 = J.getInterceptor$x(t2);
              gray = J.$index$asx(t3.get$buffer(t2), J.$add$ns(t3.get$offset(t2), pi));
              t2 = bdata;
              pi = pi0 + 1;
              t3 = J.getInterceptor$x(t2);
              t2 = J.clamp$2$n(J.$index$asx(t3.get$buffer(t2), J.$add$ns(t3.get$offset(t2), pi0)), 0, 255);
              if (typeof t2 !== "number")
                return t2.$shl();
              t3 = J.getInterceptor$n(gray);
              t4 = t3.clamp$2(gray, 0, 255);
              if (typeof t4 !== "number")
                return t4.$shl();
              t5 = t3.clamp$2(gray, 0, 255);
              if (typeof t5 !== "number")
                return t5.$shl();
              t3 = t3.clamp$2(gray, 0, 255);
              if (typeof t3 !== "number")
                return H.iae(t3);
              t6 = this.image;
              t6.toString;
              if (px >= 0) {
                t7 = t6.width;
                if (typeof t7 !== "number")
                  return H.iae(t7);
                if (px < t7)
                  if (t1) {
                    t7 = t6.height;
                    if (typeof t7 !== "number")
                      return H.iae(t7);
                    t7 = py < t7;
                  } else
                    t7 = false;
                else
                  t7 = false;
              } else
                t7 = false;
              if (t7) {
                t7 = t6.data;
                t6 = t6.width;
                if (typeof t6 !== "number")
                  return H.iae(t6);
                t6 = py * t6 + px;
                if (t6 >>> 0 !== t6 || t6 >= t7.length)
                  return H.ioore(t7, t6);
                t7[t6] = (t2 << 24 | t4 << 16 | t5 << 8 | t3) >>> 0;
              }
            } else if (J.$eq(this.samplesPerPixel, 3)) {
              t2 = bdata;
              pi0 = pi + 1;
              t3 = J.getInterceptor$x(t2);
              t2 = J.$index$asx(t3.get$buffer(t2), J.$add$ns(t3.get$offset(t2), pi));
              t3 = bdata;
              pi = pi0 + 1;
              t4 = J.getInterceptor$x(t3);
              t3 = J.$index$asx(t4.get$buffer(t3), J.$add$ns(t4.get$offset(t3), pi0));
              t4 = bdata;
              pi0 = pi + 1;
              t5 = J.getInterceptor$x(t4);
              t4 = J.$index$asx(t5.get$buffer(t4), J.$add$ns(t5.get$offset(t4), pi));
              t5 = C.JSInt_methods.clamp$2(255, 0, 255);
              t4 = J.clamp$2$n(t4, 0, 255);
              if (typeof t4 !== "number")
                return t4.$shl();
              t3 = J.clamp$2$n(t3, 0, 255);
              if (typeof t3 !== "number")
                return t3.$shl();
              t2 = J.clamp$2$n(t2, 0, 255);
              if (typeof t2 !== "number")
                return H.iae(t2);
              t6 = this.image;
              t6.toString;
              if (px >= 0) {
                t7 = t6.width;
                if (typeof t7 !== "number")
                  return H.iae(t7);
                if (px < t7)
                  if (t1) {
                    t7 = t6.height;
                    if (typeof t7 !== "number")
                      return H.iae(t7);
                    t7 = py < t7;
                  } else
                    t7 = false;
                else
                  t7 = false;
              } else
                t7 = false;
              if (t7) {
                t7 = t6.data;
                t6 = t6.width;
                if (typeof t6 !== "number")
                  return H.iae(t6);
                t6 = py * t6 + px;
                if (t6 >>> 0 !== t6 || t6 >= t7.length)
                  return H.ioore(t7, t6);
                t7[t6] = (t5 << 24 | t4 << 16 | t3 << 8 | t2) >>> 0;
              }
              pi = pi0;
            } else if (J.$ge$n(this.samplesPerPixel, 4)) {
              t2 = bdata;
              pi0 = pi + 1;
              t3 = J.getInterceptor$x(t2);
              t2 = J.$index$asx(t3.get$buffer(t2), J.$add$ns(t3.get$offset(t2), pi));
              t3 = bdata;
              pi = pi0 + 1;
              t4 = J.getInterceptor$x(t3);
              t3 = J.$index$asx(t4.get$buffer(t3), J.$add$ns(t4.get$offset(t3), pi0));
              t4 = bdata;
              pi0 = pi + 1;
              t5 = J.getInterceptor$x(t4);
              t4 = J.$index$asx(t5.get$buffer(t4), J.$add$ns(t5.get$offset(t4), pi));
              t5 = bdata;
              pi = pi0 + 1;
              t6 = J.getInterceptor$x(t5);
              t5 = J.clamp$2$n(J.$index$asx(t6.get$buffer(t5), J.$add$ns(t6.get$offset(t5), pi0)), 0, 255);
              if (typeof t5 !== "number")
                return t5.$shl();
              t4 = J.clamp$2$n(t4, 0, 255);
              if (typeof t4 !== "number")
                return t4.$shl();
              t3 = J.clamp$2$n(t3, 0, 255);
              if (typeof t3 !== "number")
                return t3.$shl();
              t2 = J.clamp$2$n(t2, 0, 255);
              if (typeof t2 !== "number")
                return H.iae(t2);
              t6 = this.image;
              t6.toString;
              if (px >= 0) {
                t7 = t6.width;
                if (typeof t7 !== "number")
                  return H.iae(t7);
                if (px < t7)
                  if (t1) {
                    t7 = t6.height;
                    if (typeof t7 !== "number")
                      return H.iae(t7);
                    t7 = py < t7;
                  } else
                    t7 = false;
                else
                  t7 = false;
              } else
                t7 = false;
              if (t7) {
                t7 = t6.data;
                t6 = t6.width;
                if (typeof t6 !== "number")
                  return H.iae(t6);
                t6 = py * t6 + px;
                if (t6 >>> 0 !== t6 || t6 >= t7.length)
                  return H.ioore(t7, t6);
                t7[t6] = (t5 << 24 | t4 << 16 | t3 << 8 | t2) >>> 0;
              }
            }
            ++x;
            ++px;
          }
          ++y;
          ++py;
        }
      } else
        throw H.wrapException(U.ImageException$("Unsupported bitsPerSample: " + H.S(this.bitsPerSample)));
    },
    _jpegToImage$6: function(jpeg, image, outX, outY, tileWidth, tileHeight) {
      var data, t1, i, y, t2, t3, x, i0, $Y, t4, t5, t6, t7, t8, t9, t10, $R, $G, $B, $C, $M, $K;
      data = jpeg.getData$2(tileWidth, tileHeight);
      switch (jpeg.components.length) {
        case 1:
          if (typeof tileHeight !== "number")
            return H.iae(tileHeight);
          t1 = data.length;
          i = 0;
          y = 0;
          for (; y < tileHeight; ++y) {
            if (typeof tileWidth !== "number")
              return H.iae(tileWidth);
            t2 = y + outY;
            t3 = t2 >= 0;
            x = 0;
            for (; x < tileWidth; ++x, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(data, i);
              $Y = data[i];
              t4 = x + outX;
              t5 = C.JSInt_methods.clamp$2(255, 0, 255);
              t6 = C.JSInt_methods.clamp$2($Y, 0, 255);
              t7 = C.JSInt_methods.clamp$2($Y, 0, 255);
              t8 = C.JSInt_methods.clamp$2($Y, 0, 255);
              image.toString;
              if (t4 >= 0) {
                t9 = image.width;
                if (typeof t9 !== "number")
                  return H.iae(t9);
                if (t4 < t9)
                  if (t3) {
                    t9 = image.height;
                    if (typeof t9 !== "number")
                      return H.iae(t9);
                    t9 = t2 < t9;
                  } else
                    t9 = false;
                else
                  t9 = false;
              } else
                t9 = false;
              if (t9) {
                t9 = image.data;
                t10 = image.width;
                if (typeof t10 !== "number")
                  return H.iae(t10);
                t4 = t2 * t10 + t4;
                if (t4 >>> 0 !== t4 || t4 >= t9.length)
                  return H.ioore(t9, t4);
                t9[t4] = (t5 << 24 | t6 << 16 | t7 << 8 | t8) >>> 0;
              }
            }
          }
          break;
        case 3:
          if (typeof tileHeight !== "number")
            return H.iae(tileHeight);
          t1 = data.length;
          i = 0;
          y = 0;
          for (; y < tileHeight; ++y) {
            if (typeof tileWidth !== "number")
              return H.iae(tileWidth);
            t2 = y + outY;
            t3 = t2 >= 0;
            x = 0;
            for (; x < tileWidth; ++x, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(data, i);
              $R = data[i];
              i = i0 + 1;
              if (i0 < 0 || i0 >= t1)
                return H.ioore(data, i0);
              $G = data[i0];
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(data, i);
              $B = data[i];
              t4 = C.JSInt_methods.clamp$2(255, 0, 255);
              t5 = C.JSInt_methods.clamp$2($B, 0, 255);
              t6 = C.JSInt_methods.clamp$2($G, 0, 255);
              t7 = C.JSInt_methods.clamp$2($R, 0, 255);
              t8 = x + outX;
              image.toString;
              if (t8 >= 0) {
                t9 = image.width;
                if (typeof t9 !== "number")
                  return H.iae(t9);
                if (t8 < t9)
                  if (t3) {
                    t9 = image.height;
                    if (typeof t9 !== "number")
                      return H.iae(t9);
                    t9 = t2 < t9;
                  } else
                    t9 = false;
                else
                  t9 = false;
              } else
                t9 = false;
              if (t9) {
                t9 = image.data;
                t10 = image.width;
                if (typeof t10 !== "number")
                  return H.iae(t10);
                t8 = t2 * t10 + t8;
                if (t8 >>> 0 !== t8 || t8 >= t9.length)
                  return H.ioore(t9, t8);
                t9[t8] = (t4 << 24 | t5 << 16 | t6 << 8 | t7) >>> 0;
              }
            }
          }
          break;
        case 4:
          if (typeof tileHeight !== "number")
            return H.iae(tileHeight);
          t1 = data.length;
          i = 0;
          y = 0;
          for (; y < tileHeight; ++y) {
            if (typeof tileWidth !== "number")
              return H.iae(tileWidth);
            t2 = y + outY;
            t3 = t2 >= 0;
            x = 0;
            for (; x < tileWidth; ++x) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(data, i);
              $C = data[i];
              i = i0 + 1;
              if (i0 < 0 || i0 >= t1)
                return H.ioore(data, i0);
              $M = data[i0];
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(data, i);
              $Y = data[i];
              i = i0 + 1;
              if (i0 < 0 || i0 >= t1)
                return H.ioore(data, i0);
              $K = data[i0];
              t4 = 1 - ($K / 255 | 0);
              t5 = $C * t4 + $K;
              if (t5 < 0)
                t5 = 0;
              else if (t5 > 255)
                t5 = 255;
              t6 = $M * t4 + $K;
              if (t6 < 0)
                t6 = 0;
              else if (t6 > 255)
                t6 = 255;
              t4 = $Y * t4 + $K;
              if (t4 < 0)
                t4 = 0;
              else if (t4 > 255)
                t4 = 255;
              t7 = x + outX;
              t8 = C.JSInt_methods.clamp$2(255, 0, 255);
              t4 = C.JSInt_methods.clamp$2(255 - t4, 0, 255);
              t6 = C.JSInt_methods.clamp$2(255 - t6, 0, 255);
              t5 = C.JSInt_methods.clamp$2(255 - t5, 0, 255);
              image.toString;
              if (t7 >= 0) {
                t9 = image.width;
                if (typeof t9 !== "number")
                  return H.iae(t9);
                if (t7 < t9)
                  if (t3) {
                    t9 = image.height;
                    if (typeof t9 !== "number")
                      return H.iae(t9);
                    t9 = t2 < t9;
                  } else
                    t9 = false;
                else
                  t9 = false;
              } else
                t9 = false;
              if (t9) {
                t9 = image.data;
                t10 = image.width;
                if (typeof t10 !== "number")
                  return H.iae(t10);
                t7 = t2 * t10 + t7;
                if (t7 >>> 0 !== t7 || t7 >= t9.length)
                  return H.ioore(t9, t7);
                t9[t7] = (t8 << 24 | t4 << 16 | t6 << 8 | t5) >>> 0;
              }
            }
          }
          break;
        default:
          throw H.wrapException("Unsupported color mode");
      }
    },
    _decodeBilevelTile$3: function(p, tileX, tileY) {
      var bdata, t1, tileIndex, outX, outY, byteCount, t2, bytesInThisTile, j, count, i, t3, t4, t5, t6, t7, t8, exception, br, white, black, py, y, px, x;
      t1 = this.tilesX;
      if (typeof t1 !== "number")
        return H.iae(t1);
      tileIndex = tileY * t1 + tileX;
      t1 = this.tileOffsets;
      if (tileIndex >>> 0 !== tileIndex || tileIndex >= t1.length)
        return H.ioore(t1, tileIndex);
      J.set$offset$x(p, t1[tileIndex]);
      t1 = this.tileWidth;
      if (typeof t1 !== "number")
        return H.iae(t1);
      outX = tileX * t1;
      t1 = this.tileHeight;
      if (typeof t1 !== "number")
        return H.iae(t1);
      outY = tileY * t1;
      t1 = this.tileByteCounts;
      if (tileIndex >= t1.length)
        return H.ioore(t1, tileIndex);
      byteCount = t1[tileIndex];
      bdata = null;
      if (J.$eq(this.compression, 32773)) {
        t1 = J.$mod$n(this.tileWidth, 8);
        t2 = this.tileWidth;
        bytesInThisTile = t1 === 0 ? J.$mul$ns(J.$tdiv$n(t2, 8), this.tileHeight) : J.$mul$ns(J.$add$ns(J.$tdiv$n(t2, 8), 1), this.tileHeight);
        t1 = J.$mul$ns(this.tileWidth, this.tileHeight);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        bdata = U.InputBuffer$(new Uint8Array(t1), false, null, 0);
        this._decodePackbits$3(p, bytesInThisTile, J.get$buffer$x(bdata));
      } else if (J.$eq(this.compression, 5)) {
        t1 = J.$mul$ns(this.tileWidth, this.tileHeight);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        bdata = U.InputBuffer$(new Uint8Array(t1), false, null, 0);
        new U.LzwDecoder(9, 0, 0, 0, 0, null, null, null, null, new Uint8Array(4096), null, null, null, null).decode$2(U.InputBuffer$from(p, byteCount, 0), J.get$buffer$x(bdata));
        if (J.$eq(this.predictor, 2)) {
          j = 0;
          while (true) {
            t1 = this.height;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(j < t1))
              break;
            t1 = this.samplesPerPixel;
            t2 = this.width;
            if (typeof t2 !== "number")
              return H.iae(t2);
            count = J.$mul$ns(t1, j * t2 + 1);
            for (i = this.samplesPerPixel; t1 = J.getInterceptor$n(i), t1.$lt(i, J.$mul$ns(this.width, this.samplesPerPixel)); i = t1.$add(i, 1)) {
              t2 = bdata;
              t3 = J.getInterceptor$x(t2);
              t4 = J.$index$asx(t3.get$buffer(t2), J.$add$ns(t3.get$offset(t2), count));
              t5 = bdata;
              t6 = J.getInterceptor$n(count);
              t7 = t6.$sub(count, this.samplesPerPixel);
              t8 = J.getInterceptor$x(t5);
              t7 = J.$add$ns(t4, J.$index$asx(t8.get$buffer(t5), J.$add$ns(t8.get$offset(t5), t7)));
              J.$indexSet$ax(t3.get$buffer(t2), J.$add$ns(t3.get$offset(t2), count), t7);
              count = t6.$add(count, 1);
            }
            ++j;
          }
        }
      } else if (J.$eq(this.compression, 2)) {
        t1 = J.$mul$ns(this.tileWidth, this.tileHeight);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        bdata = U.InputBuffer$(new Uint8Array(t1), false, null, 0);
        try {
          U.TiffFaxDecoder$(this.fillOrder, this.tileWidth, this.tileHeight).decode1D$4(bdata, p, 0, this.tileHeight);
        } catch (exception) {
          H.unwrapException(exception);
        }

      } else if (J.$eq(this.compression, 3)) {
        t1 = J.$mul$ns(this.tileWidth, this.tileHeight);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        bdata = U.InputBuffer$(new Uint8Array(t1), false, null, 0);
        try {
          U.TiffFaxDecoder$(this.fillOrder, this.tileWidth, this.tileHeight).decode2D$5(bdata, p, 0, this.tileHeight, this.t4Options);
        } catch (exception) {
          H.unwrapException(exception);
        }

      } else if (J.$eq(this.compression, 4)) {
        t1 = J.$mul$ns(this.tileWidth, this.tileHeight);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        bdata = U.InputBuffer$(new Uint8Array(t1), false, null, 0);
        try {
          U.TiffFaxDecoder$(this.fillOrder, this.tileWidth, this.tileHeight).decodeT6$5(bdata, p, 0, this.tileHeight, this.t6Options);
        } catch (exception) {
          H.unwrapException(exception);
        }

      } else if (J.$eq(this.compression, 8))
        bdata = U.InputBuffer$(new T.ZLibDecoder().decodeBuffer$2$verify(T.InputStream$(J.toList$2$ax(p, 0, byteCount), 1, null, 0), true), false, null, 0);
      else if (J.$eq(this.compression, 32946)) {
        t1 = T.Inflate$(J.toList$2$ax(p, 0, byteCount), null).output;
        bdata = U.InputBuffer$(H.NativeUint8List_NativeUint8List$view(t1._archive$_buffer.buffer, 0, t1.length), false, null, 0);
      } else if (J.$eq(this.compression, 1))
        bdata = p;
      else
        throw H.wrapException(U.ImageException$("Unsupported Compression Type: " + H.S(this.compression)));
      if (bdata == null)
        return;
      br = new U.TiffBitReader(bdata, 0, 0);
      t1 = this.isWhiteZero;
      white = t1 ? 4278190080 : 4294967295;
      black = t1 ? 4294967295 : 4278190080;
      py = outY;
      y = 0;
      while (true) {
        t1 = this.tileHeight;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(y < t1))
          break;
        t1 = py >= 0;
        px = outX;
        x = 0;
        while (true) {
          t2 = this.tileWidth;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(x < t2))
            break;
          t2 = br.readBits$1(1);
          t3 = this.image;
          if (t2 === 0) {
            t3.toString;
            if (px >= 0) {
              t2 = t3.width;
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (px < t2)
                if (t1) {
                  t2 = t3.height;
                  if (typeof t2 !== "number")
                    return H.iae(t2);
                  t2 = py < t2;
                } else
                  t2 = false;
              else
                t2 = false;
            } else
              t2 = false;
            if (t2) {
              t2 = t3.data;
              t3 = t3.width;
              if (typeof t3 !== "number")
                return H.iae(t3);
              t3 = py * t3 + px;
              if (t3 >>> 0 !== t3 || t3 >= t2.length)
                return H.ioore(t2, t3);
              t2[t3] = black;
            }
          } else {
            t3.toString;
            if (px >= 0) {
              t2 = t3.width;
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (px < t2)
                if (t1) {
                  t2 = t3.height;
                  if (typeof t2 !== "number")
                    return H.iae(t2);
                  t2 = py < t2;
                } else
                  t2 = false;
              else
                t2 = false;
            } else
              t2 = false;
            if (t2) {
              t2 = t3.data;
              t3 = t3.width;
              if (typeof t3 !== "number")
                return H.iae(t3);
              t3 = py * t3 + px;
              if (t3 >>> 0 !== t3 || t3 >= t2.length)
                return H.ioore(t2, t3);
              t2[t3] = white;
            }
          }
          ++x;
          ++px;
        }
        br._bitPos = 0;
        ++y;
        ++py;
      }
    },
    _decodePackbits$3: function(data, arraySize, dst) {
      var t1, srcCount, dstCount, srcCount0, t2, b, i, dstCount0, repeat;
      if (typeof arraySize !== "number")
        return H.iae(arraySize);
      t1 = J.getInterceptor$ax(dst);
      srcCount = 0;
      dstCount = 0;
      for (; dstCount < arraySize;) {
        srcCount0 = srcCount + 1;
        t2 = J.$index$asx(data.buffer, J.$add$ns(data.offset, srcCount));
        $.get$__uint8()[0] = t2;
        t2 = $.get$__uint8ToInt8();
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        b = t2[0];
        if (b >= 0 && b <= 127)
          for (t2 = b + 1, srcCount = srcCount0, i = 0; i < t2; ++i, dstCount = dstCount0, srcCount = srcCount0) {
            dstCount0 = dstCount + 1;
            srcCount0 = srcCount + 1;
            t1.$indexSet(dst, dstCount, J.$index$asx(data.buffer, J.$add$ns(data.offset, srcCount)));
          }
        else {
          t2 = b <= -1 && b >= -127;
          srcCount = srcCount0 + 1;
          if (t2) {
            repeat = J.$index$asx(data.buffer, J.$add$ns(data.offset, srcCount0));
            for (t2 = -b + 1, i = 0; i < t2; ++i, dstCount = dstCount0) {
              dstCount0 = dstCount + 1;
              t1.$indexSet(dst, dstCount, repeat);
            }
          }
        }
      }
    },
    _readTag$3: function(p, type, defaultValue) {
      var t1 = this.tags;
      if (!t1.containsKey$1(type))
        return defaultValue;
      t1 = t1.$index(0, type);
      p.offset = t1.valueOffset;
      return t1._readValue$1(p);
    },
    _readTag$2: function(p, type) {
      return this._readTag$3(p, type, 0);
    },
    _readTagList$2: function(p, type) {
      var t1 = this.tags;
      if (!t1.containsKey$1(type))
        return;
      return t1.$index(0, type).readValues$1(p);
    },
    TiffImage$1: function(p) {
      var p3, numDirEntries, t1, i, tag, type, numValues, entry, t2, palette, len, t3, l, v, t0;
      p3 = U.InputBuffer$from(p, null, 0);
      numDirEntries = p.readUint16$0();
      for (t1 = this.tags, i = 0; i < numDirEntries; ++i) {
        tag = p.readUint16$0();
        type = p.readUint16$0();
        numValues = p.readUint32$0();
        entry = new U.TiffEntry(tag, type, numValues, null);
        if (type < 13 && type > 0) {
          if (type >= 14)
            return H.ioore(C.List_yYQ, type);
          t2 = C.List_yYQ[type];
        } else
          t2 = 0;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (numValues * t2 > 4)
          entry.valueOffset = p.readUint32$0();
        else {
          t2 = p.offset;
          entry.valueOffset = t2;
          p.offset = J.$add$ns(t2, 4);
        }
        t1.$indexSet(0, tag, entry);
        if (tag === 256) {
          p3.offset = entry.valueOffset;
          this.width = entry._readValue$1(p3);
        } else if (tag === 257) {
          p3.offset = entry.valueOffset;
          this.height = entry._readValue$1(p3);
        } else if (tag === 262) {
          p3.offset = entry.valueOffset;
          this.photometricType = entry._readValue$1(p3);
        } else if (tag === 259) {
          p3.offset = entry.valueOffset;
          this.compression = entry._readValue$1(p3);
        } else if (tag === 258) {
          p3.offset = entry.valueOffset;
          this.bitsPerSample = entry._readValue$1(p3);
        } else if (tag === 277) {
          p3.offset = entry.valueOffset;
          this.samplesPerPixel = entry._readValue$1(p3);
        } else if (tag === 317) {
          p3.offset = entry.valueOffset;
          this.predictor = entry._readValue$1(p3);
        } else if (tag === 320) {
          palette = entry.readValues$1(p3);
          this.colorMap = palette;
          this.colorMapRed = 0;
          t2 = C.JSInt_methods._tdivFast$1(palette.length, 3);
          this.colorMapGreen = t2;
          this.colorMapBlue = t2 * 2;
        }
      }
      if (this.width == null || this.height == null || this.bitsPerSample == null || this.compression == null)
        return;
      if (this.colorMap != null && J.$eq(this.bitsPerSample, 8))
        for (t2 = this.colorMap, len = t2.length, i = 0; i < len; ++i) {
          t3 = t2[i];
          if (typeof t3 !== "number")
            return t3.$shr();
          t2[i] = C.JSNumber_methods._shrOtherPositive$1(t3, 8);
        }
      if (J.$eq(this.photometricType, 0))
        this.isWhiteZero = true;
      if (t1.containsKey$1(324)) {
        this.tiled = true;
        this.tileWidth = this._readTag$2(p3, 322);
        this.tileHeight = this._readTag$2(p3, 323);
        this.tileOffsets = this._readTagList$2(p3, 324);
        this.tileByteCounts = this._readTagList$2(p3, 325);
      } else {
        this.tiled = false;
        this.tileWidth = this._readTag$3(p3, 322, this.width);
        if (!t1.containsKey$1(278))
          this.tileHeight = this._readTag$3(p3, 323, this.height);
        else {
          l = this._readTag$2(p3, 278);
          if (J.$eq(l, -1))
            this.tileHeight = this.height;
          else
            this.tileHeight = l;
        }
        this.tileOffsets = this._readTagList$2(p3, 273);
        this.tileByteCounts = this._readTagList$2(p3, 279);
      }
      this.tilesX = J.$tdiv$n(J.$sub$n(J.$add$ns(this.width, this.tileWidth), 1), this.tileWidth);
      this.tilesY = J.$tdiv$n(J.$sub$n(J.$add$ns(this.height, this.tileHeight), 1), this.tileHeight);
      this.tileSize = J.$mul$ns(J.$mul$ns(this.tileWidth, this.tileHeight), this.samplesPerPixel);
      this.fillOrder = this._readTag$3(p3, 266, 1);
      this.t4Options = this._readTag$3(p3, 292, 0);
      this.t6Options = this._readTag$3(p3, 293, 0);
      this.extraSamples = this._readTag$3(p3, 338, 0);
      switch (this.photometricType) {
        case 0:
        case 1:
          if (J.$eq(this.bitsPerSample, 1) && J.$eq(this.samplesPerPixel, 1))
            this.imageType = 0;
          else if (J.$eq(this.bitsPerSample, 4) && J.$eq(this.samplesPerPixel, 1))
            this.imageType = 1;
          else if (J.$mod$n(this.bitsPerSample, 8) === 0)
            if (J.$eq(this.samplesPerPixel, 1))
              this.imageType = 2;
            else if (J.$eq(this.samplesPerPixel, 2))
              this.imageType = 3;
            else
              this.imageType = 8;
          break;
        case 2:
          if (J.$mod$n(this.bitsPerSample, 8) === 0)
            if (J.$eq(this.samplesPerPixel, 3))
              this.imageType = 5;
            else if (J.$eq(this.samplesPerPixel, 4))
              this.imageType = 6;
            else
              this.imageType = 8;
          break;
        case 3:
          if (J.$eq(this.samplesPerPixel, 1))
            t1 = J.$eq(this.bitsPerSample, 4) || J.$eq(this.bitsPerSample, 8) || J.$eq(this.bitsPerSample, 16);
          else
            t1 = false;
          if (t1)
            this.imageType = 4;
          break;
        case 4:
          if (J.$eq(this.bitsPerSample, 1) && J.$eq(this.samplesPerPixel, 1))
            this.imageType = 0;
          break;
        case 6:
          if (J.$eq(this.compression, 7) && J.$eq(this.bitsPerSample, 8) && J.$eq(this.samplesPerPixel, 3))
            this.imageType = 5;
          else {
            if (t1.containsKey$1(530)) {
              v = t1.$index(0, 530).readValues$1(p3);
              t1 = v.length;
              if (0 >= t1)
                return H.ioore(v, 0);
              t2 = v[0];
              this.chromaSubH = t2;
              if (1 >= t1)
                return H.ioore(v, 1);
              t1 = v[1];
              this.chromaSubV = t1;
              t0 = t2;
              t2 = t1;
              t1 = t0;
            } else {
              this.chromaSubH = 2;
              this.chromaSubV = 2;
              t1 = 2;
              t2 = 2;
            }
            if (J.$eq(J.$mul$ns(t1, t2), 1))
              this.imageType = 8;
            else if (J.$eq(this.bitsPerSample, 8) && J.$eq(this.samplesPerPixel, 3))
              this.imageType = 7;
          }
          break;
        default:
          if (J.$mod$n(this.bitsPerSample, 8) === 0)
            this.imageType = 8;
          break;
      }
    },
    static: {"^": "TiffImage_COMPRESSION_NONE,TiffImage_COMPRESSION_CCITT_RLE,TiffImage_COMPRESSION_CCITT_FAX3,TiffImage_COMPRESSION_CCITT_FAX4,TiffImage_COMPRESSION_LZW,TiffImage_COMPRESSION_OLD_JPEG,TiffImage_COMPRESSION_JPEG,TiffImage_COMPRESSION_NEXT,TiffImage_COMPRESSION_CCITT_RLEW,TiffImage_COMPRESSION_PACKBITS,TiffImage_COMPRESSION_THUNDERSCAN,TiffImage_COMPRESSION_IT8CTPAD,TiffImage_COMPRESSION_IT8LW,TiffImage_COMPRESSION_IT8MP,TiffImage_COMPRESSION_IT8BL,TiffImage_COMPRESSION_PIXARFILM,TiffImage_COMPRESSION_PIXARLOG,TiffImage_COMPRESSION_DEFLATE,TiffImage_COMPRESSION_ZIP,TiffImage_COMPRESSION_DCS,TiffImage_COMPRESSION_JBIG,TiffImage_COMPRESSION_SGILOG,TiffImage_COMPRESSION_SGILOG24,TiffImage_COMPRESSION_JP2000,TiffImage_TYPE_UNSUPPORTED,TiffImage_TYPE_BILEVEL,TiffImage_TYPE_GRAY_4BIT,TiffImage_TYPE_GRAY,TiffImage_TYPE_GRAY_ALPHA,TiffImage_TYPE_PALETTE,TiffImage_TYPE_RGB,TiffImage_TYPE_RGB_ALPHA,TiffImage_TYPE_YCBCR_SUB,TiffImage_TYPE_GENERIC,TiffImage_TAG_ARTIST,TiffImage_TAG_BITS_PER_SAMPLE,TiffImage_TAG_CELL_LENGTH,TiffImage_TAG_CELL_WIDTH,TiffImage_TAG_COLOR_MAP,TiffImage_TAG_COMPRESSION,TiffImage_TAG_DATE_TIME,TiffImage_TAG_EXIF_IFD,TiffImage_TAG_EXTRA_SAMPLES,TiffImage_TAG_FILL_ORDER,TiffImage_TAG_FREE_BYTE_COUNTS,TiffImage_TAG_FREE_OFFSETS,TiffImage_TAG_GRAY_RESPONSE_CURVE,TiffImage_TAG_GRAY_RESPONSE_UNIT,TiffImage_TAG_HOST_COMPUTER,TiffImage_TAG_ICC_PROFILE,TiffImage_TAG_IMAGE_DESCRIPTION,TiffImage_TAG_IMAGE_LENGTH,TiffImage_TAG_IMAGE_WIDTH,TiffImage_TAG_IPTC,TiffImage_TAG_MAKE,TiffImage_TAG_MAX_SAMPLE_VALUE,TiffImage_TAG_MIN_SAMPLE_VALUE,TiffImage_TAG_MODEL,TiffImage_TAG_NEW_SUBFILE_TYPE,TiffImage_TAG_ORIENTATION,TiffImage_TAG_PHOTOMETRIC_INTERPRETATION,TiffImage_TAG_PHOTOSHOP,TiffImage_TAG_PLANAR_CONFIGURATION,TiffImage_TAG_PREDICTOR,TiffImage_TAG_RESOLUTION_UNIT,TiffImage_TAG_ROWS_PER_STRIP,TiffImage_TAG_SAMPLES_PER_PIXEL,TiffImage_TAG_SOFTWARE,TiffImage_TAG_STRIP_BYTE_COUNTS,TiffImage_TAG_STRIP_OFFSETS,TiffImage_TAG_SUBFILE_TYPE,TiffImage_TAG_T4_OPTIONS,TiffImage_TAG_T6_OPTIONS,TiffImage_TAG_THRESHOLDING,TiffImage_TAG_TILE_WIDTH,TiffImage_TAG_TILE_LENGTH,TiffImage_TAG_TILE_OFFSETS,TiffImage_TAG_TILE_BYTE_COUNTS,TiffImage_TAG_XMP,TiffImage_TAG_X_RESOLUTION,TiffImage_TAG_Y_RESOLUTION,TiffImage_TAG_YCBCR_COEFFICIENTS,TiffImage_TAG_YCBCR_SUBSAMPLING,TiffImage_TAG_YCBCR_POSITIONING,TiffImage_TAG_NAME", TiffImage$: function(p) {
        var t1 = new U.TiffImage(P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, null, null, 1, 1, 1, -1, false, 1, null, null, false, null, null, null, null, null, null, null, 1, 0, 0, null, null, null, null, null, null);
        t1.TiffImage$1(p);
        return t1;
      }}
  },
  TiffInfo: {
    "^": "DecodeInfo;bigEndian,signature,ifdOffset,images,width,height,backgroundColor"
  },
  LzwDecoder: {
    "^": "Object;_bitsToGet,_bytePointer,_bitPointer,_nextData,_nextBits,_data,_dataLength,_out,_outPointer,_image$_buffer,_image$_table,_prefix,_tableIndex,_bufferLength",
    decode$2: function(p, out) {
      var outLen, t1, code, oldCode, num, t2, i, t3, t4;
      this._out = out;
      outLen = J.get$length$asx(out);
      this._outPointer = 0;
      t1 = p.buffer;
      this._data = t1;
      this._dataLength = J.get$length$asx(t1);
      this._bytePointer = p.offset;
      if (J.$eq(J.$index$asx(this._data, 0), 0) && J.$eq(J.$index$asx(this._data, 1), 1))
        throw H.wrapException(U.ImageException$("Invalid LZW Data"));
      this._initializeStringTable$0();
      this._bitPointer = 0;
      this._nextData = 0;
      this._nextBits = 0;
      code = this._getNextCode$0();
      oldCode = 0;
      num = 0;
      while (true) {
        if (code !== 257) {
          t1 = this._outPointer;
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof outLen !== "number")
            return H.iae(outLen);
          t1 = t1 < outLen;
        } else
          t1 = false;
        if (!t1)
          break;
        if (code === 256) {
          this._initializeStringTable$0();
          ++num;
          code = this._getNextCode$0();
          this._bufferLength = 0;
          if (code === 257)
            break;
          t1 = this._out;
          t2 = this._outPointer;
          if (typeof t2 !== "number")
            return t2.$add();
          this._outPointer = t2 + 1;
          J.$indexSet$ax(t1, t2, code);
          oldCode = code;
        } else {
          t1 = this._tableIndex;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (code < t1) {
            this._getString$1(code);
            t1 = this._bufferLength;
            if (typeof t1 !== "number")
              return t1.$sub();
            i = t1 - 1;
            for (; i >= 0; --i) {
              t1 = this._out;
              t2 = this._outPointer;
              if (typeof t2 !== "number")
                return t2.$add();
              this._outPointer = t2 + 1;
              t3 = this._image$_buffer;
              if (i >= 4096)
                return H.ioore(t3, i);
              J.$indexSet$ax(t1, t2, t3[i]);
            }
            t1 = this._image$_buffer;
            t2 = this._bufferLength;
            if (typeof t2 !== "number")
              return t2.$sub();
            --t2;
            if (t2 < 0 || t2 >= 4096)
              return H.ioore(t1, t2);
            this._addString$2(oldCode, t1[t2]);
          } else {
            this._getString$1(oldCode);
            t1 = this._bufferLength;
            if (typeof t1 !== "number")
              return t1.$sub();
            i = t1 - 1;
            for (; t1 = this._out, t2 = this._outPointer, i >= 0; --i) {
              if (typeof t2 !== "number")
                return t2.$add();
              this._outPointer = t2 + 1;
              t3 = this._image$_buffer;
              if (i >= 4096)
                return H.ioore(t3, i);
              J.$indexSet$ax(t1, t2, t3[i]);
            }
            if (typeof t2 !== "number")
              return t2.$add();
            this._outPointer = t2 + 1;
            t3 = this._image$_buffer;
            t4 = this._bufferLength;
            if (typeof t4 !== "number")
              return t4.$sub();
            --t4;
            if (t4 < 0 || t4 >= 4096)
              return H.ioore(t3, t4);
            J.$indexSet$ax(t1, t2, t3[t4]);
            t4 = this._image$_buffer;
            t3 = this._bufferLength;
            if (typeof t3 !== "number")
              return t3.$sub();
            --t3;
            if (t3 < 0 || t3 >= 4096)
              return H.ioore(t4, t3);
            this._addString$2(oldCode, t4[t3]);
          }
          oldCode = code;
        }
        ++num;
        code = this._getNextCode$0();
      }
    },
    _addString$2: function(string, newString) {
      var t1, t2;
      t1 = this._image$_table;
      t2 = this._tableIndex;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = newString;
      t1 = this._prefix;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = string;
      ++t2;
      this._tableIndex = t2;
      if (t2 === 511)
        this._bitsToGet = 10;
      else if (t2 === 1023)
        this._bitsToGet = 11;
      else if (t2 === 2047)
        this._bitsToGet = 12;
    },
    _getString$1: function(code) {
      var t1, t2, t3, c, t4, t5, t6;
      this._bufferLength = 0;
      t1 = this._image$_buffer;
      this._bufferLength = 1;
      t2 = this._image$_table;
      if (code >= t2.length)
        return H.ioore(t2, code);
      t1[0] = t2[code];
      t3 = this._prefix;
      if (code >= t3.length)
        return H.ioore(t3, code);
      c = t3[code];
      for (t4 = t3, t3 = t2, t2 = t1, t1 = 1; c !== 4098; t1 = t5) {
        t5 = t1 + 1;
        this._bufferLength = t5;
        if (c < 0 || c >= t3.length)
          return H.ioore(t3, c);
        t6 = t3[c];
        if (t1 >= 4096)
          return H.ioore(t2, t1);
        t2[t1] = t6;
        if (c >= t4.length)
          return H.ioore(t4, c);
        c = t4[c];
      }
    },
    _getNextCode$0: function() {
      var t1, t2, t3;
      if (J.$ge$n(this._bytePointer, this._dataLength))
        return 257;
      for (; t1 = this._nextBits, t2 = this._bitsToGet, t1 < t2;) {
        if (J.$ge$n(this._bytePointer, this._dataLength))
          return 257;
        t1 = this._nextData;
        t2 = this._data;
        t3 = this._bytePointer;
        this._bytePointer = J.$add$ns(t3, 1);
        t3 = J.$index$asx(t2, t3);
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._nextData = ((t1 << 8 >>> 0) + t3 & 4294967295) >>> 0;
        this._nextBits += 8;
      }
      t1 -= t2;
      this._nextBits = t1;
      t1 = C.JSInt_methods._shrReceiverPositive$1(this._nextData, t1);
      t2 -= 9;
      if (t2 < 0 || t2 >= 4)
        return H.ioore(C.List_511_1023_2047_4095, t2);
      t2 = C.List_511_1023_2047_4095[t2];
      if (typeof t2 !== "number")
        return H.iae(t2);
      return (t1 & t2) >>> 0;
    },
    _initializeStringTable$0: function() {
      var t1, i;
      this._image$_table = new Uint8Array(4096);
      t1 = new Uint32Array(4096);
      this._prefix = t1;
      C.NativeUint32List_methods.fillRange$3(t1, 0, 4096, 4098);
      for (t1 = this._image$_table, i = 0; i < 256; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = i;
      }
      this._bitsToGet = 9;
      this._tableIndex = 258;
    },
    static: {"^": "LzwDecoder_LZ_MAX_CODE,LzwDecoder_NO_SUCH_CODE,LzwDecoder_AND_TABLE"}
  },
  TiffDecoder: {
    "^": "Decoder;info,_input,progressCallback",
    startDecode$1: function(bytes) {
      var t1 = U.InputBuffer$(new Uint8Array(H._ensureNativeList(bytes)), false, null, 0);
      this._input = t1;
      t1 = this._readHeader$1(t1);
      this.info = t1;
      return t1;
    },
    decodeFrame$1: function(frame) {
      var t1 = this.info;
      if (t1 == null)
        return;
      t1 = t1.images;
      if (frame >= t1.length)
        return H.ioore(t1, frame);
      return t1[frame].decode$1(this._input);
    },
    _readHeader$1: function(p) {
      var p2, img, t1, info, byteOrder, t2, offset, t3, exception;
      t1 = [];
      info = new U.TiffInfo(null, null, null, t1, 0, 0, 4294967295);
      byteOrder = p.readUint16$0();
      if (byteOrder !== 18761 && byteOrder !== 19789)
        return;
      if (byteOrder === 19789) {
        p.bigEndian = true;
        info.bigEndian = true;
      } else {
        p.bigEndian = false;
        info.bigEndian = false;
      }
      t2 = p.readUint16$0();
      info.signature = t2;
      if (t2 !== 42)
        return;
      offset = p.readUint32$0();
      info.ifdOffset = offset;
      p2 = U.InputBuffer$from(p, null, 0);
      J.set$offset$x(p2, offset);
      for (; offset !== 0;) {
        img = null;
        try {
          img = U.TiffImage$(p2);
          t2 = img;
          t3 = J.getInterceptor$x(t2);
          if (!(t3.get$width(t2) != null && t3.get$height(t2) != null && t2.get$samplesPerPixel() != null && t2.get$bitsPerSample() != null && t2.compression != null))
            break;
        } catch (exception) {
          H.unwrapException(exception);
          break;
        }

        t1.push(img);
        t2 = t1.length;
        if (t2 === 1) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          info.width = J.get$width$x(t1[0]);
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          info.height = J.get$height$x(t1[0]);
        }
        offset = p2.readUint32$0();
        if (offset !== 0)
          J.set$offset$x(p2, offset);
      }
      return t1.length > 0 ? info : null;
    },
    static: {"^": "TiffDecoder_TIFF_SIGNATURE,TiffDecoder_TIFF_LITTLE_ENDIAN,TiffDecoder_TIFF_BIG_ENDIAN"}
  },
  VP8: {
    "^": "Object;input,webp,br,output,_dsp,_frameHeader,_picHeader,_filterHeader,_segmentHeader,_cropLeft,_cropRight,_cropTop,_cropBottom,_mbWidth,_mbHeight,_tlMbX,_tlMbY,_brMbX,_brMbY,_numPartitions,_partitions,_dither,_ditheringRand,_dqm,_proba,_useSkipProba,_skipP,_intraT,_intraL,_segment,_yuvT,_mbInfo,_fInfo,_yuvBlock,_cacheY,_cacheU,_cacheV,_cacheYStride,_cacheUVStride,_tmpY,_tmpU,_tmpV,_y,_u,_v,_a,_mem,_mbX,_mbY,_mbData,_filterType,_fStrengths,_alpha,_alphaData,_isAlphaDecoded,_alphaPlane,_layerColorspace,_layerData",
    decodeHeader$0: function() {
      var bits, t1, t2;
      bits = this.input.readUint24$0();
      if (J.$and$n(bits, 1) !== 0)
        return false;
      if (typeof bits !== "number")
        return bits.$shr();
      if ((bits >>> 1 & 7) > 3)
        return false;
      t1 = bits >>> 4 & 1;
      if (t1 === 0)
        return false;
      t2 = this._frameHeader;
      t2.keyFrame = (bits & 1) === 0;
      t2.profile = bits >>> 1 & 7;
      t2.show = t1;
      t2.partitionLength = bits >>> 5;
      if (this.input.readUint24$0() !== 2752925)
        return false;
      t1 = this.webp;
      t1.width = this.input.readUint16$0();
      t1.height = this.input.readUint16$0();
      return true;
    },
    decode$0: function() {
      if (!this._getHeaders$0())
        return;
      var t1 = this.webp;
      this.output = U.Image$(t1.width, t1.height, 4);
      if (!this._initFrame$0())
        return;
      if (!this._parseFrame$0())
        return;
      return this.output;
    },
    _getHeaders$0: function() {
      var t1, i, t2, t3, t4;
      if (!this.decodeHeader$0())
        return false;
      this._proba = U.VP8Proba$();
      for (t1 = this._dqm, i = 0; i < 4; ++i) {
        t2 = new Int32Array(2);
        t3 = new Int32Array(2);
        t1[i] = new U.VP8QuantMatrix(t2, t3, new Int32Array(2), null, null);
      }
      t1 = this._picHeader;
      t2 = this.webp;
      t3 = t2.width;
      t1.width = t3;
      t4 = t2.height;
      t1.height = t4;
      if (typeof t3 !== "number")
        return t3.$shr();
      t1.xscale = C.JSNumber_methods._shrOtherPositive$1(t3, 8) >>> 6;
      if (typeof t4 !== "number")
        return t4.$shr();
      t1.yscale = C.JSNumber_methods._shrOtherPositive$1(t4, 8) >>> 6;
      this._cropTop = 0;
      this._cropLeft = 0;
      this._cropRight = t3;
      this._cropBottom = t4;
      this._mbWidth = C.JSNumber_methods._shrOtherPositive$1(t3 + 15, 4);
      t2 = J.$add$ns(t2.height, 15);
      if (typeof t2 !== "number")
        return t2.$shr();
      this._mbHeight = C.JSNumber_methods._shrOtherPositive$1(t2, 4);
      this._segment = 0;
      t2 = this._frameHeader;
      this.br = U.VP8BitReader$(this.input.subset$1(t2.partitionLength));
      t3 = this.input;
      t2 = t2.partitionLength;
      t3.offset = J.$add$ns(t3.offset, t2);
      t1.colorspace = this.br.getValue$1(1);
      t1.clampType = this.br.getValue$1(1);
      if (!this._parseSegmentHeader$2(this._segmentHeader, this._proba))
        return false;
      if (!this._parseFilterHeader$0())
        return false;
      if (!this._parsePartitions$1(this.input))
        return false;
      this._parseQuant$0();
      this.br.getValue$1(1);
      this._parseProba$0();
      return true;
    },
    _parseSegmentHeader$2: function(hdr, proba) {
      var t1, s, t2, value;
      t1 = this.br.getValue$1(1) !== 0;
      hdr.useSegment = t1;
      if (t1) {
        hdr.updateMap = this.br.getValue$1(1) !== 0;
        if (this.br.getValue$1(1) !== 0) {
          hdr.absoluteDelta = this.br.getValue$1(1) !== 0;
          for (t1 = hdr.quantizer, s = 0; s < 4; ++s) {
            if (this.br.getValue$1(1) !== 0) {
              t2 = this.br;
              value = t2.getValue$1(7);
              t2 = t2.getValue$1(1) === 1 ? -value : value;
            } else
              t2 = 0;
            t1[s] = t2;
          }
          for (t1 = hdr.filterStrength, s = 0; s < 4; ++s) {
            if (this.br.getValue$1(1) !== 0) {
              t2 = this.br;
              value = t2.getValue$1(6);
              t2 = t2.getValue$1(1) === 1 ? -value : value;
            } else
              t2 = 0;
            t1[s] = t2;
          }
        }
        if (hdr.updateMap)
          for (s = 0; s < 3; ++s) {
            t1 = proba.segments;
            t1[s] = this.br.getValue$1(1) !== 0 ? this.br.getValue$1(8) : 255;
          }
      } else
        hdr.updateMap = false;
      return true;
    },
    _parseFilterHeader$0: function() {
      var hdr, t1, i, t2, value;
      hdr = this._filterHeader;
      hdr.simple = this.br.getValue$1(1) !== 0;
      hdr.level = this.br.getValue$1(6);
      hdr.sharpness = this.br.getValue$1(3);
      t1 = this.br.getValue$1(1) !== 0;
      hdr.useLfDelta = t1;
      if (t1)
        if (this.br.getValue$1(1) !== 0) {
          for (t1 = hdr.refLfDelta, i = 0; i < 4; ++i)
            if (this.br.getValue$1(1) !== 0) {
              t2 = this.br;
              value = t2.getValue$1(6);
              t1[i] = t2.getValue$1(1) === 1 ? -value : value;
            }
          for (t1 = hdr.modeLfDelta, i = 0; i < 4; ++i)
            if (this.br.getValue$1(1) !== 0) {
              t2 = this.br;
              value = t2.getValue$1(6);
              t1[i] = t2.getValue$1(1) === 1 ? -value : value;
            }
        }
      if (hdr.level === 0)
        t1 = 0;
      else
        t1 = hdr.simple === true ? 1 : 2;
      this._filterType = t1;
      return true;
    },
    _parsePartitions$1: function(input) {
      var bufEnd, t1, lastPart, partStart, t2, sz, p, pos, t3, t4, t5, partEnd;
      bufEnd = J.$sub$n(input.end, input.offset);
      t1 = C.JSInt_methods._shlPositive$1(1, this.br.getValue$1(2));
      this._numPartitions = t1;
      lastPart = t1 - 1;
      partStart = lastPart * 3;
      t1 = J.getInterceptor$n(bufEnd);
      if (t1.$lt(bufEnd, partStart))
        return false;
      for (t2 = this._partitions, sz = 0, p = 0; p < lastPart; ++p, partStart = partEnd) {
        pos = J.$add$ns(input.offset, sz);
        t3 = input.buffer;
        t4 = J.$index$asx(t3, J.$add$ns(pos, 0));
        t5 = J.$index$asx(t3, J.$add$ns(pos, 1));
        if (typeof t5 !== "number")
          return t5.$shl();
        t5 = J.$or$n(t4, t5 << 8 >>> 0);
        t3 = J.$index$asx(t3, J.$add$ns(pos, 2));
        if (typeof t3 !== "number")
          return t3.$shl();
        partEnd = J.$add$ns(partStart, J.$or$n(t5, t3 << 16 >>> 0));
        if (J.$gt$n(partEnd, bufEnd))
          partEnd = bufEnd;
        t3 = J.$sub$n(partEnd, partStart);
        pos = J.$add$ns(J.$add$ns(input.start, partStart), 0);
        t4 = input.buffer;
        t5 = input.bigEndian;
        t3 = t3 == null ? J.get$length$asx(t4) : J.$add$ns(pos, t3);
        t5 = new U.VP8BitReader(new U.InputBuffer(t4, pos, t3, pos, t5), null, null, null, false);
        t5._range = 254;
        t5._image$_value = 0;
        t5._bits = -8;
        if (p >= 8)
          return H.ioore(t2, p);
        t2[p] = t5;
        sz += 3;
      }
      t1 = U.VP8BitReader$(input.subset$2$position(t1.$sub(bufEnd, partStart), J.$add$ns(J.$sub$n(input.offset, input.start), partStart)));
      if (lastPart < 0 || lastPart >= 8)
        return H.ioore(t2, lastPart);
      t2[lastPart] = t1;
      return J.$lt$n(partStart, bufEnd) && true;
    },
    _parseQuant$0: function() {
      var base_q0, dqy1_dc, dqy2_dc, dqy2_ac, dquv_dc, dquv_ac, hdr, t1, t2, i, q, m, t3, t4, t5;
      base_q0 = this.br.getValue$1(7);
      dqy1_dc = this.br.getValue$1(1) !== 0 ? this.br.getSignedValue$1(4) : 0;
      dqy2_dc = this.br.getValue$1(1) !== 0 ? this.br.getSignedValue$1(4) : 0;
      dqy2_ac = this.br.getValue$1(1) !== 0 ? this.br.getSignedValue$1(4) : 0;
      dquv_dc = this.br.getValue$1(1) !== 0 ? this.br.getSignedValue$1(4) : 0;
      dquv_ac = this.br.getValue$1(1) !== 0 ? this.br.getSignedValue$1(4) : 0;
      hdr = this._segmentHeader;
      for (t1 = this._dqm, t2 = hdr.quantizer, i = 0; i < 4; ++i) {
        if (hdr.useSegment) {
          q = t2[i];
          if (!hdr.absoluteDelta)
            q += base_q0;
        } else {
          if (i > 0) {
            t1[i] = t1[0];
            continue;
          }
          q = base_q0;
        }
        m = t1[i];
        t3 = m.get$y1Mat();
        t4 = q + dqy1_dc;
        if (t4 < 0)
          t4 = 0;
        else if (t4 > 127)
          t4 = 127;
        if (t4 >= 128)
          return H.ioore(C.List_8co1, t4);
        t3[0] = C.List_8co1[t4];
        t4 = m.y1Mat;
        if (q < 0)
          t3 = 0;
        else
          t3 = q > 127 ? 127 : q;
        if (t3 >= 128)
          return H.ioore(C.List_AiM, t3);
        t4[1] = C.List_AiM[t3];
        t3 = m.y2Mat;
        t4 = q + dqy2_dc;
        if (t4 < 0)
          t4 = 0;
        else if (t4 > 127)
          t4 = 127;
        if (t4 >= 128)
          return H.ioore(C.List_8co1, t4);
        t3[0] = J.$mul$ns(C.List_8co1[t4], 2);
        t4 = q + dqy2_ac;
        if (t4 < 0)
          t4 = 0;
        else if (t4 > 127)
          t4 = 127;
        if (t4 >= 128)
          return H.ioore(C.List_AiM, t4);
        t4 = J.$mul$ns(C.List_AiM[t4], 101581);
        if (typeof t4 !== "number")
          return t4.$shr();
        t3[1] = C.JSNumber_methods._shrOtherPositive$1(t4, 16);
        if (t3[1] < 8)
          t3[1] = 8;
        t3 = m.uvMat;
        t4 = q + dquv_dc;
        if (t4 < 0)
          t4 = 0;
        else if (t4 > 117)
          t4 = 117;
        if (t4 >= 128)
          return H.ioore(C.List_8co1, t4);
        t3[0] = C.List_8co1[t4];
        t4 = q + dquv_ac;
        if (t4 < 0)
          t5 = 0;
        else
          t5 = t4 > 127 ? 127 : t4;
        if (t5 >= 128)
          return H.ioore(C.List_AiM, t5);
        t3[1] = C.List_AiM[t5];
        m.uvQuant = t4;
      }
    },
    _parseProba$0: function() {
      var proba, t, b, c, p, v, t1;
      proba = this._proba;
      for (t = 0; t < 4; ++t)
        for (b = 0; b < 8; ++b)
          for (c = 0; c < 3; ++c)
            for (p = 0; p < 11; ++p) {
              v = this.br.getBit$1(J.$index$asx(J.$index$asx(J.$index$asx(C.List_MIe[t], b), c), p)) !== 0 ? this.br.getValue$1(8) : J.$index$asx(J.$index$asx(J.$index$asx(C.List_S8N[t], b), c), p);
              J.$indexSet$ax(J.$index$asx(proba.bands[t], b).get$probas()[c], p, v);
            }
      t1 = this.br.getValue$1(1) !== 0;
      this._useSkipProba = t1;
      if (t1)
        this._skipP = this.br.getValue$1(8);
    },
    _precomputeFilterStrengths$0: function() {
      var t1, hdr, t2, t3, t4, s, baseLevel, t5, i4x4, info, level, ilevel, ilevel0;
      t1 = this._filterType;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        hdr = this._filterHeader;
        for (t1 = hdr.refLfDelta, t2 = hdr.modeLfDelta, t3 = this._segmentHeader, t4 = t3.filterStrength, s = 0; s < 4; ++s) {
          if (t3.useSegment) {
            baseLevel = t4[s];
            if (!t3.absoluteDelta) {
              t5 = hdr.level;
              if (typeof t5 !== "number")
                return H.iae(t5);
              baseLevel += t5;
            }
          } else
            baseLevel = hdr.level;
          for (i4x4 = 0; i4x4 <= 1; ++i4x4) {
            info = J.$index$asx(this._fStrengths[s], i4x4);
            if (hdr.useLfDelta === true) {
              t5 = t1[0];
              if (typeof baseLevel !== "number")
                return baseLevel.$add();
              level = baseLevel + t5;
              if (i4x4 !== 0)
                level += t2[0];
            } else
              level = baseLevel;
            if (typeof level !== "number")
              return level.$lt();
            if (level < 0)
              level = 0;
            else if (level > 63)
              level = 63;
            if (level > 0) {
              t5 = hdr.sharpness;
              if (typeof t5 !== "number")
                return t5.$gt();
              if (t5 > 0) {
                ilevel = t5 > 4 ? C.JSInt_methods._shrOtherPositive$1(level, 2) : C.JSInt_methods._shrOtherPositive$1(level, 1);
                ilevel0 = 9 - t5;
                if (ilevel > ilevel0)
                  ilevel = ilevel0;
              } else
                ilevel = level;
              if (ilevel < 1)
                ilevel = 1;
              info.set$fInnerLevel(ilevel);
              info.fLimit = 2 * level + ilevel;
              if (level >= 40)
                t5 = 2;
              else
                t5 = level >= 15 ? 1 : 0;
              info.hevThresh = t5;
            } else
              info.set$fLimit(0);
            info.set$fInner(i4x4 !== 0);
          }
        }
      }
    },
    _initFrame$0: function() {
      var t1, t2, i, t3, t4, t5, extra_rows, extra_y, extra_uv, extraPixels;
      t1 = this.webp;
      t2 = t1._alphaData;
      if (t2 != null)
        this._alphaData = t2;
      t2 = H.setRuntimeTypeInfo(Array(4), [[J.JSArray, U.VP8FInfo]]);
      this._fStrengths = t2;
      for (i = 0; i < 4; ++i)
        t2[i] = [new U.VP8FInfo(0, 0, false, 0), new U.VP8FInfo(0, 0, false, 0)];
      t2 = this._mbWidth;
      if (typeof t2 !== "number")
        return H.iae(t2);
      this._yuvT = H.setRuntimeTypeInfo(Array(t2), [U.VP8TopSamples]);
      i = 0;
      while (true) {
        t2 = this._mbWidth;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t2 = this._yuvT;
        t3 = new Uint8Array(16);
        t4 = new Uint8Array(8);
        t5 = new Uint8Array(8);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = new U.VP8TopSamples(t3, t4, t5);
        ++i;
      }
      this._yuvBlock = new Uint8Array(832);
      t2 = this._mbWidth;
      if (typeof t2 !== "number")
        return H.iae(t2);
      this._intraT = new Uint8Array(4 * t2);
      t2 = this._mbWidth;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = 16 * t2;
      this._cacheYStride = t3;
      this._cacheUVStride = 8 * t2;
      t2 = this._filterType;
      if (t2 >>> 0 !== t2 || t2 >= 3)
        return H.ioore(C.List_0_2_8, t2);
      extra_rows = C.List_0_2_8[t2];
      t2 = J.getInterceptor$ns(extra_rows);
      extra_y = t2.$mul(extra_rows, t3);
      extra_uv = J.$mul$ns(t2.$tdiv(extra_rows, 2), this._cacheUVStride);
      t2 = this._cacheYStride;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof extra_y !== "number")
        return H.iae(extra_y);
      t2 = 16 * t2 + extra_y;
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      this._cacheY = U.InputBuffer$(new Uint8Array(t2), false, null, extra_y);
      t2 = this._cacheUVStride;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof extra_uv !== "number")
        return H.iae(extra_uv);
      t2 = 8 * t2 + extra_uv;
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      this._cacheU = U.InputBuffer$(new Uint8Array(t2), false, null, extra_uv);
      t2 = this._cacheUVStride;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = 8 * t2 + extra_uv;
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      this._cacheV = U.InputBuffer$(new Uint8Array(t2), false, null, extra_uv);
      t2 = t1.width;
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      this._tmpY = U.InputBuffer$(new Uint8Array(t2), false, null, 0);
      t1 = J.$add$ns(t1.width, 1);
      if (typeof t1 !== "number")
        return t1.$shr();
      t1 = C.JSNumber_methods._shrOtherPositive$1(t1, 1);
      this._tmpU = U.InputBuffer$(new Uint8Array(t1), false, null, 0);
      this._tmpV = U.InputBuffer$(new Uint8Array(t1), false, null, 0);
      t1 = this._filterType;
      if (t1 >>> 0 !== t1 || t1 >= 3)
        return H.ioore(C.List_0_2_8, t1);
      extraPixels = C.List_0_2_8[t1];
      if (t1 === 2) {
        this._tlMbX = 0;
        this._tlMbY = 0;
      } else {
        t1 = this._cropLeft;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof extraPixels !== "number")
          return H.iae(extraPixels);
        t1 = C.JSNumber_methods._tdivFast$1(t1 - extraPixels, 16);
        this._tlMbX = t1;
        t2 = this._cropTop;
        if (typeof t2 !== "number")
          return t2.$sub();
        t2 = C.JSNumber_methods._tdivFast$1(t2 - extraPixels, 16);
        this._tlMbY = t2;
        if (t1 < 0)
          this._tlMbX = 0;
        if (t2 < 0)
          this._tlMbY = 0;
      }
      this._brMbY = J.$tdiv$n(J.$add$ns(J.$add$ns(this._cropBottom, 15), extraPixels), 16);
      t1 = J.$tdiv$n(J.$add$ns(J.$add$ns(this._cropRight, 15), extraPixels), 16);
      this._brMbX = t1;
      if (J.$gt$n(t1, this._mbWidth))
        this._brMbX = this._mbWidth;
      if (J.$gt$n(this._brMbY, this._mbHeight))
        this._brMbY = this._mbHeight;
      t1 = this._mbWidth;
      if (typeof t1 !== "number")
        return t1.$add();
      this._mbInfo = H.setRuntimeTypeInfo(Array(t1 + 1), [U.VP8MB]);
      t1 = this._mbWidth;
      if (typeof t1 !== "number")
        return H.iae(t1);
      this._mbData = H.setRuntimeTypeInfo(Array(t1), [U.VP8MBData]);
      t1 = this._mbWidth;
      if (typeof t1 !== "number")
        return H.iae(t1);
      this._fInfo = H.setRuntimeTypeInfo(Array(t1), [U.VP8FInfo]);
      i = 0;
      while (true) {
        t1 = this._mbWidth;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this._mbInfo;
        if (!(i < t1))
          break;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = new U.VP8MB(0, 0);
        t1 = this._mbData;
        t2 = new Int16Array(384);
        t3 = new Uint8Array(16);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = new U.VP8MBData(t2, null, t3, null, null, null, null);
        ++i;
      }
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      t2[t1] = new U.VP8MB(0, 0);
      this._precomputeFilterStrengths$0();
      U.VP8Filter__initTables();
      this._dsp = new U.VP8Filter();
      return true;
    },
    _parseFrame$0: function() {
      var t1, t2, t3, t4, t5, tokenBr, t6, left, t7, mb, block, skip, finfo, useFilter;
      this._mbY = 0;
      t1 = this._intraL;
      t2 = this._segmentHeader;
      t3 = this._partitions;
      t4 = 0;
      while (true) {
        t5 = this._brMbY;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (!(t4 < t5))
          break;
        t5 = this._numPartitions;
        if (typeof t5 !== "number")
          return t5.$sub();
        t5 = (t4 & t5 - 1) >>> 0;
        if (t5 < 0 || t5 >= 8)
          return H.ioore(t3, t5);
        tokenBr = t3[t5];
        while (true) {
          t4 = this._mbX;
          t5 = this._mbWidth;
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (!(t4 < t5))
            break;
          t5 = this._mbInfo;
          t6 = t5.length;
          if (0 >= t6)
            return H.ioore(t5, 0);
          left = t5[0];
          t7 = 1 + t4;
          if (t7 >= t6)
            return H.ioore(t5, t7);
          mb = t5[t7];
          t7 = this._mbData;
          if (t4 >= t7.length)
            return H.ioore(t7, t4);
          block = t7[t4];
          if (t2.updateMap) {
            t4 = this.br.getBit$1(this._proba.segments[0]);
            t5 = this.br;
            t6 = this._proba;
            this._segment = t4 === 0 ? t5.getBit$1(t6.segments[1]) : 2 + t5.getBit$1(t6.segments[2]);
          }
          skip = this._useSkipProba === true && this.br.getBit$1(this._skipP) !== 0;
          this._parseIntraMode$0();
          if (!skip)
            skip = this._parseResiduals$2(mb, tokenBr);
          else {
            mb.set$nz(0);
            left.set$nz(0);
            if (block.get$isIntra4x4() !== true) {
              mb.set$nzDc(0);
              left.set$nzDc(0);
            }
            block.nonZeroY = 0;
            block.nonZeroUV = 0;
          }
          t4 = this._filterType;
          if (typeof t4 !== "number")
            return t4.$gt();
          if (t4 > 0) {
            t4 = this._fInfo;
            t5 = this._mbX;
            t6 = this._fStrengths;
            t7 = this._segment;
            t6.length;
            if (t7 >>> 0 !== t7 || t7 >= 4)
              return H.ioore(t6, t7);
            t7 = t6[t7];
            t6 = J.$index$asx(t7, block.get$isIntra4x4() === true ? 1 : 0);
            if (t5 >= t4.length)
              return H.ioore(t4, t5);
            t4[t5] = t6;
            t6 = this._fInfo;
            t5 = this._mbX;
            if (t5 >= t6.length)
              return H.ioore(t6, t5);
            finfo = t6[t5];
            finfo.fInner = finfo.get$fInner() || !skip;
          }
          ++this._mbX;
        }
        t4 = this._mbInfo;
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        left = t4[0];
        left.set$nz(0);
        left.set$nzDc(0);
        C.NativeUint8List_methods.fillRange$3(t1, 0, 4, 0);
        this._mbX = 0;
        this._reconstructRow$0();
        t4 = this._filterType;
        if (typeof t4 !== "number")
          return t4.$gt();
        if (t4 > 0) {
          t4 = this._mbY;
          t5 = this._tlMbY;
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (t4 >= t5) {
            t5 = this._brMbY;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = t4 <= t5;
            useFilter = t5;
          } else
            useFilter = false;
        } else
          useFilter = false;
        if (!this._finishRow$1(useFilter))
          return false;
        t4 = ++this._mbY;
      }
      return true;
    },
    _reconstructRow$0: function() {
      var mb_y, y_dst, u_dst, v_dst, t1, mb_x, t2, block, j, t3, top_yuv, coeffs, bits, topRight, topRight32, p, n, dst, predFunc, bits_uv, pred_func, c1, t4, c2, y_out, u_out;
      mb_y = this._mbY;
      y_dst = U.InputBuffer$(this._yuvBlock, false, null, 40);
      u_dst = U.InputBuffer$(this._yuvBlock, false, null, 584);
      v_dst = U.InputBuffer$(this._yuvBlock, false, null, 600);
      t1 = mb_y > 0;
      mb_x = 0;
      while (true) {
        t2 = this._mbWidth;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(mb_x < t2))
          break;
        t2 = this._mbData;
        if (mb_x >= t2.length)
          return H.ioore(t2, mb_x);
        block = t2[mb_x];
        if (mb_x > 0) {
          for (j = -1; j < 16; ++j) {
            t2 = j * 32;
            y_dst.memcpy$4(t2 - 4, 4, y_dst, t2 + 12);
          }
          for (j = -1; j < 8; ++j) {
            t2 = j * 32;
            t3 = t2 - 4;
            t2 += 4;
            u_dst.memcpy$4(t3, 4, u_dst, t2);
            v_dst.memcpy$4(t3, 4, v_dst, t2);
          }
        } else {
          for (j = 0; j < 16; ++j)
            J.$indexSet$ax(y_dst.buffer, J.$add$ns(y_dst.offset, j * 32 - 1), 129);
          for (j = 0; j < 8; ++j) {
            t2 = j * 32 - 1;
            J.$indexSet$ax(u_dst.buffer, J.$add$ns(u_dst.offset, t2), 129);
            J.$indexSet$ax(v_dst.buffer, J.$add$ns(v_dst.offset, t2), 129);
          }
          if (t1) {
            J.$indexSet$ax(v_dst.buffer, J.$add$ns(v_dst.offset, -33), 129);
            J.$indexSet$ax(u_dst.buffer, J.$add$ns(u_dst.offset, -33), 129);
            J.$indexSet$ax(y_dst.buffer, J.$add$ns(y_dst.offset, -33), 129);
          }
        }
        t2 = this._yuvT;
        if (mb_x >= t2.length)
          return H.ioore(t2, mb_x);
        top_yuv = t2[mb_x];
        coeffs = block.get$coeffs();
        bits = block.nonZeroY;
        if (t1) {
          y_dst.memcpy$3(-32, 16, J.get$y$x(top_yuv));
          u_dst.memcpy$3(-32, 8, top_yuv.get$u());
          v_dst.memcpy$3(-32, 8, top_yuv.get$v());
        } else if (mb_x === 0) {
          J.fillRange$3$ax(y_dst.buffer, J.$add$ns(y_dst.offset, -33), J.$add$ns(J.$add$ns(y_dst.offset, -33), 21), 127);
          J.fillRange$3$ax(u_dst.buffer, J.$add$ns(u_dst.offset, -33), J.$add$ns(J.$add$ns(u_dst.offset, -33), 9), 127);
          J.fillRange$3$ax(v_dst.buffer, J.$add$ns(v_dst.offset, -33), J.$add$ns(J.$add$ns(v_dst.offset, -33), 9), 127);
        }
        if (block.isIntra4x4 === true) {
          topRight = U.InputBuffer$from(y_dst, null, -16);
          topRight32 = topRight.toUint32List$0();
          if (t1) {
            t2 = this._mbWidth;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (mb_x >= t2 - 1) {
              t2 = J.$index$asx(J.get$y$x(top_yuv), 15);
              J.fillRange$3$ax(topRight.buffer, J.$add$ns(topRight.offset, 0), J.$add$ns(J.$add$ns(topRight.offset, 0), 4), t2);
            } else {
              t2 = this._yuvT;
              t3 = mb_x + 1;
              if (t3 >= t2.length)
                return H.ioore(t2, t3);
              topRight.memcpy$3(0, 4, J.get$y$x(t2[t3]));
            }
          }
          t2 = topRight32.length;
          if (0 >= t2)
            return H.ioore(topRight32, 0);
          p = topRight32[0];
          if (96 >= t2)
            return H.ioore(topRight32, 96);
          topRight32[96] = p;
          topRight32[64] = p;
          topRight32[32] = p;
          t2 = block.imodes;
          n = 0;
          while (n < 16) {
            dst = U.InputBuffer$from(y_dst, null, C.List_cGl0[n]);
            t3 = t2[n];
            if (t3 >= 10)
              return H.ioore(C.List_sty, t3);
            C.List_sty[t3].call$1(dst);
            t3 = n * 16;
            this._doTransform$3(bits, new U.InputBuffer(coeffs, t3, 384, t3, false), dst);
            ++n;
            if (typeof bits !== "number")
              return bits.$shl();
            bits = (bits << 2 & 4294967295) >>> 0;
          }
        } else {
          predFunc = U.VP8__checkMode(mb_x, mb_y, block.imodes[0]);
          if (predFunc >>> 0 !== predFunc || predFunc >= 7)
            return H.ioore(C.List_8aB, predFunc);
          C.List_8aB[predFunc].call$1(y_dst);
          if (bits !== 0) {
            n = 0;
            while (n < 16) {
              dst = U.InputBuffer$from(y_dst, null, C.List_cGl0[n]);
              t2 = n * 16;
              this._doTransform$3(bits, new U.InputBuffer(coeffs, t2, 384, t2, false), dst);
              ++n;
              if (typeof bits !== "number")
                return bits.$shl();
              bits = (bits << 2 & 4294967295) >>> 0;
            }
          }
        }
        bits_uv = block.nonZeroUV;
        pred_func = U.VP8__checkMode(mb_x, mb_y, block.uvmode);
        if (pred_func >>> 0 !== pred_func || pred_func >= 7)
          return H.ioore(C.List_0W6, pred_func);
        C.List_0W6[pred_func].call$1(u_dst);
        C.List_0W6[pred_func].call$1(v_dst);
        c1 = new U.InputBuffer(coeffs, 256, 384, 256, false);
        if (typeof bits_uv !== "number")
          return bits_uv.$and();
        if ((bits_uv & 255) !== 0) {
          t2 = this._dsp;
          if ((bits_uv & 170) !== 0) {
            t2.transformOne$2(c1, u_dst);
            t2.transformOne$2(U.InputBuffer$from(c1, null, 16), U.InputBuffer$from(u_dst, null, 4));
            t3 = U.InputBuffer$from(c1, null, 32);
            t4 = U.InputBuffer$from(u_dst, null, 128);
            t2.transformOne$2(t3, t4);
            t2.transformOne$2(U.InputBuffer$from(t3, null, 16), U.InputBuffer$from(t4, null, 4));
          } else
            t2.transformDCUV$2(c1, u_dst);
        }
        c2 = new U.InputBuffer(coeffs, 320, 384, 320, false);
        t2 = bits_uv >>> 8;
        if ((t2 & 255) !== 0) {
          t3 = this._dsp;
          if ((t2 & 170) !== 0) {
            t3.transformOne$2(c2, v_dst);
            t3.transformOne$2(U.InputBuffer$from(c2, null, 16), U.InputBuffer$from(v_dst, null, 4));
            t2 = U.InputBuffer$from(c2, null, 32);
            t4 = U.InputBuffer$from(v_dst, null, 128);
            t3.transformOne$2(t2, t4);
            t3.transformOne$2(U.InputBuffer$from(t2, null, 16), U.InputBuffer$from(t4, null, 4));
          } else
            t3.transformDCUV$2(c2, v_dst);
        }
        t2 = this._mbHeight;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (mb_y < t2 - 1) {
          J.setRange$4$ax(J.get$y$x(top_yuv), 0, 16, y_dst.toUint8List$0(), 480);
          J.setRange$4$ax(top_yuv.get$u(), 0, 8, u_dst.toUint8List$0(), 224);
          J.setRange$4$ax(top_yuv.get$v(), 0, 8, v_dst.toUint8List$0(), 224);
        }
        y_out = mb_x * 16;
        u_out = mb_x * 8;
        for (j = 0; j < 16; ++j) {
          t2 = this._cacheYStride;
          if (typeof t2 !== "number")
            return H.iae(t2);
          this._cacheY.memcpy$4(y_out + j * t2, 16, y_dst, j * 32);
        }
        for (j = 0; j < 8; ++j) {
          t2 = this._cacheUVStride;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = j * 32;
          this._cacheU.memcpy$4(u_out + j * t2, 8, u_dst, t3);
          t2 = this._cacheUVStride;
          if (typeof t2 !== "number")
            return H.iae(t2);
          this._cacheV.memcpy$4(u_out + j * t2, 8, v_dst, t3);
        }
        ++mb_x;
      }
    },
    _doTransform$3: function(bits, src, dst) {
      var a, c4, d4, c1, d1, t1;
      if (typeof bits !== "number")
        return bits.$shr();
      switch (bits >>> 30) {
        case 3:
          this._dsp.transformOne$2(src, dst);
          break;
        case 2:
          this._dsp.toString;
          a = J.$add$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, 0)), 4);
          c4 = J.floor$0$n(J.$div$n(J.$mul$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, 4)), 35468), 65536));
          d4 = J.floor$0$n(J.$div$n(J.$mul$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, 4)), 85627), 65536));
          c1 = J.floor$0$n(J.$div$n(J.$mul$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, 1)), 35468), 65536));
          d1 = J.floor$0$n(J.$div$n(J.$mul$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, 1)), 85627), 65536));
          t1 = J.getInterceptor$ns(a);
          U.VP8Filter__store2(dst, 0, t1.$add(a, d4), d1, c1);
          U.VP8Filter__store2(dst, 1, t1.$add(a, c4), d1, c1);
          U.VP8Filter__store2(dst, 2, t1.$sub(a, c4), d1, c1);
          U.VP8Filter__store2(dst, 3, t1.$sub(a, d4), d1, c1);
          break;
        case 1:
          this._dsp.transformDC$2(src, dst);
          break;
        default:
          break;
      }
    },
    _doFilter$2: function(mbX, mbY) {
      var yBps, t1, fInfo, yDst, ilevel, limit, uvBps, uDst, vDst, hevThresh, t2, u2, v2;
      yBps = this._cacheYStride;
      t1 = this._fInfo;
      if (mbX >>> 0 !== mbX || mbX >= t1.length)
        return H.ioore(t1, mbX);
      fInfo = t1[mbX];
      yDst = U.InputBuffer$from(this._cacheY, null, mbX * 16);
      ilevel = fInfo.get$fInnerLevel();
      limit = fInfo.fLimit;
      if (limit === 0)
        return;
      if (this._filterType === 1) {
        if (mbX > 0)
          this._dsp.simpleHFilter16$3(yDst, yBps, limit + 4);
        if (fInfo.fInner)
          this._dsp.simpleHFilter16i$3(yDst, yBps, limit);
        if (mbY > 0)
          this._dsp.simpleVFilter16$3(yDst, yBps, limit + 4);
        if (fInfo.fInner)
          this._dsp.simpleVFilter16i$3(yDst, yBps, limit);
      } else {
        uvBps = this._cacheUVStride;
        t1 = mbX * 8;
        uDst = U.InputBuffer$from(this._cacheU, null, t1);
        vDst = U.InputBuffer$from(this._cacheV, null, t1);
        hevThresh = fInfo.hevThresh;
        if (mbX > 0) {
          t1 = limit + 4;
          this._dsp._filterLoop26$7(yDst, 1, yBps, 16, t1, ilevel, hevThresh);
          t2 = this._dsp;
          t2._filterLoop26$7(uDst, 1, uvBps, 8, t1, ilevel, hevThresh);
          t2._filterLoop26$7(vDst, 1, uvBps, 8, t1, ilevel, hevThresh);
        }
        if (fInfo.fInner) {
          this._dsp.hFilter16i$5(yDst, yBps, limit, ilevel, hevThresh);
          t1 = this._dsp;
          t1.toString;
          u2 = U.InputBuffer$from(uDst, null, 4);
          v2 = U.InputBuffer$from(vDst, null, 4);
          t1._filterLoop24$7(u2, 1, uvBps, 8, limit, ilevel, hevThresh);
          t1._filterLoop24$7(v2, 1, uvBps, 8, limit, ilevel, hevThresh);
        }
        if (mbY > 0) {
          t1 = limit + 4;
          this._dsp._filterLoop26$7(yDst, yBps, 1, 16, t1, ilevel, hevThresh);
          t2 = this._dsp;
          t2._filterLoop26$7(uDst, uvBps, 1, 8, t1, ilevel, hevThresh);
          t2._filterLoop26$7(vDst, uvBps, 1, 8, t1, ilevel, hevThresh);
        }
        if (fInfo.fInner) {
          this._dsp.vFilter16i$5(yDst, yBps, limit, ilevel, hevThresh);
          t1 = this._dsp;
          t1.toString;
          if (typeof uvBps !== "number")
            return H.iae(uvBps);
          t2 = 4 * uvBps;
          u2 = U.InputBuffer$from(uDst, null, t2);
          v2 = U.InputBuffer$from(vDst, null, t2);
          t1._filterLoop24$7(u2, uvBps, 1, 8, limit, ilevel, hevThresh);
          t1._filterLoop24$7(v2, uvBps, 1, 8, limit, ilevel, hevThresh);
        }
      }
    },
    _filterRow$0: function() {
      var mbX, t1;
      mbX = this._tlMbX;
      while (true) {
        t1 = this._brMbX;
        if (typeof mbX !== "number")
          return mbX.$lt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(mbX < t1))
          break;
        this._doFilter$2(mbX, this._mbY);
        ++mbX;
      }
    },
    _finishRow$1: function(useFilter) {
      var t1, extraYRows, ySize, uvSize, yDst, t2, t3, uDst, vDst, mbY, yStart, yEnd, t4, deltaY, t5, t6, t7, t8;
      t1 = this._filterType;
      if (t1 >>> 0 !== t1 || t1 >= 3)
        return H.ioore(C.List_0_2_8, t1);
      extraYRows = C.List_0_2_8[t1];
      t1 = J.getInterceptor$ns(extraYRows);
      ySize = t1.$mul(extraYRows, this._cacheYStride);
      uvSize = J.$mul$ns(t1.$tdiv(extraYRows, 2), this._cacheUVStride);
      t1 = J.getInterceptor$n(ySize);
      yDst = U.InputBuffer$from(this._cacheY, null, t1.$negate(ySize));
      t2 = this._cacheU;
      if (typeof uvSize !== "number")
        return uvSize.$negate();
      t3 = -uvSize;
      uDst = U.InputBuffer$from(t2, null, t3);
      vDst = U.InputBuffer$from(this._cacheV, null, t3);
      mbY = this._mbY;
      t2 = J.$sub$n(this._brMbY, 1);
      if (typeof t2 !== "number")
        return H.iae(t2);
      yStart = mbY * 16;
      yEnd = (mbY + 1) * 16;
      if (useFilter)
        this._filterRow$0();
      if (this._dither)
        ;
      if (mbY !== 0) {
        if (typeof extraYRows !== "number")
          return H.iae(extraYRows);
        yStart -= extraYRows;
        this._y = U.InputBuffer$from(yDst, null, 0);
        this._u = U.InputBuffer$from(uDst, null, 0);
        this._v = U.InputBuffer$from(vDst, null, 0);
      } else {
        this._y = U.InputBuffer$from(this._cacheY, null, 0);
        this._u = U.InputBuffer$from(this._cacheU, null, 0);
        this._v = U.InputBuffer$from(this._cacheV, null, 0);
      }
      t2 = !(mbY >= t2);
      if (t2) {
        if (typeof extraYRows !== "number")
          return H.iae(extraYRows);
        yEnd -= extraYRows;
      }
      t4 = this._cropBottom;
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (yEnd > t4)
        yEnd = t4;
      this._a = null;
      if (this._alphaData != null && yStart < yEnd) {
        t4 = this._decompressAlphaRows$2(yStart, yEnd - yStart);
        this._a = t4;
        if (t4 == null)
          return false;
      }
      t4 = this._cropTop;
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (yStart < t4) {
        deltaY = t4 - yStart;
        t5 = this._y;
        t6 = t5.offset;
        t7 = this._cacheYStride;
        if (typeof t7 !== "number")
          return t7.$mul();
        t5.offset = J.$add$ns(t6, t7 * deltaY);
        t7 = this._u;
        t6 = t7.offset;
        t5 = this._cacheUVStride;
        t8 = C.JSNumber_methods._shrOtherPositive$1(deltaY, 1);
        if (typeof t5 !== "number")
          return t5.$mul();
        t7.offset = J.$add$ns(t6, t5 * t8);
        t5 = this._v;
        t6 = t5.offset;
        t7 = this._cacheUVStride;
        if (typeof t7 !== "number")
          return t7.$mul();
        t5.offset = J.$add$ns(t6, t7 * t8);
        t5 = this._a;
        if (t5 != null)
          t5.offset = J.$add$ns(t5.offset, J.$mul$ns(this.webp.width, deltaY));
        yStart = t4;
      }
      if (yStart < yEnd) {
        t4 = this._y;
        t4.offset = J.$add$ns(t4.offset, this._cropLeft);
        t4 = this._u;
        t5 = t4.offset;
        t6 = this._cropLeft;
        if (typeof t6 !== "number")
          return t6.$shr();
        t4.offset = J.$add$ns(t5, t6 >>> 1);
        t6 = this._v;
        t5 = t6.offset;
        t4 = this._cropLeft;
        if (typeof t4 !== "number")
          return t4.$shr();
        t6.offset = J.$add$ns(t5, t4 >>> 1);
        t4 = this._a;
        if (t4 != null)
          t4.offset = J.$add$ns(t4.offset, this._cropLeft);
        t4 = this._cropTop;
        if (typeof t4 !== "number")
          return H.iae(t4);
        this._put$3(yStart - t4, J.$sub$n(this._cropRight, this._cropLeft), yEnd - yStart);
      }
      if (t2) {
        t2 = this._cacheY;
        t1 = t1.$negate(ySize);
        t4 = this._cacheYStride;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2.memcpy$4(t1, ySize, yDst, 16 * t4);
        t4 = this._cacheU;
        t1 = this._cacheUVStride;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4.memcpy$4(t3, uvSize, uDst, 8 * t1);
        t1 = this._cacheV;
        t4 = this._cacheUVStride;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t1.memcpy$4(t3, uvSize, vDst, 8 * t4);
      }
      return true;
    },
    _put$3: function(mbY, mbW, mbH) {
      if (J.$le$n(mbW, 0) || J.$le$n(mbH, 0))
        return false;
      this._emitFancyRGB$3(mbY, mbW, mbH);
      this._emitAlphaRGB$3(mbY, mbW, mbH);
      return true;
    },
    _upsample$9: function(topY, bottomY, topU, topV, curU, curV, topDst, bottomDst, len) {
      var t1, t2, tl_uv, l_uv, uv0, t3, t4, t5, t6, d, t7, x, t_uv, uv, avg, uv1, t8, t9, t10, t11, t12, t13;
      t1 = new U.VP8__upsample_LOAD_UV();
      t2 = J.$sub$n(len, 1);
      if (typeof t2 !== "number")
        return t2.$shr();
      t2 = C.JSNumber_methods._shrOtherPositive$1(t2, 1);
      tl_uv = t1.call$2(J.$index$asx(topU.buffer, J.$add$ns(topU.offset, 0)), J.$index$asx(topV.buffer, J.$add$ns(topV.offset, 0)));
      l_uv = t1.call$2(J.$index$asx(curU.buffer, J.$add$ns(curU.offset, 0)), J.$index$asx(curV.buffer, J.$add$ns(curV.offset, 0)));
      if (typeof tl_uv !== "number")
        return H.iae(tl_uv);
      if (typeof l_uv !== "number")
        return H.iae(l_uv);
      uv0 = C.JSNumber_methods._shrOtherPositive$1(3 * tl_uv + l_uv + 131074, 2);
      t3 = J.$index$asx(topY.buffer, J.$add$ns(topY.offset, 0));
      t4 = uv0 & 255;
      t5 = uv0 >>> 16;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = 19077 * t3;
      t6 = t3 + 26149 * t5 + -3644112;
      if ((t6 & -4194304) >>> 0 === 0)
        d = C.JSNumber_methods._shrOtherPositive$1(t6, 14);
      else
        d = t6 < 0 ? 0 : 255;
      J.$indexSet$ax(topDst.buffer, J.$add$ns(topDst.offset, 0), d);
      t5 = t3 - 6419 * t4 - 13320 * t5 + 2229552;
      if ((t5 & -4194304) >>> 0 === 0)
        d = C.JSNumber_methods._shrOtherPositive$1(t5, 14);
      else
        d = t5 < 0 ? 0 : 255;
      J.$indexSet$ax(topDst.buffer, J.$add$ns(topDst.offset, 1), d);
      t3 = t3 + 33050 * t4 + -4527440;
      if ((t3 & -4194304) >>> 0 === 0)
        d = C.JSNumber_methods._shrOtherPositive$1(t3, 14);
      else
        d = t3 < 0 ? 0 : 255;
      J.$indexSet$ax(topDst.buffer, J.$add$ns(topDst.offset, 2), d);
      J.$indexSet$ax(topDst.buffer, J.$add$ns(topDst.offset, 3), 255);
      t3 = bottomY != null;
      if (t3) {
        uv0 = C.JSNumber_methods._shrOtherPositive$1(3 * l_uv + tl_uv + 131074, 2);
        t4 = J.$index$asx(bottomY.buffer, J.$add$ns(bottomY.offset, 0));
        t5 = uv0 & 255;
        t6 = uv0 >>> 16;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t4 = 19077 * t4;
        t7 = t4 + 26149 * t6 + -3644112;
        if ((t7 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t7, 14);
        else
          d = t7 < 0 ? 0 : 255;
        J.$indexSet$ax(bottomDst.buffer, J.$add$ns(bottomDst.offset, 0), d);
        t6 = t4 - 6419 * t5 - 13320 * t6 + 2229552;
        if ((t6 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t6, 14);
        else
          d = t6 < 0 ? 0 : 255;
        J.$indexSet$ax(bottomDst.buffer, J.$add$ns(bottomDst.offset, 1), d);
        t4 = t4 + 33050 * t5 + -4527440;
        if ((t4 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t4, 14);
        else
          d = t4 < 0 ? 0 : 255;
        J.$indexSet$ax(bottomDst.buffer, J.$add$ns(bottomDst.offset, 2), d);
        J.$indexSet$ax(bottomDst.buffer, J.$add$ns(bottomDst.offset, 3), 255);
      }
      for (x = 1; x <= t2; ++x, l_uv = uv, tl_uv = t_uv) {
        t_uv = t1.call$2(J.$index$asx(topU.buffer, J.$add$ns(topU.offset, x)), J.$index$asx(topV.buffer, J.$add$ns(topV.offset, x)));
        uv = t1.call$2(J.$index$asx(curU.buffer, J.$add$ns(curU.offset, x)), J.$index$asx(curV.buffer, J.$add$ns(curV.offset, x)));
        t4 = J.getInterceptor$ns(tl_uv);
        avg = J.$add$ns(J.$add$ns(J.$add$ns(t4.$add(tl_uv, t_uv), l_uv), uv), 524296);
        t5 = J.$add$ns(t_uv, l_uv);
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = J.getInterceptor$ns(avg);
        t5 = t6.$add(avg, 2 * t5);
        if (typeof t5 !== "number")
          return t5.$shr();
        t5 = C.JSNumber_methods._shrOtherPositive$1(t5, 3);
        t4 = t4.$add(tl_uv, uv);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t4 = t6.$add(avg, 2 * t4);
        if (typeof t4 !== "number")
          return t4.$shr();
        t4 = C.JSNumber_methods._shrOtherPositive$1(t4, 3);
        if (typeof tl_uv !== "number")
          return H.iae(tl_uv);
        uv0 = C.JSNumber_methods._shrOtherPositive$1(t5 + tl_uv, 1);
        if (typeof t_uv !== "number")
          return H.iae(t_uv);
        uv1 = C.JSNumber_methods._shrOtherPositive$1(t4 + t_uv, 1);
        t6 = 2 * x;
        t7 = t6 - 1;
        t8 = J.$index$asx(topY.buffer, J.$add$ns(topY.offset, t7));
        t9 = uv0 & 255;
        t10 = uv0 >>> 16;
        t11 = t7 * 4;
        t12 = U.InputBuffer$from(topDst, null, t11);
        if (typeof t8 !== "number")
          return H.iae(t8);
        t8 = 19077 * t8;
        t13 = t8 + 26149 * t10 + -3644112;
        if ((t13 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t13, 14);
        else
          d = t13 < 0 ? 0 : 255;
        J.$indexSet$ax(t12.buffer, J.$add$ns(t12.offset, 0), d);
        t10 = t8 - 6419 * t9 - 13320 * t10 + 2229552;
        if ((t10 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t10, 14);
        else
          d = t10 < 0 ? 0 : 255;
        J.$indexSet$ax(t12.buffer, J.$add$ns(t12.offset, 1), d);
        t8 = t8 + 33050 * t9 + -4527440;
        if ((t8 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t8, 14);
        else
          d = t8 < 0 ? 0 : 255;
        J.$indexSet$ax(t12.buffer, J.$add$ns(t12.offset, 2), d);
        J.$indexSet$ax(t12.buffer, J.$add$ns(t12.offset, 3), 255);
        t8 = t6 - 0;
        t9 = J.$index$asx(topY.buffer, J.$add$ns(topY.offset, t8));
        t10 = uv1 & 255;
        t12 = uv1 >>> 16;
        t8 = U.InputBuffer$from(topDst, null, t8 * 4);
        if (typeof t9 !== "number")
          return H.iae(t9);
        t9 = 19077 * t9;
        t13 = t9 + 26149 * t12 + -3644112;
        if ((t13 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t13, 14);
        else
          d = t13 < 0 ? 0 : 255;
        J.$indexSet$ax(t8.buffer, J.$add$ns(t8.offset, 0), d);
        t12 = t9 - 6419 * t10 - 13320 * t12 + 2229552;
        if ((t12 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t12, 14);
        else
          d = t12 < 0 ? 0 : 255;
        J.$indexSet$ax(t8.buffer, J.$add$ns(t8.offset, 1), d);
        t9 = t9 + 33050 * t10 + -4527440;
        if ((t9 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t9, 14);
        else
          d = t9 < 0 ? 0 : 255;
        J.$indexSet$ax(t8.buffer, J.$add$ns(t8.offset, 2), d);
        J.$indexSet$ax(t8.buffer, J.$add$ns(t8.offset, 3), 255);
        if (t3) {
          if (typeof l_uv !== "number")
            return H.iae(l_uv);
          uv0 = C.JSNumber_methods._shrOtherPositive$1(t4 + l_uv, 1);
          if (typeof uv !== "number")
            return H.iae(uv);
          uv1 = C.JSNumber_methods._shrOtherPositive$1(t5 + uv, 1);
          t4 = J.$index$asx(bottomY.buffer, J.$add$ns(bottomY.offset, t7));
          t5 = uv0 & 255;
          t7 = uv0 >>> 16;
          t11 = U.InputBuffer$from(bottomDst, null, t11);
          if (typeof t4 !== "number")
            return H.iae(t4);
          t4 = 19077 * t4;
          t8 = t4 + 26149 * t7 + -3644112;
          if ((t8 & -4194304) >>> 0 === 0)
            d = C.JSNumber_methods._shrOtherPositive$1(t8, 14);
          else
            d = t8 < 0 ? 0 : 255;
          J.$indexSet$ax(t11.buffer, J.$add$ns(t11.offset, 0), d);
          t7 = t4 - 6419 * t5 - 13320 * t7 + 2229552;
          if ((t7 & -4194304) >>> 0 === 0)
            d = C.JSNumber_methods._shrOtherPositive$1(t7, 14);
          else
            d = t7 < 0 ? 0 : 255;
          J.$indexSet$ax(t11.buffer, J.$add$ns(t11.offset, 1), d);
          t4 = t4 + 33050 * t5 + -4527440;
          if ((t4 & -4194304) >>> 0 === 0)
            d = C.JSNumber_methods._shrOtherPositive$1(t4, 14);
          else
            d = t4 < 0 ? 0 : 255;
          J.$indexSet$ax(t11.buffer, J.$add$ns(t11.offset, 2), d);
          J.$indexSet$ax(t11.buffer, J.$add$ns(t11.offset, 3), 255);
          t4 = J.$index$asx(bottomY.buffer, J.$add$ns(bottomY.offset, t6));
          t5 = uv1 & 255;
          t7 = uv1 >>> 16;
          t6 = U.InputBuffer$from(bottomDst, null, t6 * 4);
          if (typeof t4 !== "number")
            return H.iae(t4);
          t4 = 19077 * t4;
          t8 = t4 + 26149 * t7 + -3644112;
          if ((t8 & -4194304) >>> 0 === 0)
            d = C.JSNumber_methods._shrOtherPositive$1(t8, 14);
          else
            d = t8 < 0 ? 0 : 255;
          J.$indexSet$ax(t6.buffer, J.$add$ns(t6.offset, 0), d);
          t7 = t4 - 6419 * t5 - 13320 * t7 + 2229552;
          if ((t7 & -4194304) >>> 0 === 0)
            d = C.JSNumber_methods._shrOtherPositive$1(t7, 14);
          else
            d = t7 < 0 ? 0 : 255;
          J.$indexSet$ax(t6.buffer, J.$add$ns(t6.offset, 1), d);
          t4 = t4 + 33050 * t5 + -4527440;
          if ((t4 & -4194304) >>> 0 === 0)
            d = C.JSNumber_methods._shrOtherPositive$1(t4, 14);
          else
            d = t4 < 0 ? 0 : 255;
          J.$indexSet$ax(t6.buffer, J.$add$ns(t6.offset, 2), d);
          J.$indexSet$ax(t6.buffer, J.$add$ns(t6.offset, 3), 255);
        }
      }
      if (typeof len !== "number")
        return len.$and();
      if ((len & 1) === 0) {
        if (typeof tl_uv !== "number")
          return H.iae(tl_uv);
        if (typeof l_uv !== "number")
          return H.iae(l_uv);
        uv0 = C.JSNumber_methods._shrOtherPositive$1(3 * tl_uv + l_uv + 131074, 2);
        t1 = len - 1;
        t2 = J.$index$asx(topY.buffer, J.$add$ns(topY.offset, t1));
        t4 = uv0 & 255;
        t5 = uv0 >>> 16;
        t6 = t1 * 4;
        t7 = U.InputBuffer$from(topDst, null, t6);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = 19077 * t2;
        t8 = t2 + 26149 * t5 + -3644112;
        if ((t8 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t8, 14);
        else
          d = t8 < 0 ? 0 : 255;
        J.$indexSet$ax(t7.buffer, J.$add$ns(t7.offset, 0), d);
        t5 = t2 - 6419 * t4 - 13320 * t5 + 2229552;
        if ((t5 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t5, 14);
        else
          d = t5 < 0 ? 0 : 255;
        J.$indexSet$ax(t7.buffer, J.$add$ns(t7.offset, 1), d);
        t2 = t2 + 33050 * t4 + -4527440;
        if ((t2 & -4194304) >>> 0 === 0)
          d = C.JSNumber_methods._shrOtherPositive$1(t2, 14);
        else
          d = t2 < 0 ? 0 : 255;
        J.$indexSet$ax(t7.buffer, J.$add$ns(t7.offset, 2), d);
        J.$indexSet$ax(t7.buffer, J.$add$ns(t7.offset, 3), 255);
        if (t3) {
          uv0 = C.JSNumber_methods._shrOtherPositive$1(3 * l_uv + tl_uv + 131074, 2);
          t1 = J.$index$asx(bottomY.buffer, J.$add$ns(bottomY.offset, t1));
          t2 = uv0 & 255;
          t3 = uv0 >>> 16;
          t6 = U.InputBuffer$from(bottomDst, null, t6);
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = 19077 * t1;
          t4 = t1 + 26149 * t3 + -3644112;
          if ((t4 & -4194304) >>> 0 === 0)
            d = C.JSNumber_methods._shrOtherPositive$1(t4, 14);
          else
            d = t4 < 0 ? 0 : 255;
          J.$indexSet$ax(t6.buffer, J.$add$ns(t6.offset, 0), d);
          t3 = t1 - 6419 * t2 - 13320 * t3 + 2229552;
          if ((t3 & -4194304) >>> 0 === 0)
            d = C.JSNumber_methods._shrOtherPositive$1(t3, 14);
          else
            d = t3 < 0 ? 0 : 255;
          J.$indexSet$ax(t6.buffer, J.$add$ns(t6.offset, 1), d);
          t1 = t1 + 33050 * t2 + -4527440;
          if ((t1 & -4194304) >>> 0 === 0)
            d = C.JSNumber_methods._shrOtherPositive$1(t1, 14);
          else
            d = t1 < 0 ? 0 : 255;
          J.$indexSet$ax(t6.buffer, J.$add$ns(t6.offset, 2), d);
          J.$indexSet$ax(t6.buffer, J.$add$ns(t6.offset, 3), 255);
        }
      }
    },
    _emitAlphaRGB$3: function(mbY, mbW, mbH) {
      var t1, stride, alpha, numRows, startY, t2, dst, t3, y, x;
      if (this._a == null)
        return;
      t1 = this.webp;
      stride = J.$mul$ns(t1.width, 4);
      alpha = U.InputBuffer$from(this._a, null, 0);
      if (mbY === 0) {
        numRows = J.$sub$n(mbH, 1);
        startY = mbY;
      } else {
        startY = mbY - 1;
        alpha.offset = J.$sub$n(alpha.offset, t1.width);
        numRows = mbH;
      }
      t2 = H.NativeUint8List_NativeUint8List$view(this.output.data.buffer, 0, null);
      if (typeof stride !== "number")
        return H.iae(stride);
      dst = U.InputBuffer$(t2, false, null, startY * stride + 3);
      t2 = this._cropTop;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof mbH !== "number")
        return H.iae(mbH);
      t3 = this._cropBottom;
      if (t2 + mbY + mbH === t3)
        numRows = J.$sub$n(J.$sub$n(t3, t2), startY);
      if (typeof numRows !== "number")
        return H.iae(numRows);
      y = 0;
      for (; y < numRows; ++y) {
        if (typeof mbW !== "number")
          return H.iae(mbW);
        x = 0;
        for (; t2 = alpha.offset, x < mbW; ++x) {
          t2 = J.$and$n(J.$index$asx(alpha.buffer, J.$add$ns(t2, x)), 255);
          J.$indexSet$ax(dst.buffer, J.$add$ns(dst.offset, 4 * x), t2);
        }
        alpha.offset = J.$add$ns(t2, t1.width);
        dst.offset = J.$add$ns(dst.offset, stride);
      }
    },
    _emitFancyRGB$3: function(mbY, mbW, mbH) {
      var t1, t2, t3, dst, curY, curU, curV, yEnd, stride, topU, topV, numLinesOut, y;
      t1 = H.NativeUint8List_NativeUint8List$view(this.output.data.buffer, 0, null);
      t2 = this.webp;
      t3 = t2.width;
      if (typeof t3 !== "number")
        return H.iae(t3);
      dst = U.InputBuffer$(t1, false, null, mbY * t3 * 4);
      curY = U.InputBuffer$from(this._y, null, 0);
      curU = U.InputBuffer$from(this._u, null, 0);
      curV = U.InputBuffer$from(this._v, null, 0);
      if (typeof mbH !== "number")
        return H.iae(mbH);
      yEnd = mbY + mbH;
      t3 = J.$add$ns(mbW, 1);
      if (typeof t3 !== "number")
        return t3.$shr();
      t3 = C.JSNumber_methods._shrOtherPositive$1(t3, 1);
      stride = J.$mul$ns(t2.width, 4);
      topU = U.InputBuffer$from(this._tmpU, null, 0);
      topV = U.InputBuffer$from(this._tmpV, null, 0);
      t2.progressCallback;
      if (mbY === 0) {
        this._upsample$9(curY, null, curU, curV, curU, curV, dst, null, mbW);
        numLinesOut = mbH;
      } else {
        this._upsample$9(this._tmpY, curY, topU, topV, curU, curV, U.InputBuffer$from(dst, null, J.$negate$n(stride)), dst, mbW);
        numLinesOut = mbH + 1;
      }
      topU.buffer = curU.buffer;
      topV.buffer = curV.buffer;
      for (y = mbY; y += 2, y < yEnd;) {
        topU.offset = curU.offset;
        topV.offset = curV.offset;
        curU.offset = J.$add$ns(curU.offset, this._cacheUVStride);
        curV.offset = J.$add$ns(curV.offset, this._cacheUVStride);
        t1 = dst.offset;
        if (typeof stride !== "number")
          return H.iae(stride);
        dst.offset = J.$add$ns(t1, 2 * stride);
        t1 = curY.offset;
        t2 = this._cacheYStride;
        if (typeof t2 !== "number")
          return H.iae(t2);
        curY.offset = J.$add$ns(t1, 2 * t2);
        t2 = this._cacheYStride;
        if (typeof t2 !== "number")
          return t2.$negate();
        this._upsample$9(U.InputBuffer$from(curY, null, -t2), curY, topU, topV, curU, curV, U.InputBuffer$from(dst, null, -stride), dst, mbW);
      }
      curY.offset = J.$add$ns(curY.offset, this._cacheYStride);
      t1 = this._cropTop;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = this._cropBottom;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 + yEnd < t2) {
        this._tmpY.memcpy$3(0, mbW, curY);
        this._tmpU.memcpy$3(0, t3, curU);
        this._tmpV.memcpy$3(0, t3, curV);
        --numLinesOut;
      } else if ((yEnd & 1) === 0)
        this._upsample$9(curY, null, curU, curV, curU, curV, U.InputBuffer$from(dst, null, stride), null, mbW);
      return numLinesOut;
    },
    _decompressAlphaRows$2: function(row, numRows) {
      var t1, width, height, t2;
      t1 = this.webp;
      width = t1.width;
      height = t1.height;
      if (!(row < 0))
        if (!J.$le$n(numRows, 0)) {
          if (typeof numRows !== "number")
            return H.iae(numRows);
          if (typeof height !== "number")
            return H.iae(height);
          t1 = row + numRows > height;
        } else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return;
      if (row === 0) {
        t1 = J.$mul$ns(width, height);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        this._alphaPlane = new Uint8Array(t1);
        t1 = this._alphaData;
        t2 = new U.WebPAlpha(t1, width, height, 0, 0, 0, 1, false, null, false);
        t2.WebPAlpha$3(t1, width, height);
        this._alpha = t2;
      }
      t1 = this._alpha;
      if (!t1.isAlphaDecoded)
        if (!t1.decode$3(row, numRows, this._alphaPlane))
          return;
      t1 = this._alphaPlane;
      if (typeof width !== "number")
        return H.iae(width);
      return U.InputBuffer$(t1, false, null, row * width);
    },
    _parseResiduals$2: function(mb, tokenBr) {
      var bands, t1, t2, q, block, dst, leftMb, dc, nz, i, acProba, first, tnz, lnz, nonZeroY, y, l, nzCoeffs, x, nz_coeffs, outLeftNz, outTopNz, nonZeroUV, ch;
      bands = this._proba.bands;
      t1 = this._dqm;
      t2 = this._segment;
      if (t2 >>> 0 !== t2 || t2 >= 4)
        return H.ioore(t1, t2);
      q = t1[t2];
      t2 = this._mbData;
      t1 = this._mbX;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      block = t2[t1];
      dst = U.InputBuffer$(block.get$coeffs(), false, null, 0);
      t1 = this._mbInfo;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      leftMb = t1[0];
      dst.memset$3(0, J.$sub$n(dst.end, dst.offset), 0);
      if (block.isIntra4x4 !== true) {
        dc = U.InputBuffer$(new Int16Array(16), false, null, 0);
        t1 = mb.get$nzDc();
        t2 = leftMb.get$nzDc();
        nz = this._getCoeffs$6(tokenBr, bands[1], t1 + t2, q.get$y2Mat(), 0, dc);
        t1 = nz > 0 ? 1 : 0;
        leftMb.nzDc = t1;
        mb.nzDc = t1;
        if (nz > 1)
          this._transformWHT$2(dc, dst);
        else {
          t1 = J.$add$ns(J.$index$asx(dc.buffer, J.$add$ns(dc.offset, 0)), 3);
          if (typeof t1 !== "number")
            return t1.$shr();
          t1 = C.JSNumber_methods._shrOtherPositive$1(t1, 3);
          for (i = 0; i < 256; i += 16)
            J.$indexSet$ax(dst.buffer, J.$add$ns(dst.offset, i), t1);
        }
        acProba = bands[0];
        first = 1;
      } else {
        acProba = bands[3];
        first = 0;
      }
      tnz = J.$and$n(mb.get$nz(), 15);
      lnz = J.$and$n(leftMb.get$nz(), 15);
      for (nonZeroY = 0, y = 0; y < 4; ++y) {
        l = lnz & 1;
        for (nzCoeffs = 0, x = 0; x < 4; ++x, nzCoeffs = nz_coeffs) {
          nz = this._getCoeffs$6(tokenBr, acProba, l + (tnz & 1), q.get$y1Mat(), first, dst);
          l = nz > first ? 1 : 0;
          tnz = tnz >>> 1 | l << 7;
          t1 = !J.$eq(J.$index$asx(dst.buffer, J.$add$ns(dst.offset, 0)), 0) ? 1 : 0;
          if (nz > 3)
            t1 = 3;
          else if (nz > 1)
            t1 = 2;
          nz_coeffs = nzCoeffs << 2 | t1;
          dst.offset = J.$add$ns(dst.offset, 16);
        }
        tnz = tnz >>> 4;
        lnz = lnz >>> 1 | l << 7;
        nonZeroY = (nonZeroY << 8 | nzCoeffs) >>> 0;
      }
      outLeftNz = lnz >>> 4;
      for (outTopNz = tnz, nonZeroUV = 0, ch = 0; ch < 4; ch += 2) {
        t1 = mb.get$nz();
        t2 = 4 + ch;
        if (typeof t1 !== "number")
          return t1.$shr();
        tnz = C.JSNumber_methods._shrOtherPositive$1(t1, t2);
        t1 = leftMb.get$nz();
        if (typeof t1 !== "number")
          return t1.$shr();
        lnz = C.JSNumber_methods._shrOtherPositive$1(t1, t2);
        for (nzCoeffs = 0, y = 0; y < 2; ++y) {
          l = lnz & 1;
          for (x = 0; x < 2; ++x, nzCoeffs = nz_coeffs) {
            nz = this._getCoeffs$6(tokenBr, bands[2], l + (tnz & 1), q.get$uvMat(), 0, dst);
            l = nz > 0 ? 1 : 0;
            tnz = tnz >>> 1 | l << 3;
            t1 = !J.$eq(J.$index$asx(dst.buffer, J.$add$ns(dst.offset, 0)), 0) ? 1 : 0;
            if (nz > 3)
              t1 = 3;
            else if (nz > 1)
              t1 = 2;
            nz_coeffs = (nzCoeffs << 2 | t1) >>> 0;
            dst.offset = J.$add$ns(dst.offset, 16);
          }
          tnz = tnz >>> 2;
          lnz = lnz >>> 1 | l << 5;
        }
        nonZeroUV = (nonZeroUV | C.JSInt_methods._shlPositive$1(nzCoeffs, 4 * ch)) >>> 0;
        outTopNz = (outTopNz | C.JSInt_methods._shlPositive$1(tnz << 4 >>> 0, ch)) >>> 0;
        outLeftNz = (outLeftNz | C.JSInt_methods._shlPositive$1(lnz & 240, ch)) >>> 0;
      }
      mb.set$nz(outTopNz);
      leftMb.set$nz(outLeftNz);
      block.nonZeroY = nonZeroY;
      block.nonZeroUV = nonZeroUV;
      block.dither = (nonZeroUV & 43690) !== 0 ? 0 : q.get$dither();
      return (nonZeroY | nonZeroUV) >>> 0 === 0;
    },
    _transformWHT$2: function(src, out) {
      var tmp, i, t1, a0, t2, t3, a1, a2, a3, t4, oi, dc;
      tmp = new Int32Array(16);
      for (i = 0; i < 4; ++i) {
        t1 = 12 + i;
        a0 = J.$add$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, i)), J.$index$asx(src.buffer, J.$add$ns(src.offset, t1)));
        t2 = 4 + i;
        t3 = 8 + i;
        a1 = J.$add$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, t2)), J.$index$asx(src.buffer, J.$add$ns(src.offset, t3)));
        a2 = J.$sub$n(J.$index$asx(src.buffer, J.$add$ns(src.offset, t2)), J.$index$asx(src.buffer, J.$add$ns(src.offset, t3)));
        a3 = J.$sub$n(J.$index$asx(src.buffer, J.$add$ns(src.offset, i)), J.$index$asx(src.buffer, J.$add$ns(src.offset, t1)));
        t4 = J.getInterceptor$ns(a0);
        tmp[i] = t4.$add(a0, a1);
        tmp[t3] = t4.$sub(a0, a1);
        t4 = J.getInterceptor$ns(a3);
        tmp[t2] = t4.$add(a3, a2);
        tmp[t1] = t4.$sub(a3, a2);
      }
      for (oi = 0, i = 0; i < 4; ++i) {
        t1 = i * 4;
        if (t1 >= 16)
          return H.ioore(tmp, t1);
        dc = tmp[t1] + 3;
        t2 = 3 + t1;
        if (t2 >= 16)
          return H.ioore(tmp, t2);
        t2 = tmp[t2];
        a0 = dc + t2;
        t3 = 1 + t1;
        if (t3 >= 16)
          return H.ioore(tmp, t3);
        t3 = tmp[t3];
        t1 = 2 + t1;
        if (t1 >= 16)
          return H.ioore(tmp, t1);
        t1 = tmp[t1];
        a1 = t3 + t1;
        a2 = t3 - t1;
        a3 = dc - t2;
        t2 = C.JSInt_methods._shrOtherPositive$1(a0 + a1, 3);
        J.$indexSet$ax(out.buffer, J.$add$ns(out.offset, oi), t2);
        t2 = C.JSInt_methods._shrOtherPositive$1(a3 + a2, 3);
        J.$indexSet$ax(out.buffer, J.$add$ns(out.offset, oi + 16), t2);
        t2 = C.JSInt_methods._shrOtherPositive$1(a0 - a1, 3);
        J.$indexSet$ax(out.buffer, J.$add$ns(out.offset, oi + 32), t2);
        t2 = C.JSInt_methods._shrOtherPositive$1(a3 - a2, 3);
        J.$indexSet$ax(out.buffer, J.$add$ns(out.offset, oi + 48), t2);
        oi += 64;
      }
    },
    _getLargeValue$2: function(br, p) {
      var t1, v, bit1, cat, tab, len, i;
      t1 = J.getInterceptor$asx(p);
      if (br.getBit$1(t1.$index(p, 3)) === 0)
        v = br.getBit$1(t1.$index(p, 4)) === 0 ? 2 : 3 + br.getBit$1(t1.$index(p, 5));
      else if (br.getBit$1(t1.$index(p, 6)) === 0)
        v = br.getBit$1(t1.$index(p, 7)) === 0 ? 5 + br.getBit$1(159) : 7 + 2 * br.getBit$1(165) + br.getBit$1(145);
      else {
        bit1 = br.getBit$1(t1.$index(p, 8));
        cat = 2 * bit1 + br.getBit$1(t1.$index(p, 9 + bit1));
        if (cat >= 4)
          return H.ioore(C.List_sao, cat);
        tab = C.List_sao[cat];
        t1 = J.getInterceptor$asx(tab);
        len = t1.get$length(tab);
        if (typeof len !== "number")
          return H.iae(len);
        v = 0;
        i = 0;
        for (; i < len; ++i)
          v += v + br.getBit$1(t1.$index(tab, i));
        v += 3 + C.JSInt_methods._shlPositive$1(8, cat);
      }
      return v;
    },
    _getCoeffs$6: function(br, prob, ctx, dq, n, out) {
      var t1, t2, p, n0, p_ctx, v, t3, bit, shift, t4;
      t1 = J.getInterceptor$asx(prob);
      t2 = t1.$index(prob, n).get$probas();
      if (ctx >>> 0 !== ctx || ctx >= 3)
        return H.ioore(t2, ctx);
      p = t2[ctx];
      for (; n < 16; n = n0) {
        if (br.getBit$1(J.$index$asx(p, 0)) === 0)
          return n;
        for (; t2 = J.getInterceptor$asx(p), n0 = n + 1, br.getBit$1(t2.$index(p, 1)) === 0; n = n0) {
          if (n0 < 0 || n0 >= 17)
            return H.ioore(C.List_F1L, n0);
          p = t1.$index(prob, C.List_F1L[n0]).get$probas()[0];
          if (n0 === 16)
            return 16;
        }
        if (n0 < 0 || n0 >= 17)
          return H.ioore(C.List_F1L, n0);
        p_ctx = t1.$index(prob, C.List_F1L[n0]).get$probas();
        if (br.getBit$1(t2.$index(p, 2)) === 0) {
          p = p_ctx[1];
          v = 1;
        } else {
          v = this._getLargeValue$2(br, p);
          p = p_ctx[2];
        }
        if (n < 0 || n >= 16)
          return H.ioore(C.List_cGl1, n);
        t2 = C.List_cGl1[n];
        t3 = br._range;
        if (typeof t3 !== "number")
          return t3.$shr();
        bit = br._bitUpdate$1(C.JSNumber_methods._shrOtherPositive$1(t3, 1));
        t3 = br._range;
        if (t3 >>> 0 !== t3 || t3 >= 128)
          return H.ioore(C.List_8co0, t3);
        shift = C.List_8co0[t3];
        br._range = C.List_wmc[t3];
        t3 = br._bits;
        if (typeof shift !== "number")
          return H.iae(shift);
        br._bits = t3 - shift;
        t3 = bit !== 0 ? -v : v;
        t4 = dq[n > 0 ? 1 : 0];
        J.$indexSet$ax(out.buffer, J.$add$ns(out.offset, t2), t3 * t4);
      }
      return 16;
    },
    _parseIntraMode$0: function() {
      var t1, ti, $top, left, t2, block, ymode, modes, mi, y, x, prob, b, i, t3, mi0;
      t1 = this._mbX;
      ti = 4 * t1;
      $top = this._intraT;
      left = this._intraL;
      t2 = this._mbData;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      block = t2[t1];
      block.set$isIntra4x4(this.br.getBit$1(145) === 0);
      if (block.isIntra4x4 !== true) {
        if (this.br.getBit$1(156) !== 0)
          ymode = this.br.getBit$1(128) !== 0 ? 1 : 3;
        else
          ymode = this.br.getBit$1(163) !== 0 ? 2 : 0;
        block.imodes[0] = ymode;
        J.fillRange$3$ax($top, ti, ti + 4, ymode);
        C.NativeUint8List_methods.fillRange$3(left, 0, 4, ymode);
      } else {
        modes = block.imodes;
        for (mi = 0, y = 0; y < 4; ++y, mi = mi0) {
          ymode = left[y];
          for (x = 0; x < 4; ++x) {
            t1 = ti + x;
            if (t1 >= $top.length)
              return H.ioore($top, t1);
            t2 = $top[t1];
            if (t2 >= 10)
              return H.ioore(C.List_799, t2);
            prob = J.$index$asx(C.List_799[t2], ymode);
            t2 = J.getInterceptor$asx(prob);
            b = this.br.getBit$1(t2.$index(prob, 0));
            if (b >= 18)
              return H.ioore(C.List_Y3m, b);
            i = C.List_Y3m[b];
            for (; J.$gt$n(i, 0);) {
              if (typeof i !== "number")
                return H.iae(i);
              t3 = 2 * i + this.br.getBit$1(t2.$index(prob, i));
              if (t3 >>> 0 !== t3 || t3 >= 18)
                return H.ioore(C.List_Y3m, t3);
              i = C.List_Y3m[t3];
            }
            if (typeof i !== "number")
              return i.$negate();
            ymode = -i;
            $top[t1] = ymode;
          }
          mi0 = mi + 4;
          C.NativeUint8List_methods.setRange$4(modes, mi, mi0, $top, ti);
          left[y] = ymode;
        }
      }
      if (this.br.getBit$1(142) === 0)
        t1 = 0;
      else if (this.br.getBit$1(114) === 0)
        t1 = 2;
      else
        t1 = this.br.getBit$1(183) !== 0 ? 1 : 3;
      block.uvmode = t1;
    },
    static: {"^": "VP8_kScan,VP8_kFilterExtraRows,VP8_kBands,VP8_kCat3,VP8_kCat4,VP8_kCat5,VP8_kCat6,VP8_kCat3456,VP8_kZigzag,VP8_kYModesIntra4,VP8_kBModesProba,VP8_COEFFS_PROBA_0,VP8_COEFFS_UPDATE_PROBA,VP8_DC_TABLE,VP8_AC_TABLE,VP8_FILTER_EXTRA_ROWS,VP8_VP8_SIGNATURE,VP8_MB_FEATURE_TREE_PROBS,VP8_NUM_MB_SEGMENTS,VP8_NUM_REF_LF_DELTAS,VP8_NUM_MODE_LF_DELTAS,VP8_MAX_NUM_PARTITIONS,VP8_B_DC_PRED,VP8_B_TM_PRED,VP8_B_VE_PRED,VP8_B_HE_PRED,VP8_B_RD_PRED,VP8_B_VR_PRED,VP8_B_LD_PRED,VP8_B_VL_PRED,VP8_B_HD_PRED,VP8_B_HU_PRED,VP8_NUM_BMODES,VP8_DC_PRED,VP8_V_PRED,VP8_H_PRED,VP8_TM_PRED,VP8_B_PRED,VP8_B_DC_PRED_NOTOP,VP8_B_DC_PRED_NOLEFT,VP8_B_DC_PRED_NOTOPLEFT,VP8_NUM_B_DC_MODES,VP8_NUM_TYPES,VP8_NUM_BANDS,VP8_NUM_CTX,VP8_NUM_PROBAS,VP8_BPS,VP8_YUV_SIZE,VP8_Y_SIZE,VP8_Y_OFF,VP8_U_OFF,VP8_V_OFF,VP8_YUV_FIX,VP8_YUV_HALF,VP8_YUV_MASK,VP8_YUV_RANGE_MIN,VP8_YUV_RANGE_MAX,VP8_YUV_FIX2,VP8_YUV_HALF2,VP8_YUV_MASK2,VP8_XOR_YUV_MASK2,VP8_kYScale,VP8_kVToR,VP8_kUToG,VP8_kVToG,VP8_kUToB,VP8_kRCst,VP8_kGCst,VP8_kBCst", VP8__checkMode: function(mb_x, mb_y, mode) {
        if (mode === 0)
          if (mb_x === 0)
            return mb_y === 0 ? 6 : 5;
          else
            return mb_y === 0 ? 4 : 0;
        return mode;
      }}
  },
  VP8__upsample_LOAD_UV: {
    "^": "Closure:113;",
    call$2: function(u, v) {
      if (typeof v !== "number")
        return v.$shl();
      return J.$or$n(u, v << 16 >>> 0);
    }
  },
  VP8BitReader: {
    "^": "Object;input,_range,_image$_value,_bits,_eof",
    getValue$1: function(bits) {
      var v, bits0;
      for (v = 0; bits0 = bits - 1, bits > 0; bits = bits0)
        v = (v | C.JSInt_methods.$shl(this.getBit$1(128), bits0)) >>> 0;
      return v;
    },
    getSignedValue$1: function(bits) {
      var value = this.getValue$1(bits);
      return this.getValue$1(1) === 1 ? -value : value;
    },
    getBit$1: function(prob) {
      var t1, bit, shift;
      t1 = J.$mul$ns(this._range, prob);
      if (typeof t1 !== "number")
        return t1.$shr();
      bit = this._bitUpdate$1(C.JSNumber_methods._shrOtherPositive$1(t1, 8));
      if (J.$le$n(this._range, 126)) {
        t1 = this._range;
        if (t1 >>> 0 !== t1 || t1 >= 128)
          return H.ioore(C.List_8co0, t1);
        shift = C.List_8co0[t1];
        this._range = C.List_wmc[t1];
        t1 = this._bits;
        if (typeof shift !== "number")
          return H.iae(shift);
        this._bits = t1 - shift;
      }
      return bit;
    },
    _bitUpdate$1: function(split) {
      var t1, t2, t3, bits, pos;
      if (this._bits < 0) {
        t1 = this.input;
        if (J.$ge$n(J.$sub$n(t1.end, t1.offset), 1)) {
          t1 = this.input;
          t2 = t1.buffer;
          t3 = t1.offset;
          t1.offset = J.$add$ns(t3, 1);
          bits = J.$index$asx(t2, t3);
          t3 = this._image$_value;
          if (typeof t3 !== "number")
            return t3.$shl();
          this._image$_value = J.$or$n(bits, t3 << 8 >>> 0);
          this._bits += 8;
        } else {
          t1 = this.input;
          if (!J.$ge$n(t1.offset, t1.end)) {
            t1 = this.input;
            t2 = t1.buffer;
            t3 = t1.offset;
            t1.offset = J.$add$ns(t3, 1);
            t3 = J.$index$asx(t2, t3);
            t2 = this._image$_value;
            if (typeof t2 !== "number")
              return t2.$shl();
            this._image$_value = J.$or$n(t3, t2 << 8 >>> 0);
            this._bits += 8;
          } else if (!this._eof) {
            t1 = this._image$_value;
            if (typeof t1 !== "number")
              return t1.$shl();
            this._image$_value = t1 << 8 >>> 0;
            this._bits += 8;
            this._eof = true;
          }
        }
      }
      pos = this._bits;
      t1 = this._image$_value;
      if (typeof t1 !== "number")
        return t1.$shr();
      if (C.JSNumber_methods.$shr(t1, pos) > split) {
        t1 = split + 1;
        this._range = J.$sub$n(this._range, t1);
        this._image$_value = J.$sub$n(this._image$_value, C.JSInt_methods.$shl(t1, pos));
        return 1;
      } else {
        this._range = split;
        return 0;
      }
    },
    VP8BitReader$1: function(input) {
      this._range = 254;
      this._image$_value = 0;
      this._bits = -8;
    },
    static: {"^": "VP8BitReader_BITS,VP8BitReader_LOG_2_RANGE,VP8BitReader_NEW_RANGE", VP8BitReader$: function(input) {
        var t1 = new U.VP8BitReader(input, null, null, null, false);
        t1.VP8BitReader$1(input);
        return t1;
      }}
  },
  VP8Filter: {
    "^": "Object;",
    simpleVFilter16$3: function(p, stride, thresh) {
      var p2, i;
      p2 = U.InputBuffer$from(p, null, 0);
      for (i = 0; i < 16; ++i) {
        p2.offset = J.$add$ns(p.offset, i);
        if (this._needsFilter$3(p2, stride, thresh))
          this._doFilter2$2(p2, stride);
      }
    },
    simpleHFilter16$3: function(p, stride, thresh) {
      var p2, i, t1;
      p2 = U.InputBuffer$from(p, null, 0);
      for (i = 0; i < 16; ++i) {
        t1 = p.offset;
        if (typeof stride !== "number")
          return H.iae(stride);
        p2.offset = J.$add$ns(t1, i * stride);
        if (this._needsFilter$3(p2, 1, thresh))
          this._doFilter2$2(p2, 1);
      }
    },
    simpleVFilter16i$3: function(p, stride, thresh) {
      var p2, k, t1;
      p2 = U.InputBuffer$from(p, null, 0);
      for (k = 3; k > 0; --k) {
        t1 = p2.offset;
        if (typeof stride !== "number")
          return H.iae(stride);
        p2.offset = J.$add$ns(t1, 4 * stride);
        this.simpleVFilter16$3(p2, stride, thresh);
      }
    },
    simpleHFilter16i$3: function(p, stride, thresh) {
      var p2, k;
      p2 = U.InputBuffer$from(p, null, 0);
      for (k = 3; k > 0; --k) {
        p2.offset = J.$add$ns(p2.offset, 4);
        this.simpleHFilter16$3(p2, stride, thresh);
      }
    },
    vFilter16i$5: function(p, stride, thresh, ithresh, hev_thresh) {
      var p2, k, t1;
      p2 = U.InputBuffer$from(p, null, 0);
      for (k = 3; k > 0; --k) {
        t1 = p2.offset;
        if (typeof stride !== "number")
          return H.iae(stride);
        p2.offset = J.$add$ns(t1, 4 * stride);
        this._filterLoop24$7(p2, stride, 1, 16, thresh, ithresh, hev_thresh);
      }
    },
    hFilter16i$5: function(p, stride, thresh, ithresh, hev_thresh) {
      var p2, k;
      p2 = U.InputBuffer$from(p, null, 0);
      for (k = 3; k > 0; --k) {
        p2.offset = J.$add$ns(p2.offset, 4);
        this._filterLoop24$7(p2, 1, stride, 16, thresh, ithresh, hev_thresh);
      }
    },
    _filterLoop26$7: function(p, hstride, vstride, size, thresh, ithresh, hev_thresh) {
      var p2, size0, t1, p20, t2, p1, t3, p0, q0, q1, t4, q2, t5, t6, t7, t8, a, a1, a2, a3;
      p2 = U.InputBuffer$from(p, null, 0);
      for (; size0 = size - 1, size > 0; size = size0) {
        if (this._needsFilter2$4(p2, hstride, thresh, ithresh))
          if (this._hev$3(p2, hstride, hev_thresh))
            this._doFilter2$2(p2, hstride);
          else {
            if (typeof hstride !== "number")
              return H.iae(hstride);
            t1 = -3 * hstride;
            p20 = J.$index$asx(p2.buffer, J.$add$ns(p2.offset, t1));
            t2 = -2 * hstride;
            p1 = J.$index$asx(p2.buffer, J.$add$ns(p2.offset, t2));
            t3 = -hstride;
            p0 = J.$index$asx(p2.buffer, J.$add$ns(p2.offset, t3));
            q0 = J.$index$asx(p2.buffer, J.$add$ns(p2.offset, 0));
            q1 = J.$index$asx(p2.buffer, J.$add$ns(p2.offset, hstride));
            t4 = 2 * hstride;
            q2 = J.$index$asx(p2.buffer, J.$add$ns(p2.offset, t4));
            t5 = $.get$VP8Filter_sclip1();
            t6 = J.$sub$n(q0, p0);
            if (typeof t6 !== "number")
              return H.iae(t6);
            t7 = $.get$VP8Filter_sclip1();
            if (typeof p1 !== "number")
              return H.iae(p1);
            if (typeof q1 !== "number")
              return H.iae(q1);
            t8 = 1020 + p1 - q1;
            if (t8 >>> 0 !== t8 || t8 >= t7.length)
              return H.ioore(t7, t8);
            t8 = 1020 + 3 * t6 + t7[t8];
            if (t8 >>> 0 !== t8 || t8 >= t5.length)
              return H.ioore(t5, t8);
            a = t5[t8];
            a1 = C.JSInt_methods.floor$0((27 * a + 63) / 128);
            a2 = C.JSInt_methods.floor$0((18 * a + 63) / 128);
            a3 = C.JSInt_methods.floor$0((9 * a + 63) / 128);
            t8 = $.get$VP8Filter_clip1();
            if (typeof p20 !== "number")
              return H.iae(p20);
            t5 = 255 + p20 + a3;
            if (t5 >>> 0 !== t5 || t5 >= t8.length)
              return H.ioore(t8, t5);
            t5 = t8[t5];
            J.$indexSet$ax(p2.buffer, J.$add$ns(p2.offset, t1), t5);
            t5 = $.get$VP8Filter_clip1();
            t1 = 255 + p1 + a2;
            if (t1 >>> 0 !== t1 || t1 >= t5.length)
              return H.ioore(t5, t1);
            t1 = t5[t1];
            J.$indexSet$ax(p2.buffer, J.$add$ns(p2.offset, t2), t1);
            t1 = $.get$VP8Filter_clip1();
            if (typeof p0 !== "number")
              return H.iae(p0);
            t2 = 255 + p0 + a1;
            if (t2 >>> 0 !== t2 || t2 >= t1.length)
              return H.ioore(t1, t2);
            t2 = t1[t2];
            J.$indexSet$ax(p2.buffer, J.$add$ns(p2.offset, t3), t2);
            t2 = $.get$VP8Filter_clip1();
            if (typeof q0 !== "number")
              return H.iae(q0);
            t3 = 255 + q0 - a1;
            if (t3 >>> 0 !== t3 || t3 >= t2.length)
              return H.ioore(t2, t3);
            t3 = t2[t3];
            J.$indexSet$ax(p2.buffer, J.$add$ns(p2.offset, 0), t3);
            t3 = $.get$VP8Filter_clip1();
            t2 = 255 + q1 - a2;
            if (t2 >>> 0 !== t2 || t2 >= t3.length)
              return H.ioore(t3, t2);
            t2 = t3[t2];
            J.$indexSet$ax(p2.buffer, J.$add$ns(p2.offset, hstride), t2);
            t2 = $.get$VP8Filter_clip1();
            if (typeof q2 !== "number")
              return H.iae(q2);
            t3 = 255 + q2 - a3;
            if (t3 >>> 0 !== t3 || t3 >= t2.length)
              return H.ioore(t2, t3);
            t3 = t2[t3];
            J.$indexSet$ax(p2.buffer, J.$add$ns(p2.offset, t4), t3);
          }
        p2.offset = J.$add$ns(p2.offset, vstride);
      }
    },
    _filterLoop24$7: function(p, hstride, vstride, size, thresh, ithresh, hev_thresh) {
      var p2, size0, t1, p1, t2, p0, q0, q1, t3, a, t4, a1, a2, a3;
      p2 = U.InputBuffer$from(p, null, 0);
      for (; size0 = size - 1, size > 0; size = size0) {
        if (this._needsFilter2$4(p2, hstride, thresh, ithresh))
          if (this._hev$3(p2, hstride, hev_thresh))
            this._doFilter2$2(p2, hstride);
          else {
            if (typeof hstride !== "number")
              return H.iae(hstride);
            t1 = -2 * hstride;
            p1 = J.$index$asx(p2.buffer, J.$add$ns(p2.offset, t1));
            t2 = -hstride;
            p0 = J.$index$asx(p2.buffer, J.$add$ns(p2.offset, t2));
            q0 = J.$index$asx(p2.buffer, J.$add$ns(p2.offset, 0));
            q1 = J.$index$asx(p2.buffer, J.$add$ns(p2.offset, hstride));
            t3 = J.$sub$n(q0, p0);
            if (typeof t3 !== "number")
              return H.iae(t3);
            a = 3 * t3;
            t3 = $.get$VP8Filter_sclip2();
            t4 = 112 + C.JSNumber_methods.floor$0((a + 4) / 8);
            if (t4 < 0 || t4 >= t3.length)
              return H.ioore(t3, t4);
            a1 = t3[t4];
            t4 = $.get$VP8Filter_sclip2();
            t3 = 112 + C.JSNumber_methods.floor$0((a + 3) / 8);
            if (t3 < 0 || t3 >= t4.length)
              return H.ioore(t4, t3);
            a2 = t4[t3];
            a3 = C.JSInt_methods.floor$0((a1 + 1) / 2);
            t3 = $.get$VP8Filter_clip1();
            if (typeof p1 !== "number")
              return H.iae(p1);
            t4 = 255 + p1 + a3;
            if (t4 >>> 0 !== t4 || t4 >= t3.length)
              return H.ioore(t3, t4);
            t4 = t3[t4];
            J.$indexSet$ax(p2.buffer, J.$add$ns(p2.offset, t1), t4);
            t4 = $.get$VP8Filter_clip1();
            if (typeof p0 !== "number")
              return H.iae(p0);
            t1 = 255 + p0 + a2;
            if (t1 >>> 0 !== t1 || t1 >= t4.length)
              return H.ioore(t4, t1);
            t1 = t4[t1];
            J.$indexSet$ax(p2.buffer, J.$add$ns(p2.offset, t2), t1);
            t1 = $.get$VP8Filter_clip1();
            if (typeof q0 !== "number")
              return H.iae(q0);
            t2 = 255 + q0 - a1;
            if (t2 >>> 0 !== t2 || t2 >= t1.length)
              return H.ioore(t1, t2);
            t2 = t1[t2];
            J.$indexSet$ax(p2.buffer, J.$add$ns(p2.offset, 0), t2);
            t2 = $.get$VP8Filter_clip1();
            if (typeof q1 !== "number")
              return H.iae(q1);
            t1 = 255 + q1 - a3;
            if (t1 >>> 0 !== t1 || t1 >= t2.length)
              return H.ioore(t2, t1);
            t1 = t2[t1];
            J.$indexSet$ax(p2.buffer, J.$add$ns(p2.offset, hstride), t1);
          }
        p2.offset = J.$add$ns(p2.offset, vstride);
      }
    },
    _doFilter2$2: function(p, step) {
      var p1, t1, p0, q0, q1, t2, t3, t4, a, a1, a2;
      if (typeof step !== "number")
        return H.iae(step);
      p1 = J.$index$asx(p.buffer, J.$add$ns(p.offset, -2 * step));
      t1 = -step;
      p0 = J.$index$asx(p.buffer, J.$add$ns(p.offset, t1));
      q0 = J.$index$asx(p.buffer, J.$add$ns(p.offset, 0));
      q1 = J.$index$asx(p.buffer, J.$add$ns(p.offset, step));
      t2 = J.$sub$n(q0, p0);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = $.get$VP8Filter_sclip1();
      if (typeof p1 !== "number")
        return H.iae(p1);
      if (typeof q1 !== "number")
        return H.iae(q1);
      t4 = 1020 + p1 - q1;
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        return H.ioore(t3, t4);
      a = 3 * t2 + t3[t4];
      t4 = $.get$VP8Filter_sclip2();
      t3 = 112 + C.JSNumber_methods.floor$0((a + 4) / 8);
      if (t3 < 0 || t3 >= t4.length)
        return H.ioore(t4, t3);
      a1 = t4[t3];
      t3 = $.get$VP8Filter_sclip2();
      t4 = 112 + C.JSNumber_methods.floor$0((a + 3) / 8);
      if (t4 < 0 || t4 >= t3.length)
        return H.ioore(t3, t4);
      a2 = t3[t4];
      t4 = $.get$VP8Filter_clip1();
      if (typeof p0 !== "number")
        return H.iae(p0);
      t3 = 255 + p0 + a2;
      if (t3 >>> 0 !== t3 || t3 >= t4.length)
        return H.ioore(t4, t3);
      t3 = t4[t3];
      J.$indexSet$ax(p.buffer, J.$add$ns(p.offset, t1), t3);
      t3 = $.get$VP8Filter_clip1();
      if (typeof q0 !== "number")
        return H.iae(q0);
      t1 = 255 + q0 - a1;
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        return H.ioore(t3, t1);
      t1 = t3[t1];
      J.$indexSet$ax(p.buffer, J.$add$ns(p.offset, 0), t1);
    },
    _hev$3: function(p, step, thresh) {
      var p1, p0, q0, q1, t1, t2, t3;
      if (typeof step !== "number")
        return H.iae(step);
      p1 = J.$index$asx(p.buffer, J.$add$ns(p.offset, -2 * step));
      p0 = J.$index$asx(p.buffer, J.$add$ns(p.offset, -step));
      q0 = J.$index$asx(p.buffer, J.$add$ns(p.offset, 0));
      q1 = J.$index$asx(p.buffer, J.$add$ns(p.offset, step));
      t1 = $.get$VP8Filter_abs0();
      if (typeof p1 !== "number")
        return H.iae(p1);
      if (typeof p0 !== "number")
        return H.iae(p0);
      t2 = 255 + p1 - p0;
      t3 = t1.length;
      if (t2 >>> 0 !== t2 || t2 >= t3)
        return H.ioore(t1, t2);
      if (t1[t2] <= thresh) {
        if (typeof q1 !== "number")
          return H.iae(q1);
        if (typeof q0 !== "number")
          return H.iae(q0);
        t2 = 255 + q1 - q0;
        if (t2 >>> 0 !== t2 || t2 >= t3)
          return H.ioore(t1, t2);
        t2 = t1[t2] > thresh;
        t1 = t2;
      } else
        t1 = true;
      return t1;
    },
    _needsFilter$3: function(p, step, thresh) {
      var p1, p0, q0, q1, t1, t2, t3;
      if (typeof step !== "number")
        return H.iae(step);
      p1 = J.$index$asx(p.buffer, J.$add$ns(p.offset, -2 * step));
      p0 = J.$index$asx(p.buffer, J.$add$ns(p.offset, -step));
      q0 = J.$index$asx(p.buffer, J.$add$ns(p.offset, 0));
      q1 = J.$index$asx(p.buffer, J.$add$ns(p.offset, step));
      t1 = $.get$VP8Filter_abs0();
      if (typeof p0 !== "number")
        return H.iae(p0);
      if (typeof q0 !== "number")
        return H.iae(q0);
      t2 = 255 + p0 - q0;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      t1 = $.get$VP8Filter_abs1();
      if (typeof p1 !== "number")
        return H.iae(p1);
      if (typeof q1 !== "number")
        return H.iae(q1);
      t3 = 255 + p1 - q1;
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        return H.ioore(t1, t3);
      return 2 * t2 + t1[t3] <= thresh;
    },
    _needsFilter2$4: function(p, step, t, it) {
      var p3, p2, p1, p0, q0, q1, q2, q3, t1, t2, t3, t4, t5, t6;
      if (typeof step !== "number")
        return H.iae(step);
      p3 = J.$index$asx(p.buffer, J.$add$ns(p.offset, -4 * step));
      p2 = J.$index$asx(p.buffer, J.$add$ns(p.offset, -3 * step));
      p1 = J.$index$asx(p.buffer, J.$add$ns(p.offset, -2 * step));
      p0 = J.$index$asx(p.buffer, J.$add$ns(p.offset, -step));
      q0 = J.$index$asx(p.buffer, J.$add$ns(p.offset, 0));
      q1 = J.$index$asx(p.buffer, J.$add$ns(p.offset, step));
      q2 = J.$index$asx(p.buffer, J.$add$ns(p.offset, 2 * step));
      q3 = J.$index$asx(p.buffer, J.$add$ns(p.offset, 3 * step));
      t1 = $.get$VP8Filter_abs0();
      if (typeof p0 !== "number")
        return H.iae(p0);
      if (typeof q0 !== "number")
        return H.iae(q0);
      t2 = 255 + p0 - q0;
      t3 = t1.length;
      if (t2 >>> 0 !== t2 || t2 >= t3)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      t4 = $.get$VP8Filter_abs1();
      if (typeof p1 !== "number")
        return H.iae(p1);
      t5 = 255 + p1;
      if (typeof q1 !== "number")
        return H.iae(q1);
      t6 = t5 - q1;
      if (t6 >>> 0 !== t6 || t6 >= t4.length)
        return H.ioore(t4, t6);
      if (2 * t2 + t4[t6] > t)
        return false;
      if (typeof p3 !== "number")
        return H.iae(p3);
      if (typeof p2 !== "number")
        return H.iae(p2);
      t2 = 255 + p3 - p2;
      if (t2 >>> 0 !== t2 || t2 >= t3)
        return H.ioore(t1, t2);
      if (t1[t2] <= it) {
        t2 = 255 + p2 - p1;
        if (t2 >>> 0 !== t2 || t2 >= t3)
          return H.ioore(t1, t2);
        if (t1[t2] <= it) {
          t2 = t5 - p0;
          if (t2 >>> 0 !== t2 || t2 >= t3)
            return H.ioore(t1, t2);
          if (t1[t2] <= it) {
            if (typeof q3 !== "number")
              return H.iae(q3);
            if (typeof q2 !== "number")
              return H.iae(q2);
            t2 = 255 + q3 - q2;
            if (t2 >>> 0 !== t2 || t2 >= t3)
              return H.ioore(t1, t2);
            if (t1[t2] <= it) {
              t2 = 255 + q2 - q1;
              if (t2 >>> 0 !== t2 || t2 >= t3)
                return H.ioore(t1, t2);
              if (t1[t2] <= it) {
                t2 = 255 + q1 - q0;
                if (t2 >>> 0 !== t2 || t2 >= t3)
                  return H.ioore(t1, t2);
                t2 = t1[t2] <= it;
                t1 = t2;
              } else
                t1 = false;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    transformOne$2: function(src, dst) {
      var $C, si, tmp, i, t1, a, b, t2, c, d, tmp0, t3, di, dc;
      $C = new Int32Array(16);
      for (si = 0, tmp = 0, i = 0; i < 4; ++i) {
        t1 = si + 8;
        a = J.$add$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, si)), J.$index$asx(src.buffer, J.$add$ns(src.offset, t1)));
        b = J.$sub$n(J.$index$asx(src.buffer, J.$add$ns(src.offset, si)), J.$index$asx(src.buffer, J.$add$ns(src.offset, t1)));
        t1 = si + 4;
        t2 = si + 12;
        c = J.floor$0$n(J.$div$n(J.$mul$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, t1)), 35468), 65536)) - J.floor$0$n(J.$div$n(J.$mul$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, t2)), 85627), 65536));
        d = J.floor$0$n(J.$div$n(J.$mul$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, t1)), 85627), 65536)) + J.floor$0$n(J.$div$n(J.$mul$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, t2)), 35468), 65536));
        tmp0 = tmp + 1;
        t2 = J.getInterceptor$ns(a);
        t1 = t2.$add(a, d);
        if (tmp >= 16)
          return H.ioore($C, tmp);
        $C[tmp] = t1;
        tmp = tmp0 + 1;
        t1 = J.getInterceptor$ns(b);
        t3 = t1.$add(b, c);
        if (tmp0 >= 16)
          return H.ioore($C, tmp0);
        $C[tmp0] = t3;
        tmp0 = tmp + 1;
        t1 = t1.$sub(b, c);
        if (tmp >= 16)
          return H.ioore($C, tmp);
        $C[tmp] = t1;
        tmp = tmp0 + 1;
        t2 = t2.$sub(a, d);
        if (tmp0 >= 16)
          return H.ioore($C, tmp0);
        $C[tmp0] = t2;
        ++si;
      }
      for (di = 0, tmp = 0, i = 0; i < 4; ++i) {
        if (tmp >= 16)
          return H.ioore($C, tmp);
        dc = $C[tmp] + 4;
        t1 = tmp + 8;
        if (t1 >= 16)
          return H.ioore($C, t1);
        t1 = $C[t1];
        a = dc + t1;
        b = dc - t1;
        t1 = tmp + 4;
        if (t1 >= 16)
          return H.ioore($C, t1);
        t2 = C.JSInt_methods.floor$0($C[t1] * 35468 / 65536);
        t3 = tmp + 12;
        if (t3 >= 16)
          return H.ioore($C, t3);
        c = t2 - C.JSInt_methods.floor$0($C[t3] * 85627 / 65536);
        d = C.JSInt_methods.floor$0($C[t1] * 85627 / 65536) + C.JSInt_methods.floor$0($C[t3] * 35468 / 65536);
        U.VP8Filter__store(dst, di, 0, 0, a + d);
        U.VP8Filter__store(dst, di, 1, 0, b + c);
        U.VP8Filter__store(dst, di, 2, 0, b - c);
        U.VP8Filter__store(dst, di, 3, 0, a - d);
        ++tmp;
        di += 32;
      }
    },
    transformDC$2: function(src, dst) {
      var DC, j, i;
      DC = J.$add$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, 0)), 4);
      for (j = 0; j < 4; ++j)
        for (i = 0; i < 4; ++i)
          U.VP8Filter__store(dst, 0, i, j, DC);
    },
    transformDCUV$2: function(src, dst) {
      if (!J.$eq(J.$index$asx(src.buffer, J.$add$ns(src.offset, 0)), 0))
        this.transformDC$2(src, dst);
      if (!J.$eq(J.$index$asx(src.buffer, J.$add$ns(src.offset, 16)), 0))
        this.transformDC$2(U.InputBuffer$from(src, null, 16), U.InputBuffer$from(dst, null, 4));
      if (!J.$eq(J.$index$asx(src.buffer, J.$add$ns(src.offset, 32)), 0))
        this.transformDC$2(U.InputBuffer$from(src, null, 32), U.InputBuffer$from(dst, null, 128));
      if (!J.$eq(J.$index$asx(src.buffer, J.$add$ns(src.offset, 48)), 0))
        this.transformDC$2(U.InputBuffer$from(src, null, 48), U.InputBuffer$from(dst, null, 132));
    },
    static: {"^": "VP8Filter_PredLuma4,VP8Filter_PredLuma16,VP8Filter_PredChroma8,VP8Filter_kC1,VP8Filter_kC2,VP8Filter_abs0,VP8Filter_abs1,VP8Filter_sclip1,VP8Filter_sclip2,VP8Filter_clip1,VP8Filter___maxN,VP8Filter__tablesInitialized", VP8Filter_AVG3: function(a, b, c) {
        if (typeof b !== "number")
          return H.iae(b);
        return J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns(J.$add$ns(a, 2 * b), c), 2), 4));
      }, VP8Filter_VE4: [function(dst) {
        var t1, vals, i;
        t1 = J.getInterceptor$asx(dst);
        vals = [U.VP8Filter_AVG3(t1.$index(dst, -33), t1.$index(dst, -32), t1.$index(dst, -31)), U.VP8Filter_AVG3(t1.$index(dst, -32), t1.$index(dst, -31), t1.$index(dst, -30)), U.VP8Filter_AVG3(t1.$index(dst, -31), t1.$index(dst, -30), t1.$index(dst, -29)), U.VP8Filter_AVG3(t1.$index(dst, -30), t1.$index(dst, -29), t1.$index(dst, -28))];
        for (i = 0; i < 4; ++i)
          dst.memcpy$3(i * 32, 4, vals);
      }, "call$1", "VP8Filter_VE4$closure", 2, 0, 25], VP8Filter_HE4: [function(dst) {
        var t1, $A, $B, $C, $D, $E, d2, t2;
        t1 = J.getInterceptor$asx(dst);
        $A = t1.$index(dst, -33);
        $B = t1.$index(dst, -1);
        $C = t1.$index(dst, 31);
        $D = t1.$index(dst, 63);
        $E = t1.$index(dst, 95);
        d2 = U.InputBuffer$from(dst, null, 0);
        t1 = d2.toUint32List$0();
        t2 = U.VP8Filter_AVG3($A, $B, $C);
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1[0] = 16843009 * t2;
        d2.offset = J.$add$ns(d2.offset, 32);
        t2 = d2.toUint32List$0();
        t1 = U.VP8Filter_AVG3($B, $C, $D);
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t2[0] = 16843009 * t1;
        d2.offset = J.$add$ns(d2.offset, 32);
        t1 = d2.toUint32List$0();
        t2 = U.VP8Filter_AVG3($C, $D, $E);
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1[0] = 16843009 * t2;
        d2.offset = J.$add$ns(d2.offset, 32);
        t2 = d2.toUint32List$0();
        t1 = U.VP8Filter_AVG3($D, $E, $E);
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t2[0] = 16843009 * t1;
      }, "call$1", "VP8Filter_HE4$closure", 2, 0, 25], VP8Filter_DC4: [function(dst) {
        var t1, dc, i, t2;
        for (t1 = J.getInterceptor$asx(dst), dc = 4, i = 0; i < 4; ++i) {
          t2 = J.$add$ns(t1.$index(dst, i - 32), t1.$index(dst, -1 + i * 32));
          if (typeof t2 !== "number")
            return H.iae(t2);
          dc += t2;
        }
        dc = C.JSNumber_methods._shrOtherPositive$1(dc, 3);
        for (i = 0; i < 4; ++i)
          dst.memset$3(i * 32, 4, dc);
      }, "call$1", "VP8Filter_DC4$closure", 2, 0, 25], VP8Filter_trueMotion: function(dst, size) {
        var t1, t2, clip0, di, y, clip, x, t3;
        t1 = J.getInterceptor$asx(dst);
        t2 = t1.$index(dst, -33);
        if (typeof t2 !== "number")
          return H.iae(t2);
        clip0 = 255 - t2;
        for (di = 0, y = 0; y < size; ++y) {
          t2 = t1.$index(dst, di - 1);
          if (typeof t2 !== "number")
            return H.iae(t2);
          clip = clip0 + t2;
          for (x = 0; x < size; ++x) {
            t2 = $.get$VP8Filter_clip1();
            t3 = t1.$index(dst, -32 + x);
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = clip + t3;
            if (t3 >>> 0 !== t3 || t3 >= t2.length)
              return H.ioore(t2, t3);
            t1.$indexSet(dst, di + x, t2[t3]);
          }
          di += 32;
        }
      }, VP8Filter_TM4: [function(dst) {
        U.VP8Filter_trueMotion(dst, 4);
      }, "call$1", "VP8Filter_TM4$closure", 2, 0, 25], VP8Filter_TM8uv: [function(dst) {
        U.VP8Filter_trueMotion(dst, 8);
      }, "call$1", "VP8Filter_TM8uv$closure", 2, 0, 25], VP8Filter_TM16: [function(dst) {
        U.VP8Filter_trueMotion(dst, 16);
      }, "call$1", "VP8Filter_TM16$closure", 2, 0, 25], VP8Filter_RD4: [function(dst) {
        var t1, I, $J, $K, $L, $X, $A, $B, $C, $D, t2;
        t1 = J.getInterceptor$asx(dst);
        I = t1.$index(dst, -1);
        $J = t1.$index(dst, 31);
        $K = t1.$index(dst, 63);
        $L = t1.$index(dst, 95);
        $X = t1.$index(dst, -33);
        $A = t1.$index(dst, -32);
        $B = t1.$index(dst, -31);
        $C = t1.$index(dst, -30);
        $D = t1.$index(dst, -29);
        t1.$indexSet(dst, 96, U.VP8Filter_AVG3($J, $K, $L));
        t2 = U.VP8Filter_AVG3(I, $J, $K);
        t1.$indexSet(dst, 97, t2);
        t1.$indexSet(dst, 64, t2);
        t2 = U.VP8Filter_AVG3($X, I, $J);
        t1.$indexSet(dst, 98, t2);
        t1.$indexSet(dst, 65, t2);
        t1.$indexSet(dst, 32, t2);
        t2 = U.VP8Filter_AVG3($A, $X, I);
        t1.$indexSet(dst, 99, t2);
        t1.$indexSet(dst, 66, t2);
        t1.$indexSet(dst, 33, t2);
        t1.$indexSet(dst, 0, t2);
        t2 = U.VP8Filter_AVG3($B, $A, $X);
        t1.$indexSet(dst, 67, t2);
        t1.$indexSet(dst, 34, t2);
        t1.$indexSet(dst, 1, t2);
        t2 = U.VP8Filter_AVG3($C, $B, $A);
        t1.$indexSet(dst, 35, t2);
        t1.$indexSet(dst, 2, t2);
        t1.$indexSet(dst, 3, U.VP8Filter_AVG3($D, $C, $B));
      }, "call$1", "VP8Filter_RD4$closure", 2, 0, 25], VP8Filter_LD4: [function(dst) {
        var t1, $A, $B, $C, $D, $E, $F, $G, $H, t2;
        t1 = J.getInterceptor$asx(dst);
        $A = t1.$index(dst, -32);
        $B = t1.$index(dst, -31);
        $C = t1.$index(dst, -30);
        $D = t1.$index(dst, -29);
        $E = t1.$index(dst, -28);
        $F = t1.$index(dst, -27);
        $G = t1.$index(dst, -26);
        $H = t1.$index(dst, -25);
        t1.$indexSet(dst, 0, U.VP8Filter_AVG3($A, $B, $C));
        t2 = U.VP8Filter_AVG3($B, $C, $D);
        t1.$indexSet(dst, 32, t2);
        t1.$indexSet(dst, 1, t2);
        t2 = U.VP8Filter_AVG3($C, $D, $E);
        t1.$indexSet(dst, 64, t2);
        t1.$indexSet(dst, 33, t2);
        t1.$indexSet(dst, 2, t2);
        t2 = U.VP8Filter_AVG3($D, $E, $F);
        t1.$indexSet(dst, 96, t2);
        t1.$indexSet(dst, 65, t2);
        t1.$indexSet(dst, 34, t2);
        t1.$indexSet(dst, 3, t2);
        t2 = U.VP8Filter_AVG3($E, $F, $G);
        t1.$indexSet(dst, 97, t2);
        t1.$indexSet(dst, 66, t2);
        t1.$indexSet(dst, 35, t2);
        t2 = U.VP8Filter_AVG3($F, $G, $H);
        t1.$indexSet(dst, 98, t2);
        t1.$indexSet(dst, 67, t2);
        t1.$indexSet(dst, 99, U.VP8Filter_AVG3($G, $H, $H));
      }, "call$1", "VP8Filter_LD4$closure", 2, 0, 25], VP8Filter_VR4: [function(dst) {
        var t1, I, $J, $K, $X, $A, $B, $C, $D, t2;
        t1 = J.getInterceptor$asx(dst);
        I = t1.$index(dst, -1);
        $J = t1.$index(dst, 31);
        $K = t1.$index(dst, 63);
        $X = t1.$index(dst, -33);
        $A = t1.$index(dst, -32);
        $B = t1.$index(dst, -31);
        $C = t1.$index(dst, -30);
        $D = t1.$index(dst, -29);
        t2 = J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($X, $A), 1), 2));
        t1.$indexSet(dst, 65, t2);
        t1.$indexSet(dst, 0, t2);
        t2 = J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($A, $B), 1), 2));
        t1.$indexSet(dst, 66, t2);
        t1.$indexSet(dst, 1, t2);
        t2 = J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($B, $C), 1), 2));
        t1.$indexSet(dst, 67, t2);
        t1.$indexSet(dst, 2, t2);
        t1.$indexSet(dst, 3, J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($C, $D), 1), 2)));
        t1.$indexSet(dst, 96, U.VP8Filter_AVG3($K, $J, I));
        t1.$indexSet(dst, 64, U.VP8Filter_AVG3($J, I, $X));
        t2 = U.VP8Filter_AVG3(I, $X, $A);
        t1.$indexSet(dst, 97, t2);
        t1.$indexSet(dst, 32, t2);
        t2 = U.VP8Filter_AVG3($X, $A, $B);
        t1.$indexSet(dst, 98, t2);
        t1.$indexSet(dst, 33, t2);
        t2 = U.VP8Filter_AVG3($A, $B, $C);
        t1.$indexSet(dst, 99, t2);
        t1.$indexSet(dst, 34, t2);
        t1.$indexSet(dst, 35, U.VP8Filter_AVG3($B, $C, $D));
      }, "call$1", "VP8Filter_VR4$closure", 2, 0, 25], VP8Filter_VL4: [function(dst) {
        var t1, $A, $B, $C, $D, $E, $F, $G, $H, t2;
        t1 = J.getInterceptor$asx(dst);
        $A = t1.$index(dst, -32);
        $B = t1.$index(dst, -31);
        $C = t1.$index(dst, -30);
        $D = t1.$index(dst, -29);
        $E = t1.$index(dst, -28);
        $F = t1.$index(dst, -27);
        $G = t1.$index(dst, -26);
        $H = t1.$index(dst, -25);
        t1.$indexSet(dst, 0, J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($A, $B), 1), 2)));
        t2 = J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($B, $C), 1), 2));
        t1.$indexSet(dst, 64, t2);
        t1.$indexSet(dst, 1, t2);
        t2 = J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($C, $D), 1), 2));
        t1.$indexSet(dst, 65, t2);
        t1.$indexSet(dst, 2, t2);
        t2 = J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($D, $E), 1), 2));
        t1.$indexSet(dst, 66, t2);
        t1.$indexSet(dst, 3, t2);
        t1.$indexSet(dst, 32, U.VP8Filter_AVG3($A, $B, $C));
        t2 = U.VP8Filter_AVG3($B, $C, $D);
        t1.$indexSet(dst, 96, t2);
        t1.$indexSet(dst, 33, t2);
        t2 = U.VP8Filter_AVG3($C, $D, $E);
        t1.$indexSet(dst, 97, t2);
        t1.$indexSet(dst, 34, t2);
        t2 = U.VP8Filter_AVG3($D, $E, $F);
        t1.$indexSet(dst, 98, t2);
        t1.$indexSet(dst, 35, t2);
        t1.$indexSet(dst, 67, U.VP8Filter_AVG3($E, $F, $G));
        t1.$indexSet(dst, 99, U.VP8Filter_AVG3($F, $G, $H));
      }, "call$1", "VP8Filter_VL4$closure", 2, 0, 25], VP8Filter_HU4: [function(dst) {
        var t1, I, $J, $K, $L, t2;
        t1 = J.getInterceptor$asx(dst);
        I = t1.$index(dst, -1);
        $J = t1.$index(dst, 31);
        $K = t1.$index(dst, 63);
        $L = t1.$index(dst, 95);
        t1.$indexSet(dst, 0, J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns(I, $J), 1), 2)));
        t2 = J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($J, $K), 1), 2));
        t1.$indexSet(dst, 32, t2);
        t1.$indexSet(dst, 2, t2);
        t2 = J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($K, $L), 1), 2));
        t1.$indexSet(dst, 64, t2);
        t1.$indexSet(dst, 34, t2);
        t1.$indexSet(dst, 1, U.VP8Filter_AVG3(I, $J, $K));
        t2 = U.VP8Filter_AVG3($J, $K, $L);
        t1.$indexSet(dst, 33, t2);
        t1.$indexSet(dst, 3, t2);
        t2 = U.VP8Filter_AVG3($K, $L, $L);
        t1.$indexSet(dst, 65, t2);
        t1.$indexSet(dst, 35, t2);
        t1.$indexSet(dst, 99, $L);
        t1.$indexSet(dst, 98, $L);
        t1.$indexSet(dst, 97, $L);
        t1.$indexSet(dst, 96, $L);
        t1.$indexSet(dst, 66, $L);
        t1.$indexSet(dst, 67, $L);
      }, "call$1", "VP8Filter_HU4$closure", 2, 0, 25], VP8Filter_HD4: [function(dst) {
        var t1, I, $J, $K, $L, $X, $A, $B, $C, t2;
        t1 = J.getInterceptor$asx(dst);
        I = t1.$index(dst, -1);
        $J = t1.$index(dst, 31);
        $K = t1.$index(dst, 63);
        $L = t1.$index(dst, 95);
        $X = t1.$index(dst, -33);
        $A = t1.$index(dst, -32);
        $B = t1.$index(dst, -31);
        $C = t1.$index(dst, -30);
        t2 = J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns(I, $X), 1), 2));
        t1.$indexSet(dst, 34, t2);
        t1.$indexSet(dst, 0, t2);
        t2 = J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($J, I), 1), 2));
        t1.$indexSet(dst, 66, t2);
        t1.$indexSet(dst, 32, t2);
        t2 = J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($K, $J), 1), 2));
        t1.$indexSet(dst, 98, t2);
        t1.$indexSet(dst, 64, t2);
        t1.$indexSet(dst, 96, J.floor$0$n(J.$div$n(J.$add$ns(J.$add$ns($L, $K), 1), 2)));
        t1.$indexSet(dst, 3, U.VP8Filter_AVG3($A, $B, $C));
        t1.$indexSet(dst, 2, U.VP8Filter_AVG3($X, $A, $B));
        t2 = U.VP8Filter_AVG3(I, $X, $A);
        t1.$indexSet(dst, 35, t2);
        t1.$indexSet(dst, 1, t2);
        t2 = U.VP8Filter_AVG3($J, I, $X);
        t1.$indexSet(dst, 67, t2);
        t1.$indexSet(dst, 33, t2);
        t2 = U.VP8Filter_AVG3($K, $J, I);
        t1.$indexSet(dst, 99, t2);
        t1.$indexSet(dst, 65, t2);
        t1.$indexSet(dst, 97, U.VP8Filter_AVG3($L, $K, $J));
      }, "call$1", "VP8Filter_HD4$closure", 2, 0, 25], VP8Filter_VE16: [function(dst) {
        var j;
        for (j = 0; j < 16; ++j)
          dst.memcpy$4(j * 32, 16, dst, -32);
      }, "call$1", "VP8Filter_VE16$closure", 2, 0, 25], VP8Filter_HE16: [function(dst) {
        var t1, di, j;
        for (t1 = J.getInterceptor$asx(dst), di = 0, j = 16; j > 0; --j) {
          dst.memset$3(di, 16, t1.$index(dst, di - 1));
          di += 32;
        }
      }, "call$1", "VP8Filter_HE16$closure", 2, 0, 25], VP8Filter_Put16: function(v, dst) {
        var j;
        for (j = 0; j < 16; ++j)
          dst.memset$3(j * 32, 16, v);
      }, VP8Filter_DC16: [function(dst) {
        var t1, DC, j, t2;
        for (t1 = J.getInterceptor$asx(dst), DC = 16, j = 0; j < 16; ++j) {
          t2 = J.$add$ns(t1.$index(dst, -1 + j * 32), t1.$index(dst, j - 32));
          if (typeof t2 !== "number")
            return H.iae(t2);
          DC += t2;
        }
        U.VP8Filter_Put16(C.JSNumber_methods._shrOtherPositive$1(DC, 5), dst);
      }, "call$1", "VP8Filter_DC16$closure", 2, 0, 25], VP8Filter_DC16NoTop: [function(dst) {
        var t1, DC, j, t2;
        for (t1 = J.getInterceptor$asx(dst), DC = 8, j = 0; j < 16; ++j) {
          t2 = t1.$index(dst, -1 + j * 32);
          if (typeof t2 !== "number")
            return H.iae(t2);
          DC += t2;
        }
        U.VP8Filter_Put16(C.JSNumber_methods._shrOtherPositive$1(DC, 4), dst);
      }, "call$1", "VP8Filter_DC16NoTop$closure", 2, 0, 25], VP8Filter_DC16NoLeft: [function(dst) {
        var t1, DC, i, t2;
        for (t1 = J.getInterceptor$asx(dst), DC = 8, i = 0; i < 16; ++i) {
          t2 = t1.$index(dst, i - 32);
          if (typeof t2 !== "number")
            return H.iae(t2);
          DC += t2;
        }
        U.VP8Filter_Put16(C.JSNumber_methods._shrOtherPositive$1(DC, 4), dst);
      }, "call$1", "VP8Filter_DC16NoLeft$closure", 2, 0, 25], VP8Filter_DC16NoTopLeft: [function(dst) {
        U.VP8Filter_Put16(128, dst);
      }, "call$1", "VP8Filter_DC16NoTopLeft$closure", 2, 0, 25], VP8Filter_VE8uv: [function(dst) {
        var j;
        for (j = 0; j < 8; ++j)
          dst.memcpy$4(j * 32, 8, dst, -32);
      }, "call$1", "VP8Filter_VE8uv$closure", 2, 0, 25], VP8Filter_HE8uv: [function(dst) {
        var t1, di, j;
        for (t1 = J.getInterceptor$asx(dst), di = 0, j = 0; j < 8; ++j) {
          dst.memset$3(di, 8, t1.$index(dst, di - 1));
          di += 32;
        }
      }, "call$1", "VP8Filter_HE8uv$closure", 2, 0, 25], VP8Filter_Put8x8uv: function(value, dst) {
        var j;
        for (j = 0; j < 8; ++j)
          dst.memset$3(j * 32, 8, value);
      }, VP8Filter_DC8uv: [function(dst) {
        var t1, dc0, i, t2;
        for (t1 = J.getInterceptor$asx(dst), dc0 = 8, i = 0; i < 8; ++i) {
          t2 = J.$add$ns(t1.$index(dst, i - 32), t1.$index(dst, -1 + i * 32));
          if (typeof t2 !== "number")
            return H.iae(t2);
          dc0 += t2;
        }
        U.VP8Filter_Put8x8uv(C.JSNumber_methods._shrOtherPositive$1(dc0, 4), dst);
      }, "call$1", "VP8Filter_DC8uv$closure", 2, 0, 25], VP8Filter_DC8uvNoLeft: [function(dst) {
        var t1, dc0, i, t2;
        for (t1 = J.getInterceptor$asx(dst), dc0 = 4, i = 0; i < 8; ++i) {
          t2 = t1.$index(dst, i - 32);
          if (typeof t2 !== "number")
            return H.iae(t2);
          dc0 += t2;
        }
        U.VP8Filter_Put8x8uv(C.JSNumber_methods._shrOtherPositive$1(dc0, 3), dst);
      }, "call$1", "VP8Filter_DC8uvNoLeft$closure", 2, 0, 25], VP8Filter_DC8uvNoTop: [function(dst) {
        var t1, dc0, i, t2;
        for (t1 = J.getInterceptor$asx(dst), dc0 = 4, i = 0; i < 8; ++i) {
          t2 = t1.$index(dst, -1 + i * 32);
          if (typeof t2 !== "number")
            return H.iae(t2);
          dc0 += t2;
        }
        U.VP8Filter_Put8x8uv(C.JSNumber_methods._shrOtherPositive$1(dc0, 3), dst);
      }, "call$1", "VP8Filter_DC8uvNoTop$closure", 2, 0, 25], VP8Filter_DC8uvNoTopLeft: [function(dst) {
        U.VP8Filter_Put8x8uv(128, dst);
      }, "call$1", "VP8Filter_DC8uvNoTopLeft$closure", 2, 0, 25], VP8Filter__store: function(dst, di, x, y, v) {
        var t1, t2;
        t1 = di + x + y * 32;
        t2 = J.$index$asx(dst.buffer, J.$add$ns(dst.offset, t1));
        if (typeof v !== "number")
          return v.$shr();
        t2 = J.$add$ns(t2, C.JSNumber_methods._shrOtherPositive$1(v, 3));
        if (J.$and$n(t2, -256) === 0)
          ;
        else {
          if (typeof t2 !== "number")
            return t2.$lt();
          t2 = t2 < 0 ? 0 : 255;
        }
        J.$indexSet$ax(dst.buffer, J.$add$ns(dst.offset, t1), t2);
      }, VP8Filter__store2: function(dst, y, dc, d, c) {
        var t1 = J.getInterceptor$ns(dc);
        U.VP8Filter__store(dst, 0, 0, y, t1.$add(dc, d));
        U.VP8Filter__store(dst, 0, 1, y, t1.$add(dc, c));
        U.VP8Filter__store(dst, 0, 2, y, t1.$sub(dc, c));
        U.VP8Filter__store(dst, 0, 3, y, t1.$sub(dc, d));
      }, VP8Filter__initTables: function() {
        var i, t1, t2, t3, t4;
        if (!$.VP8Filter__tablesInitialized) {
          for (i = -255; i <= 255; ++i) {
            t1 = $.get$VP8Filter_abs0();
            t2 = 255 + i;
            t3 = i < 0 ? -i : i;
            t4 = t1.length;
            if (t2 >= t4)
              return H.ioore(t1, t2);
            t1[t2] = t3;
            t3 = $.get$VP8Filter_abs1();
            if (t2 >= t4)
              return H.ioore(t1, t2);
            t1 = t1[t2];
            if (t2 >= t3.length)
              return H.ioore(t3, t2);
            t3[t2] = t1 >>> 1;
          }
          for (i = -1020; i <= 1020; ++i) {
            t1 = $.get$VP8Filter_sclip1();
            t2 = 1020 + i;
            if (i < -128)
              t3 = -128;
            else
              t3 = i > 127 ? 127 : i;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            t1[t2] = t3;
          }
          for (i = -112; i <= 112; ++i) {
            t1 = $.get$VP8Filter_sclip2();
            t2 = 112 + i;
            if (i < -16)
              t3 = -16;
            else
              t3 = i > 15 ? 15 : i;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            t1[t2] = t3;
          }
          for (i = -255; i <= 510; ++i) {
            t1 = $.get$VP8Filter_clip1();
            t2 = 255 + i;
            if (i < 0)
              t3 = 0;
            else
              t3 = i > 255 ? 255 : i;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            t1[t2] = t3;
          }
          $.VP8Filter__tablesInitialized = true;
        }
      }}
  },
  VP8FrameHeader: {
    "^": "Object;keyFrame,profile,show,partitionLength"
  },
  VP8PictureHeader: {
    "^": "Object;width>,height>,xscale,yscale,colorspace,clampType"
  },
  VP8SegmentHeader: {
    "^": "Object;useSegment,updateMap,absoluteDelta,quantizer,filterStrength"
  },
  VP8BandProbas: {
    "^": "Object;probas<",
    VP8BandProbas$0: function() {
      var t1, i;
      for (t1 = this.probas, i = 0; i < 3; ++i)
        t1[i] = new Uint8Array(11);
    },
    static: {VP8BandProbas$: function() {
        var t1 = new U.VP8BandProbas(H.setRuntimeTypeInfo(Array(3), [P.Uint8List]));
        t1.VP8BandProbas$0();
        return t1;
      }}
  },
  VP8Proba: {
    "^": "Object;segments,bands",
    VP8Proba$0: function() {
      var t1, i, t2, j;
      for (t1 = this.bands, i = 0; i < 4; ++i) {
        t2 = Array(8);
        t2.fixed$length = init;
        t2.$builtinTypeInfo = [U.VP8BandProbas];
        t1[i] = t2;
        for (j = 0; j < 8; ++j)
          J.$indexSet$ax(t1[i], j, U.VP8BandProbas$());
      }
      C.NativeUint8List_methods.fillRange$3(this.segments, 0, 3, 255);
    },
    static: {VP8Proba$: function() {
        var t1 = new U.VP8Proba(new Uint8Array(3), Array(4));
        t1.VP8Proba$0();
        return t1;
      }}
  },
  VP8FilterHeader: {
    "^": "Object;simple,level,sharpness,useLfDelta,refLfDelta,modeLfDelta"
  },
  VP8FInfo: {
    "^": "Object;fLimit?,fInnerLevel@,fInner@,hevThresh"
  },
  VP8MB: {
    "^": "Object;nz@,nzDc@"
  },
  VP8QuantMatrix: {
    "^": "Object;y1Mat<,y2Mat<,uvMat<,uvQuant,dither<"
  },
  VP8MBData: {
    "^": "Object;coeffs<,isIntra4x4@,imodes,uvmode,nonZeroY,nonZeroUV,dither<"
  },
  VP8TopSamples: {
    "^": "Object;y>,u<,v<"
  },
  VP8L: {
    "^": "Object;input,br,webp,image,_lastPixel,_lastRow,_colorCacheSize,_colorCache,_huffmanMask,_huffmanSubsampleBits,_huffmanXsize,_huffmanImage,_numHtreeGroups,_htreeGroups,_transforms,_transformsSeen,_pixels,_pixels8,_argbCache,_opaque,_ioWidth,_ioHeight",
    decodeHeader$0: function() {
      if (this.br.readBits$1(8) !== 47)
        return false;
      var t1 = this.webp;
      t1.format = 2;
      t1.width = this.br.readBits$1(14) + 1;
      t1.height = this.br.readBits$1(14) + 1;
      t1.hasAlpha = this.br.readBits$1(1) !== 0;
      if (this.br.readBits$1(3) !== 0)
        return false;
      return true;
    },
    decode$0: function() {
      var t1, t2, t3;
      this._lastPixel = 0;
      if (!this.decodeHeader$0())
        return;
      t1 = this.webp;
      this._decodeImageStream$3(t1.width, t1.height, true);
      this._allocateInternalBuffers32b$0();
      this.image = U.Image$(t1.width, t1.height, 4);
      t2 = this._pixels;
      t3 = t1.width;
      t1 = t1.height;
      if (!this._decodeImageData$5(t2, t3, t1, t1, this.get$_processRows()))
        return;
      return this.image;
    },
    _allocateInternalBuffers32b$0: function() {
      var t1, numPixels, cacheTopPixels, cachePixels, totalNumPixels, pixels32;
      t1 = this.webp;
      numPixels = J.$mul$ns(t1.width, t1.height);
      cacheTopPixels = t1.width;
      cachePixels = J.$mul$ns(cacheTopPixels, 16);
      t1 = J.getInterceptor$ns(numPixels);
      totalNumPixels = J.$add$ns(t1.$add(numPixels, cacheTopPixels), cachePixels);
      if (typeof totalNumPixels !== "number" || Math.floor(totalNumPixels) !== totalNumPixels)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(totalNumPixels)));
      pixels32 = new Uint32Array(totalNumPixels);
      this._pixels = pixels32;
      this._pixels8 = H.NativeUint8List_NativeUint8List$view(pixels32.buffer, 0, null);
      this._argbCache = t1.$add(numPixels, cacheTopPixels);
      return true;
    },
    _readTransform$1: function(transformSize) {
      var type, t1, t2, transform, t3, ok, numColors, bits;
      type = this.br.readBits$1(2);
      t1 = this._transformsSeen;
      t2 = C.JSInt_methods._shlPositive$1(1, type);
      if ((t1 & t2) >>> 0 !== 0)
        return false;
      this._transformsSeen = (t1 | t2) >>> 0;
      transform = new U.VP8LTransform(0, 0, 0, null, 0);
      this._transforms.push(transform);
      transform.type = type;
      transform.xsize = transformSize[0];
      transform.ysize = transformSize[1];
      switch (type) {
        case 0:
        case 1:
          t1 = this.br.readBits$1(3) + 2;
          transform.bits = t1;
          t2 = J.$sub$n(J.$add$ns(transform.xsize, C.JSInt_methods._shlPositive$1(1, t1)), 1);
          if (typeof t2 !== "number")
            return t2.$shr();
          t1 = C.JSNumber_methods._shrOtherPositive$1(t2, t1);
          t2 = transform.ysize;
          t3 = transform.bits;
          t2 = J.$sub$n(J.$add$ns(t2, C.JSInt_methods._shlPositive$1(1, t3)), 1);
          if (typeof t2 !== "number")
            return t2.$shr();
          transform.data = this._decodeImageStream$3(t1, C.JSNumber_methods._shrOtherPositive$1(t2, t3), false);
          ok = true;
          break;
        case 3:
          numColors = this.br.readBits$1(8) + 1;
          if (numColors > 16)
            bits = 0;
          else if (numColors > 4)
            bits = 1;
          else {
            t1 = numColors > 2 ? 2 : 3;
            bits = t1;
          }
          t1 = J.$sub$n(J.$add$ns(transform.xsize, C.JSInt_methods._shlPositive$1(1, bits)), 1);
          if (typeof t1 !== "number")
            return t1.$shr();
          transformSize[0] = C.JSNumber_methods._shrOtherPositive$1(t1, bits);
          transform.bits = bits;
          transform.data = this._decodeImageStream$3(numColors, 1, false);
          ok = this._expandColorMap$2(numColors, transform);
          break;
        case 2:
          ok = true;
          break;
        default:
          throw H.wrapException(U.ImageException$("Invalid WebP tranform type: " + type));
      }
      return ok;
    },
    _decodeImageStream$3: function(xsize, ysize, isLevel0) {
      var transformYsize, transformXsize, sizes, colorCacheBits, t1, numBits, t2, t3, totalSize, data;
      if (isLevel0) {
        for (transformYsize = ysize, transformXsize = xsize; this.br.readBits$1(1) !== 0;) {
          sizes = [transformXsize, transformYsize];
          if (!this._readTransform$1(sizes))
            throw H.wrapException(U.ImageException$("Invalid Transform"));
          transformXsize = sizes[0];
          transformYsize = sizes[1];
        }
        isLevel0 = true;
      } else {
        transformYsize = ysize;
        transformXsize = xsize;
      }
      if (this.br.readBits$1(1) !== 0) {
        colorCacheBits = this.br.readBits$1(4);
        if (!(colorCacheBits >= 1 && colorCacheBits <= 11))
          throw H.wrapException(U.ImageException$("Invalid Color Cache"));
      } else
        colorCacheBits = 0;
      if (!this._readHuffmanCodes$4(transformXsize, transformYsize, colorCacheBits, isLevel0))
        throw H.wrapException(U.ImageException$("Invalid Huffman Codes"));
      if (colorCacheBits > 0) {
        t1 = C.JSInt_methods._shlPositive$1(1, colorCacheBits);
        this._colorCacheSize = t1;
        this._colorCache = new U.VP8LColorCache(new Uint32Array(t1), 32 - colorCacheBits);
      } else
        this._colorCacheSize = 0;
      t1 = this.webp;
      t1.width = transformXsize;
      t1.height = transformYsize;
      numBits = this._huffmanSubsampleBits;
      t1 = C.JSInt_methods._shlPositive$1(1, numBits);
      t2 = J.getInterceptor$ns(transformXsize);
      t3 = J.$sub$n(t2.$add(transformXsize, t1), 1);
      if (typeof t3 !== "number")
        return t3.$shr();
      this._huffmanXsize = C.JSNumber_methods._shrOtherPositive$1(t3, numBits);
      this._huffmanMask = numBits === 0 ? 4294967295 : t1 - 1;
      if (isLevel0) {
        this._lastPixel = 0;
        return;
      }
      totalSize = t2.$mul(transformXsize, transformYsize);
      if (typeof totalSize !== "number" || Math.floor(totalSize) !== totalSize)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(totalSize)));
      data = new Uint32Array(totalSize);
      if (!this._decodeImageData$5(data, transformXsize, transformYsize, transformYsize, null))
        throw H.wrapException(U.ImageException$("Failed to decode image data."));
      this._lastPixel = 0;
      return data;
    },
    _decodeImageData$5: function(data, width, height, lastRow, processFunc) {
      var t1, row, col, htreeGroup, src, srcEnd, srcLast, colorCacheLimit, colorCache, mask, lastCached, t2, t3, code, red, blue, alpha, $length, distSymbol, dist, i, t4, key;
      t1 = this._lastPixel;
      if (typeof width !== "number")
        return H.iae(width);
      row = C.JSInt_methods.$tdiv(t1, width);
      col = C.JSInt_methods.$mod(t1, width);
      htreeGroup = this._getHtreeGroupForPos$2(col, row);
      src = this._lastPixel;
      if (typeof height !== "number")
        return H.iae(height);
      srcEnd = width * height;
      if (typeof lastRow !== "number")
        return H.iae(lastRow);
      srcLast = width * lastRow;
      t1 = this._colorCacheSize;
      colorCacheLimit = 280 + t1;
      colorCache = t1 > 0 ? this._colorCache : null;
      mask = this._huffmanMask;
      t1 = processFunc != null;
      lastCached = src;
      while (true) {
        t2 = this.br;
        t3 = t2._input;
        if (!(!(J.$ge$n(t3.offset, t3.end) && t2.bitPos >= 64) && src < srcLast))
          break;
        if ((col & mask) >>> 0 === 0)
          htreeGroup = this._getHtreeGroupForPos$2(col, row);
        t2 = this.br;
        if (t2.bitPos >= 32)
          t2._shiftBytes$0();
        code = htreeGroup.get$htrees()[0].readSymbol$1(this.br);
        if (code < 256) {
          t2 = htreeGroup.htrees;
          red = t2[1].readSymbol$1(this.br);
          t3 = this.br;
          if (t3.bitPos >= 32)
            t3._shiftBytes$0();
          blue = t2[2].readSymbol$1(this.br);
          alpha = t2[3].readSymbol$1(this.br);
          t2 = data.length;
          if (src < 0 || src >= t2)
            return H.ioore(data, src);
          data[src] = (alpha << 24 | red << 16 | code << 8 | blue) >>> 0;
          ++src;
          ++col;
          if (col >= width) {
            ++row;
            if (C.JSNumber_methods.$mod(row, 16) === 0 && t1)
              processFunc.call$1(row);
            if (colorCache != null)
              for (; lastCached < src;) {
                if (lastCached < 0)
                  return H.ioore(data, lastCached);
                colorCache.insert$1(0, data[lastCached]);
                ++lastCached;
              }
            col = 0;
          }
        } else if (code < 280) {
          $length = this._getCopyDistance$1(code - 256);
          distSymbol = htreeGroup.htrees[4].readSymbol$1(this.br);
          t2 = this.br;
          if (t2.bitPos >= 32)
            t2._shiftBytes$0();
          dist = this._planeCodeToDistance$2(width, this._getCopyDistance$1(distSymbol));
          if (src < dist || srcEnd - src < $length)
            return false;
          else {
            for (i = 0; i < $length; ++i) {
              t2 = src + i;
              t3 = src + (i - dist);
              t4 = data.length;
              if (t3 >>> 0 !== t3 || t3 >= t4)
                return H.ioore(data, t3);
              t3 = data[t3];
              if (t2 < 0 || t2 >= t4)
                return H.ioore(data, t2);
              data[t2] = t3;
            }
            src += $length;
          }
          col += $length;
          for (; col >= width;) {
            col -= width;
            ++row;
            if (C.JSNumber_methods.$mod(row, 16) === 0 && t1)
              processFunc.call$1(row);
          }
          if (src < srcLast) {
            if ((col & mask) >>> 0 !== 0)
              htreeGroup = this._getHtreeGroupForPos$2(col, row);
            if (colorCache != null)
              for (; lastCached < src;) {
                if (lastCached < 0 || lastCached >= data.length)
                  return H.ioore(data, lastCached);
                colorCache.insert$1(0, data[lastCached]);
                ++lastCached;
              }
          }
        } else if (code < colorCacheLimit) {
          key = code - 280;
          for (; lastCached < src;) {
            if (lastCached < 0 || lastCached >= data.length)
              return H.ioore(data, lastCached);
            colorCache.insert$1(0, data[lastCached]);
            ++lastCached;
          }
          t2 = colorCache.colors;
          if (key >= t2.length)
            return H.ioore(t2, key);
          t2 = t2[key];
          t3 = data.length;
          if (src < 0 || src >= t3)
            return H.ioore(data, src);
          data[src] = t2;
          ++src;
          ++col;
          if (col >= width) {
            ++row;
            if (C.JSNumber_methods.$mod(row, 16) === 0 && t1)
              processFunc.call$1(row);
            for (; lastCached < src;) {
              if (lastCached < 0)
                return H.ioore(data, lastCached);
              colorCache.insert$1(colorCache, data[lastCached]);
              ++lastCached;
            }
            col = 0;
          }
        } else
          return false;
      }
      if (t1)
        processFunc.call$1(row);
      t1 = this.br;
      t2 = t1._input;
      if (J.$ge$n(t2.offset, t2.end) && t1.bitPos >= 64 && src < srcEnd)
        return false;
      this._lastPixel = src;
      return true;
    },
    _is8bOptimizable$0: function() {
      var t1, t2, t3, i, htrees;
      if (this._colorCacheSize > 0)
        return false;
      for (t1 = this._numHtreeGroups, t2 = this._htreeGroups, t3 = t2.length, i = 0; i < t1; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        htrees = t2[i].get$htrees();
        if (htrees[1].get$numNodes() > 1)
          return false;
        if (htrees[2].get$numNodes() > 1)
          return false;
        if (htrees[3].get$numNodes() > 1)
          return false;
      }
      return true;
    },
    _extractAlphaRows$1: [function(row) {
      var numRows, t1, width, cachePixs, di, src, i, t2, t3, t4;
      numRows = J.$sub$n(row, this._lastRow);
      if (J.$le$n(numRows, 0))
        return;
      t1 = this.webp;
      this._applyInverseTransforms$2(numRows, J.$mul$ns(t1.width, this._lastRow));
      width = t1.width;
      t1 = J.getInterceptor$ns(width);
      cachePixs = t1.$mul(width, numRows);
      di = t1.$mul(width, this._lastRow);
      src = U.InputBuffer$(this._pixels, false, null, this._argbCache);
      if (typeof cachePixs !== "number")
        return H.iae(cachePixs);
      t1 = J.getInterceptor$ns(di);
      i = 0;
      for (; i < cachePixs; ++i) {
        t2 = this._opaque;
        t3 = t1.$add(di, i);
        t4 = J.$index$asx(src.buffer, J.$add$ns(src.offset, i));
        if (typeof t4 !== "number")
          return t4.$shr();
        t4 = C.JSNumber_methods._shrOtherPositive$1(t4, 8);
        if (t3 >>> 0 !== t3 || t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3] = t4 & 255;
      }
      this._lastRow = row;
    }, "call$1", "get$_extractAlphaRows", 2, 0, 119],
    _decodeAlphaData$3: function(width, height, lastRow) {
      var t1, row, col, htreeGroup, pos, end, last, mask, t2, code, $length, distSymbol, dist, i, t3, t4;
      t1 = this._lastPixel;
      if (typeof width !== "number")
        return H.iae(width);
      row = C.JSInt_methods.$tdiv(t1, width);
      col = C.JSInt_methods.$mod(t1, width);
      htreeGroup = this._getHtreeGroupForPos$2(col, row);
      pos = this._lastPixel;
      if (typeof height !== "number")
        return H.iae(height);
      end = width * height;
      last = width * lastRow;
      mask = this._huffmanMask;
      while (true) {
        t1 = this.br;
        t2 = t1._input;
        if (!(!(J.$ge$n(t2.offset, t2.end) && t1.bitPos >= 64) && pos < last))
          break;
        if ((col & mask) >>> 0 === 0)
          htreeGroup = this._getHtreeGroupForPos$2(col, row);
        t1 = this.br;
        if (t1.bitPos >= 32)
          t1._shiftBytes$0();
        code = htreeGroup.get$htrees()[0].readSymbol$1(this.br);
        if (code < 256) {
          t1 = this._pixels8;
          if (pos < 0 || pos >= t1.length)
            return H.ioore(t1, pos);
          t1[pos] = code;
          ++pos;
          ++col;
          if (col >= width) {
            ++row;
            if (C.JSNumber_methods.$mod(row, 16) === 0)
              this._extractPalettedAlphaRows$1(row);
            col = 0;
          }
        } else if (code < 280) {
          $length = this._getCopyDistance$1(code - 256);
          distSymbol = htreeGroup.htrees[4].readSymbol$1(this.br);
          t1 = this.br;
          if (t1.bitPos >= 32)
            t1._shiftBytes$0();
          dist = this._planeCodeToDistance$2(width, this._getCopyDistance$1(distSymbol));
          if (pos >= dist && end - pos >= $length)
            for (t1 = this._pixels8, i = 0; i < $length; ++i) {
              t2 = pos + i;
              t3 = t2 - dist;
              t4 = t1.length;
              if (t3 >>> 0 !== t3 || t3 >= t4)
                return H.ioore(t1, t3);
              t3 = t1[t3];
              if (t2 < 0 || t2 >= t4)
                return H.ioore(t1, t2);
              t1[t2] = t3;
            }
          else {
            this._lastPixel = pos;
            return true;
          }
          pos += $length;
          col += $length;
          for (; col >= width;) {
            col -= width;
            ++row;
            if (C.JSNumber_methods.$mod(row, 16) === 0)
              this._extractPalettedAlphaRows$1(row);
          }
          if (pos < last && (col & mask) >>> 0 !== 0)
            htreeGroup = this._getHtreeGroupForPos$2(col, row);
        } else
          return false;
      }
      this._extractPalettedAlphaRows$1(row);
      this._lastPixel = pos;
      return true;
    },
    _extractPalettedAlphaRows$1: function(row) {
      var t1, numRows, t2, t3, startRow, endRow, t4, t5, t6, t7;
      t1 = this._lastRow;
      if (typeof t1 !== "number")
        return H.iae(t1);
      numRows = row - t1;
      t2 = this._pixels8;
      t1 = J.$mul$ns(this.webp.width, t1);
      t3 = t2.length;
      if (numRows > 0) {
        startRow = this._lastRow;
        endRow = J.$add$ns(startRow, numRows);
        t4 = this._opaque;
        t5 = J.$mul$ns(this._ioWidth, startRow);
        t6 = t4.length;
        t7 = this._transforms;
        if (0 >= t7.length)
          return H.ioore(t7, 0);
        t7[0].colorIndexInverseTransformAlpha$4(startRow, endRow, new U.InputBuffer(t2, t1, t3, t1, false), new U.InputBuffer(t4, t5, t6, t5, false));
      }
      this._lastRow = row;
    },
    _processRows$1: [function(row) {
      var t1, rows, numRows, pi, dy, y, t2, x, t3, c, t4, t5, t6, t7, t8;
      t1 = this.webp;
      rows = J.$mul$ns(t1.width, this._lastRow);
      numRows = J.$sub$n(row, this._lastRow);
      if (J.$le$n(numRows, 0))
        return;
      this._applyInverseTransforms$2(numRows, rows);
      pi = this._argbCache;
      dy = this._lastRow;
      if (typeof numRows !== "number")
        return H.iae(numRows);
      y = 0;
      for (; y < numRows; ++y, dy = t2.$add(dy, 1)) {
        t1.progressCallback;
        t2 = J.getInterceptor$ns(dy);
        x = 0;
        while (true) {
          t3 = t1.width;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(x < t3))
            break;
          t3 = this._pixels;
          if (pi >>> 0 !== pi || pi >= t3.length)
            return H.ioore(t3, pi);
          c = t3[pi];
          t3 = this.image;
          t4 = C.JSInt_methods.clamp$2(c >>> 24 & 255, 0, 255);
          t5 = C.JSInt_methods.clamp$2(c & 255, 0, 255);
          t6 = C.JSInt_methods.clamp$2(c >>> 8 & 255, 0, 255);
          t7 = C.JSInt_methods.clamp$2(c >>> 16 & 255, 0, 255);
          t3.toString;
          t8 = t3.width;
          if (typeof t8 !== "number")
            return H.iae(t8);
          t8 = x < t8 && t2.$ge(dy, 0) && t2.$lt(dy, t3.height);
          if (t8) {
            t8 = t3.data;
            t3 = J.$add$ns(t2.$mul(dy, t3.width), x);
            if (t3 >>> 0 !== t3 || t3 >= t8.length)
              return H.ioore(t8, t3);
            t8[t3] = (t4 << 24 | t5 << 16 | t6 << 8 | t7) >>> 0;
          }
          ++x;
          ++pi;
        }
      }
      this._lastRow = row;
    }, "call$1", "get$_processRows", 2, 0, 119],
    _applyInverseTransforms$2: function(numRows, rows) {
      var t1, n, cachePixs, startRow, endRow, rowsOut, rowsIn, n0, transform, t2;
      t1 = this._transforms;
      n = t1.length;
      cachePixs = J.$mul$ns(this.webp.width, numRows);
      startRow = this._lastRow;
      endRow = J.$add$ns(startRow, numRows);
      rowsOut = this._argbCache;
      J.setRange$4$ax(this._pixels, rowsOut, J.$add$ns(rowsOut, cachePixs), this._pixels, rows);
      for (rowsIn = rows; n0 = n - 1, n > 0; rowsIn = rowsOut, n = n0) {
        if (n0 < 0 || n0 >= t1.length)
          return H.ioore(t1, n0);
        transform = t1[n0];
        t2 = this._pixels;
        transform.inverseTransform$6(startRow, endRow, t2, rowsIn, t2, rowsOut);
      }
    },
    _readHuffmanCodes$4: function(xsize, ysize, colorCacheBits, allowRecursion) {
      var huffmanPrecision, t1, t2, huffmanPixs, huffmanImage, numHtreeGroups, i, group, htreeGroups, t3, j, alphabetSize;
      if (allowRecursion && this.br.readBits$1(1) !== 0) {
        huffmanPrecision = this.br.readBits$1(3) + 2;
        t1 = C.JSInt_methods._shlPositive$1(1, huffmanPrecision);
        t2 = J.$sub$n(J.$add$ns(xsize, t1), 1);
        if (typeof t2 !== "number")
          return t2.$shr();
        t2 = C.JSNumber_methods._shrOtherPositive$1(t2, huffmanPrecision);
        t1 = J.$sub$n(J.$add$ns(ysize, t1), 1);
        if (typeof t1 !== "number")
          return t1.$shr();
        t1 = C.JSNumber_methods._shrOtherPositive$1(t1, huffmanPrecision);
        huffmanPixs = t2 * t1;
        huffmanImage = this._decodeImageStream$3(t2, t1, false);
        this._huffmanSubsampleBits = huffmanPrecision;
        for (numHtreeGroups = 1, i = 0; i < huffmanPixs; ++i) {
          if (i >= huffmanImage.length)
            return H.ioore(huffmanImage, i);
          group = huffmanImage[i] >>> 8 & 65535;
          huffmanImage[i] = group;
          if (group >= numHtreeGroups)
            numHtreeGroups = group + 1;
        }
      } else {
        huffmanImage = null;
        numHtreeGroups = 1;
      }
      htreeGroups = H.setRuntimeTypeInfo(Array(numHtreeGroups), [U._HTreeGroup]);
      for (t1 = htreeGroups.length, t2 = colorCacheBits > 0, i = 0; i < numHtreeGroups; ++i) {
        t3 = U._HTreeGroup$();
        if (i >= t1)
          return H.ioore(htreeGroups, i);
        htreeGroups[i] = t3;
        for (j = 0; j < 5; ++j) {
          alphabetSize = C.List_yTu[j];
          if (j === 0 && t2)
            alphabetSize = J.$add$ns(alphabetSize, C.JSInt_methods._shlPositive$1(1, colorCacheBits));
          if (!this._readHuffmanCode$2(alphabetSize, htreeGroups[i].get$htrees()[j]))
            return false;
        }
      }
      this._huffmanImage = huffmanImage;
      this._numHtreeGroups = numHtreeGroups;
      this._htreeGroups = htreeGroups;
      return true;
    },
    _readHuffmanCode$2: function(alphabetSize, tree) {
      var symbols, codes, codeLengths, numSymbols, firstSymbolLenCode, t1, ok, codeLengthCodeLengths, numCodes, i, t2;
      if (this.br.readBits$1(1) !== 0) {
        symbols = [0, 0];
        codes = [0, 0];
        codeLengths = [0, 0];
        numSymbols = this.br.readBits$1(1) + 1;
        firstSymbolLenCode = this.br.readBits$1(1);
        t1 = this.br;
        symbols[0] = t1.readBits$1(firstSymbolLenCode === 0 ? 1 : 8);
        codes[0] = 0;
        t1 = numSymbols - 1;
        codeLengths[0] = t1;
        if (numSymbols === 2) {
          symbols[1] = this.br.readBits$1(8);
          codes[1] = 1;
          codeLengths[1] = t1;
        }
        ok = tree.buildExplicit$5(codeLengths, codes, symbols, alphabetSize, numSymbols);
      } else {
        codeLengthCodeLengths = new Int32Array(19);
        numCodes = this.br.readBits$1(4) + 4;
        if (numCodes > 19)
          return false;
        if (typeof alphabetSize !== "number" || Math.floor(alphabetSize) !== alphabetSize)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(alphabetSize)));
        codeLengths = new Int32Array(alphabetSize);
        for (i = 0; i < numCodes; ++i) {
          t1 = C.List_uSC0[i];
          t2 = this.br.readBits$1(3);
          if (t1 >>> 0 !== t1 || t1 >= 19)
            return H.ioore(codeLengthCodeLengths, t1);
          codeLengthCodeLengths[t1] = t2;
        }
        ok = this._readHuffmanCodeLengths$3(codeLengthCodeLengths, alphabetSize, codeLengths);
        if (ok)
          ok = tree.buildImplicit$2(codeLengths, alphabetSize);
      }
      return ok;
    },
    _readHuffmanCodeLengths$3: function(codeLengthCodeLengths, numSymbols, codeLengths) {
      var t1, t2, tree, max_symbol, symbol, prev_code_len, max_symbol0, code_len, symbol0, slot, extra_bits, repeat_offset, repeat, $length, repeat0;
      t1 = new Uint8Array(128);
      t2 = new Int16Array(128);
      tree = new U._HuffmanTree(t1, t2, new Int16Array(128), null, 0, 0);
      tree._init$1(0);
      if (!tree.buildImplicit$2(codeLengthCodeLengths, 19))
        return false;
      if (this.br.readBits$1(1) !== 0) {
        t1 = this.br.readBits$1(3);
        max_symbol = 2 + this.br.readBits$1(2 + 2 * t1);
        if (typeof numSymbols !== "number")
          return H.iae(numSymbols);
        if (max_symbol > numSymbols)
          return false;
      } else
        max_symbol = numSymbols;
      if (typeof numSymbols !== "number")
        return H.iae(numSymbols);
      t1 = codeLengths.length;
      symbol = 0;
      prev_code_len = 8;
      for (; symbol < numSymbols; max_symbol = max_symbol0) {
        t2 = J.getInterceptor$n(max_symbol);
        max_symbol0 = t2.$sub(max_symbol, 1);
        if (t2.$eq(max_symbol, 0))
          break;
        t2 = this.br;
        if (t2.bitPos >= 32)
          t2._shiftBytes$0();
        code_len = tree.readSymbol$1(this.br);
        if (code_len < 16) {
          symbol0 = symbol + 1;
          if (symbol < 0 || symbol >= t1)
            return H.ioore(codeLengths, symbol);
          codeLengths[symbol] = code_len;
          if (code_len !== 0)
            prev_code_len = code_len;
          symbol = symbol0;
        } else {
          slot = code_len - 16;
          if (slot >= 3)
            return H.ioore(C.List_2_3_7, slot);
          extra_bits = C.List_2_3_7[slot];
          repeat_offset = C.List_3_3_11[slot];
          t2 = this.br.readBits$1(extra_bits);
          if (typeof repeat_offset !== "number")
            return H.iae(repeat_offset);
          repeat = t2 + repeat_offset;
          if (symbol + repeat > numSymbols)
            return false;
          else {
            $length = code_len === 16 ? prev_code_len : 0;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, symbol = symbol0) {
              symbol0 = symbol + 1;
              if (symbol < 0 || symbol >= t1)
                return H.ioore(codeLengths, symbol);
              codeLengths[symbol] = $length;
            }
          }
        }
      }
      return true;
    },
    _getCopyDistance$1: function(distanceSymbol) {
      var extraBits;
      if (distanceSymbol < 4)
        return distanceSymbol + 1;
      extraBits = C.JSInt_methods._shrOtherPositive$1(distanceSymbol - 2, 1);
      return C.JSInt_methods._shlPositive$1(2 + (distanceSymbol & 1), extraBits) + this.br.readBits$1(extraBits) + 1;
    },
    _planeCodeToDistance$2: function(xsize, planeCode) {
      var t1, distCode, dist;
      if (planeCode > 120)
        return planeCode - 120;
      else {
        t1 = planeCode - 1;
        if (t1 < 0)
          return H.ioore(C.List_AYZ, t1);
        distCode = C.List_AYZ[t1];
        if (typeof distCode !== "number")
          return distCode.$shr();
        t1 = C.JSNumber_methods._shrOtherPositive$1(distCode, 4);
        if (typeof xsize !== "number")
          return H.iae(xsize);
        dist = t1 * xsize + (8 - (distCode & 15));
        return dist >= 1 ? dist : 1;
      }
    },
    _expandColorMap$2: function(numColors, transform) {
      var finalNumColors, newColorMap, data, newData, t1, len, t2, i, t3, t4;
      finalNumColors = C.JSInt_methods._shlPositive$1(1, C.JSInt_methods._shrBothPositive$1(8, transform.bits));
      newColorMap = new Uint32Array(finalNumColors);
      data = H.NativeUint8List_NativeUint8List$view(transform.data.buffer, 0, null);
      newData = H.NativeUint8List_NativeUint8List$view(newColorMap.buffer, 0, null);
      t1 = transform.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = t1[0];
      if (0 >= finalNumColors)
        return H.ioore(newColorMap, 0);
      newColorMap[0] = t1;
      len = 4 * numColors;
      for (t1 = data.length, t2 = newData.length, i = 4; i < len; ++i) {
        if (i >= t1)
          return H.ioore(data, i);
        t3 = data[i];
        t4 = i - 4;
        if (t4 >= t2)
          return H.ioore(newData, t4);
        t4 = newData[t4];
        if (i >= t2)
          return H.ioore(newData, i);
        newData[i] = t3 + t4 & 255;
      }
      for (len = 4 * finalNumColors; i < len; ++i) {
        if (i >= t2)
          return H.ioore(newData, i);
        newData[i] = 0;
      }
      transform.data = newColorMap;
      return true;
    },
    _getMetaIndex$5: function(image, xsize, bits, x, y) {
      var t1;
      if (bits === 0)
        return 0;
      t1 = xsize * C.JSNumber_methods._shrOtherPositive$1(y, bits) + C.JSNumber_methods._shrOtherPositive$1(x, bits);
      if (t1 >= image.length)
        return H.ioore(image, t1);
      return image[t1];
    },
    _getHtreeGroupForPos$2: function(x, y) {
      var metaIndex, t1, t2;
      metaIndex = this._getMetaIndex$5(this._huffmanImage, this._huffmanXsize, this._huffmanSubsampleBits, x, y);
      t1 = this._htreeGroups;
      if (metaIndex >= t1.length)
        return H.ioore(t1, metaIndex);
      if (t1[metaIndex] == null) {
        t2 = U._HTreeGroup$();
        if (metaIndex >= t1.length)
          return H.ioore(t1, metaIndex);
        t1[metaIndex] = t2;
      }
      t1 = this._htreeGroups;
      if (metaIndex >= t1.length)
        return H.ioore(t1, metaIndex);
      return t1[metaIndex];
    },
    static: {"^": "VP8L___count,VP8L__GREEN,VP8L__RED,VP8L__BLUE,VP8L__ALPHA,VP8L__DIST,VP8L__NUM_ARGB_CACHE_ROWS,VP8L__NUM_CODE_LENGTH_CODES,VP8L__CODE_LENGTH_CODE_ORDER,VP8L__CODE_TO_PLANE_CODES,VP8L__CODE_TO_PLANE,VP8L__CODE_LENGTH_LITERALS,VP8L__CODE_LENGTH_REPEAT_CODE,VP8L__CODE_LENGTH_EXTRA_BITS,VP8L__CODE_LENGTH_REPEAT_OFFSETS,VP8L_ALPHABET_SIZE,VP8L_VP8L_MAGIC_BYTE,VP8L_VP8L_VERSION,VP8L_ARGB_BLACK,VP8L_MAX_CACHE_BITS,VP8L_HUFFMAN_CODES_PER_META_CODE,VP8L_DEFAULT_CODE_LENGTH,VP8L_MAX_ALLOWED_CODE_LENGTH,VP8L_NUM_LITERAL_CODES,VP8L_NUM_LENGTH_CODES,VP8L_NUM_DISTANCE_CODES,VP8L_CODE_LENGTH_CODES", VP8L$: function(input, webp) {
        var t1 = new U.VP8LBitReader(0, input, new Uint32Array(2), null);
        t1.VP8LBitReader$1(input);
        return new U.VP8L(input, t1, webp, null, 0, 0, 0, null, 0, 0, 0, null, 0, [], [], 0, null, null, null, null, null, null);
      }}
  },
  VP8LBitReader: {
    "^": "Object;bitPos,_input,_image$_buffer,_buffer8",
    prefetchBits$0: function() {
      var t1, t2, t3, t4, b2;
      t1 = this.bitPos;
      if (t1 < 32) {
        t2 = this._image$_buffer;
        t3 = C.JSInt_methods._shrReceiverPositive$1(t2[0], t1);
        t2 = t2[1];
        if (t1 >>> 0 !== t1 || t1 >= 33)
          return H.ioore(C.List_DKo, t1);
        t4 = C.List_DKo[t1];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t1 = J.$add$ns(C.List_DKo[32 - t1], 1);
        if (typeof t1 !== "number")
          return H.iae(t1);
        b2 = t3 + ((t2 & t4) >>> 0) * t1;
      } else {
        t2 = this._image$_buffer;
        b2 = t1 === 32 ? t2[1] : C.JSInt_methods._shrReceiverPositive$1(t2[1], t1 - 32);
      }
      return b2;
    },
    readBits$1: function(numBits) {
      var t1, t2;
      t1 = this._input;
      if (!(J.$ge$n(t1.offset, t1.end) && this.bitPos >= 64) && J.$lt$n(numBits, 25)) {
        t1 = this.prefetchBits$0();
        if (numBits >>> 0 !== numBits || numBits >= 33)
          return H.ioore(C.List_DKo, numBits);
        t2 = C.List_DKo[numBits];
        if (typeof t2 !== "number")
          return H.iae(t2);
        this.bitPos += numBits;
        this._shiftBytes$0();
        return (t1 & t2) >>> 0;
      } else
        throw H.wrapException(U.ImageException$("Not enough data in input."));
    },
    _shiftBytes$0: function() {
      var t1, t2, t3, b;
      while (true) {
        if (this.bitPos >= 8) {
          t1 = this._input;
          t1 = !J.$ge$n(t1.offset, t1.end);
        } else
          t1 = false;
        if (!t1)
          break;
        t1 = this._input;
        t2 = t1.buffer;
        t3 = t1.offset;
        t1.offset = J.$add$ns(t3, 1);
        b = J.$index$asx(t2, t3);
        t3 = this._image$_buffer;
        t2 = t3[0];
        t1 = t3[1];
        t3[0] = (t2 >>> 8) + (t1 & 255) * 16777216;
        t3[1] = t1 >>> 8;
        t1 = t3[1];
        t2 = J.$mul$ns(b, 16777216);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3[1] = (t1 | t2) >>> 0;
        this.bitPos -= 8;
      }
    },
    VP8LBitReader$1: function(_input) {
      var t1, t2, t3, t4;
      t1 = H.NativeUint8List_NativeUint8List$view(this._image$_buffer.buffer, 0, null);
      this._buffer8 = t1;
      t2 = this._input;
      t3 = t2.buffer;
      t4 = t2.offset;
      t2.offset = J.$add$ns(t4, 1);
      t4 = J.$index$asx(t3, t4);
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = t4;
      t4 = this._buffer8;
      t1 = this._input;
      t3 = t1.buffer;
      t2 = t1.offset;
      t1.offset = J.$add$ns(t2, 1);
      t2 = J.$index$asx(t3, t2);
      if (1 >= t4.length)
        return H.ioore(t4, 1);
      t4[1] = t2;
      t2 = this._buffer8;
      t4 = this._input;
      t3 = t4.buffer;
      t1 = t4.offset;
      t4.offset = J.$add$ns(t1, 1);
      t1 = J.$index$asx(t3, t1);
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      t2[2] = t1;
      t1 = this._buffer8;
      t2 = this._input;
      t3 = t2.buffer;
      t4 = t2.offset;
      t2.offset = J.$add$ns(t4, 1);
      t4 = J.$index$asx(t3, t4);
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      t1[3] = t4;
      t4 = this._buffer8;
      t1 = this._input;
      t3 = t1.buffer;
      t2 = t1.offset;
      t1.offset = J.$add$ns(t2, 1);
      t2 = J.$index$asx(t3, t2);
      if (4 >= t4.length)
        return H.ioore(t4, 4);
      t4[4] = t2;
      t2 = this._buffer8;
      t4 = this._input;
      t3 = t4.buffer;
      t1 = t4.offset;
      t4.offset = J.$add$ns(t1, 1);
      t1 = J.$index$asx(t3, t1);
      if (5 >= t2.length)
        return H.ioore(t2, 5);
      t2[5] = t1;
      t1 = this._buffer8;
      t2 = this._input;
      t3 = t2.buffer;
      t4 = t2.offset;
      t2.offset = J.$add$ns(t4, 1);
      t4 = J.$index$asx(t3, t4);
      if (6 >= t1.length)
        return H.ioore(t1, 6);
      t1[6] = t4;
      t4 = this._buffer8;
      t1 = this._input;
      t3 = t1.buffer;
      t2 = t1.offset;
      t1.offset = J.$add$ns(t2, 1);
      t2 = J.$index$asx(t3, t2);
      if (7 >= t4.length)
        return H.ioore(t4, 7);
      t4[7] = t2;
    },
    static: {"^": "VP8LBitReader_VALUE_SIZE,VP8LBitReader_MAX_NUM_BIT_READ,VP8LBitReader_LBITS,VP8LBitReader_WBITS,VP8LBitReader_LOG8_WBITS,VP8LBitReader_BIT_MASK"}
  },
  VP8LColorCache: {
    "^": "Object;colors,hashShift",
    insert$1: function(_, argb) {
      var key, t1;
      key = C.JSInt_methods._shrReceiverPositive$1((argb * 506832829 & 4294967295) >>> 0, this.hashShift);
      t1 = this.colors;
      if (key >= t1.length)
        return H.ioore(t1, key);
      t1[key] = argb;
    },
    lookup$1: function(key) {
      var t1 = this.colors;
      if (key >>> 0 !== key || key >= t1.length)
        return H.ioore(t1, key);
      return t1[key];
    },
    static: {"^": "VP8LColorCache__HASH_MUL"}
  },
  VP8LTransform: {
    "^": "Object;type>,xsize,ysize,data>,bits",
    inverseTransform$6: function(rowStart, rowEnd, inData, rowsIn, outData, rowsOut) {
      var width, t1, t2, start, outStride, t3, inStride, src;
      width = this.xsize;
      switch (this.type) {
        case 2:
          this.addGreenToBlueAndRed$3(outData, rowsOut, J.$add$ns(rowsOut, J.$mul$ns(J.$sub$n(rowEnd, rowStart), width)));
          break;
        case 0:
          this.predictorInverseTransform$4(rowStart, rowEnd, outData, rowsOut);
          t1 = J.getInterceptor(rowEnd);
          if (!t1.$eq(rowEnd, this.ysize)) {
            t2 = J.getInterceptor$n(rowsOut);
            start = t2.$sub(rowsOut, width);
            J.setRange$4$ax(outData, start, J.$add$ns(start, width), inData, t2.$add(rowsOut, J.$mul$ns(J.$sub$n(t1.$sub(rowEnd, rowStart), 1), width)));
          }
          break;
        case 1:
          this.colorSpaceInverseTransform$4(rowStart, rowEnd, outData, rowsOut);
          break;
        case 3:
          if (J.$eq(rowsIn, rowsOut) && this.bits > 0) {
            t1 = J.getInterceptor$n(rowEnd);
            outStride = J.$mul$ns(t1.$sub(rowEnd, rowStart), width);
            t1 = t1.$sub(rowEnd, rowStart);
            t2 = this.xsize;
            t3 = this.bits;
            t2 = J.$sub$n(J.$add$ns(t2, C.JSInt_methods._shlPositive$1(1, t3)), 1);
            if (typeof t2 !== "number")
              return t2.$shr();
            inStride = J.$mul$ns(t1, C.JSNumber_methods._shrOtherPositive$1(t2, t3));
            src = J.$sub$n(J.$add$ns(rowsOut, outStride), inStride);
            J.setRange$4$ax(outData, src, J.$add$ns(src, inStride), inData, rowsOut);
            this.colorIndexInverseTransform$6(rowStart, rowEnd, inData, src, outData, rowsOut);
          } else
            this.colorIndexInverseTransform$6(rowStart, rowEnd, inData, rowsIn, outData, rowsOut);
          break;
      }
    },
    colorIndexInverseTransformAlpha$4: function(yStart, yEnd, src, dst) {
      var t1, bitsPerPixel, width, colorMap, countMask, bit_mask, y, packed_pixels, x, t2, index;
      t1 = this.bits;
      bitsPerPixel = C.JSInt_methods._shrBothPositive$1(8, t1);
      width = this.xsize;
      colorMap = this.data;
      if (bitsPerPixel < 8) {
        countMask = C.JSInt_methods._shlPositive$1(1, t1) - 1;
        bit_mask = C.JSInt_methods._shlPositive$1(1, bitsPerPixel) - 1;
        for (y = yStart; t1 = J.getInterceptor$n(y), t1.$lt(y, yEnd); y = t1.$add(y, 1)) {
          if (typeof width !== "number")
            return H.iae(width);
          packed_pixels = 0;
          x = 0;
          for (; x < width; ++x) {
            if ((x & countMask) >>> 0 === 0) {
              packed_pixels = J.$index$asx(src.buffer, J.$add$ns(src.offset, 0));
              src.offset = J.$add$ns(src.offset, 1);
            }
            t2 = J.getInterceptor$n(packed_pixels).$and(packed_pixels, bit_mask);
            if (t2 >>> 0 !== t2 || t2 >= colorMap.length)
              return H.ioore(colorMap, t2);
            t2 = colorMap[t2];
            J.$indexSet$ax(dst.buffer, J.$add$ns(dst.offset, 0), t2 >>> 8 & 255);
            dst.offset = J.$add$ns(dst.offset, 1);
            if (typeof packed_pixels !== "number")
              return packed_pixels.$shr();
            packed_pixels = C.JSNumber_methods._shrOtherPositive$1(packed_pixels, bitsPerPixel);
          }
        }
      } else
        for (y = yStart; t1 = J.getInterceptor$n(y), t1.$lt(y, yEnd); y = t1.$add(y, 1)) {
          if (typeof width !== "number")
            return H.iae(width);
          x = 0;
          for (; x < width; ++x) {
            index = J.$index$asx(src.buffer, J.$add$ns(src.offset, 0));
            src.offset = J.$add$ns(src.offset, 1);
            if (index >>> 0 !== index || index >= colorMap.length)
              return H.ioore(colorMap, index);
            t2 = colorMap[index];
            J.$indexSet$ax(dst.buffer, J.$add$ns(dst.offset, 0), t2 >>> 8 & 255);
            dst.offset = J.$add$ns(dst.offset, 1);
          }
        }
    },
    colorIndexInverseTransform$6: function(yStart, yEnd, inData, src, outData, dst) {
      var t1, bitsPerPixel, width, colorMap, countMask, bit_mask, y, packed_pixels, x, src0, dst0, t2;
      t1 = this.bits;
      bitsPerPixel = C.JSInt_methods._shrBothPositive$1(8, t1);
      width = this.xsize;
      colorMap = this.data;
      if (bitsPerPixel < 8) {
        countMask = C.JSInt_methods._shlPositive$1(1, t1) - 1;
        bit_mask = C.JSInt_methods._shlPositive$1(1, bitsPerPixel) - 1;
        for (y = yStart; t1 = J.getInterceptor$n(y), t1.$lt(y, yEnd); y = t1.$add(y, 1)) {
          if (typeof width !== "number")
            return H.iae(width);
          packed_pixels = 0;
          x = 0;
          for (; x < width; ++x, dst = dst0) {
            if ((x & countMask) >>> 0 === 0) {
              src0 = J.$add$ns(src, 1);
              if (src >>> 0 !== src || src >= inData.length)
                return H.ioore(inData, src);
              packed_pixels = inData[src] >>> 8 & 255;
              src = src0;
            }
            dst0 = J.$add$ns(dst, 1);
            t2 = packed_pixels & bit_mask;
            if (t2 < 0 || t2 >= colorMap.length)
              return H.ioore(colorMap, t2);
            t2 = colorMap[t2];
            if (dst >>> 0 !== dst || dst >= outData.length)
              return H.ioore(outData, dst);
            outData[dst] = t2;
            packed_pixels = C.JSInt_methods._shrBothPositive$1(packed_pixels, bitsPerPixel);
          }
        }
      } else
        for (y = yStart; t1 = J.getInterceptor$n(y), t1.$lt(y, yEnd); y = t1.$add(y, 1)) {
          if (typeof width !== "number")
            return H.iae(width);
          x = 0;
          for (; x < width; ++x, dst = dst0, src = src0) {
            dst0 = J.$add$ns(dst, 1);
            src0 = J.$add$ns(src, 1);
            if (src >>> 0 !== src || src >= inData.length)
              return H.ioore(inData, src);
            t2 = inData[src] >>> 8 & 255;
            if (t2 >= colorMap.length)
              return H.ioore(colorMap, t2);
            t2 = colorMap[t2];
            if (dst >>> 0 !== dst || dst >= outData.length)
              return H.ioore(outData, dst);
            outData[dst] = t2;
          }
        }
    },
    colorSpaceInverseTransform$4: function(yStart, yEnd, outData, data) {
      var width, t1, t2, mask, predRow, y, m, t3, pred, x, t4, pred0, t5, t6, green, newRed, newBlue;
      width = this.xsize;
      t1 = this.bits;
      t2 = C.JSInt_methods._shlPositive$1(1, t1);
      mask = t2 - 1;
      t2 = J.$sub$n(J.$add$ns(width, t2), 1);
      if (typeof t2 !== "number")
        return t2.$shr();
      t1 = C.JSNumber_methods._shrOtherPositive$1(t2, t1);
      t2 = this.bits;
      if (typeof yStart !== "number")
        return yStart.$shr();
      predRow = C.JSNumber_methods._shrOtherPositive$1(yStart, t2) * t1;
      if (typeof yEnd !== "number")
        return H.iae(yEnd);
      y = yStart;
      for (; y < yEnd;) {
        t2 = new Uint8Array(3);
        m = new U._VP8LMultipliers(t2);
        if (typeof width !== "number")
          return H.iae(width);
        t3 = J.getInterceptor$ns(data);
        pred = predRow;
        x = 0;
        for (; x < width; ++x) {
          if ((x & mask) >>> 0 === 0) {
            t4 = this.data;
            pred0 = pred + 1;
            if (pred >= t4.length)
              return H.ioore(t4, pred);
            t4 = t4[pred];
            t2[0] = t4 >>> 0 & 255;
            t2[1] = t4 >>> 8 & 255;
            t2[2] = t4 >>> 16 & 255;
            pred = pred0;
          }
          t4 = t3.$add(data, x);
          t5 = t3.$add(data, x);
          t6 = outData.length;
          if (t5 >>> 0 !== t5 || t5 >= t6)
            return H.ioore(outData, t5);
          t5 = outData[t5];
          green = t5 >>> 8 & 255;
          newRed = (t5 >>> 16 & 255) + m.colorTransformDelta$2(t2[0], green) & 4294967295 & 255;
          newBlue = (((t5 & 255) + m.colorTransformDelta$2(t2[1], green) & 4294967295) >>> 0) + m.colorTransformDelta$2(t2[2], newRed) & 4294967295 & 255;
          if (t4 >>> 0 !== t4 || t4 >= t6)
            return H.ioore(outData, t4);
          outData[t4] = (t5 & 4278255360 | newRed << 16 & 4294967295 | newBlue) >>> 0;
        }
        data = t3.$add(data, width);
        ++y;
        if ((y & mask) >>> 0 === 0)
          predRow += t1;
      }
    },
    predictorInverseTransform$4: function(yStart, yEnd, outData, data) {
      var width, t1, t2, t3, t4, x, pred1, mask, predModeBase, y, predModeSrc, predFunc, predModeSrc0, pred;
      width = this.xsize;
      t1 = J.getInterceptor(yStart);
      if (t1.$eq(yStart, 0)) {
        t2 = J.getInterceptor$n(data);
        t3 = t2.$sub(data, 1);
        t4 = outData.length;
        if (t3 >>> 0 !== t3 || t3 >= t4)
          return H.ioore(outData, t3);
        outData[t3];
        U.VP8LTransform__addPixelsEq(outData, data, 4278190080);
        if (typeof width !== "number")
          return H.iae(width);
        x = 1;
        for (; x < width; ++x) {
          t3 = J.$sub$n(t2.$add(data, x), 1);
          if (t3 >>> 0 !== t3 || t3 >= t4)
            return H.ioore(outData, t3);
          pred1 = outData[t3];
          U.VP8LTransform__addPixelsEq(outData, t2.$add(data, x), pred1);
        }
        data = t2.$add(data, width);
        yStart = t1.$add(yStart, 1);
      }
      t1 = this.bits;
      t2 = C.JSInt_methods._shlPositive$1(1, t1);
      mask = t2 - 1;
      t2 = J.$sub$n(J.$add$ns(width, t2), 1);
      if (typeof t2 !== "number")
        return t2.$shr();
      t1 = C.JSNumber_methods._shrOtherPositive$1(t2, t1);
      t2 = this.bits;
      if (typeof yStart !== "number")
        return yStart.$shr();
      predModeBase = C.JSNumber_methods._shrOtherPositive$1(yStart, t2) * t1;
      if (typeof yEnd !== "number")
        return H.iae(yEnd);
      y = yStart;
      for (; y < yEnd;) {
        t2 = J.getInterceptor$n(data);
        t3 = t2.$sub(data, 1);
        t4 = outData.length;
        if (t3 >>> 0 !== t3 || t3 >= t4)
          return H.ioore(outData, t3);
        outData[t3];
        t3 = t2.$sub(data, width);
        if (t3 >>> 0 !== t3 || t3 >= t4)
          return H.ioore(outData, t3);
        U.VP8LTransform__addPixelsEq(outData, data, outData[t3]);
        t3 = this.data;
        predModeSrc = predModeBase + 1;
        if (predModeBase >= t3.length)
          return H.ioore(t3, predModeBase);
        t3 = t3[predModeBase];
        predFunc = $.get$VP8LTransform_PREDICTORS()[t3 >>> 8 & 15];
        if (typeof width !== "number")
          return H.iae(width);
        x = 1;
        for (; x < width; ++x) {
          if ((x & mask) >>> 0 === 0) {
            t3 = this.data;
            predModeSrc0 = predModeSrc + 1;
            if (predModeSrc >= t3.length)
              return H.ioore(t3, predModeSrc);
            t3 = t3[predModeSrc];
            predFunc = $.get$VP8LTransform_PREDICTORS()[t3 >>> 8 & 15];
            predModeSrc = predModeSrc0;
          }
          t3 = J.$sub$n(t2.$add(data, x), 1);
          if (t3 >>> 0 !== t3 || t3 >= t4)
            return H.ioore(outData, t3);
          pred = predFunc.call$3(outData, outData[t3], J.$sub$n(t2.$add(data, x), width));
          U.VP8LTransform__addPixelsEq(outData, t2.$add(data, x), pred);
        }
        data = t2.$add(data, width);
        ++y;
        if ((y & mask) >>> 0 === 0)
          predModeBase += t1;
      }
    },
    addGreenToBlueAndRed$3: function(pixels, data, dataEnd) {
      var argb, green, data0;
      for (; J.$lt$n(data, dataEnd); data = data0) {
        if (data >>> 0 !== data || data >= pixels.length)
          return H.ioore(pixels, data);
        argb = pixels[data];
        green = argb >>> 8 & 255;
        data0 = data + 1;
        pixels[data] = (argb & 4278255360 | (argb & 16711935) + ((green << 16 | green) >>> 0) & 16711935) >>> 0;
      }
    },
    static: {"^": "VP8LTransform_PREDICTOR_TRANSFORM,VP8LTransform_CROSS_COLOR_TRANSFORM,VP8LTransform_SUBTRACT_GREEN,VP8LTransform_COLOR_INDEXING_TRANSFORM,VP8LTransform_PREDICTORS", VP8LTransform__addPixelsEq: function(pixels, a, b) {
        var pa, t1, t2;
        if (a >>> 0 !== a || a >= pixels.length)
          return H.ioore(pixels, a);
        pa = pixels[a];
        t1 = J.getInterceptor$n(b);
        t2 = t1.$and(b, 4278255360);
        if (typeof t2 !== "number")
          return H.iae(t2);
        pixels[a] = (((pa & 4278255360) >>> 0) + t2 & 4278255360 | (pa & 16711935) + t1.$and(b, 16711935) & 16711935) >>> 0;
      }, VP8LTransform__average2: function(a0, a1) {
        if (typeof a0 !== "number")
          return a0.$xor();
        if (typeof a1 !== "number")
          return H.iae(a1);
        return (((a0 ^ a1) & 4278124286) >>> 1) + ((a0 & a1) >>> 0);
      }, VP8LTransform__clip255: function(a) {
        if (a < 0)
          return 0;
        if (a > 255)
          return 255;
        return a;
      }, VP8LTransform__sub3: function(a, b, c) {
        return Math.abs(b - c) - Math.abs(a - c);
      }, VP8LTransform__predictor0: [function(pixels, left, $top) {
        return 4278190080;
      }, "call$3", "VP8LTransform__predictor0$closure", 6, 0, 26], VP8LTransform__predictor1: [function(pixels, left, $top) {
        return left;
      }, "call$3", "VP8LTransform__predictor1$closure", 6, 0, 26], VP8LTransform__predictor2: [function(pixels, left, $top) {
        return J.$index$asx(pixels, $top);
      }, "call$3", "VP8LTransform__predictor2$closure", 6, 0, 26], VP8LTransform__predictor3: [function(pixels, left, $top) {
        return J.$index$asx(pixels, J.$add$ns($top, 1));
      }, "call$3", "VP8LTransform__predictor3$closure", 6, 0, 26], VP8LTransform__predictor4: [function(pixels, left, $top) {
        return J.$index$asx(pixels, J.$sub$n($top, 1));
      }, "call$3", "VP8LTransform__predictor4$closure", 6, 0, 26], VP8LTransform__predictor5: [function(pixels, left, $top) {
        var t1, t2;
        t1 = J.getInterceptor$asx(pixels);
        t2 = t1.$index(pixels, $top);
        return U.VP8LTransform__average2(U.VP8LTransform__average2(left, t1.$index(pixels, J.$add$ns($top, 1))), t2);
      }, "call$3", "VP8LTransform__predictor5$closure", 6, 0, 26], VP8LTransform__predictor6: [function(pixels, left, $top) {
        return U.VP8LTransform__average2(left, J.$index$asx(pixels, J.$sub$n($top, 1)));
      }, "call$3", "VP8LTransform__predictor6$closure", 6, 0, 26], VP8LTransform__predictor7: [function(pixels, left, $top) {
        return U.VP8LTransform__average2(left, J.$index$asx(pixels, $top));
      }, "call$3", "VP8LTransform__predictor7$closure", 6, 0, 26], VP8LTransform__predictor8: [function(pixels, left, $top) {
        var t1 = J.getInterceptor$asx(pixels);
        return U.VP8LTransform__average2(t1.$index(pixels, J.$sub$n($top, 1)), t1.$index(pixels, $top));
      }, "call$3", "VP8LTransform__predictor8$closure", 6, 0, 26], VP8LTransform__predictor9: [function(pixels, left, $top) {
        var t1 = J.getInterceptor$asx(pixels);
        return U.VP8LTransform__average2(t1.$index(pixels, $top), t1.$index(pixels, J.$add$ns($top, 1)));
      }, "call$3", "VP8LTransform__predictor9$closure", 6, 0, 26], VP8LTransform__predictor10: [function(pixels, left, $top) {
        var t1, t2, t3, t4;
        t1 = J.getInterceptor$n($top);
        t2 = J.getInterceptor$asx(pixels);
        t3 = t2.$index(pixels, t1.$sub($top, 1));
        t4 = t2.$index(pixels, $top);
        t1 = t2.$index(pixels, t1.$add($top, 1));
        return U.VP8LTransform__average2(U.VP8LTransform__average2(left, t3), U.VP8LTransform__average2(t4, t1));
      }, "call$3", "VP8LTransform__predictor10$closure", 6, 0, 26], VP8LTransform__predictor11: [function(pixels, left, $top) {
        var t1, t2, t3, t4;
        t1 = J.getInterceptor$asx(pixels);
        t2 = t1.$index(pixels, $top);
        t1 = t1.$index(pixels, J.$sub$n($top, 1));
        if (typeof t2 !== "number")
          return t2.$shr();
        t3 = C.JSNumber_methods._shrOtherPositive$1(t2, 24);
        if (typeof left !== "number")
          return left.$shr();
        t4 = C.JSNumber_methods._shrOtherPositive$1(left, 24);
        if (typeof t1 !== "number")
          return t1.$shr();
        if (U.VP8LTransform__sub3(t3, t4, C.JSNumber_methods._shrOtherPositive$1(t1, 24)) + U.VP8LTransform__sub3(C.JSNumber_methods._shrOtherPositive$1(t2, 16) & 255, C.JSNumber_methods._shrOtherPositive$1(left, 16) & 255, C.JSNumber_methods._shrOtherPositive$1(t1, 16) & 255) + U.VP8LTransform__sub3(C.JSNumber_methods._shrOtherPositive$1(t2, 8) & 255, C.JSNumber_methods._shrOtherPositive$1(left, 8) & 255, C.JSNumber_methods._shrOtherPositive$1(t1, 8) & 255) + U.VP8LTransform__sub3(t2 & 255, left & 255, t1 & 255) <= 0)
          t1 = t2;
        else
          t1 = left;
        return t1;
      }, "call$3", "VP8LTransform__predictor11$closure", 6, 0, 26], VP8LTransform__predictor12: [function(pixels, left, $top) {
        var t1, t2, t3, t4;
        t1 = J.getInterceptor$asx(pixels);
        t2 = t1.$index(pixels, $top);
        t1 = t1.$index(pixels, J.$sub$n($top, 1));
        if (typeof left !== "number")
          return left.$shr();
        t3 = C.JSNumber_methods._shrOtherPositive$1(left, 24);
        if (typeof t2 !== "number")
          return t2.$shr();
        t4 = C.JSNumber_methods._shrOtherPositive$1(t2, 24);
        if (typeof t1 !== "number")
          return t1.$shr();
        return (U.VP8LTransform__clip255(t3 + t4 - C.JSNumber_methods._shrOtherPositive$1(t1, 24)) << 24 | U.VP8LTransform__clip255((C.JSNumber_methods._shrOtherPositive$1(left, 16) & 255) + (C.JSNumber_methods._shrOtherPositive$1(t2, 16) & 255) - (C.JSNumber_methods._shrOtherPositive$1(t1, 16) & 255)) << 16 | U.VP8LTransform__clip255((C.JSNumber_methods._shrOtherPositive$1(left, 8) & 255) + (C.JSNumber_methods._shrOtherPositive$1(t2, 8) & 255) - (C.JSNumber_methods._shrOtherPositive$1(t1, 8) & 255)) << 8 | U.VP8LTransform__clip255((left & 255) + (t2 & 255) - (t1 & 255))) >>> 0;
      }, "call$3", "VP8LTransform__predictor12$closure", 6, 0, 26], VP8LTransform__predictor13: [function(pixels, left, $top) {
        var t1, t2, avg, t3, t4, t5;
        t1 = J.getInterceptor$asx(pixels);
        t2 = t1.$index(pixels, $top);
        t1 = t1.$index(pixels, J.$sub$n($top, 1));
        avg = U.VP8LTransform__average2(left, t2);
        t2 = avg >>> 24;
        if (typeof t1 !== "number")
          return t1.$shr();
        t3 = avg >>> 16 & 255;
        t4 = avg >>> 8 & 255;
        t5 = avg >>> 0 & 255;
        return (U.VP8LTransform__clip255(t2 + C.JSInt_methods._tdivFast$1(t2 - C.JSNumber_methods._shrOtherPositive$1(t1, 24), 2)) << 24 | U.VP8LTransform__clip255(t3 + C.JSInt_methods._tdivFast$1(t3 - (C.JSNumber_methods._shrOtherPositive$1(t1, 16) & 255), 2)) << 16 | U.VP8LTransform__clip255(t4 + C.JSInt_methods._tdivFast$1(t4 - (C.JSNumber_methods._shrOtherPositive$1(t1, 8) & 255), 2)) << 8 | U.VP8LTransform__clip255(t5 + C.JSInt_methods._tdivFast$1(t5 - (C.JSNumber_methods._shrOtherPositive$1(t1, 0) & 255), 2))) >>> 0;
      }, "call$3", "VP8LTransform__predictor13$closure", 6, 0, 26]}
  },
  _VP8LMultipliers: {
    "^": "Object;data>",
    colorTransformDelta$2: function(colorPred, color) {
      var t1, t2, t3, a, b;
      t1 = $.get$__uint8();
      t1[0] = colorPred;
      t2 = $.get$__uint8ToInt8();
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      a = t2[0];
      t1[0] = color;
      if (0 >= t3)
        return H.ioore(t2, 0);
      b = t2[0];
      $.get$__int32()[0] = a * b;
      t2 = $.get$__int32ToUint32();
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      return t2[0] >>> 5;
    }
  },
  WebPAlpha: {
    "^": "Object;input,width>,height>,method,filter,preProcessing,rsrv,isAlphaDecoded,_vp8l,_use8bDecode",
    get$isValid: function() {
      var t1 = this.method;
      if (typeof t1 !== "number")
        return t1.$lt();
      t1 = t1 > 1 || this.filter >= 4 || this.preProcessing > 1 || this.rsrv !== 0;
      if (t1)
        return false;
      return true;
    },
    decode$3: function(row, numRows, output) {
      var t1, unfilterFunc, offset, numPixels, t2, t3, t4;
      if (!this.get$isValid())
        return false;
      t1 = this.filter;
      if (t1 >= 4)
        return H.ioore(C.List_HHa, t1);
      unfilterFunc = C.List_HHa[t1];
      if (this.method === 0) {
        t1 = this.width;
        if (typeof t1 !== "number")
          return H.iae(t1);
        offset = row * t1;
        numPixels = J.$mul$ns(numRows, t1);
        t1 = this.input;
        J.setRange$4$ax(output, offset, numPixels, t1.buffer, J.$add$ns(J.$sub$n(t1.offset, t1.start), offset));
      } else {
        if (typeof numRows !== "number")
          return H.iae(numRows);
        t1 = row + numRows;
        t2 = this._vp8l;
        t2._opaque = output;
        if (this._use8bDecode) {
          t3 = t2.webp;
          t1 = t2._decodeAlphaData$3(t3.width, t3.height, t1);
        } else {
          t3 = t2._pixels;
          t4 = t2.webp;
          t2 = t2._decodeImageData$5(t3, t4.width, t4.height, t1, t2.get$_extractAlphaRows());
          t1 = t2;
        }
        if (!t1)
          return false;
      }
      if (unfilterFunc != null) {
        t1 = this.width;
        unfilterFunc.call$6(t1, this.height, t1, row, numRows, output);
      }
      if (this.preProcessing === 1)
        if (!this._dequantizeLevels$5(output, this.width, this.height, row, numRows))
          return false;
      if (typeof numRows !== "number")
        return H.iae(numRows);
      if (row + numRows === this.height)
        this.isAlphaDecoded = true;
      return true;
    },
    _dequantizeLevels$5: function(data, width, height, row, num_rows) {
      var t1;
      if (data != null)
        if (!J.$le$n(width, 0))
          if (!J.$le$n(height, 0))
            if (!(row < 0))
              if (!J.$lt$n(num_rows, 0)) {
                if (typeof num_rows !== "number")
                  return H.iae(num_rows);
                if (typeof height !== "number")
                  return H.iae(height);
                t1 = row + num_rows > height;
              } else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return false;
      return true;
    },
    WebPAlpha$3: function(input, width, height) {
      var t1, t2, t3, b, alphaDecodedSize, webp, totalNumPixels, n;
      t1 = this.input;
      t2 = t1.buffer;
      t3 = t1.offset;
      t1.offset = J.$add$ns(t3, 1);
      b = J.$index$asx(t2, t3);
      this.method = J.getInterceptor$n(b).$and(b, 3);
      if (typeof b !== "number")
        return b.$shr();
      this.filter = C.JSNumber_methods._shrOtherPositive$1(b, 2) & 3;
      this.preProcessing = C.JSNumber_methods._shrOtherPositive$1(b, 4) & 3;
      this.rsrv = C.JSNumber_methods._shrOtherPositive$1(b, 6) & 3;
      if (this.get$isValid()) {
        t1 = this.method;
        if (t1 === 0) {
          alphaDecodedSize = J.$mul$ns(this.width, this.height);
          t1 = this.input;
          if (J.$lt$n(J.$sub$n(t1.end, t1.offset), alphaDecodedSize))
            this.rsrv = 1;
        } else if (t1 === 1) {
          webp = new U.WebPInfo(false, false, 0, "", "", "", 0, [], null, null, null, null, null, null, null, 0, 0, 4294967295);
          webp.width = this.width;
          webp.height = this.height;
          t1 = U.VP8L$(this.input, webp);
          this._vp8l = t1;
          t1._ioWidth = this.width;
          t1._ioHeight = this.height;
          t1._decodeImageStream$3(webp.width, webp.height, true);
          t1 = this._vp8l._transforms;
          t2 = t1.length;
          if (t2 === 1) {
            if (0 >= t2)
              return H.ioore(t1, 0);
            t1 = J.$eq(J.get$type$x(t1[0]), 3) && this._vp8l._is8bOptimizable$0();
          } else
            t1 = false;
          if (t1) {
            this._use8bDecode = true;
            t1 = this._vp8l;
            t2 = t1.webp;
            totalNumPixels = J.$mul$ns(t2.width, t2.height);
            t1._argbCache = 0;
            t2 = J.getInterceptor$n(totalNumPixels);
            t3 = t2.$mod(totalNumPixels, 4);
            if (typeof t3 !== "number")
              return H.iae(t3);
            n = t2.$add(totalNumPixels, 4 - t3);
            if (typeof n !== "number" || Math.floor(n) !== n)
              H.throwExpression(P.ArgumentError$("Invalid length " + H.S(n)));
            t2 = new Uint8Array(n);
            t1._pixels8 = t2;
            t1._pixels = H.NativeUint32List_NativeUint32List$view(t2.buffer, 0, null);
          } else {
            this._use8bDecode = false;
            this._vp8l._allocateInternalBuffers32b$0();
          }
        } else
          this.rsrv = 1;
      }
    },
    static: {"^": "WebPAlpha_ALPHA_NO_COMPRESSION,WebPAlpha_ALPHA_LOSSLESS_COMPRESSION,WebPAlpha_ALPHA_PREPROCESSED_LEVELS"}
  },
  WebPFrame: {
    "^": "Object;x*,y*,width>,height>,duration',clearFrame?,_reserved,_framePosition,_frameSize<",
    WebPFrame$2: function(input, size) {
      var t1, t2, b;
      this.x = J.$mul$ns(input.readUint24$0(), 2);
      this.y = J.$mul$ns(input.readUint24$0(), 2);
      this.width = J.$add$ns(input.readUint24$0(), 1);
      this.height = J.$add$ns(input.readUint24$0(), 1);
      this.duration = input.readUint24$0();
      t1 = input.buffer;
      t2 = input.offset;
      input.offset = J.$add$ns(t2, 1);
      b = J.$index$asx(t1, t2);
      t2 = J.getInterceptor$n(b);
      this._reserved = t2.$and(b, 127) >>> 7;
      this.clearFrame = t2.$and(b, 1) !== 0;
      this._framePosition = J.$sub$n(input.offset, input.start);
      this._frameSize = size - 16;
    },
    static: {"^": "WebPFrame__ANIMF_HEADER_SIZE"}
  },
  _HuffmanTree: {
    "^": "Object;lutBits,lutSymbol,lutJump,tree,maxNodes,numNodes<",
    _init$1: function(numLeaves) {
      var t1, t2;
      if (numLeaves === 0)
        return false;
      t1 = (numLeaves << 1 >>> 0) - 1;
      this.maxNodes = t1;
      t1 = t1 << 1 >>> 0;
      t2 = new Int32Array(t1);
      this.tree = t2;
      if (1 >= t1)
        return H.ioore(t2, 1);
      t2[1] = -1;
      this.numNodes = 1;
      C.NativeUint8List_methods.fillRange$3(this.lutBits, 0, 128, 255);
      return true;
    },
    buildImplicit$2: function(codeLengths, codeLengthsSize) {
      var t1, numSymbols, rootSymbol, symbol, codes, t2, t3;
      if (typeof codeLengthsSize !== "number")
        return H.iae(codeLengthsSize);
      t1 = codeLengths.length;
      numSymbols = 0;
      rootSymbol = 0;
      symbol = 0;
      for (; symbol < codeLengthsSize; ++symbol) {
        if (symbol >= t1)
          return H.ioore(codeLengths, symbol);
        if (codeLengths[symbol] > 0) {
          ++numSymbols;
          rootSymbol = symbol;
        }
      }
      if (!this._init$1(numSymbols))
        return false;
      if (numSymbols === 1) {
        if (rootSymbol < 0 || rootSymbol >= codeLengthsSize)
          return false;
        return this._addSymbol$3(rootSymbol, 0, 0);
      }
      if (typeof codeLengthsSize !== "number" || Math.floor(codeLengthsSize) !== codeLengthsSize)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(codeLengthsSize)));
      codes = new Int32Array(codeLengthsSize);
      if (!this._huffmanCodeLengthsToCodes$3(codeLengths, codeLengthsSize, codes))
        return false;
      for (t2 = codes.length, symbol = 0; symbol < codeLengthsSize; ++symbol) {
        if (symbol >= t1)
          return H.ioore(codeLengths, symbol);
        t3 = codeLengths[symbol];
        if (t3 > 0) {
          if (symbol >= t2)
            return H.ioore(codes, symbol);
          if (!this._addSymbol$3(symbol, codes[symbol], t3))
            return false;
        }
      }
      return this.numNodes === this.maxNodes;
    },
    buildExplicit$5: function(codeLengths, codes, symbols, maxSymbol, numSymbols) {
      var i;
      if (!this._init$1(numSymbols))
        return false;
      for (i = 0; i < numSymbols; ++i) {
        if (i >= 2)
          return H.ioore(codes, i);
        if (!J.$eq(codes[i], -1)) {
          if (J.$lt$n(symbols[i], 0) || J.$ge$n(symbols[i], maxSymbol))
            return this.numNodes === this.maxNodes;
          if (!this._addSymbol$3(symbols[i], codes[i], codeLengths[i]))
            return this.numNodes === this.maxNodes;
        }
      }
      return this.numNodes === this.maxNodes;
    },
    readSymbol$1: function(br) {
      var bits, newBitPos, lut_ix, lut_bits, node, t1, t2, t3, t4;
      bits = br.prefetchBits$0();
      newBitPos = br.bitPos;
      lut_ix = bits & 127;
      lut_bits = this.lutBits[lut_ix];
      if (lut_bits <= 7) {
        br.bitPos = newBitPos + lut_bits;
        return this.lutSymbol[lut_ix];
      }
      node = this.lutJump[lut_ix];
      newBitPos += 7;
      bits = C.JSNumber_methods._shrOtherPositive$1(bits, 7);
      t1 = this.tree;
      do {
        t2 = (node << 1 >>> 0) + 1;
        t3 = t1.length;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        node = node + t1[t2] + (bits & 1);
        bits = bits >>> 1;
        ++newBitPos;
        t2 = node << 1 >>> 0;
        t4 = t2 + 1;
        if (t4 >= t3)
          return H.ioore(t1, t4);
      } while (t1[t4] !== 0);
      br.bitPos = newBitPos;
      t1 = this.tree;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    _addSymbol$3: function(symbol, code, codeLength) {
      var t1, baseCode, t2, t3, i, idx, step, node, codeLength0, t4, t5, t6;
      t1 = J.getInterceptor$n(codeLength);
      if (t1.$le(codeLength, 7)) {
        baseCode = this._reverseBitsShort$2(code, codeLength);
        if (typeof codeLength !== "number")
          return H.iae(codeLength);
        t1 = C.JSInt_methods.$shl(1, 7 - codeLength);
        t2 = this.lutSymbol;
        t3 = this.lutBits;
        i = 0;
        for (; i < t1; ++i) {
          idx = (baseCode | C.JSInt_methods.$shl(i, codeLength)) >>> 0;
          if (idx >= 128)
            return H.ioore(t2, idx);
          t2[idx] = symbol;
          t3[idx] = codeLength;
        }
      } else {
        t1 = t1.$sub(codeLength, 7);
        if (typeof code !== "number")
          return code.$shr();
        if (typeof t1 !== "number")
          return H.iae(t1);
        baseCode = this._reverseBitsShort$2(C.JSNumber_methods.$shr(code, t1), 7);
      }
      for (t1 = this.lutJump, step = 7, node = 0; t2 = J.getInterceptor$n(codeLength), codeLength0 = t2.$sub(codeLength, 1), t2.$gt(codeLength, 0); codeLength = codeLength0) {
        t2 = this.maxNodes;
        if (node >= t2)
          return false;
        t3 = this.tree;
        t4 = (node << 1 >>> 0) + 1;
        t5 = t3.length;
        if (t4 >= t5)
          return H.ioore(t3, t4);
        t6 = t3[t4];
        if (t6 < 0) {
          t6 = this.numNodes;
          if (t6 === t2)
            return false;
          t3[t4] = t6 - node;
          this.numNodes = t6 + 2;
          t2 = (t6 << 1 >>> 0) + 1;
          if (t2 >= t5)
            return H.ioore(t3, t2);
          t3[t2] = -1;
          t6 = (t6 + 1 << 1 >>> 0) + 1;
          if (t6 >= t5)
            return H.ioore(t3, t6);
          t3[t6] = -1;
        } else if (t6 === 0)
          return false;
        if (t4 >= t5)
          return H.ioore(t3, t4);
        t2 = t3[t4];
        if (typeof code !== "number")
          return code.$shr();
        if (typeof codeLength0 !== "number")
          return H.iae(codeLength0);
        node += t2 + (C.JSNumber_methods.$shr(code, codeLength0) & 1);
        --step;
        if (step === 0) {
          if (baseCode >= 128)
            return H.ioore(t1, baseCode);
          t1[baseCode] = node;
        }
      }
      t1 = this.tree;
      t2 = node << 1 >>> 0;
      t3 = t2 + 1;
      t4 = t1.length;
      if (t3 >= t4)
        return H.ioore(t1, t3);
      t5 = t1[t3];
      if (t5 < 0)
        t1[t3] = 0;
      else if (t5 !== 0)
        return false;
      if (t2 >= t4)
        return H.ioore(t1, t2);
      t1[t2] = symbol;
      return true;
    },
    _reverseBitsShort$2: function(bits, numBits) {
      var t1, t2;
      t1 = J.getInterceptor$n(bits).$and(bits, 15);
      if (t1 >= 16)
        return H.ioore(C.List_cGl, t1);
      t1 = C.List_cGl[t1];
      if (typeof t1 !== "number")
        return t1.$shl();
      if (typeof bits !== "number")
        return bits.$shr();
      t2 = C.JSNumber_methods._shrOtherPositive$1(bits, 4);
      if (t2 >= 16)
        return H.ioore(C.List_cGl, t2);
      t2 = C.List_cGl[t2];
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof numBits !== "number")
        return H.iae(numBits);
      return C.JSInt_methods._shrReceiverPositive$1((t1 << 4 | t2) >>> 0, 8 - numBits);
    },
    _huffmanCodeLengthsToCodes$3: function(codeLengths, codeLengthsSize, huffCodes) {
      var codeLengthHist, nextCodes, t1, symbol, maxCodeLength, maxCodeLength0, t2, codeLen, currCode, t3, t4;
      codeLengthHist = new Int32Array(16);
      nextCodes = new Int32Array(16);
      if (typeof codeLengthsSize !== "number")
        return H.iae(codeLengthsSize);
      t1 = codeLengths.length;
      symbol = 0;
      maxCodeLength = 0;
      for (; symbol < codeLengthsSize; ++symbol) {
        if (symbol >= t1)
          return H.ioore(codeLengths, symbol);
        maxCodeLength0 = codeLengths[symbol];
        if (maxCodeLength0 > maxCodeLength)
          maxCodeLength = maxCodeLength0;
      }
      if (maxCodeLength > 15)
        return false;
      for (symbol = 0; symbol < codeLengthsSize; ++symbol) {
        if (symbol >= t1)
          return H.ioore(codeLengths, symbol);
        t2 = codeLengths[symbol];
        if (t2 < 0 || t2 >= 16)
          return H.ioore(codeLengthHist, t2);
        codeLengthHist[t2] = codeLengthHist[t2] + 1;
      }
      codeLengthHist[0] = 0;
      nextCodes[0] = -1;
      for (codeLen = 1, currCode = 0; codeLen <= maxCodeLength; ++codeLen) {
        currCode = currCode + codeLengthHist[codeLen - 1] << 1 >>> 0;
        nextCodes[codeLen] = currCode;
      }
      for (t2 = huffCodes.length, symbol = 0; symbol < codeLengthsSize; ++symbol) {
        if (symbol >= t1)
          return H.ioore(codeLengths, symbol);
        t3 = codeLengths[symbol];
        if (t3 > 0) {
          if (t3 >= 16)
            return H.ioore(nextCodes, t3);
          t4 = nextCodes[t3];
          nextCodes[t3] = t4 + 1;
          if (symbol >= t2)
            return H.ioore(huffCodes, symbol);
          huffCodes[symbol] = t4;
        } else {
          if (symbol >= t2)
            return H.ioore(huffCodes, symbol);
          huffCodes[symbol] = -1;
        }
      }
      return true;
    },
    static: {"^": "_HuffmanTree_HUFF_LUT_BITS,_HuffmanTree_HUFF_LUT,_HuffmanTree__REVERSED_BITS"}
  },
  _HTreeGroup: {
    "^": "Object;htrees<",
    $index: function(_, index) {
      var t1, t2, t3;
      t1 = this.htrees;
      if (index >>> 0 !== index || index >= 5)
        return H.ioore(t1, index);
      t2 = t1[index];
      if (t2 == null) {
        t2 = new Uint8Array(128);
        t3 = new Int16Array(128);
        t2 = new U._HuffmanTree(t2, t3, new Int16Array(128), null, 0, 0);
        t2._init$1(0);
        t1[index] = t2;
        t1 = t2;
      } else
        t1 = t2;
      return t1;
    },
    _HTreeGroup$0: function() {
      var t1, i, t2, t3;
      for (t1 = this.htrees, i = 0; i < 5; ++i) {
        t2 = new Uint8Array(128);
        t3 = new Int16Array(128);
        t2 = new U._HuffmanTree(t2, t3, new Int16Array(128), null, 0, 0);
        t2._init$1(0);
        t1[i] = t2;
      }
    },
    static: {_HTreeGroup$: function() {
        var t1 = new U._HTreeGroup(H.setRuntimeTypeInfo(Array(5), [U._HuffmanTree]));
        t1._HTreeGroup$0();
        return t1;
      }}
  },
  WebPInfo: {
    "^": "DecodeInfo;hasAlpha,hasAnimation,format,iccp,exif,xmp,animLoopCount,frames,progressCallback,_frame,_numFrames,_alphaData,_alphaSize,_vp8Position,_vp8Size,width,height,backgroundColor",
    static: {"^": "WebPInfo_FORMAT_UNDEFINED,WebPInfo_FORMAT_LOSSY,WebPInfo_FORMAT_LOSSLESS,WebPInfo_FORMAT_ANIMATED"}
  },
  WebPDecoder: {
    "^": "Decoder;info,_input,progressCallback",
    isValidFile$1: function(bytes) {
      var t1 = U.InputBuffer$(bytes, false, null, 0);
      this._input = t1;
      if (!this._getHeader$1(t1))
        return false;
      return true;
    },
    startDecode$1: function(bytes) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = U.InputBuffer$(bytes, false, null, 0);
      this._input = t1;
      if (!this._getHeader$1(t1))
        return;
      t1 = new U.WebPInfo(false, false, 0, "", "", "", 0, [], null, null, null, null, null, null, null, 0, 0, 4294967295);
      this.info = t1;
      if (!this._getInfo$2(this._input, t1))
        return;
      t1 = this.info;
      t1.progressCallback = this.progressCallback;
      switch (t1.format) {
        case 3:
          return t1;
        case 2:
          t2 = this._input;
          t2.offset = t1._vp8Position;
          if (!U.VP8L$(t2, t1).decodeHeader$0())
            return;
          return this.info;
        case 1:
          t2 = this._input;
          t2.offset = t1._vp8Position;
          t3 = new Int32Array(4);
          t4 = new Int32Array(4);
          t5 = new Int8Array(4);
          t6 = new Int8Array(4);
          t7 = H.setRuntimeTypeInfo(Array(8), [U.VP8BitReader]);
          t8 = H.setRuntimeTypeInfo(Array(4), [U.VP8QuantMatrix]);
          if (!new U.VP8(t2, t1, null, null, null, new U.VP8FrameHeader(null, null, null, null), new U.VP8PictureHeader(null, null, null, null, null, null), new U.VP8FilterHeader(null, null, null, null, t3, t4), new U.VP8SegmentHeader(false, false, true, t5, t6), null, null, null, null, null, null, null, null, null, null, null, t7, false, null, t8, null, null, null, null, new Uint8Array(4), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, 0, null, null, null, null, null, null, null, null, null).decodeHeader$0())
            return;
          return this.info;
      }
      return;
    },
    decodeFrame$1: function(frame) {
      var t1, t2, t3, f, data, t4, t5, t6, t7;
      t1 = this._input;
      if (t1 == null || this.info == null)
        return;
      t2 = this.info;
      if (t2.hasAnimation) {
        t2 = t2.frames;
        t3 = t2.length;
        if (frame >= t3 || false)
          return;
        if (frame >= t3)
          return H.ioore(t2, frame);
        f = t2[frame];
        return this._decodeFrame$2$frame(t1.subset$2$position(f.get$_frameSize(), f._framePosition), frame);
      }
      t3 = t2.format;
      if (t3 === 2)
        return U.VP8L$(t1.subset$2$position(t2._vp8Size, t2._vp8Position), this.info).decode$0();
      else if (t3 === 1) {
        data = t1.subset$2$position(t2._vp8Size, t2._vp8Position);
        t1 = this.info;
        t2 = new Int32Array(4);
        t3 = new Int32Array(4);
        t4 = new Int8Array(4);
        t5 = new Int8Array(4);
        t6 = H.setRuntimeTypeInfo(Array(8), [U.VP8BitReader]);
        t7 = H.setRuntimeTypeInfo(Array(4), [U.VP8QuantMatrix]);
        return new U.VP8(data, t1, null, null, null, new U.VP8FrameHeader(null, null, null, null), new U.VP8PictureHeader(null, null, null, null, null, null), new U.VP8FilterHeader(null, null, null, null, t2, t3), new U.VP8SegmentHeader(false, false, true, t4, t5), null, null, null, null, null, null, null, null, null, null, null, t6, false, null, t7, null, null, null, null, new Uint8Array(4), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, 0, null, null, null, null, null, null, null, null, null).decode$0();
      }
      return;
    },
    _decodeFrame$2$frame: function(input, frame) {
      var t1, webp, t2, f, data, t3, t4, t5, t6;
      t1 = [];
      webp = new U.WebPInfo(false, false, 0, "", "", "", 0, t1, null, null, null, null, null, null, null, 0, 0, 4294967295);
      if (!this._getInfo$2(input, webp))
        return;
      if (webp.format === 0)
        return;
      t2 = this.info;
      webp._frame = t2._frame;
      webp._numFrames = t2._numFrames;
      webp.progressCallback = this.progressCallback;
      if (webp.hasAnimation) {
        t2 = t1.length;
        if (frame >= t2 || false)
          return;
        if (frame >= t2)
          return H.ioore(t1, frame);
        f = t1[frame];
        return this._decodeFrame$2$frame(input.subset$2$position(f.get$_frameSize(), f._framePosition), frame);
      } else {
        data = input.subset$2$position(webp._vp8Size, webp._vp8Position);
        t1 = webp.format;
        if (t1 === 2)
          return U.VP8L$(data, webp).decode$0();
        else if (t1 === 1) {
          t1 = new Int32Array(4);
          t2 = new Int32Array(4);
          t3 = new Int8Array(4);
          t4 = new Int8Array(4);
          t5 = H.setRuntimeTypeInfo(Array(8), [U.VP8BitReader]);
          t6 = H.setRuntimeTypeInfo(Array(4), [U.VP8QuantMatrix]);
          return new U.VP8(data, webp, null, null, null, new U.VP8FrameHeader(null, null, null, null), new U.VP8PictureHeader(null, null, null, null, null, null), new U.VP8FilterHeader(null, null, null, null, t1, t2), new U.VP8SegmentHeader(false, false, true, t3, t4), null, null, null, null, null, null, null, null, null, null, null, t5, false, null, t6, null, null, null, null, new Uint8Array(4), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, 0, null, null, null, null, null, null, null, null, null).decode$0();
        }
      }
      return;
    },
    _getHeader$1: function(input) {
      if (input.readString$1(4) !== "RIFF")
        return false;
      input.readUint32$0();
      if (input.readString$1(4) !== "WEBP")
        return false;
      return true;
    },
    _getInfo$2: function(input, webp) {
      var found, tag, size, diskSize, t1, t2, p, t3, t4, c, line, remainder;
      found = false;
      while (true) {
        if (!(!J.$ge$n(input.offset, input.end) && !found))
          break;
        tag = input.readString$1(4);
        size = input.readUint32$0();
        diskSize = size + 1 >>> 1 << 1 >>> 0;
        t1 = input.offset;
        t2 = input.start;
        p = J.$sub$n(t1, t2);
        switch (tag) {
          case "VP8X":
            if (!this._getVp8xInfo$2(input, webp))
              return false;
            break;
          case "VP8 ":
            webp._vp8Position = J.$sub$n(input.offset, t2);
            webp._vp8Size = size;
            webp.format = 1;
            found = true;
            break;
          case "VP8L":
            webp._vp8Position = J.$sub$n(input.offset, t2);
            webp._vp8Size = size;
            webp.format = 2;
            found = true;
            break;
          case "ALPH":
            t1 = input.buffer;
            t3 = input.bigEndian;
            t4 = J.get$length$asx(t1);
            t3 = new U.InputBuffer(t1, 0, t4, 0, t3);
            webp._alphaData = t3;
            t3.offset = input.offset;
            webp._alphaSize = size;
            input.offset = J.$add$ns(input.offset, diskSize);
            break;
          case "ANIM":
            webp.format = 3;
            c = input.readUint32$0();
            webp.animLoopCount = input.readUint16$0();
            webp.backgroundColor = (C.JSInt_methods.clamp$2(c & 255, 0, 255) << 24 | C.JSInt_methods.clamp$2(c >>> 24 & 255, 0, 255) << 16 | C.JSInt_methods.clamp$2(c >>> 16 & 255, 0, 255) << 8 | C.JSInt_methods.clamp$2(c >>> 8 & 255, 0, 255)) >>> 0;
            break;
          case "ANMF":
            if (!this._getAnimFrameInfo$3(input, webp, size))
              return false;
            break;
          case "ICCP":
            webp.iccp = input.readString$1(size);
            break;
          case "EXIF":
            webp.exif = input.readString$1(size);
            break;
          case "XMP ":
            webp.xmp = input.readString$1(size);
            break;
          default:
            line = "UNKNOWN WEBP TAG: " + tag;
            H.printString(line);
            input.offset = J.$add$ns(input.offset, diskSize);
            break;
        }
        t1 = J.$sub$n(J.$sub$n(input.offset, t2), p);
        if (typeof t1 !== "number")
          return H.iae(t1);
        remainder = diskSize - t1;
        if (remainder > 0)
          input.offset = J.$add$ns(input.offset, remainder);
      }
      if (!webp.hasAlpha)
        webp.hasAlpha = webp._alphaData != null;
      return webp.format !== 0;
    },
    _getVp8xInfo$2: function(input, webp) {
      var t1, t2, b, w, h;
      t1 = input.buffer;
      t2 = input.offset;
      input.offset = J.$add$ns(t2, 1);
      b = J.$index$asx(t1, t2);
      if (J.getInterceptor$n(b).$and(b, 192) !== 0)
        return false;
      if (typeof b !== "number")
        return b.$shr();
      C.JSNumber_methods._shrOtherPositive$1(b, 5);
      t1 = C.JSNumber_methods._shrOtherPositive$1(b, 4);
      C.JSNumber_methods._shrOtherPositive$1(b, 3);
      C.JSNumber_methods._shrOtherPositive$1(b, 2);
      t2 = C.JSNumber_methods._shrOtherPositive$1(b, 1);
      if ((b & 1) !== 0)
        return false;
      if (input.readUint24$0() !== 0)
        return false;
      w = J.$add$ns(input.readUint24$0(), 1);
      h = J.$add$ns(input.readUint24$0(), 1);
      webp.width = w;
      webp.height = h;
      webp.hasAnimation = (t2 & 1) !== 0;
      webp.hasAlpha = (t1 & 1) !== 0;
      return true;
    },
    _getAnimFrameInfo$3: function(input, webp, size) {
      var frame = new U.WebPFrame(null, null, null, null, null, null, 1, null, null);
      frame.WebPFrame$2(input, size);
      if (frame._reserved !== 0)
        return false;
      webp.frames.push(frame);
      return true;
    }
  },
  HdrImage: {
    "^": "Object;slices,red,green,blue,alpha,depth",
    get$width: function(_) {
      var t1 = this.slices;
      if (t1.get$isEmpty(t1))
        t1 = 0;
      else {
        t1 = t1.get$values(t1);
        t1 = J.get$width$x(t1._f$1(J.get$first$ax(t1._iterable)));
      }
      return t1;
    },
    get$height: function(_) {
      var t1 = this.slices;
      if (t1.get$isEmpty(t1))
        t1 = 0;
      else {
        t1 = t1.get$values(t1);
        t1 = J.get$height$x(t1._f$1(J.get$first$ax(t1._iterable)));
      }
      return t1;
    },
    $index: function(_, ch) {
      return this.slices.$index(0, ch);
    },
    $indexSet: function(_, ch, sl) {
      this.addSlice$2(ch, sl);
    },
    addSlice$2: function(ch, sl) {
      this.slices.$indexSet(0, ch, sl);
      switch (ch) {
        case "R":
          this.red = sl;
          break;
        case "G":
          this.green = sl;
          break;
        case "B":
          this.blue = sl;
          break;
        case "A":
          this.alpha = sl;
          break;
        case "Z":
          this.depth = sl;
          break;
      }
    },
    static: {"^": "HdrImage_HALF,HdrImage_FLOAT,HdrImage_UINT,HdrImage_R,HdrImage_G,HdrImage_B,HdrImage_A,HdrImage_Z,HdrImage_ID"}
  },
  HdrSlice: {
    "^": "Object;name>,width>,height>,type>,data>",
    getBytes$0: function() {
      return H.NativeUint8List_NativeUint8List$view(this.data, 0, null);
    },
    getFloat$2: function(x, y) {
      var t1, pi, t2, s;
      t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      pi = y * t1 + x;
      t1 = this.data;
      if (J.$eq(this.type, 1)) {
        if (pi >>> 0 !== pi || pi >= t1.length)
          return H.ioore(t1, pi);
        t1 = t1[pi];
        if ($.Half__toFloatFloat32 == null)
          U.Half__initialize();
        t2 = $.Half__toFloatFloat32;
        if (t1 >>> 0 !== t1 || t1 >= t2.length)
          return H.ioore(t2, t1);
        s = t2[t1];
      } else {
        if (pi >>> 0 !== pi || pi >= t1.length)
          return H.ioore(t1, pi);
        s = t1[pi];
      }
      return s;
    }
  },
  hdrToImage__knee: {
    "^": "Closure:120;",
    call$2: function(x, f) {
      return Math.log(x * f + 1) / f;
    }
  },
  hdrToImage__gamma: {
    "^": "Closure:120;_knee_0",
    call$2: function(h, m) {
      var x, t1;
      x = P.max(0, h * m);
      if (x > 1) {
        t1 = this._knee_0.call$2(x - 1, 0.184874);
        if (typeof t1 !== "number")
          return H.iae(t1);
        x = 1 + t1;
      }
      return Math.pow(x, 0.4545) * 84.66;
    }
  },
  Image: {
    "^": "Object;width>,height>,xOffset,yOffset,duration',disposeMethod,blendMethod,data>,_format",
    getBytes$0: function() {
      return H.NativeUint8List_NativeUint8List$view(this.data.buffer, 0, null);
    },
    $add: function(_, other) {
      var t1, t2, h, t3, w, y, x, c1, c2, t4, t5, t6, t7, t8;
      t1 = this.height;
      t2 = J.getInterceptor$x(other);
      h = P.min(t1, t2.get$height(other));
      t3 = this.width;
      w = P.min(t3, t2.get$width(other));
      for (y = 0; y < h; ++y)
        for (x = 0; x < w; ++x) {
          c1 = this.getPixel$2(x, y);
          c2 = other.getPixel$2(x, y);
          if (typeof c2 !== "number")
            return c2.$and();
          t2 = C.JSInt_methods.clamp$2((c1 >>> 24 & 255) + (c2 >>> 24 & 255), 0, 255);
          t4 = C.JSInt_methods.clamp$2((c1 >>> 16 & 255) + (c2 >>> 16 & 255), 0, 255);
          t5 = C.JSInt_methods.clamp$2((c1 >>> 8 & 255) + (c2 >>> 8 & 255), 0, 255);
          t6 = C.JSInt_methods.clamp$2((c1 & 255) + (c2 & 255), 0, 255);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (x < t3) {
            if (typeof t1 !== "number")
              return H.iae(t1);
            t7 = y < t1;
          } else
            t7 = false;
          if (t7) {
            t7 = this.data;
            if (typeof t3 !== "number")
              return H.iae(t3);
            t8 = y * t3 + x;
            if (t8 >>> 0 !== t8 || t8 >= t7.length)
              return H.ioore(t7, t8);
            t7[t8] = (t2 << 24 | t4 << 16 | t5 << 8 | t6) >>> 0;
          }
        }
      return this;
    },
    $sub: function(_, other) {
      var t1, t2, h, t3, w, y, x, c1, c2, t4, t5, t6, t7, t8;
      t1 = this.height;
      t2 = J.getInterceptor$x(other);
      h = P.min(t1, t2.get$height(other));
      t3 = this.width;
      w = P.min(t3, t2.get$width(other));
      for (y = 0; y < h; ++y)
        for (x = 0; x < w; ++x) {
          c1 = this.getPixel$2(x, y);
          c2 = other.getPixel$2(x, y);
          if (typeof c2 !== "number")
            return c2.$and();
          t2 = C.JSInt_methods.clamp$2((c1 >>> 24 & 255) - (c2 >>> 24 & 255), 0, 255);
          t4 = C.JSInt_methods.clamp$2((c1 >>> 16 & 255) - (c2 >>> 16 & 255), 0, 255);
          t5 = C.JSInt_methods.clamp$2((c1 >>> 8 & 255) - (c2 >>> 8 & 255), 0, 255);
          t6 = C.JSInt_methods.clamp$2((c1 & 255) - (c2 & 255), 0, 255);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (x < t3) {
            if (typeof t1 !== "number")
              return H.iae(t1);
            t7 = y < t1;
          } else
            t7 = false;
          if (t7) {
            t7 = this.data;
            if (typeof t3 !== "number")
              return H.iae(t3);
            t8 = y * t3 + x;
            if (t8 >>> 0 !== t8 || t8 >= t7.length)
              return H.ioore(t7, t8);
            t7[t8] = (t2 << 24 | t4 << 16 | t5 << 8 | t6) >>> 0;
          }
        }
      return this;
    },
    $mul: function(_, other) {
      var t1, t2, h, t3, w, y, x, c1, c2, t4, t5, t6, t7, t8;
      t1 = this.height;
      t2 = J.getInterceptor$x(other);
      h = P.min(t1, t2.get$height(other));
      t3 = this.width;
      w = P.min(t3, t2.get$width(other));
      for (y = 0; y < h; ++y)
        for (x = 0; x < w; ++x) {
          c1 = this.getPixel$2(x, y);
          c2 = other.getPixel$2(x, y);
          if (typeof c2 !== "number")
            return c2.$and();
          t2 = C.JSInt_methods.clamp$2((c1 >>> 24 & 255) * (c2 >>> 24 & 255), 0, 255);
          t4 = C.JSInt_methods.clamp$2((c1 >>> 16 & 255) * (c2 >>> 16 & 255), 0, 255);
          t5 = C.JSInt_methods.clamp$2((c1 >>> 8 & 255) * (c2 >>> 8 & 255), 0, 255);
          t6 = C.JSInt_methods.clamp$2((c1 & 255) * (c2 & 255), 0, 255);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (x < t3) {
            if (typeof t1 !== "number")
              return H.iae(t1);
            t7 = y < t1;
          } else
            t7 = false;
          if (t7) {
            t7 = this.data;
            if (typeof t3 !== "number")
              return H.iae(t3);
            t8 = y * t3 + x;
            if (t8 >>> 0 !== t8 || t8 >= t7.length)
              return H.ioore(t7, t8);
            t7[t8] = (t2 << 24 | t4 << 16 | t5 << 8 | t6) >>> 0;
          }
        }
      return this;
    },
    $or: function(_, other) {
      var t1, t2, h, t3, w, y, x, c1, c2, t4, t5, t6, t7, t8;
      t1 = this.height;
      t2 = J.getInterceptor$x(other);
      h = P.min(t1, t2.get$height(other));
      t3 = this.width;
      w = P.min(t3, t2.get$width(other));
      for (y = 0; y < h; ++y)
        for (x = 0; x < w; ++x) {
          c1 = this.getPixel$2(x, y);
          c2 = other.getPixel$2(x, y);
          if (typeof c2 !== "number")
            return c2.$and();
          t2 = C.JSInt_methods.clamp$2(c1 >>> 24 & 255 | c2 >>> 24 & 255, 0, 255);
          t4 = C.JSInt_methods.clamp$2(c1 >>> 16 & 255 | c2 >>> 16 & 255, 0, 255);
          t5 = C.JSInt_methods.clamp$2(c1 >>> 8 & 255 | c2 >>> 8 & 255, 0, 255);
          t6 = C.JSInt_methods.clamp$2((c1 & 255 | c2 & 255) >>> 0, 0, 255);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (x < t3) {
            if (typeof t1 !== "number")
              return H.iae(t1);
            t7 = y < t1;
          } else
            t7 = false;
          if (t7) {
            t7 = this.data;
            if (typeof t3 !== "number")
              return H.iae(t3);
            t8 = y * t3 + x;
            if (t8 >>> 0 !== t8 || t8 >= t7.length)
              return H.ioore(t7, t8);
            t7[t8] = (t2 << 24 | t4 << 16 | t5 << 8 | t6) >>> 0;
          }
        }
      return this;
    },
    $and: function(_, other) {
      var t1, t2, h, t3, w, y, x, c1, c2, t4, t5, t6, t7, t8;
      t1 = this.height;
      t2 = J.getInterceptor$x(other);
      h = P.min(t1, t2.get$height(other));
      t3 = this.width;
      w = P.min(t3, t2.get$width(other));
      for (y = 0; y < h; ++y)
        for (x = 0; x < w; ++x) {
          c1 = this.getPixel$2(x, y);
          c2 = other.getPixel$2(x, y);
          if (typeof c2 !== "number")
            return c2.$and();
          t2 = C.JSInt_methods.clamp$2(c1 >>> 24 & 255 & c2 >>> 24 & 255, 0, 255);
          t4 = C.JSInt_methods.clamp$2(c1 >>> 16 & 255 & c2 >>> 16 & 255, 0, 255);
          t5 = C.JSInt_methods.clamp$2(c1 >>> 8 & 255 & c2 >>> 8 & 255, 0, 255);
          t6 = C.JSInt_methods.clamp$2(c1 & 255 & c2 & 255, 0, 255);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (x < t3) {
            if (typeof t1 !== "number")
              return H.iae(t1);
            t7 = y < t1;
          } else
            t7 = false;
          if (t7) {
            t7 = this.data;
            if (typeof t3 !== "number")
              return H.iae(t3);
            t8 = y * t3 + x;
            if (t8 >>> 0 !== t8 || t8 >= t7.length)
              return H.ioore(t7, t8);
            t7[t8] = (t2 << 24 | t4 << 16 | t5 << 8 | t6) >>> 0;
          }
        }
      return this;
    },
    $mod: function(_, other) {
      var t1, t2, h, t3, w, y, x, c1, c2, r2, t4, t5, t6, t7, t8;
      t1 = this.height;
      t2 = J.getInterceptor$x(other);
      h = P.min(t1, t2.get$height(other));
      t3 = this.width;
      w = P.min(t3, t2.get$width(other));
      for (y = 0; y < h; ++y)
        for (x = 0; x < w; ++x) {
          c1 = this.getPixel$2(x, y);
          c2 = other.getPixel$2(x, y);
          r2 = c2.$and(0, 255);
          t2 = c2.$shr(0, 8);
          t4 = c2.$shr(0, 16);
          t5 = c2.$shr(0, 24);
          t6 = C.JSInt_methods.$mod(c1 & 255, r2);
          t2 = C.JSInt_methods.$mod(c1 >>> 8 & 255, t2 & 255);
          t4 = C.JSInt_methods.$mod(c1 >>> 16 & 255, t4 & 255);
          t5 = C.JSInt_methods.clamp$2(C.JSInt_methods.$mod(c1 >>> 24 & 255, t5 & 255), 0, 255);
          t4 = C.JSInt_methods.clamp$2(t4, 0, 255);
          t2 = C.JSInt_methods.clamp$2(t2, 0, 255);
          t6 = C.JSInt_methods.clamp$2(t6, 0, 255);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (x < t3) {
            if (typeof t1 !== "number")
              return H.iae(t1);
            t7 = y < t1;
          } else
            t7 = false;
          if (t7) {
            t7 = this.data;
            if (typeof t3 !== "number")
              return H.iae(t3);
            t8 = y * t3 + x;
            if (t8 >>> 0 !== t8 || t8 >= t7.length)
              return H.ioore(t7, t8);
            t7[t8] = (t5 << 24 | t4 << 16 | t2 << 8 | t6) >>> 0;
          }
        }
      return this;
    },
    get$length: function(_) {
      return this.data.length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, index) {
      var t1 = this.data;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, color) {
      var t1 = this.data;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = color;
    },
    getPixel$2: function(x, y) {
      var t1, t2;
      t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (x < t1) {
        if (typeof y !== "number")
          return y.$ge();
        t1 = this.height;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = y < t1;
      } else
        t1 = false;
      if (t1) {
        t1 = this.data;
        t2 = this.width;
        if (this._format === 4) {
          if (typeof y !== "number")
            return y.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = y * t2 + x;
          if (t2 >>> 0 !== t2 || t2 >= t1.length)
            return H.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else {
          if (typeof y !== "number")
            return y.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = y * t2 + x;
          if (t2 >>> 0 !== t2 || t2 >= t1.length)
            return H.ioore(t1, t2);
          t2 = (t1[t2] | 4278190080) >>> 0;
          t1 = t2;
        }
      } else
        t1 = 0;
      return t1;
    },
    static: {"^": "Image_RGB,Image_RGBA,Image_DISPOSE_NONE,Image_DISPOSE_CLEAR,Image_BLEND_SOURCE,Image_BLEND_OVER", Image$: function(width, height, _format) {
        var t1 = J.$mul$ns(width, height);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        return new U.Image(width, height, 0, 0, 0, 1, 1, new Uint32Array(t1), _format);
      }}
  },
  ImageException: {
    "^": "Object;message",
    toString$0: function(_) {
      return "ImageException: " + this.message;
    },
    static: {ImageException$: function(message) {
        return new U.ImageException(message);
      }}
  },
  InputBuffer: {
    "^": "Object;buffer>,start>,end<,offset*,bigEndian<",
    get$length: function(_) {
      return J.$sub$n(this.end, this.offset);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, index) {
      return J.$index$asx(this.buffer, J.$add$ns(this.offset, index));
    },
    $indexSet: function(_, index, value) {
      J.$indexSet$ax(this.buffer, J.$add$ns(this.offset, index), value);
      return value;
    },
    memcpy$4: function(start, $length, other, offset) {
      var t1, t2;
      t1 = this.buffer;
      t2 = this.offset;
      if (!!J.getInterceptor(other).$isInputBuffer)
        J.setRange$4$ax(t1, J.$add$ns(t2, start), J.$add$ns(J.$add$ns(this.offset, start), $length), other.buffer, J.$add$ns(other.offset, offset));
      else
        J.setRange$4$ax(t1, J.$add$ns(t2, start), J.$add$ns(J.$add$ns(this.offset, start), $length), other, offset);
    },
    memcpy$3: function(start, length, other) {
      return this.memcpy$4(start, length, other, 0);
    },
    memset$3: function(start, $length, value) {
      J.fillRange$3$ax(this.buffer, J.$add$ns(this.offset, start), J.$add$ns(J.$add$ns(this.offset, start), $length), value);
    },
    subset$3$offset$position: function(count, offset, position) {
      var pos = J.$add$ns(position != null ? J.$add$ns(this.start, position) : this.offset, offset);
      return U.InputBuffer$(this.buffer, this.bigEndian, count, pos);
    },
    subset$1: function(count) {
      return this.subset$3$offset$position(count, 0, null);
    },
    subset$2$position: function(count, position) {
      return this.subset$3$offset$position(count, 0, position);
    },
    skip$1: function(_, count) {
      this.offset = J.$add$ns(this.offset, count);
    },
    readBytes$1: function(count) {
      var bytes = this.subset$1(count);
      this.offset = J.$add$ns(this.offset, J.$sub$n(bytes.end, bytes.offset));
      return bytes;
    },
    readString$1: function(len) {
      var codes, t1, t2, t3, c;
      if (len == null) {
        codes = [];
        for (t1 = this.end; !J.$ge$n(this.offset, t1);) {
          t2 = this.buffer;
          t3 = this.offset;
          this.offset = J.$add$ns(t3, 1);
          c = J.$index$asx(t2, t3);
          if (J.$eq(c, 0))
            return H.Primitives_stringFromCharCodes(codes);
          codes.push(c);
        }
        throw H.wrapException(U.ImageException$("EOF reached without finding string terminator"));
      }
      return P.String_String$fromCharCodes(this.readBytes$1(len).toUint8List$0());
    },
    readString$0: function() {
      return this.readString$1(null);
    },
    readUint16$0: function() {
      var t1, t2, b1, b2;
      t1 = this.buffer;
      t2 = this.offset;
      this.offset = J.$add$ns(t2, 1);
      b1 = J.$and$n(J.$index$asx(t1, t2), 255);
      t2 = this.buffer;
      t1 = this.offset;
      this.offset = J.$add$ns(t1, 1);
      b2 = J.$and$n(J.$index$asx(t2, t1), 255);
      if (this.bigEndian)
        return (b1 << 8 | b2) >>> 0;
      return (b2 << 8 | b1) >>> 0;
    },
    readUint24$0: function() {
      var t1, t2, b1, b2, b3;
      t1 = this.buffer;
      t2 = this.offset;
      this.offset = J.$add$ns(t2, 1);
      b1 = J.$and$n(J.$index$asx(t1, t2), 255);
      t2 = this.buffer;
      t1 = this.offset;
      this.offset = J.$add$ns(t1, 1);
      b2 = J.$and$n(J.$index$asx(t2, t1), 255);
      t1 = this.buffer;
      t2 = this.offset;
      this.offset = J.$add$ns(t2, 1);
      b3 = J.$and$n(J.$index$asx(t1, t2), 255);
      if (this.bigEndian)
        return (b3 | b2 << 8 | b1 << 16) >>> 0;
      return (b1 | b2 << 8 | b3 << 16) >>> 0;
    },
    readUint32$0: function() {
      var t1, t2, b1, b2, b3, b4;
      t1 = this.buffer;
      t2 = this.offset;
      this.offset = J.$add$ns(t2, 1);
      b1 = J.$and$n(J.$index$asx(t1, t2), 255);
      t2 = this.buffer;
      t1 = this.offset;
      this.offset = J.$add$ns(t1, 1);
      b2 = J.$and$n(J.$index$asx(t2, t1), 255);
      t1 = this.buffer;
      t2 = this.offset;
      this.offset = J.$add$ns(t2, 1);
      b3 = J.$and$n(J.$index$asx(t1, t2), 255);
      t2 = this.buffer;
      t1 = this.offset;
      this.offset = J.$add$ns(t1, 1);
      b4 = J.$and$n(J.$index$asx(t2, t1), 255);
      if (this.bigEndian)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    readUint64$0: function() {
      var t1, t2, b1, b2, b3, b4, b5, b6, b7, b8;
      t1 = this.buffer;
      t2 = this.offset;
      this.offset = J.$add$ns(t2, 1);
      b1 = J.$and$n(J.$index$asx(t1, t2), 255);
      t2 = this.buffer;
      t1 = this.offset;
      this.offset = J.$add$ns(t1, 1);
      b2 = J.$and$n(J.$index$asx(t2, t1), 255);
      t1 = this.buffer;
      t2 = this.offset;
      this.offset = J.$add$ns(t2, 1);
      b3 = J.$and$n(J.$index$asx(t1, t2), 255);
      t2 = this.buffer;
      t1 = this.offset;
      this.offset = J.$add$ns(t1, 1);
      b4 = J.$and$n(J.$index$asx(t2, t1), 255);
      t1 = this.buffer;
      t2 = this.offset;
      this.offset = J.$add$ns(t2, 1);
      b5 = J.$and$n(J.$index$asx(t1, t2), 255);
      t2 = this.buffer;
      t1 = this.offset;
      this.offset = J.$add$ns(t1, 1);
      b6 = J.$and$n(J.$index$asx(t2, t1), 255);
      t1 = this.buffer;
      t2 = this.offset;
      this.offset = J.$add$ns(t2, 1);
      b7 = J.$and$n(J.$index$asx(t1, t2), 255);
      t2 = this.buffer;
      t1 = this.offset;
      this.offset = J.$add$ns(t1, 1);
      b8 = J.$and$n(J.$index$asx(t2, t1), 255);
      if (this.bigEndian)
        return (C.JSInt_methods._shlPositive$1(b1, 56) | C.JSInt_methods._shlPositive$1(b2, 48) | C.JSInt_methods._shlPositive$1(b3, 40) | C.JSInt_methods._shlPositive$1(b4, 32) | b5 << 24 | b6 << 16 | b7 << 8 | b8) >>> 0;
      return (C.JSInt_methods._shlPositive$1(b8, 56) | C.JSInt_methods._shlPositive$1(b7, 48) | C.JSInt_methods._shlPositive$1(b6, 40) | C.JSInt_methods._shlPositive$1(b5, 32) | b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    toList$2: function(_, offset, $length) {
      var s, e;
      if (!!J.getInterceptor(this.buffer).$isUint8List)
        return this.toUint8List$2(offset, $length);
      s = J.$add$ns(J.$add$ns(this.start, this.offset), offset);
      e = J.$le$n($length, 0) ? this.end : J.$add$ns(s, $length);
      return J.sublist$2$ax(this.buffer, s, e);
    },
    toUint8List$2: function(offset, $length) {
      var len, t1, t2, t3;
      len = $length != null ? $length : J.$sub$n(J.$sub$n(this.end, this.offset), offset);
      t1 = this.buffer;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isUint8List) {
        t3 = t2.get$buffer(t1);
        t1 = t2.get$offsetInBytes(t1);
        t2 = this.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return H.NativeUint8List_NativeUint8List$view(t3, t1 + t2 + offset, len);
      }
      return new Uint8Array(H._ensureNativeList(t2.sublist$2(t1, J.$add$ns(this.offset, offset), J.$add$ns(J.$add$ns(this.offset, offset), len))));
    },
    toUint8List$0: function() {
      return this.toUint8List$2(0, null);
    },
    toUint32List$1: function(offset) {
      var t1, t2, t3;
      t1 = this.buffer;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isUint8List) {
        t3 = t2.get$buffer(t1);
        t1 = t2.get$offsetInBytes(t1);
        t2 = this.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return H.NativeUint32List_NativeUint32List$view(t3, t1 + t2 + offset, null);
      }
      return H.NativeUint32List_NativeUint32List$view(this.toUint8List$0().buffer, 0, null);
    },
    toUint32List$0: function() {
      return this.toUint32List$1(0);
    },
    $isInputBuffer: true,
    static: {InputBuffer$: function(buffer, bigEndian, $length, offset) {
        var t1 = $length == null ? J.get$length$asx(buffer) : J.$add$ns(offset, $length);
        return new U.InputBuffer(buffer, offset, t1, offset, bigEndian);
      }, InputBuffer$from: function(other, $length, offset) {
        var t1, t2, t3, t4;
        t1 = J.getInterceptor$x(other);
        t2 = t1.get$buffer(other);
        t3 = J.$add$ns(t1.get$offset(other), offset);
        t4 = t1.get$start(other);
        t1 = $length == null ? other.get$end() : J.$add$ns(J.$add$ns(t1.get$offset(other), offset), $length);
        return new U.InputBuffer(t2, t4, t1, t3, other.get$bigEndian());
      }}
  },
  OutputBuffer: {
    "^": "Object;length*,bigEndian,_image$_buffer",
    length$0: function($receiver) {
      return this.length.call$0();
    },
    getBytes$0: function() {
      return H.NativeUint8List_NativeUint8List$view(this._image$_buffer.buffer, 0, this.length);
    },
    writeByte$1: function(value) {
      var t1, t2, t3;
      if (J.$eq(this.length, this._image$_buffer.length))
        this._expandBuffer$0();
      t1 = this._image$_buffer;
      t2 = this.length;
      this.length = J.$add$ns(t2, 1);
      t3 = J.$and$n(value, 255);
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = t3;
    },
    writeUint16$1: function(value) {
      if (this.bigEndian) {
        this.writeByte$1(value >>> 8 & 255);
        this.writeByte$1(value & 255);
        return;
      }
      this.writeByte$1(value & 255);
      this.writeByte$1(value >>> 8 & 255);
    },
    _expandBuffer$1: function(required) {
      var blockSize, t1, newBuffer;
      blockSize = required != null ? J.$gt$n(required, 32768) ? required : 32768 : 32768;
      t1 = this._image$_buffer;
      if (typeof blockSize !== "number")
        return H.iae(blockSize);
      t1 = t1.length + blockSize;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      newBuffer = new Uint8Array(t1);
      t1 = this._image$_buffer;
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, t1.length, t1);
      this._image$_buffer = newBuffer;
    },
    _expandBuffer$0: function() {
      return this._expandBuffer$1(null);
    },
    static: {"^": "OutputBuffer__BLOCK_SIZE", OutputBuffer$: function(bigEndian, size) {
        var t1 = size == null ? 32768 : size;
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        return new U.OutputBuffer(0, bigEndian, new Uint8Array(t1));
      }}
  }
}],
["lights", "package:dartray/lights/lights.dart", , O, {
  "^": "",
  DiffuseAreaLight: {
    "^": "AreaLight;Lemit,shapeSet,area,nSamples,lightToWorld,worldToLight",
    area$0: function() {
      return this.area.call$0();
    },
    DiffuseAreaLight$4: function(light2world, Le, ns, shape) {
      this.area = this.shapeSet.area;
    },
    static: {DiffuseAreaLight_Create: [function(light2world, paramSet, shape) {
        var $L, sc, nSamples, t1, t2, t3, t4;
        $L = paramSet.findOneSpectrum$2("L", G.Spectrum_Spectrum(1));
        sc = paramSet.findOneSpectrum$2("scale", G.Spectrum_Spectrum(1));
        nSamples = paramSet.findOneInt$2("nsamples", 1);
        t1 = J.$mul$ns($L, sc);
        t2 = P.max(1, nSamples);
        t3 = G.Transform$from(light2world);
        t4 = G.Transform$from(G.Transform$(light2world.get$mInv(), light2world.m));
        t4 = new O.DiffuseAreaLight(G.Spectrum_Spectrum$from(t1, 0), G.ShapeSet$(shape), null, t2, t3, t4);
        t4.Light$2(light2world, nSamples);
        t4.DiffuseAreaLight$4(light2world, t1, nSamples, shape);
        return t4;
      }, "call$3", "DiffuseAreaLight_Create$closure", 6, 0, 28]}
  },
  DistantLight: {
    "^": "Light;lightDir,L,nSamples,lightToWorld,worldToLight",
    DistantLight$3: function(light2world, radiance, dir) {
      var t1 = this.lightToWorld.transformVector$1(dir);
      this.lightDir = t1.$div(t1, t1.length$0(0));
      this.L = radiance;
    },
    static: {DistantLight_Create: [function(light2world, paramSet) {
        var $L, sc, dir, t1, t2;
        $L = paramSet.findOneSpectrum$2("L", G.Spectrum_Spectrum(1));
        sc = paramSet.findOneSpectrum$2("scale", G.Spectrum_Spectrum(1));
        dir = J.$sub$n(paramSet.findOnePoint$2("from", new G.Point(0, 0, 0)), paramSet.findOnePoint$2("to", new G.Point(0, 0, 1)));
        t1 = J.$mul$ns($L, sc);
        t2 = new O.DistantLight(null, null, P.max(1, 1), G.Transform$from(light2world), G.Transform$from(G.Transform$(light2world.get$mInv(), light2world.m)));
        t2.Light$2(light2world, 1);
        t2.DistantLight$3(light2world, t1, dir);
        return t2;
      }, "call$2", "DistantLight_Create$closure", 4, 0, 29]}
  },
  GoniometricLight: {
    "^": "Light;lightPos,intensity,mipmap,nSamples,lightToWorld,worldToLight",
    GoniometricLight$3: function(light2world, intensity, texname) {
      var completer;
      this.lightPos = this.lightToWorld.transformPoint$1(new G.Point(0, 0, 0));
      if (J.get$isNotEmpty$asx(texname)) {
        completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        $.ResourceManager_global.requestImage$2(texname, completer.future).then$1(new O.GoniometricLight_closure(this, completer));
      }
    },
    static: {GoniometricLight_Create: [function(light2world, paramSet) {
        var I, sc, texname;
        I = paramSet.findOneSpectrum$2("I", G.Spectrum_Spectrum(1));
        sc = paramSet.findOneSpectrum$2("scale", G.Spectrum_Spectrum(1));
        texname = paramSet.findOneFilename$2("mapname", "");
        return O.GoniometricLight$(light2world, J.$mul$ns(I, sc), texname);
      }, "call$2", "GoniometricLight_Create$closure", 4, 0, 30], GoniometricLight$: function(light2world, intensity, texname) {
        var t1 = new O.GoniometricLight(null, intensity, null, P.max(1, 1), G.Transform$from(light2world), G.Transform$from(G.Transform$(light2world.get$mInv(), light2world.m)));
        t1.Light$2(light2world, 1);
        t1.GoniometricLight$3(light2world, intensity, texname);
        return t1;
      }}
  },
  GoniometricLight_closure: {
    "^": "Closure:121;this_0,completer_1",
    call$1: function(img) {
      var t1;
      this.this_0.mipmap = G.MIPMap$texture(img, false, 8, 0);
      t1 = this.completer_1.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  InfiniteAreaLight: {
    "^": "Light;radianceMap,distribution,nSamples,lightToWorld,worldToLight",
    _setRadianceMap$1: function(texels) {
      var width, height, filter, t1, img, v, vw, vp, sinTheta, u, t2, t3;
      width = texels.width;
      height = texels.height;
      this.radianceMap = G.MIPMap$texture(texels, false, 8, 0);
      filter = 1 / P.max(width, height);
      t1 = J.$mul$ns(width, height);
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      img = new Float32Array(t1);
      if (typeof height !== "number")
        return H.iae(height);
      t1 = img.length;
      v = 0;
      for (; v < height; ++v) {
        if (typeof width !== "number")
          return H.iae(width);
        vw = v * width;
        vp = v / height;
        sinTheta = Math.sin(3.141592653589793 * (v + 0.5) / height);
        for (u = 0; u < width; ++u) {
          t2 = u + vw;
          t3 = J.get$y$x(this.radianceMap.lookup$3(u / width, vp, filter));
          if (t2 >>> 0 !== t2 || t2 >= t1)
            return H.ioore(img, t2);
          img[t2] = t3;
          img[t2] = img[t2] * sinTheta;
        }
      }
      this.distribution = G.Distribution2D$(img, width, height);
    },
    InfiniteAreaLight$4: function(light2world, $L, ns, texmap) {
      var completer, texels;
      if (J.get$isNotEmpty$asx(texmap)) {
        completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        $.ResourceManager_global.requestImage$2(texmap, completer.future).then$1(new O.InfiniteAreaLight_closure(this, $L, completer));
      }
      texels = G.SpectrumImage$(1, 1, 3);
      texels.$indexSet(0, 0, $L.toRGB$0());
      this._setRadianceMap$1(texels);
    },
    static: {InfiniteAreaLight_Create: [function(light2world, paramSet) {
        var $L, sc, texmap, nSamples;
        $L = paramSet.findOneSpectrum$2("L", G.Spectrum_Spectrum(1));
        sc = paramSet.findOneSpectrum$2("scale", G.Spectrum_Spectrum(1));
        texmap = paramSet.findOneFilename$2("mapname", "");
        nSamples = paramSet.findOneInt$2("nsamples", 1);
        return O.InfiniteAreaLight$(light2world, J.$mul$ns($L, sc), nSamples, texmap);
      }, "call$2", "InfiniteAreaLight_Create$closure", 4, 0, 31], InfiniteAreaLight$: function(light2world, $L, ns, texmap) {
        var t1 = new O.InfiniteAreaLight(null, null, P.max(1, ns), G.Transform$from(light2world), G.Transform$from(G.Transform$(light2world.get$mInv(), light2world.m)));
        t1.Light$2(light2world, ns);
        t1.InfiniteAreaLight$4(light2world, $L, ns, texmap);
        return t1;
      }}
  },
  InfiniteAreaLight_closure: {
    "^": "Closure:121;this_0,L_1,completer_2",
    call$1: function(img) {
      var texels, width, height, t1, t2, i, t3;
      texels = G.SpectrumImage$from(img);
      width = texels.width;
      height = texels.height;
      t1 = J.getInterceptor$ns(width);
      t2 = this.L_1;
      i = 0;
      while (true) {
        t3 = t1.$mul(width, height);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        texels.$indexSet(0, i, J.$mul$ns(texels.$index(0, i), t2.toRGB$0()));
        ++i;
      }
      this.this_0._setRadianceMap$1(texels);
      t1 = this.completer_2.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  PointLight: {
    "^": "Light;lightPos,intensity,nSamples,lightToWorld,worldToLight",
    static: {PointLight_Create: [function(light2world, paramSet) {
        var I, sc, l2w, t1;
        I = paramSet.findOneSpectrum$2("I", G.Spectrum_Spectrum(1));
        sc = paramSet.findOneSpectrum$2("scale", G.Spectrum_Spectrum(1));
        l2w = G.Transform_Translate(paramSet.findOnePoint$2("from", new G.Point(0, 0, 0))).$mul(0, light2world);
        t1 = new O.PointLight(null, J.$mul$ns(I, sc), P.max(1, 1), G.Transform$from(l2w), G.Transform$from(G.Transform$(l2w.mInv, l2w.m)));
        t1.Light$2(l2w, 1);
        t1.lightPos = l2w.transformPoint$1(new G.Point(0, 0, 0));
        return t1;
      }, "call$2", "PointLight_Create$closure", 4, 0, 32]}
  },
  ProjectionLight: {
    "^": "Light;projectionMap,lightPos,intensity,lightProjection,hither,yon,screenX0,screenX1,screenY0,screenY1,cosTotalWidth,nSamples,lightToWorld,worldToLight",
    ProjectionLight$4: function(light2world, intensity, texname, fov) {
      var completer, opposite, t1;
      this.lightPos = this.lightToWorld.transformPoint$1(new G.Point(0, 0, 0));
      if (J.get$isNotEmpty$asx(texname)) {
        completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        $.ResourceManager_global.requestImage$2(texname, completer.future).then$1(new O.ProjectionLight_closure(this, fov, completer));
      }
      this.screenX0 = -1;
      this.screenX1 = 1;
      this.screenY0 = -1;
      this.screenY1 = 1;
      this.hither = 0.001;
      this.yon = 1000000000000000019884624838656;
      this.lightProjection = G.Transform_Perspective(fov, 0.001, 1000000000000000019884624838656);
      if (typeof fov !== "number")
        return H.iae(fov);
      opposite = Math.tan(0.017453292519943295 * fov / 2);
      t1 = Math.sqrt(2);
      t1 = Math.atan(opposite * t1);
      this.cosTotalWidth = Math.cos(t1);
    },
    static: {ProjectionLight_Create: [function(light2world, paramSet) {
        var I, sc, fov, texname;
        I = paramSet.findOneSpectrum$2("I", G.Spectrum_Spectrum(1));
        sc = paramSet.findOneSpectrum$2("scale", G.Spectrum_Spectrum(1));
        fov = paramSet.findOneFloat$2("fov", 45);
        texname = paramSet.findOneFilename$2("mapname", "");
        return O.ProjectionLight$(light2world, J.$mul$ns(I, sc), texname, fov);
      }, "call$2", "ProjectionLight_Create$closure", 4, 0, 33], ProjectionLight$: function(light2world, intensity, texname, fov) {
        var t1 = new O.ProjectionLight(null, null, intensity, null, null, null, null, null, null, null, null, P.max(1, 1), G.Transform$from(light2world), G.Transform$from(G.Transform$(light2world.get$mInv(), light2world.m)));
        t1.Light$2(light2world, 1);
        t1.ProjectionLight$4(light2world, intensity, texname, fov);
        return t1;
      }}
  },
  ProjectionLight_closure: {
    "^": "Closure:121;this_0,fov_1,completer_2",
    call$1: function(img) {
      var t1, t2, aspect, t3, opposite;
      t1 = this.this_0;
      t1.projectionMap = G.MIPMap$texture(img, false, 8, 0);
      t2 = J.getInterceptor$x(img);
      aspect = J.$div$n(t2.get$width(img), t2.get$height(img));
      t2 = J.getInterceptor$n(aspect);
      if (t2.$gt(aspect, 1)) {
        if (typeof aspect !== "number")
          return aspect.$negate();
        t1.screenX0 = -aspect;
        t1.screenX1 = aspect;
        t1.screenY0 = -1;
        t1.screenY1 = 1;
      } else {
        t1.screenX0 = -1;
        t1.screenX1 = 1;
        if (typeof aspect !== "number")
          return H.iae(aspect);
        t1.screenY0 = -1 / aspect;
        t1.screenY1 = 1 / aspect;
      }
      t3 = this.fov_1;
      if (typeof t3 !== "number")
        return H.iae(t3);
      opposite = Math.tan(0.017453292519943295 * t3 / 2);
      t2 = t2.$mul(aspect, aspect);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = Math.sqrt(1 + 1 / t2);
      t2 = Math.atan(opposite * t2);
      t1.cosTotalWidth = Math.cos(t2);
      t1 = this.completer_2.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  SpotLight: {
    "^": "Light;lightPos,intensity,cosTotalWidth,cosFalloffStart,nSamples,lightToWorld,worldToLight",
    SpotLight$4: function(light2world, I, width, fall) {
      this.lightPos = this.lightToWorld.transformPoint$1(new G.Point(0, 0, 0));
      this.intensity = I;
      if (typeof width !== "number")
        return H.iae(width);
      this.cosTotalWidth = Math.cos(0.017453292519943295 * width);
      if (typeof fall !== "number")
        return H.iae(fall);
      this.cosFalloffStart = Math.cos(0.017453292519943295 * fall);
    },
    static: {SpotLight_Create: [function(l2w, paramSet) {
        var I, sc, coneangle, conedelta, from, t1, t2, dir, du, dv, dirToZ, light2world, t3;
        I = paramSet.findOneSpectrum$2("I", G.Spectrum_Spectrum(1));
        sc = paramSet.findOneSpectrum$2("scale", G.Spectrum_Spectrum(1));
        coneangle = paramSet.findOneFloat$2("coneangle", 30);
        conedelta = paramSet.findOneFloat$2("conedeltaangle", 5);
        from = paramSet.findOnePoint$2("from", new G.Point(0, 0, 0));
        t1 = J.$sub$n(paramSet.findOnePoint$2("to", new G.Point(0, 0, 1)), from);
        t2 = J.getInterceptor$asx(t1);
        dir = t2.$div(t1, t2.length$0(t1));
        du = new G.Vector(0, 0, 0);
        dv = new G.Vector(0, 0, 0);
        G.Vector_CoordinateSystem(dir, du, dv);
        t1 = J.getInterceptor$x(dir);
        dirToZ = G.Transform$(G.Matrix4x4$values(du.x, du.y, du.z, 0, dv.x, dv.y, dv.z, 0, t1.get$x(dir), t1.get$y(dir), t1.get$z(dir), 0, 0, 0, 0, 1), null);
        t1 = J.getInterceptor$x(from);
        light2world = J.$mul$ns(J.$mul$ns(l2w, G.Transform_Translate(new G.Vector(t1.get$x(from), t1.get$y(from), t1.get$z(from)))), G.Transform$(dirToZ.mInv, dirToZ.m));
        t1 = J.$mul$ns(I, sc);
        t2 = J.$sub$n(coneangle, conedelta);
        t3 = new O.SpotLight(null, null, null, null, P.max(1, 1), G.Transform$from(light2world), G.Transform$from(G.Transform$(light2world.get$mInv(), light2world.m)));
        t3.Light$2(light2world, 1);
        t3.SpotLight$4(light2world, t1, coneangle, t2);
        return t3;
      }, "call$2", "SpotLight_Create$closure", 4, 0, 34]}
  }
}],
["materials", "package:dartray/materials/materials.dart", , D, {
  "^": "",
  GlassMaterial: {
    "^": "Material;Kr,Kt,index,bumpMap",
    static: {GlassMaterial_Create: [function(xform, mp) {
        return new D.GlassMaterial(mp.getSpectrumTexture$2("Kr", G.Spectrum_Spectrum(1)), mp.getSpectrumTexture$2("Kt", G.Spectrum_Spectrum(1)), mp.getFloatTexture$2("index", 1.5), mp.getFloatTextureOrNull$1("bumpmap"));
      }, "call$2", "GlassMaterial_Create$closure", 4, 0, 35]}
  },
  KdSubsurfaceMaterial: {
    "^": "Material;Kd,Kr,meanfreepath,eta,bumpMap",
    static: {KdSubsurfaceMaterial_Create: [function(xform, mp) {
        var kd, mfp, ior;
        kd = mp.getSpectrumTexture$2("Kd", G.Spectrum_Spectrum(0.5));
        mfp = mp.getFloatTexture$2("meanfreepath", 1);
        ior = mp.getFloatTexture$2("index", 1.3);
        return new D.KdSubsurfaceMaterial(kd, mp.getSpectrumTexture$2("Kr", G.Spectrum_Spectrum(1)), mfp, ior, mp.getFloatTextureOrNull$1("bumpmap"));
      }, "call$2", "KdSubsurfaceMaterial_Create$closure", 4, 0, 36]}
  },
  MatteMaterial: {
    "^": "Material;Kd,sigma,bumpMap",
    static: {MatteMaterial_Create: [function(xform, mp) {
        return new D.MatteMaterial(mp.getSpectrumTexture$2("Kd", G.Spectrum_Spectrum(0.5)), mp.getFloatTexture$2("sigma", 0), mp.getFloatTextureOrNull$1("bumpmap"));
      }, "call$2", "MatteMaterial_Create$closure", 4, 0, 37]}
  },
  MeasuredMaterial: {
    "^": "Material;thetaPhiData,regularHalfangleData,nThetaH,nThetaD,nPhiD,bumpMap",
    MeasuredMaterial$2: function(filename, bumpMap) {
      var t1, suffix, c;
      t1 = J.getInterceptor$asx(filename);
      suffix = t1.substring$1(filename, t1.lastIndexOf$1(filename, ".")).toLowerCase();
      if (suffix.length === 0) {
        t1 = "No suffix in measured BRDF filename \"" + filename + "\". Can't determine file type (.brdf / .merl)";
        $.Log.call$2(2, t1);
        return;
      }
      if (suffix === ".brdf") {
        if ($.get$MeasuredMaterial_loadedThetaPhi().containsKey$1(filename)) {
          this.thetaPhiData = $.get$MeasuredMaterial_loadedThetaPhi().$index(0, filename);
          return;
        }
        c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        $.ResourceManager_global.requestFile$2(filename, c.future).then$1(new D.MeasuredMaterial_closure(this, filename, c));
      } else {
        this.nThetaH = 90;
        this.nThetaD = 90;
        this.nPhiD = 180;
        if ($.get$MeasuredMaterial_loadedRegularHalfangle().containsKey$1(filename)) {
          this.regularHalfangleData = $.get$MeasuredMaterial_loadedRegularHalfangle().$index(0, filename);
          return;
        }
        c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        $.ResourceManager_global.requestFile$2(filename, c.future).then$1(new D.MeasuredMaterial_closure0(this, filename, c));
      }
    },
    static: {"^": "MeasuredMaterial_loadedRegularHalfangle,MeasuredMaterial_loadedThetaPhi", MeasuredMaterial_Create: [function(xform, mp) {
        var bumpMap = mp.getFloatTextureOrNull$1("bumpmap");
        return D.MeasuredMaterial$(mp.geomParams.findOneFilename$2("filename", mp.materialParams.findOneFilename$2("filename", "")), bumpMap);
      }, "call$2", "MeasuredMaterial_Create$closure", 4, 0, 38], MeasuredMaterial$: function(filename, bumpMap) {
        var t1 = new D.MeasuredMaterial(null, null, null, null, null, bumpMap);
        t1.MeasuredMaterial$2(filename, bumpMap);
        return t1;
      }}
  },
  MeasuredMaterial_closure: {
    "^": "Closure:92;this_0,filename_1,c_2",
    call$1: function(bytes) {
      var values, t1, numWls, wls, pos, i, pos0, bbox, samples, thetai, phii, thetao, phio, t2, t3, t4, t5, t6, t7, t8, t9, s, p;
      values = H.NativeFloat32List_NativeFloat32List$view(new Uint8Array(H._ensureNativeList(bytes)).buffer, 0, null);
      t1 = values.length;
      if (0 >= t1)
        return H.ioore(values, 0);
      numWls = C.JSNumber_methods.toInt$0(values[0]);
      if (C.JSInt_methods.$mod(t1 - 1 - numWls, 4 + numWls) !== 0) {
        t1 = "Excess or insufficient data in theta, phi BRDF file \"" + this.filename_1 + "\"";
        $.Log.call$2(2, t1);
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      wls = new Float32Array(numWls);
      for (pos = 1, i = 0; i < numWls; ++i, pos = pos0) {
        pos0 = pos + 1;
        if (pos >= t1)
          return H.ioore(values, pos);
        wls[i] = values[pos];
      }
      bbox = G.BBox$(null, null);
      samples = [];
      for (; pos < t1;) {
        pos0 = pos + 1;
        if (pos < 0)
          return H.ioore(values, pos);
        thetai = values[pos];
        pos = pos0 + 1;
        if (pos0 < 0 || pos0 >= t1)
          return H.ioore(values, pos0);
        phii = values[pos0];
        pos0 = pos + 1;
        if (pos < 0 || pos >= t1)
          return H.ioore(values, pos);
        thetao = values[pos];
        pos = pos0 + 1;
        if (pos0 < 0 || pos0 >= t1)
          return H.ioore(values, pos0);
        phio = values[pos0];
        t2 = Math.sin(thetao);
        t3 = Math.cos(thetao);
        t4 = Math.cos(phio);
        t5 = Math.sin(phio);
        t6 = Math.sin(thetai);
        t7 = Math.cos(thetai);
        t8 = Math.cos(phii);
        t9 = Math.sin(phii);
        s = G.Spectrum_Spectrum(0);
        s.setSampled$3(wls, values, pos);
        pos += numWls;
        p = G.BRDFRemap(new G.Vector(t2 * t4, t2 * t5, t3), new G.Vector(t6 * t8, t6 * t9, t7));
        samples.push(new G.IrregIsotropicBRDFSample(new G.Point(p.x, p.y, p.z), G.Spectrum_Spectrum$from(s, 0)));
        t7 = bbox.pMin;
        t9 = t7.x;
        t6 = t7.y;
        t7 = t7.z;
        t8 = bbox.pMax;
        bbox = new G.BBox(new G.Point(t9, t6, t7), new G.Point(t8.x, t8.y, t8.z)).unionPoint$1(p);
      }
      t1 = $.get$MeasuredMaterial_loadedThetaPhi();
      t2 = G.KdTree$(samples);
      this.this_0.thetaPhiData = t2;
      t1.$indexSet(0, this.filename_1, t2);
      t1 = this.c_2.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  MeasuredMaterial_closure0: {
    "^": "Closure:92;this_3,filename_4,c_5",
    call$1: function(bytes) {
      var fp, t1, t2, dims0, dims1, n, t3, t4, chunkSize;
      fp = U.InputBuffer$(bytes, false, null, 0);
      t1 = fp.readUint32$0();
      t2 = $.get$__uint32();
      t2[0] = t1;
      t1 = $.get$__uint32ToInt32();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      dims0 = t1[0];
      t2[0] = fp.readUint32$0();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      dims1 = t1[0];
      t2[0] = fp.readUint32$0();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      n = dims0 * dims1 * t1[0];
      t1 = this.this_3;
      t2 = t1.nThetaH;
      t3 = t1.nThetaD;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = t1.nPhiD;
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (n !== t2 * t3 * t4) {
        $.Log.call$2(2, "Dimensions don't match");
        t1 = this.c_5.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      t1.regularHalfangleData = new Float32Array(3 * n);
      t1 = t1.nPhiD;
      if (typeof t1 !== "number")
        return H.iae(t1);
      chunkSize = 2 * t1;
      new Float32Array(chunkSize);
      C.JSInt_methods.$tdiv(n, chunkSize);
      P.Uint64List_Uint64List(1);
    }
  },
  MetalMaterial: {
    "^": "Material;eta,k,roughness,bumpMap",
    static: {"^": "MetalMaterial__copperN,MetalMaterial__copperK,MetalMaterial__COPPER_SAMPLES,MetalMaterial__COPPER_WAVELENGTHS,MetalMaterial__COPPER_N,MetalMaterial__COPPER_K", MetalMaterial_Create: [function(xform, mp) {
        return new D.MetalMaterial(mp.getSpectrumTexture$2("eta", $.get$MetalMaterial__copperN()), mp.getSpectrumTexture$2("k", $.get$MetalMaterial__copperK()), mp.getFloatTexture$2("roughness", 0.01), mp.getFloatTextureOrNull$1("bumpmap"));
      }, "call$2", "MetalMaterial_Create$closure", 4, 0, 39]}
  },
  MirrorMaterial: {
    "^": "Material;Kr,bumpMap",
    static: {MirrorMaterial_Create: [function(xform, mp) {
        return new D.MirrorMaterial(mp.getSpectrumTexture$2("Kr", G.Spectrum_Spectrum(0.9)), mp.getFloatTextureOrNull$1("bumpmap"));
      }, "call$2", "MirrorMaterial_Create$closure", 4, 0, 40]}
  },
  PlasticMaterial: {
    "^": "Material;Kd,Ks,roughness,bumpMap",
    static: {PlasticMaterial_Create: [function(xform, mp) {
        return new D.PlasticMaterial(mp.getSpectrumTexture$2("Kd", G.Spectrum_Spectrum(0.25)), mp.getSpectrumTexture$2("Ks", G.Spectrum_Spectrum(0.25)), mp.getFloatTexture$2("roughness", 0.1), mp.getFloatTextureOrNull$1("bumpmap"));
      }, "call$2", "PlasticMaterial_Create$closure", 4, 0, 41]}
  },
  ShinyMetalMaterial: {
    "^": "Material;Ks,Kr,roughness,bumpMap",
    static: {ShinyMetalMaterial_Create: [function(xform, mp) {
        var Kr = mp.getSpectrumTexture$2("Kr", G.Spectrum_Spectrum(1));
        return new D.ShinyMetalMaterial(mp.getSpectrumTexture$2("Ks", G.Spectrum_Spectrum(1)), Kr, mp.getFloatTexture$2("roughness", 0.1), mp.getFloatTextureOrNull$1("bumpmap"));
      }, "call$2", "ShinyMetalMaterial_Create$closure", 4, 0, 42]}
  },
  SubstrateMaterial: {
    "^": "Material;Kd,Ks,nu,nv,bumpMap",
    static: {SubstrateMaterial_Create: [function(xform, mp) {
        return new D.SubstrateMaterial(mp.getSpectrumTexture$2("Kd", G.Spectrum_Spectrum(0.5)), mp.getSpectrumTexture$2("Ks", G.Spectrum_Spectrum(0.5)), mp.getFloatTexture$2("uroughness", 0.1), mp.getFloatTexture$2("vroughness", 0.1), mp.getFloatTextureOrNull$1("bumpmap"));
      }, "call$2", "SubstrateMaterial_Create$closure", 4, 0, 43]}
  },
  SubsurfaceMaterial: {
    "^": "Material;scale,Kr,sigma_a,sigma_prime_s,eta,bumpMap",
    static: {SubsurfaceMaterial_Create: [function(xform, mp) {
        var sa_rgb, sps_rgb, sa, sps, $name, found, t1, scale, sigma_a, sigma_prime_s, ior;
        sa_rgb = [0.0011, 0.0024, 0.014];
        sps_rgb = [2.55, 3.21, 3.77];
        sa = G.Spectrum_Spectrum$rgb(sa_rgb[0], sa_rgb[1], sa_rgb[2]);
        sps = G.Spectrum_Spectrum$rgb(sps_rgb[0], sps_rgb[1], sps_rgb[2]);
        $name = mp.findString$1("name");
        found = G.GetVolumeScatteringProperties($name, sa, sps);
        if (!J.$eq($name, "") && !found) {
          t1 = "Named material \"" + H.S($name) + "\" not found.  Using defaults.";
          $.Log.call$2(1, t1);
        }
        scale = mp.findFloat$2("scale", 1);
        sigma_a = mp.getSpectrumTexture$2("sigma_a", sa);
        sigma_prime_s = mp.getSpectrumTexture$2("sigma_prime_s", sps);
        ior = mp.getFloatTexture$2("index", 1.3);
        return new D.SubsurfaceMaterial(scale, mp.getSpectrumTexture$2("Kr", G.Spectrum_Spectrum(1)), sigma_a, sigma_prime_s, ior, mp.getFloatTextureOrNull$1("bumpmap"));
      }, "call$2", "SubsurfaceMaterial_Create$closure", 4, 0, 44]}
  },
  TranslucentMaterial: {
    "^": "Material;Kd,Ks,roughness,reflect,transmit,bumpMap",
    static: {TranslucentMaterial_Create: [function(xform, mp) {
        var Kd, Ks, reflect, transmit;
        Kd = mp.getSpectrumTexture$2("Kd", G.Spectrum_Spectrum(0.25));
        Ks = mp.getSpectrumTexture$2("Ks", G.Spectrum_Spectrum(0.25));
        reflect = mp.getSpectrumTexture$2("reflect", G.Spectrum_Spectrum(0.5));
        transmit = mp.getSpectrumTexture$2("transmit", G.Spectrum_Spectrum(0.5));
        return new D.TranslucentMaterial(Kd, Ks, mp.getFloatTexture$2("roughness", 0.1), reflect, transmit, mp.getFloatTextureOrNull$1("bumpmap"));
      }, "call$2", "TranslucentMaterial_Create$closure", 4, 0, 45]}
  },
  UberMaterial: {
    "^": "Material;Kd,Ks,Kr,Kt,opacity,roughness,eta,bumpMap",
    static: {UberMaterial_Create: [function(xform, mp) {
        var Kd, Ks, Kr, Kt, roughness, eta;
        Kd = mp.getSpectrumTexture$2("Kd", G.Spectrum_Spectrum(0.25));
        Ks = mp.getSpectrumTexture$2("Ks", G.Spectrum_Spectrum(0.25));
        Kr = mp.getSpectrumTexture$2("Kr", G.Spectrum_Spectrum(0));
        Kt = mp.getSpectrumTexture$2("Kt", G.Spectrum_Spectrum(0));
        roughness = mp.getFloatTexture$2("roughness", 0.1);
        eta = mp.getFloatTexture$2("index", 1.5);
        return new D.UberMaterial(Kd, Ks, Kr, Kt, mp.getSpectrumTexture$2("opacity", G.Spectrum_Spectrum(1)), roughness, eta, mp.getFloatTextureOrNull$1("bumpmap"));
      }, "call$2", "UberMaterial_Create$closure", 4, 0, 46]}
  }
}],
["pbrt", "package:dartray/pbrt/pbrt.dart", , U, {
  "^": "",
  GraphicsState: {
    "^": "Object;doubleTextures,spectrumTextures,materialParams,material,namedMaterials,currentNamedMaterial,areaLightParams,areaLight,reverseOrientation"
  },
  Pbrt: {
    "^": "Object;resourceManager,_currentApiState,_curTransform,_activeTransformBits,_namedCoordinateSystems,_renderOptions,_graphicsState,_pushedGraphicsStates,_pushedTransforms,_pushedActiveTransformBits,_renderer,_scene",
    static: {"^": "Pbrt__accelerators,Pbrt__cameras,Pbrt__films,Pbrt__filters,Pbrt__surfaceIntegrators,Pbrt__volumeIntegrators,Pbrt__lights,Pbrt__areaLights,Pbrt__materials,Pbrt__samplers,Pbrt__pixelSamplers,Pbrt__shapes,Pbrt__floatTextures,Pbrt__spectrumTextures,Pbrt__volumeRegions,Pbrt__renderers,Pbrt__MAX_TRANSFORMS,Pbrt__START_TRANSFORM_BITS,Pbrt__END_TRANSFORM_BITS,Pbrt__ALL_TRANSFORMS_BITS,Pbrt_STATE_UNINITIALIZED,Pbrt_STATE_OPTIONS_BLOCK,Pbrt_STATE_WORLD_BLOCK", Pbrt__registerStandardPlugins: function() {
        if ($.get$Pbrt__shapes().containsKey$1("sphere"))
          return;
        $.get$Pbrt__accelerators().$indexSet(0, "bvh", E.BVHAccel_Create$closure());
        $.get$Pbrt__accelerators().$indexSet(0, "grid", E.GridAccel_Create$closure());
        $.get$Pbrt__accelerators().$indexSet(0, "kdtree", E.KdTreeAccel_Create$closure());
        $.get$Pbrt__accelerators().$indexSet(0, "bruteforce", E.BruteForceAccel_Create$closure());
        $.get$Pbrt__cameras().$indexSet(0, "environment", K.EnvironmentCamera_Create$closure());
        $.get$Pbrt__cameras().$indexSet(0, "orthographic", K.OrthographicCamera_Create$closure());
        $.get$Pbrt__cameras().$indexSet(0, "perspective", K.PerspectiveCamera_Create$closure());
        $.get$Pbrt__films().$indexSet(0, "image", R.ImageFilm_Create$closure());
        $.get$Pbrt__filters().$indexSet(0, "box", S.BoxFilter_Create$closure());
        $.get$Pbrt__filters().$indexSet(0, "gaussian", S.GaussianFilter_Create$closure());
        $.get$Pbrt__filters().$indexSet(0, "sinc", S.LanczosSincFilter_Create$closure());
        $.get$Pbrt__filters().$indexSet(0, "mitchell", S.MitchellFilter_Create$closure());
        $.get$Pbrt__filters().$indexSet(0, "triangle", S.TriangleFilter_Create$closure());
        $.get$Pbrt__surfaceIntegrators().$indexSet(0, "ambientocclusion", U.AmbientOcclusionIntegrator_Create$closure());
        $.get$Pbrt__surfaceIntegrators().$indexSet(0, "diffuseprt", U.DiffusePRTIntegrator_Create$closure());
        $.get$Pbrt__surfaceIntegrators().$indexSet(0, "directlighting", U.DirectLightingIntegrator_Create$closure());
        $.get$Pbrt__surfaceIntegrators().$indexSet(0, "glossyprt", U.GlossyPRTIntegrator_Create$closure());
        $.get$Pbrt__surfaceIntegrators().$indexSet(0, "igi", U.IGIIntegrator_Create$closure());
        $.get$Pbrt__surfaceIntegrators().$indexSet(0, "irradiancecache", U.IrradianceCacheIntegrator_Create$closure());
        $.get$Pbrt__surfaceIntegrators().$indexSet(0, "path", U.PathIntegrator_Create$closure());
        $.get$Pbrt__surfaceIntegrators().$indexSet(0, "photonmap", U.PhotonMapIntegrator_Create$closure());
        $.get$Pbrt__surfaceIntegrators().$indexSet(0, "exphotonmap", U.PhotonMapIntegrator_Create$closure());
        $.get$Pbrt__surfaceIntegrators().$indexSet(0, "whitted", U.WhittedIntegrator_Create$closure());
        $.get$Pbrt__lights().$indexSet(0, "distant", O.DistantLight_Create$closure());
        $.get$Pbrt__lights().$indexSet(0, "point", O.PointLight_Create$closure());
        $.get$Pbrt__lights().$indexSet(0, "spot", O.SpotLight_Create$closure());
        $.get$Pbrt__lights().$indexSet(0, "infinite", O.InfiniteAreaLight_Create$closure());
        $.get$Pbrt__lights().$indexSet(0, "goniometric", O.GoniometricLight_Create$closure());
        $.get$Pbrt__lights().$indexSet(0, "projection", O.ProjectionLight_Create$closure());
        $.get$Pbrt__areaLights().$indexSet(0, "diffuse", O.DiffuseAreaLight_Create$closure());
        $.get$Pbrt__areaLights().$indexSet(0, "area", O.DiffuseAreaLight_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "glass", D.GlassMaterial_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "kdsubsurface", D.KdSubsurfaceMaterial_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "matte", D.MatteMaterial_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "measured", D.MeasuredMaterial_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "metal", D.MetalMaterial_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "mirror", D.MirrorMaterial_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "plastic", D.PlasticMaterial_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "shinymetal", D.ShinyMetalMaterial_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "substrate", D.SubstrateMaterial_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "subsurface", D.SubsurfaceMaterial_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "translucent", D.TranslucentMaterial_Create$closure());
        $.get$Pbrt__materials().$indexSet(0, "uber", D.UberMaterial_Create$closure());
        $.get$Pbrt__pixelSamplers().$indexSet(0, "linear", F.LinearPixelSampler_Create$closure());
        $.get$Pbrt__pixelSamplers().$indexSet(0, "random", F.RandomPixelSampler_Create$closure());
        $.get$Pbrt__pixelSamplers().$indexSet(0, "tile", F.TilePixelSampler_Create$closure());
        $.get$Pbrt__samplers().$indexSet(0, "adaptive", U.AdaptiveSampler_Create$closure());
        $.get$Pbrt__samplers().$indexSet(0, "bestcandidate", U.BestCandidateSampler_Create$closure());
        $.get$Pbrt__samplers().$indexSet(0, "halton", U.HaltonSampler_Create$closure());
        $.get$Pbrt__samplers().$indexSet(0, "lowdiscrepancy", U.LowDiscrepancySampler_Create$closure());
        $.get$Pbrt__samplers().$indexSet(0, "random", U.RandomSampler_Create$closure());
        $.get$Pbrt__samplers().$indexSet(0, "stratified", U.StratifiedSampler_Create$closure());
        $.get$Pbrt__shapes().$indexSet(0, "cone", M.Cone_Create$closure());
        $.get$Pbrt__shapes().$indexSet(0, "cylinder", M.Cylinder_Create$closure());
        $.get$Pbrt__shapes().$indexSet(0, "disk", M.Disk_Create$closure());
        $.get$Pbrt__shapes().$indexSet(0, "heightfield", M.Heightfield_Create$closure());
        $.get$Pbrt__shapes().$indexSet(0, "hyperboloid", M.Hyperboloid_Create$closure());
        $.get$Pbrt__shapes().$indexSet(0, "loopsubdiv", M.LoopSubdivision_Create$closure());
        $.get$Pbrt__shapes().$indexSet(0, "nurbs", M.Nurbs_Create$closure());
        $.get$Pbrt__shapes().$indexSet(0, "paraboloid", M.Paraboloid_Create$closure());
        $.get$Pbrt__shapes().$indexSet(0, "sphere", M.Sphere_Create$closure());
        $.get$Pbrt__shapes().$indexSet(0, "trianglemesh", M.TriangleMesh_Create$closure());
        $.get$Pbrt__floatTextures().$indexSet(0, "bilerp", G.BilerpTexture_CreateFloat$closure());
        $.get$Pbrt__spectrumTextures().$indexSet(0, "bilerp", G.BilerpTexture_CreateSpectrum$closure());
        $.get$Pbrt__floatTextures().$indexSet(0, "checkerboard", G.CheckerboardTexture_CreateFloat$closure());
        $.get$Pbrt__spectrumTextures().$indexSet(0, "checkerboard", G.CheckerboardTexture_CreateSpectrum$closure());
        $.get$Pbrt__floatTextures().$indexSet(0, "dots", G.DotsTexture_CreateFloat$closure());
        $.get$Pbrt__spectrumTextures().$indexSet(0, "dots", G.DotsTexture_CreateSpectrum$closure());
        $.get$Pbrt__floatTextures().$indexSet(0, "fbm", G.FBmTexture_CreateFloat$closure());
        $.get$Pbrt__spectrumTextures().$indexSet(0, "fbm", G.FBmTexture_CreateSpectrum$closure());
        $.get$Pbrt__floatTextures().$indexSet(0, "imagemap", G.ImageTexture_CreateFloat$closure());
        $.get$Pbrt__spectrumTextures().$indexSet(0, "imagemap", G.ImageTexture_CreateSpectrum$closure());
        $.get$Pbrt__floatTextures().$indexSet(0, "marble", G.MarbleTexture_CreateFloat$closure());
        $.get$Pbrt__spectrumTextures().$indexSet(0, "marble", G.MarbleTexture_CreateSpectrum$closure());
        $.get$Pbrt__floatTextures().$indexSet(0, "mix", G.MixTexture_CreateFloat$closure());
        $.get$Pbrt__spectrumTextures().$indexSet(0, "mix", G.MixTexture_CreateSpectrum$closure());
        $.get$Pbrt__floatTextures().$indexSet(0, "scale", G.ScaleTexture_CreateFloat$closure());
        $.get$Pbrt__spectrumTextures().$indexSet(0, "scale", G.ScaleTexture_CreateSpectrum$closure());
        $.get$Pbrt__floatTextures().$indexSet(0, "uv", G.UVTexture_CreateFloat$closure());
        $.get$Pbrt__spectrumTextures().$indexSet(0, "uv", G.UVTexture_CreateSpectrum$closure());
        $.get$Pbrt__floatTextures().$indexSet(0, "windy", G.WindyTexture_CreateFloat$closure());
        $.get$Pbrt__spectrumTextures().$indexSet(0, "windy", G.WindyTexture_CreateSpectrum$closure());
        $.get$Pbrt__floatTextures().$indexSet(0, "wrinkled", G.WrinkledTexture_CreateFloat$closure());
        $.get$Pbrt__spectrumTextures().$indexSet(0, "wrinkled", G.WrinkledTexture_CreateSpectrum$closure());
        $.get$Pbrt__volumeIntegrators().$indexSet(0, "emission", S.EmissionIntegrator_Create$closure());
        $.get$Pbrt__volumeIntegrators().$indexSet(0, "single", S.SingleScatteringIntegrator_Create$closure());
        $.get$Pbrt__volumeRegions().$indexSet(0, "exponential", B.ExponentialDensityRegion_Create$closure());
        $.get$Pbrt__volumeRegions().$indexSet(0, "homogeneous", B.HomogeneousVolumeRegion_Create$closure());
        $.get$Pbrt__volumeRegions().$indexSet(0, "volumegrid", B.VolumeGridDensity_Create$closure());
      }}
  },
  RenderManagerInterface: {
    "^": "ResourceManager;",
    render$6$image$isolate$log$numThreads$preview: function(path, image, isolate, log, numThreads, preview) {
      var t1, i, t2, completer, jobs, box_0, t3, box_00, t4, result;
      t1 = {};
      $.Log = log;
      if (C.JSString_methods.contains$1(path, "/")) {
        i = C.JSString_methods.lastIndexOf$1(path, "/");
        this.scenePath = C.JSString_methods.substring$2(path, 0, i);
        path = C.JSString_methods.substring$1(path, i + 1);
      }
      t2 = G.OutputImage;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
      t1.tasksRemaining_1 = numThreads;
      jobs = H.setRuntimeTypeInfo(Array(numThreads), [U.RenderTask]);
      box_0 = {};
      for (box_0.i_0 = 0, t2 = jobs.length; t3 = box_0.i_0, t3 < numThreads; box_00 = {}, t3 = box_0.i_0, box_00.i_0 = t3, box_00.i_0 = t3 + 1, box_0 = box_00) {
        t4 = P.ReceivePort_ReceivePort();
        if (t3 >= t2)
          return H.ioore(jobs, t3);
        jobs[t3] = new U.RenderTask(1, t4, null, preview, t3, numThreads, null, [0, 0, 0, 0]);
        t3 = box_0.i_0;
        if (t3 >= t2)
          return H.ioore(jobs, t3);
        t3 = jobs[t3].render$3(path, image, isolate);
        t4 = $.Zone__current;
        t4.toString;
        result = new P._Future(0, t4, null, null, new U.RenderManagerInterface_render_closure(t1, completer), null, P._registerErrorHandler(new U.RenderManagerInterface_render_closure0(box_0, t1, completer), t4), null);
        result.$builtinTypeInfo = [null];
        t3._addListener$1(result);
      }
      return completer.future;
    },
    render$5$image$isolate$log$preview: function(path, image, isolate, log, preview) {
      return this.render$6$image$isolate$log$numThreads$preview(path, image, isolate, log, 1, preview);
    }
  },
  RenderManagerInterface_render_closure1: {
    "^": "Closure:92;image_2,preview_3,completer_4",
    call$1: function(output) {
      var t1 = this.preview_3;
      if (t1 != null)
        t1.call$1(this.image_2);
      t1 = this.completer_4.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(output);
    }
  },
  RenderManagerInterface_render_closure: {
    "^": "Closure:92;box_1,completer_5",
    call$1: function(task) {
      var t1;
      if (--this.box_1.tasksRemaining_1 === 0) {
        t1 = this.completer_5.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
      }
    }
  },
  RenderManagerInterface_render_closure0: {
    "^": "Closure:92;box_0,box_1,completer_6",
    call$1: function(msg) {
      var t1 = "Error Thread " + this.box_0.i_0 + ": " + H.S(msg);
      $.Log.call$2(2, t1);
      --this.box_1.tasksRemaining_1;
      t1 = this.completer_6.future;
      if (t1._state === 0)
        t1._asyncComplete$1(null);
    }
  },
  RenderOptions: {
    "^": "Object;transformStartTime,transformEndTime,filterName,filterParams,filmName,filmParams,outputImage,previewCallback,pixelSamplerName,pixelSamplerParams,samplerName,samplerParams,acceleratorName,acceleratorParams,rendererName,surfIntegratorName,volIntegratorName,rendererParams,surfIntegratorParams,volIntegratorParams,cameraName,cameraParams,cameraToWorld,lights,primitives,volumeRegions,instances,currentInstance,taskNum,taskCount",
    RenderOptions$0: function() {
      this.transformStartTime = 0;
      this.transformEndTime = 1;
      this.filterName = "box";
      this.filmName = "image";
      this.pixelSamplerName = "tile";
      this.samplerName = "lowdiscrepancy";
      this.acceleratorName = "bvh";
      this.rendererName = "sampler";
      this.surfIntegratorName = "directlighting";
      this.volIntegratorName = "emission";
      this.cameraName = "perspective";
      this.currentInstance = null;
      this.taskNum = 0;
      this.taskCount = 1;
    },
    static: {RenderOptions$: function() {
        var t1 = new U.RenderOptions(null, null, null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, null, null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, null, null, new G.ParamSet([], [], [], [], [], [], [], [], []), new G.ParamSet([], [], [], [], [], [], [], [], []), new G.ParamSet([], [], [], [], [], [], [], [], []), null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, [], [], [], P.LinkedHashMap_LinkedHashMap$_empty(null, null), [], null, null);
        t1.RenderOptions$0();
        return t1;
      }}
  },
  RenderTask: {
    "^": "Object;status,receivePort,sendPort,previewCallback,taskNum,taskCount,threadImage,extents",
    previewCallback$1: function(arg0) {
      return this.previewCallback.call$1(arg0);
    },
    render$3: function(scene, image, isolateUri) {
      var t1, completer, t2, t3, t4, t5, t6;
      t1 = G.OutputImage;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
      t1 = image.width;
      t2 = image.height;
      G.Sampler_ComputeSubWindow(t1, t2, this.taskNum, this.taskCount, this.extents);
      t3 = image.xOffset;
      t4 = image.yOffset;
      t5 = image.duration;
      t6 = image._format;
      this.threadImage = new U.Image(t1, t2, t3, t4, t5, image.disposeMethod, image.blendMethod, new Uint32Array(H._ensureNativeList(image.data)), t6);
      t6 = this.receivePort;
      P.Isolate_spawnUri(P.Uri_parse(isolateUri), ["_"], new H._NativeJsSendPort(t6._rawPort, init.globalState.currentContext.id), false).then$1(new U.RenderTask_render_closure());
      t6 = t6._controller;
      t6.toString;
      H.setRuntimeTypeInfo(new P._ControllerStream(t6), [null]).listen$4$cancelOnError$onDone$onError(new U.RenderTask_render_closure0(this, scene, image, completer), null, null, null);
      return completer.future;
    },
    _updatePreviewImage$2: function(image, bytes) {
      var t1, src, dst, w, t2, dsti, y, t3, t4;
      t1 = J.getInterceptor(bytes);
      if (!!t1.$isUint8List)
        src = H.NativeUint32List_NativeUint32List$view(t1.get$buffer(bytes), 0, null);
      else {
        t1 = H.checkSubtype(bytes, "$isList", [J.JSInt], "$asList");
        if (t1)
          src = H.NativeUint32List_NativeUint32List$view(new Uint8Array(H._ensureNativeList(bytes)).buffer, 0, null);
        else
          return;
      }
      dst = image.data;
      t1 = this.extents;
      w = J.$sub$n(t1[1], t1[0]);
      t2 = image.width;
      dsti = J.$add$ns(J.$mul$ns(t1[2], t2), t1[0]);
      for (y = t1[2]; t3 = J.getInterceptor$n(y), t3.$lt(y, t1[3]); y = t3.$add(y, 1), dsti = t4.$add(dsti, t2)) {
        t4 = J.getInterceptor$ns(dsti);
        C.NativeUint32List_methods.setRange$4(dst, dsti, t4.$add(dsti, w), src, dsti);
      }
    },
    static: {"^": "RenderTask_CONNECTING,RenderTask_CONNECTED,RenderTask_STOPPED"}
  },
  RenderTask_render_closure: {
    "^": "Closure:92;",
    call$1: function(iso) {
    }
  },
  RenderTask_render_closure0: {
    "^": "Closure:92;this_0,scene_1,image_2,completer_3",
    call$1: function(msg) {
      var t1, t2, t3, t4, cmd, id, subMsg, path, bytes, rgb, output;
      t1 = this.this_0;
      t2 = t1.status;
      if (t2 === 1) {
        t2 = this.image_2;
        t3 = J.getInterceptor(msg);
        if (!!t3.$isSendPort) {
          t1.sendPort = msg;
          msg.send$1(0, "ping");
        } else if (t3.$eq(msg, "pong")) {
          t1.status = 2;
          t3 = t1.sendPort;
          t4 = t1.taskNum;
          t1 = t1.taskCount;
          t3.send$1(0, P.LinkedHashMap_LinkedHashMap$_literal(["cmd", "render", "width", t2.width, "height", t2.height, "scene", this.scene_1, "taskNum", t4, "taskCount", t1, "preview", true], null, null));
        }
      } else if (t2 === 2) {
        t2 = J.getInterceptor(msg);
        if (!!t2.$isMap && msg.containsKey$1("cmd") === true) {
          cmd = t2.$index(msg, "cmd");
          t3 = J.getInterceptor(cmd);
          if (t3.$eq(cmd, "request")) {
            id = t2.$index(msg, "id");
            subMsg = t2.$index(msg, "msg");
            t2 = J.getInterceptor(subMsg);
            if (!!t2.$isMap && subMsg.containsKey$1("cmd") === true)
              if (J.$eq(t2.$index(subMsg, "cmd"), "file")) {
                path = t2.$index(subMsg, "path");
                $.ResourceManager_global.requestFile$2(path, null).then$1(new U.RenderTask_render__closure(t1, id));
              }
            return;
          } else if (t3.$eq(cmd, "preview") && msg.containsKey$1("image") === true) {
            bytes = t2.$index(msg, "image");
            t2 = this.image_2;
            if (t1.taskCount > 1)
              t1._updatePreviewImage$2(t2, bytes);
            else
              C.NativeUint8List_methods.setRange$3(H.NativeUint8List_NativeUint8List$view(t2.data.buffer, 0, null), 0, J.get$length$asx(bytes), bytes);
            t1.previewCallback$1(t2);
            return;
          } else if (t3.$eq(cmd, "error")) {
            t1 = "ERROR: " + H.S(t2.$index(msg, "msg"));
            $.Log.call$2(0, t1);
            this.completer_3.completeError$1(t2.$index(msg, "msg"));
            return;
          } else if (t3.$eq(cmd, "final") && msg.containsKey$1("output") === true) {
            rgb = t2.$index(msg, "output");
            t1 = t1.extents;
            output = G.OutputImage$(t1[0], t1[2], t1[1], t1[3], rgb);
            t1 = this.completer_3.future;
            if (t1._state !== 0)
              H.throwExpression(P.StateError$("Future already completed"));
            t1._asyncComplete$1(output);
            return;
          }
        }
        t1 = t2.toString$0(msg);
        $.Log.call$2(0, t1);
      }
    }
  },
  RenderTask_render__closure: {
    "^": "Closure:92;this_4,id_5",
    call$1: function(bytes) {
      var data = P.LinkedHashMap_LinkedHashMap$_literal(["cmd", "request", "id", this.id_5, "data", bytes], null, null);
      this.this_4.sendPort.send$1(0, data);
    }
  },
  TransformSet: {
    "^": "Object;t<",
    $index: function(_, i) {
      var t1 = this.t;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, transform) {
      var t1 = this.t;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      t1[i] = transform;
    },
    TransformSet$0: function() {
      for (var i = 0; i < 2; ++i)
        this.t[i] = G.Transform$(null, null);
    },
    static: {TransformSet$: function() {
        var t1 = Array(2);
        t1.fixed$length = init;
        t1 = new U.TransformSet(H.setRuntimeTypeInfo(t1, [G.Transform]));
        t1.TransformSet$0();
        return t1;
      }}
  }
}],
["pixel_samplers", "package:dartray/pixel_samplers/pixel_samplers.dart", , F, {
  "^": "",
  LinearPixelSampler: {
    "^": "PixelSampler;_pixel_samplers$_numSamples,_samples,xPixelStart,xPixelEnd,yPixelStart,yPixelEnd",
    setup$4: function(xPixelStart, xPixelEnd, yPixelStart, yPixelEnd) {
      var t1, y, si, x, t2, t3, si0, t4;
      G.PixelSampler.prototype.setup$4.call(this, xPixelStart, xPixelEnd, yPixelStart, yPixelEnd);
      t1 = J.$mul$ns(J.$mul$ns(J.$sub$n(xPixelEnd, xPixelStart), J.$sub$n(yPixelEnd, yPixelStart)), 2);
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this._samples = new Int32Array(t1);
      for (y = yPixelStart, si = 0; t1 = J.getInterceptor$n(y), t1.$lt(y, yPixelEnd); y = t1.$add(y, 1))
        for (x = xPixelStart; t2 = J.getInterceptor$n(x), t2.$lt(x, xPixelEnd); x = t2.$add(x, 1)) {
          t3 = this._samples;
          si0 = si + 1;
          t4 = t3.length;
          if (si < 0 || si >= t4)
            return H.ioore(t3, si);
          t3[si] = x;
          si = si0 + 1;
          if (si0 < 0 || si0 >= t4)
            return H.ioore(t3, si0);
          t3[si0] = y;
        }
      this._pixel_samplers$_numSamples = C.JSInt_methods._tdivFast$1(this._samples.length, 2);
    },
    getPixel$2: function(index, pixel) {
      var t1, t2;
      index *= 2;
      t1 = this._samples;
      if (index >= t1.length - 1)
        return;
      J.$indexSet$ax(pixel, 0, t1[index]);
      t1 = this._samples;
      t2 = index + 1;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      if (1 >= pixel.length)
        return H.ioore(pixel, 1);
      pixel[1] = t2;
    },
    static: {LinearPixelSampler_Create: [function(params, film) {
        return new F.LinearPixelSampler(null, null, null, null, null, null);
      }, "call$2", "LinearPixelSampler_Create$closure", 4, 0, 47]}
  },
  RandomPixelSampler: {
    "^": "PixelSampler;_pixel_samplers$_numSamples,_samples,xPixelStart,xPixelEnd,yPixelStart,yPixelEnd",
    setup$4: function(xPixelStart, xPixelEnd, yPixelStart, yPixelEnd) {
      var t1, y, si, x, t2, t3, si0, t4, rng, i, r, l, t, t5;
      G.PixelSampler.prototype.setup$4.call(this, xPixelStart, xPixelEnd, yPixelStart, yPixelEnd);
      t1 = J.$mul$ns(J.$mul$ns(J.$sub$n(xPixelEnd, xPixelStart), J.$sub$n(yPixelEnd, yPixelStart)), 2);
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this._samples = new Int32Array(t1);
      for (y = yPixelStart, si = 0; t1 = J.getInterceptor$n(y), t1.$lt(y, yPixelEnd); y = t1.$add(y, 1))
        for (x = xPixelStart; t2 = J.getInterceptor$n(x), t2.$lt(x, xPixelEnd); x = t2.$add(x, 1)) {
          t3 = this._samples;
          si0 = si + 1;
          t4 = t3.length;
          if (si < 0 || si >= t4)
            return H.ioore(t3, si);
          t3[si] = x;
          si = si0 + 1;
          if (si0 < 0 || si0 >= t4)
            return H.ioore(t3, si0);
          t3[si0] = y;
        }
      rng = new G.RNG(null, new Uint32Array(624), null);
      rng.mti = 625;
      rng.seed$1(0, 5489);
      t1 = C.JSInt_methods._tdivFast$1(this._samples.length, 2);
      this._pixel_samplers$_numSamples = t1;
      i = 0;
      r = 0;
      while (true) {
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = rng.randomUInt$0();
        t2 = this._pixel_samplers$_numSamples;
        if (typeof t2 !== "number")
          return H.iae(t2);
        l = C.JSInt_methods.$mod(t1, t2) * 2;
        t1 = this._samples;
        t3 = t1.length;
        if (r >= t3)
          return H.ioore(t1, r);
        t = t1[r];
        if (l >= t3)
          return H.ioore(t1, l);
        t1[r] = t1[l];
        t1[l] = t;
        t4 = r + 1;
        if (t4 >= t3)
          return H.ioore(t1, t4);
        t = t1[t4];
        t5 = l + 1;
        if (t5 >= t3)
          return H.ioore(t1, t5);
        t1[t4] = t1[t5];
        t1[t5] = t;
        ++i;
        r += 2;
        t1 = t2;
      }
    },
    getPixel$2: function(index, pixel) {
      var t1, t2;
      index *= 2;
      t1 = this._samples;
      if (index >= t1.length - 1)
        return;
      J.$indexSet$ax(pixel, 0, t1[index]);
      t1 = this._samples;
      t2 = index + 1;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      if (1 >= pixel.length)
        return H.ioore(pixel, 1);
      pixel[1] = t2;
    },
    static: {RandomPixelSampler_Create: [function(params, film) {
        return new F.RandomPixelSampler(null, null, null, null, null, null);
      }, "call$2", "RandomPixelSampler_Create$closure", 4, 0, 48]}
  },
  TilePixelSampler: {
    "^": "PixelSampler;tileSize,randomize,_pixel_samplers$_numSamples,_samples,xPixelStart,xPixelEnd,yPixelStart,yPixelEnd",
    setup$4: function(xPixelStart, xPixelEnd, yPixelStart, yPixelEnd) {
      var t1, t2, t3, width, height, numXTiles, numYTiles, tiles, yi, ti, xi, ti0, numTiles, rng, lx, ly, rx, ry, t, t4, si, i, tx, ty, sx, sy, t5, t6, y, x, t7, si0, t8;
      G.PixelSampler.prototype.setup$4.call(this, xPixelStart, xPixelEnd, yPixelStart, yPixelEnd);
      t1 = J.getInterceptor$n(xPixelEnd);
      t2 = J.getInterceptor$n(yPixelEnd);
      this._pixel_samplers$_numSamples = J.$mul$ns(t1.$sub(xPixelEnd, xPixelStart), t2.$sub(yPixelEnd, yPixelStart));
      t3 = J.$mul$ns(J.$mul$ns(t1.$sub(xPixelEnd, xPixelStart), t2.$sub(yPixelEnd, yPixelStart)), 2);
      if (typeof t3 !== "number" || Math.floor(t3) !== t3)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t3)));
      this._samples = new Int32Array(t3);
      width = t1.$sub(xPixelEnd, xPixelStart);
      height = t2.$sub(yPixelEnd, yPixelStart);
      t1 = this.tileSize;
      t2 = J.getInterceptor$n(width).$tdiv(width, t1);
      if (typeof width !== "number")
        return width.$mod();
      if (typeof t1 !== "number")
        return H.iae(t1);
      numXTiles = J.$add$ns(t2, C.JSNumber_methods.$mod(width, t1) === 0 ? 0 : 1);
      t2 = J.getInterceptor$n(height).$tdiv(height, t1);
      if (typeof height !== "number")
        return height.$mod();
      numYTiles = J.$add$ns(t2, C.JSNumber_methods.$mod(height, t1) === 0 ? 0 : 1);
      t2 = J.$mul$ns(J.$mul$ns(numXTiles, numYTiles), 2);
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      tiles = new Int32Array(t2);
      if (typeof numYTiles !== "number")
        return H.iae(numYTiles);
      t2 = tiles.length;
      yi = 0;
      ti = 0;
      for (; yi < numYTiles; ++yi) {
        if (typeof numXTiles !== "number")
          return H.iae(numXTiles);
        xi = 0;
        for (; xi < numXTiles; ++xi) {
          ti0 = ti + 1;
          if (ti < 0 || ti >= t2)
            return H.ioore(tiles, ti);
          tiles[ti] = xi;
          ti = ti0 + 1;
          if (ti0 < 0 || ti0 >= t2)
            return H.ioore(tiles, ti0);
          tiles[ti0] = yi;
        }
      }
      numTiles = C.JSInt_methods._tdivFast$1(t2, 2);
      if (this.randomize === true) {
        rng = new G.RNG(null, new Uint32Array(624), null);
        rng.mti = 625;
        rng.seed$1(0, 5489);
        for (ti = 1; ti < numTiles; ++ti) {
          lx = ti * 2;
          ly = lx + 1;
          rx = C.JSInt_methods.$mod(rng.randomUInt$0(), numTiles) * 2;
          ry = rx + 1;
          if (lx >= t2)
            return H.ioore(tiles, lx);
          t = tiles[lx];
          if (rx >= t2)
            return H.ioore(tiles, rx);
          tiles[lx] = tiles[rx];
          tiles[rx] = t;
          if (ly >= t2)
            return H.ioore(tiles, ly);
          t = tiles[ly];
          if (ry >= t2)
            return H.ioore(tiles, ry);
          tiles[ly] = tiles[ry];
          tiles[ry] = t;
        }
      }
      for (t3 = J.getInterceptor$ns(xPixelStart), t4 = J.getInterceptor$ns(yPixelStart), si = 0, i = 0, ti = 0; i < numTiles; ++i) {
        ti0 = ti + 1;
        if (ti >= t2)
          return H.ioore(tiles, ti);
        tx = tiles[ti];
        ti = ti0 + 1;
        if (ti0 >= t2)
          return H.ioore(tiles, ti0);
        ty = tiles[ti0];
        sx = t3.$add(xPixelStart, tx * t1);
        sy = t4.$add(yPixelStart, ty * t1);
        for (t5 = J.getInterceptor$ns(sx), t6 = J.getInterceptor$ns(sy), yi = 0; yi < t1; ++yi) {
          y = t6.$add(sy, yi);
          if (J.$ge$n(y, yPixelEnd))
            break;
          for (xi = 0; xi < t1; ++xi) {
            x = t5.$add(sx, xi);
            if (J.$ge$n(x, xPixelEnd))
              break;
            t7 = this._samples;
            si0 = si + 1;
            t8 = t7.length;
            if (si < 0 || si >= t8)
              return H.ioore(t7, si);
            t7[si] = x;
            si = si0 + 1;
            if (si0 < 0 || si0 >= t8)
              return H.ioore(t7, si0);
            t7[si0] = y;
          }
        }
      }
    },
    getPixel$2: function(index, pixel) {
      var t1, t2;
      index *= 2;
      t1 = this._samples;
      if (index >= t1.length - 1)
        return;
      J.$indexSet$ax(pixel, 0, t1[index]);
      t1 = this._samples;
      t2 = index + 1;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      if (1 >= pixel.length)
        return H.ioore(pixel, 1);
      pixel[1] = t2;
    },
    static: {TilePixelSampler_Create: [function(params, film) {
        return new F.TilePixelSampler(params.findOneInt$2("tilesize", 32), params.findOneBool$2("randomize", true), null, null, null, null, null, null);
      }, "call$2", "TilePixelSampler_Create$closure", 4, 0, 49]}
  }
}],
["samplers", "package:dartray/samplers/samplers.dart", , U, {
  "^": "",
  AdaptiveSampler: {
    "^": "Sampler;pixels,pixel,pixelIndex,minSamples,maxSamples,sampleBuf,method,supersamplePixel,xPixelStart,xPixelEnd,yPixelStart,yPixelEnd,samplesPerPixel,shutterOpen,shutterClose",
    AdaptiveSampler$10: function(xstart, xend, ystart, yend, mins, maxs, method, sopen, sclose, pixels) {
      var t1, t0;
      t1 = this.pixels;
      if (t1 == null)
        $.Log.call$2(3, "Pixel sampler is required by LowDiscrepencySampler");
      t1.setup$4(xstart, xend, ystart, yend);
      this.pixelIndex = 0;
      this.supersamplePixel = false;
      t1.getPixel$2(0, this.pixel);
      if (J.$gt$n(mins, maxs)) {
        t0 = maxs;
        maxs = mins;
        mins = t0;
      }
      t1 = J.getInterceptor$n(mins);
      if (t1.$and(mins, t1.$sub(mins, 1)) !== 0) {
        $.Log.call$2(1, "Minimum pixel samples being rounded up to power of 2");
        this.minSamples = G.RoundUpPow2(mins);
      } else
        this.minSamples = mins;
      t1 = J.getInterceptor$n(maxs);
      if (t1.$and(maxs, t1.$sub(maxs, 1)) !== 0) {
        $.Log.call$2(1, "Maximum pixel samples being rounded up to power of 2");
        this.maxSamples = G.RoundUpPow2(maxs);
      } else
        this.maxSamples = maxs;
      if (J.$lt$n(this.minSamples, 2)) {
        $.Log.call$2(1, "Adaptive sampler needs at least two initial pixel samples. Using two.");
        this.minSamples = 2;
      }
      if (J.$eq(this.minSamples, this.maxSamples)) {
        this.maxSamples = J.$mul$ns(this.maxSamples, 2);
        t1 = "Adaptive sampler must have more maximum samples than minimum. Using " + H.S(this.minSamples) + " - " + H.S(this.maxSamples);
        $.Log.call$2(1, t1);
      }
    },
    static: {"^": "AdaptiveSampler_ADAPTIVE_COMPARE_SHAPE_ID,AdaptiveSampler_ADAPTIVE_CONTRAST_THRESHOLD", AdaptiveSampler_Create: [function(params, film, camera, pixels) {
        var extent, minsamp, maxsamp, m, t1, method;
        extent = [0, 0, 0, 0];
        film.getSampleExtent$1(extent);
        minsamp = params.findOneInt$2("minsamples", 4);
        maxsamp = params.findOneInt$2("maxsamples", 32);
        m = params.findOneString$2("method", "contrast");
        t1 = J.getInterceptor(m);
        if (t1.$eq(m, "contrast"))
          method = 1;
        else
          method = t1.$eq(m, "shapeid") ? 0 : -1;
        if (method === -1) {
          t1 = "Adaptive sampling metric '" + H.S(m) + "' unknown. Using 'contrast'.";
          $.Log.call$2(1, t1);
          method = 1;
        }
        return U.AdaptiveSampler$(extent[0], extent[1], extent[2], extent[3], minsamp, maxsamp, method, camera.get$shutterOpen(), camera.get$shutterClose(), pixels);
      }, "call$4", "AdaptiveSampler_Create$closure", 8, 0, 50], AdaptiveSampler$: function(xstart, xend, ystart, yend, mins, maxs, method, sopen, sclose, pixels) {
        var t1 = new U.AdaptiveSampler(pixels, new Int32Array(2), null, null, null, null, null, null, xstart, xend, ystart, yend, G.RoundUpPow2(P.max(mins, maxs)), sopen, sclose);
        t1.AdaptiveSampler$10(xstart, xend, ystart, yend, mins, maxs, method, sopen, sclose, pixels);
        return t1;
      }}
  },
  BestCandidateSampler: {
    "^": "Sampler;tableWidth,tableOffset,xTileStart,xTileEnd,yTileStart,yTileEnd,xTile,yTile,sampleOffsets,xPixelStart,xPixelEnd,yPixelStart,yPixelEnd,samplesPerPixel,shutterOpen,shutterClose",
    BestCandidateSampler$7: function(xstart, xend, ystart, yend, nPixelSamples, sopen, sclose) {
      var t1, t2, tileRng, i;
      if (typeof nPixelSamples !== "number")
        H.throwExpression(P.ArgumentError$(nPixelSamples));
      t1 = 64 / Math.sqrt(nPixelSamples);
      this.tableWidth = t1;
      this.xTileStart = J.floor$0$n(J.$div$n(xstart, t1));
      this.xTileEnd = J.floor$0$n(J.$div$n(xend, this.tableWidth));
      this.yTileStart = J.floor$0$n(J.$div$n(ystart, this.tableWidth));
      this.yTileEnd = J.floor$0$n(J.$div$n(yend, this.tableWidth));
      t1 = this.xTileStart;
      this.xTile = t1;
      t2 = this.yTileStart;
      this.yTile = t2;
      this.tableOffset = 0;
      tileRng = new G.RNG(null, new Uint32Array(624), null);
      tileRng.mti = 625;
      tileRng.seed$1(0, t1 + (t2 << 8 >>> 0));
      for (t1 = this.sampleOffsets, i = 0; i < 3; ++i)
        t1[i] = (tileRng.randomUInt$0() & 16777215) / 16777216;
    },
    static: {"^": "BestCandidateSampler_SQRT_SAMPLE_TABLE_SIZE,BestCandidateSampler_SAMPLE_TABLE_SIZE", BestCandidateSampler_Create: [function(params, film, camera, pixels) {
        var extent, nsamp;
        extent = [0, 0, 0, 0];
        film.getSampleExtent$1(extent);
        nsamp = params.findOneInt$2("pixelsamples", 4);
        return U.BestCandidateSampler$(extent[0], extent[1], extent[2], extent[3], nsamp, camera.get$shutterOpen(), camera.get$shutterClose());
      }, "call$4", "BestCandidateSampler_Create$closure", 8, 0, 51], BestCandidateSampler$: function(xstart, xend, ystart, yend, nPixelSamples, sopen, sclose) {
        var t1 = new U.BestCandidateSampler(null, null, null, null, null, null, null, null, [0, 0, 0], xstart, xend, ystart, yend, nPixelSamples, sopen, sclose);
        t1.BestCandidateSampler$7(xstart, xend, ystart, yend, nPixelSamples, sopen, sclose);
        return t1;
      }}
  },
  HaltonSampler: {
    "^": "Sampler;wantedSamples,currentSample,xPixelStart,xPixelEnd,yPixelStart,yPixelEnd,samplesPerPixel,shutterOpen,shutterClose",
    HaltonSampler$7: function(xs, xe, ys, ye, ps, sopen, sclose) {
      var delta = P.max(J.$sub$n(this.xPixelEnd, this.xPixelStart), J.$sub$n(this.yPixelEnd, this.yPixelStart));
      this.wantedSamples = J.$mul$ns(J.$mul$ns(this.samplesPerPixel, delta), delta);
      this.currentSample = 0;
    },
    static: {HaltonSampler$: function(xs, xe, ys, ye, ps, sopen, sclose) {
        var t1 = new U.HaltonSampler(null, null, xs, xe, ys, ye, ps, sopen, sclose);
        t1.HaltonSampler$7(xs, xe, ys, ye, ps, sopen, sclose);
        return t1;
      }, HaltonSampler_Create: [function(params, film, camera, pixels) {
        var range, nsamp;
        range = [0, 0, 0, 0];
        film.getSampleExtent$1(range);
        nsamp = params.findOneInt$2("pixelsamples", 4);
        return U.HaltonSampler$(range[0], range[1], range[2], range[3], nsamp, camera.get$shutterOpen(), camera.get$shutterClose());
      }, "call$4", "HaltonSampler_Create$closure", 8, 0, 52]}
  },
  LowDiscrepancySampler: {
    "^": "Sampler;pixels,pixel,pixelIndex,nPixelSamples,sampleBuf,xPixelStart,xPixelEnd,yPixelStart,yPixelEnd,samplesPerPixel,shutterOpen,shutterClose",
    LowDiscrepancySampler$8: function(xstart, xend, ystart, yend, nsamp, sopen, sclose, pixels) {
      var t1 = this.pixels;
      if (t1 == null)
        $.Log.call$2(3, "Pixel sampler is required by LowDiscrepencySampler");
      t1.setup$4(xstart, xend, ystart, yend);
      this.pixelIndex = 0;
      t1 = J.getInterceptor$n(nsamp);
      if (t1.$and(nsamp, t1.$sub(nsamp, 1)) !== 0) {
        $.Log.call$2(1, "Pixel samples being rounded up to power of 2");
        this.nPixelSamples = G.RoundUpPow2(nsamp);
      } else
        this.nPixelSamples = nsamp;
      this.sampleBuf = null;
    },
    static: {LowDiscrepancySampler_Create: [function(params, film, camera, pixels) {
        var extents, nsamp;
        extents = [0, 0, 0, 0];
        film.getSampleExtent$1(extents);
        nsamp = params.findOneInt$2("pixelsamples", 4);
        return U.LowDiscrepancySampler$(extents[0], extents[1], extents[2], extents[3], nsamp, camera.get$shutterOpen(), camera.get$shutterClose(), pixels);
      }, "call$4", "LowDiscrepancySampler_Create$closure", 8, 0, 53], LowDiscrepancySampler$: function(xstart, xend, ystart, yend, nsamp, sopen, sclose, pixels) {
        var t1 = new U.LowDiscrepancySampler(pixels, new Int32Array(2), null, null, null, xstart, xend, ystart, yend, G.RoundUpPow2(nsamp), sopen, sclose);
        t1.LowDiscrepancySampler$8(xstart, xend, ystart, yend, nsamp, sopen, sclose, pixels);
        return t1;
      }}
  },
  RandomSampler: {
    "^": "Sampler;continuous,pixels,pixel,pixelIndex,imageSamples,lensSamples,timeSamples,samplePos,xPixelStart,xPixelEnd,yPixelStart,yPixelEnd,samplesPerPixel,shutterOpen,shutterClose",
    RandomSampler$9: function(xstart, xend, ystart, yend, ns, continuous, sopen, sclose, pixels) {
      var t1 = this.pixels;
      if (t1 == null)
        $.Log.call$2(3, "Pixel sampler is required by LowDiscrepencySampler");
      t1.setup$4(xstart, xend, ystart, yend);
      this.pixelIndex = 0;
      t1 = this.samplesPerPixel;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = 2 * t1;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this.imageSamples = new Float32Array(t1);
      t1 = this.samplesPerPixel;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = 2 * t1;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this.lensSamples = new Float32Array(t1);
      t1 = this.samplesPerPixel;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this.timeSamples = new Float32Array(t1);
      this.samplePos = this.samplesPerPixel;
    },
    static: {RandomSampler_Create: [function(params, film, camera, pixels) {
        var ns, continuous, extents;
        ns = params.findOneInt$2("pixelsamples", 1);
        continuous = params.findOneBool$2("continuous", true);
        extents = [0, 0, 0, 0];
        film.getSampleExtent$1(extents);
        return U.RandomSampler$(extents[0], extents[1], extents[2], extents[3], ns, continuous, camera.get$shutterOpen(), camera.get$shutterClose(), pixels);
      }, "call$4", "RandomSampler_Create$closure", 8, 0, 54], RandomSampler$: function(xstart, xend, ystart, yend, ns, continuous, sopen, sclose, pixels) {
        var t1 = new U.RandomSampler(continuous, pixels, new Int32Array(2), null, null, null, null, null, xstart, xend, ystart, yend, ns, sopen, sclose);
        t1.RandomSampler$9(xstart, xend, ystart, yend, ns, continuous, sopen, sclose, pixels);
        return t1;
      }}
  },
  StratifiedSampler: {
    "^": "Sampler;xPixelSamples,yPixelSamples,nPixelSamples,jitterSamples,pixels,pixel,pixelIndex,imageSamples,lensSamples,timeSamples,xPixelStart,xPixelEnd,yPixelStart,yPixelEnd,samplesPerPixel,shutterOpen,shutterClose",
    StratifiedSampler$10: function(xstart, xend, ystart, yend, xs, ys, jitterSamples, sopen, sclose, pixels) {
      var t1 = this.pixels;
      if (t1 == null)
        $.Log.call$2(3, "Pixel sampler is required by StratifiedSampler");
      t1.setup$4(xstart, xend, ystart, yend);
      this.pixelIndex = 0;
      this.xPixelSamples = xs;
      this.yPixelSamples = ys;
      t1 = J.$mul$ns(xs, ys);
      this.nPixelSamples = t1;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = 2 * t1;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this.imageSamples = new Float32Array(t1);
      t1 = this.nPixelSamples;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = 2 * t1;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this.lensSamples = new Float32Array(t1);
      t1 = J.$mul$ns(this.xPixelSamples, this.yPixelSamples);
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this.timeSamples = new Float32Array(t1);
    },
    static: {StratifiedSampler_Create: [function(params, film, camera, pixels) {
        var jitter, extents, pixelsamples, ysamp, xsamp;
        jitter = params.findOneBool$2("jitter", true);
        extents = [0, 0, 0, 0];
        film.getSampleExtent$1(extents);
        pixelsamples = params.findOneInt$2("pixelsamples", null);
        if (pixelsamples != null) {
          ysamp = pixelsamples;
          xsamp = ysamp;
        } else {
          xsamp = params.findOneInt$2("xsamples", 2);
          ysamp = params.findOneInt$2("ysamples", 2);
        }
        return U.StratifiedSampler$(extents[0], extents[1], extents[2], extents[3], xsamp, ysamp, jitter, camera.get$shutterOpen(), camera.get$shutterClose(), pixels);
      }, "call$4", "StratifiedSampler_Create$closure", 8, 0, 55], StratifiedSampler$: function(xstart, xend, ystart, yend, xs, ys, jitterSamples, sopen, sclose, pixels) {
        var t1 = new U.StratifiedSampler(null, null, null, jitterSamples, pixels, new Int32Array(2), null, null, null, null, xstart, xend, ystart, yend, J.$mul$ns(xs, ys), sopen, sclose);
        t1.StratifiedSampler$10(xstart, xend, ystart, yend, xs, ys, jitterSamples, sopen, sclose, pixels);
        return t1;
      }}
  }
}],
["shapes", "package:dartray/shapes/shapes.dart", , M, {
  "^": "",
  Cone: {
    "^": "Shape;radius,height>,phiMax,objectToWorld,worldToObject,reverseOrientation,transformSwapsHandedness,shapeId",
    objectBound$0: function() {
      var t1, t2;
      t1 = this.radius;
      t2 = J.getInterceptor$n(t1);
      return G.BBox$(new G.Point(t2.$negate(t1), t2.$negate(t1), 0), new G.Point(t1, t1, this.height));
    },
    area$0: function() {
      var t1, t2, t3;
      t1 = this.radius;
      t2 = this.height;
      t3 = J.getInterceptor$ns(t1);
      t2 = J.$add$ns(J.$mul$ns(t2, t2), t3.$mul(t1, t1));
      if (typeof t2 !== "number")
        H.throwExpression(P.ArgumentError$(t2));
      return J.$div$n(J.$mul$ns(t3.$mul(t1, Math.sqrt(t2)), this.phiMax), 2);
    },
    static: {Cone_Create: [function(o2w, w2o, reverseOrientation, params) {
        var radius, height, phimax, t1, t2;
        radius = params.findOneFloat$2("radius", 1);
        height = params.findOneFloat$2("height", 1);
        phimax = params.findOneFloat$2("phimax", 360);
        t1 = $.Shape__nextShapeId;
        $.Shape__nextShapeId = t1 + 1;
        t1 = new M.Cone(radius, height, null, o2w, w2o, reverseOrientation, false, t1);
        t2 = J.clamp$2$n(phimax, 0, 360);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1.phiMax = 0.017453292519943295 * t2;
        return t1;
      }, "call$4", "Cone_Create$closure", 8, 0, 56]}
  },
  Cylinder: {
    "^": "Shape;radius,zmin,zmax,phiMax,objectToWorld,worldToObject,reverseOrientation,transformSwapsHandedness,shapeId",
    objectBound$0: function() {
      var t1, t2;
      t1 = this.radius;
      t2 = J.getInterceptor$n(t1);
      return G.BBox$(new G.Point(t2.$negate(t1), t2.$negate(t1), this.zmin), new G.Point(t1, t1, this.zmax));
    },
    area$0: function() {
      var t1, t2, t3, t4;
      t1 = this.zmax;
      t2 = this.zmin;
      t3 = this.phiMax;
      t4 = this.radius;
      if (typeof t4 !== "number")
        return H.iae(t4);
      return (t1 - t2) * t3 * t4;
    },
    Cylinder$7: function(o2w, w2o, ro, radius, z0, z1, phimax) {
      var t1;
      this.zmin = P.min(z0, z1);
      this.zmax = P.max(z0, z1);
      t1 = J.clamp$2$n(phimax, 0, 360);
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.phiMax = 0.017453292519943295 * t1;
    },
    static: {Cylinder_Create: [function(o2w, w2o, reverseOrientation, params) {
        var radius, zmin, zmax, phimax, t1;
        radius = params.findOneFloat$2("radius", 1);
        zmin = params.findOneFloat$2("zmin", -1);
        zmax = params.findOneFloat$2("zmax", 1);
        phimax = params.findOneFloat$2("phimax", 360);
        t1 = $.Shape__nextShapeId;
        $.Shape__nextShapeId = t1 + 1;
        t1 = new M.Cylinder(radius, null, null, null, o2w, w2o, reverseOrientation, false, t1);
        t1.Cylinder$7(o2w, w2o, reverseOrientation, radius, zmin, zmax, phimax);
        return t1;
      }, "call$4", "Cylinder_Create$closure", 8, 0, 57]}
  },
  Disk: {
    "^": "Shape;height>,radius,innerRadius,phiMax,objectToWorld,worldToObject,reverseOrientation,transformSwapsHandedness,shapeId",
    objectBound$0: function() {
      var t1, t2, t3, t4;
      t1 = this.radius;
      t2 = J.getInterceptor$n(t1);
      t3 = t2.$negate(t1);
      t2 = t2.$negate(t1);
      t4 = this.height;
      return G.BBox$(new G.Point(t3, t2, t4), new G.Point(t1, t1, t4));
    },
    area$0: function() {
      var t1, t2;
      t1 = this.radius;
      t2 = this.innerRadius;
      return J.$mul$ns(J.$mul$ns(this.phiMax, 0.5), J.$sub$n(J.$mul$ns(t1, t1), J.$mul$ns(t2, t2)));
    },
    static: {Disk_Create: [function(o2w, w2o, reverseOrientation, params) {
        var height, radius, inner_radius, phimax, t1, t2;
        height = params.findOneFloat$2("height", 0);
        radius = params.findOneFloat$2("radius", 1);
        inner_radius = params.findOneFloat$2("innerradius", 0);
        phimax = params.findOneFloat$2("phimax", 360);
        t1 = $.Shape__nextShapeId;
        $.Shape__nextShapeId = t1 + 1;
        t1 = new M.Disk(height, radius, inner_radius, phimax, o2w, w2o, reverseOrientation, false, t1);
        t2 = J.clamp$2$n(phimax, 0, 360);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1.phiMax = 0.017453292519943295 * t2;
        return t1;
      }, "call$4", "Disk_Create$closure", 8, 0, 58]}
  },
  Heightfield: {
    "^": "Shape;z>,nx<,ny,objectToWorld,worldToObject,reverseOrientation,transformSwapsHandedness,shapeId",
    canIntersect$0: function() {
      return false;
    },
    refine$1: function(refined) {
      var t1, t2, verts, $P, uvs, y, pi, ui, t3, x, t4, t5, vp, y0, vp0, x0, paramSet;
      t1 = J.$sub$n(this.nx, 1);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = J.$sub$n(this.ny, 1);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = 3 * (2 * t1 * t2);
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      verts = new Uint32Array(t2);
      t1 = J.$mul$ns(this.nx, this.ny);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = Array(t1);
      t1.fixed$length = init;
      $P = H.setRuntimeTypeInfo(t1, [G.Point]);
      t1 = this.nx;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.ny;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = 2 * t1 * t2;
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      uvs = new Float32Array(t2);
      J.$mul$ns(this.nx, this.ny);
      t1 = uvs.length;
      t2 = $P.length;
      y = 0;
      pi = 0;
      ui = 0;
      while (true) {
        t3 = this.ny;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(y < t3))
          break;
        x = 0;
        while (true) {
          t3 = this.nx;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(x < t3))
            break;
          if (ui < 0 || ui >= t1)
            return H.ioore(uvs, ui);
          uvs[ui] = x / (t3 - 1);
          t3 = ui + 1;
          t4 = J.$sub$n(this.ny, 1);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (t3 >= t1)
            return H.ioore(uvs, t3);
          uvs[t3] = y / t4;
          t4 = uvs[ui];
          t3 = uvs[t3];
          t5 = J.$index$asx(this.z, pi);
          if (pi < 0 || pi >= t2)
            return H.ioore($P, pi);
          $P[pi] = new G.Point(t4, t3, t5);
          ++x;
          ++pi;
          ui += 2;
        }
        ++y;
      }
      t1 = new M.Heightfield_refine_VERT(this);
      t2 = verts.length;
      vp = 0;
      y = 0;
      while (true) {
        t3 = J.$sub$n(this.ny, 1);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(y < t3))
          break;
        y0 = y + 1;
        x = 0;
        while (true) {
          t3 = J.$sub$n(this.nx, 1);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(x < t3))
            break;
          vp0 = vp + 1;
          t3 = t1.call$2(x, y);
          if (vp < 0 || vp >= t2)
            return H.ioore(verts, vp);
          verts[vp] = t3;
          vp = vp0 + 1;
          x0 = x + 1;
          t3 = t1.call$2(x0, y);
          if (vp0 < 0 || vp0 >= t2)
            return H.ioore(verts, vp0);
          verts[vp0] = t3;
          vp0 = vp + 1;
          t3 = t1.call$2(x0, y0);
          if (vp < 0 || vp >= t2)
            return H.ioore(verts, vp);
          verts[vp] = t3;
          vp = vp0 + 1;
          t3 = t1.call$2(x, y);
          if (vp0 < 0 || vp0 >= t2)
            return H.ioore(verts, vp0);
          verts[vp0] = t3;
          vp0 = vp + 1;
          t3 = t1.call$2(x0, y0);
          if (vp < 0 || vp >= t2)
            return H.ioore(verts, vp);
          verts[vp] = t3;
          vp = vp0 + 1;
          t3 = t1.call$2(x, y0);
          if (vp0 < 0 || vp0 >= t2)
            return H.ioore(verts, vp0);
          verts[vp0] = t3;
          x = x0;
        }
        y = y0;
      }
      paramSet = new G.ParamSet([], [], [], [], [], [], [], [], []);
      paramSet.addInt$2("indices", verts);
      paramSet.addFloat$2("uv", uvs);
      paramSet.addPoint$2("P", $P);
      refined.push(M.TriangleMesh_Create(this.objectToWorld, this.worldToObject, this.reverseOrientation, paramSet, null));
    },
    objectBound$0: function() {
      var minz, maxz, i, t1;
      minz = J.$index$asx(this.z, 0);
      maxz = J.$index$asx(this.z, 0);
      i = 1;
      while (true) {
        t1 = J.$mul$ns(this.nx, this.ny);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        if (J.$lt$n(J.$index$asx(this.z, i), minz))
          minz = J.$index$asx(this.z, i);
        if (J.$gt$n(J.$index$asx(this.z, i), maxz))
          maxz = J.$index$asx(this.z, i);
        ++i;
      }
      return G.BBox$(new G.Point(0, 0, minz), new G.Point(1, 1, maxz));
    },
    static: {Heightfield_Create: [function(o2w, w2o, reverseOrientation, params) {
        var nu, nv, Pz, t1;
        nu = params.findOneInt$2("nu", -1);
        nv = params.findOneInt$2("nv", -1);
        Pz = params.findFloat$1("Pz");
        t1 = $.Shape__nextShapeId;
        $.Shape__nextShapeId = t1 + 1;
        return new M.Heightfield(Pz, nu, nv, o2w, w2o, reverseOrientation, false, t1);
      }, "call$4", "Heightfield_Create$closure", 8, 0, 59]}
  },
  Heightfield_refine_VERT: {
    "^": "Closure:113;this_0",
    call$2: function(x, y) {
      var t1 = this.this_0.nx;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return x + y * t1;
    }
  },
  Hyperboloid: {
    "^": "Shape;p1,p2,zmin,zmax,phiMax,rmax,a,c<,objectToWorld,worldToObject,reverseOrientation,transformSwapsHandedness,shapeId",
    objectBound$0: function() {
      var t1, t2;
      t1 = this.rmax;
      t2 = -t1;
      return G.BBox$(new G.Point(t2, t2, this.zmin), new G.Point(t1, t1, this.zmax));
    },
    area$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
      t1 = new M.Hyperboloid_area_SQR();
      t2 = new M.Hyperboloid_area_QUAD();
      t3 = this.phiMax;
      t4 = t2.call$1(J.get$x$x(this.p1));
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = J.get$x$x(this.p1);
      if (typeof t5 !== "number")
        return H.iae(t5);
      t6 = J.get$x$x(this.p1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = J.get$x$x(this.p1);
      if (typeof t7 !== "number")
        return H.iae(t7);
      t8 = J.get$x$x(this.p2);
      if (typeof t8 !== "number")
        return H.iae(t8);
      t2 = t2.call$1(J.get$x$x(this.p2));
      if (typeof t2 !== "number")
        return H.iae(t2);
      t9 = J.$add$ns(J.$add$ns(J.$mul$ns(J.get$y$x(this.p1), J.get$y$x(this.p1)), J.$mul$ns(J.get$y$x(this.p1), J.get$y$x(this.p2))), J.$mul$ns(J.get$y$x(this.p2), J.get$y$x(this.p2)));
      if (typeof t9 !== "number")
        return H.iae(t9);
      t10 = J.$add$ns(t1.call$1(J.$sub$n(J.get$y$x(this.p1), J.get$y$x(this.p2))), t1.call$1(J.$sub$n(J.get$z$x(this.p1), J.get$z$x(this.p2))));
      if (typeof t10 !== "number")
        return H.iae(t10);
      t11 = J.$mul$ns(J.get$x$x(this.p2), J.get$x$x(this.p2));
      t12 = J.get$y$x(this.p1);
      if (typeof t12 !== "number")
        return H.iae(t12);
      t13 = J.get$y$x(this.p1);
      if (typeof t13 !== "number")
        return H.iae(t13);
      t14 = J.get$y$x(this.p1);
      if (typeof t14 !== "number")
        return H.iae(t14);
      t15 = J.get$y$x(this.p2);
      if (typeof t15 !== "number")
        return H.iae(t15);
      t16 = J.get$y$x(this.p2);
      if (typeof t16 !== "number")
        return H.iae(t16);
      t17 = J.get$y$x(this.p2);
      if (typeof t17 !== "number")
        return H.iae(t17);
      t18 = t1.call$1(J.$sub$n(J.get$z$x(this.p1), J.get$z$x(this.p2)));
      if (typeof t18 !== "number")
        return H.iae(t18);
      t18 = J.$mul$ns(t11, 5 * t12 * t13 + 2 * t14 * t15 - 4 * t16 * t17 + 2 * t18);
      if (typeof t18 !== "number")
        return H.iae(t18);
      t17 = J.$mul$ns(J.get$x$x(this.p1), J.get$x$x(this.p1));
      t16 = J.get$y$x(this.p1);
      if (typeof t16 !== "number")
        return H.iae(t16);
      t15 = J.get$y$x(this.p1);
      if (typeof t15 !== "number")
        return H.iae(t15);
      t14 = J.get$y$x(this.p1);
      if (typeof t14 !== "number")
        return H.iae(t14);
      t13 = J.get$y$x(this.p2);
      if (typeof t13 !== "number")
        return H.iae(t13);
      t12 = J.get$y$x(this.p2);
      if (typeof t12 !== "number")
        return H.iae(t12);
      t11 = J.get$y$x(this.p2);
      if (typeof t11 !== "number")
        return H.iae(t11);
      t1 = t1.call$1(J.$sub$n(J.get$z$x(this.p1), J.get$z$x(this.p2)));
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = J.$mul$ns(t17, -4 * t16 * t15 + 2 * t14 * t13 + 5 * t12 * t11 + 2 * t1);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t11 = J.get$x$x(this.p1);
      if (typeof t11 !== "number")
        return H.iae(t11);
      t12 = J.get$x$x(this.p2);
      if (typeof t12 !== "number")
        return H.iae(t12);
      t13 = J.$sub$n(J.$mul$ns(J.get$x$x(this.p2), J.get$x$x(this.p2)), J.$mul$ns(J.get$y$x(this.p1), J.get$y$x(this.p1)));
      t14 = J.get$y$x(this.p1);
      if (typeof t14 !== "number")
        return H.iae(t14);
      t15 = J.get$y$x(this.p2);
      if (typeof t15 !== "number")
        return H.iae(t15);
      t15 = J.$sub$n(J.$sub$n(J.$add$ns(t13, 5 * t14 * t15), J.$mul$ns(J.get$y$x(this.p2), J.get$y$x(this.p2))), J.$mul$ns(J.get$z$x(this.p1), J.get$z$x(this.p1)));
      t14 = J.get$z$x(this.p1);
      if (typeof t14 !== "number")
        return H.iae(t14);
      t13 = J.get$z$x(this.p2);
      if (typeof t13 !== "number")
        return H.iae(t13);
      t13 = J.$sub$n(J.$add$ns(t15, 2 * t14 * t13), J.$mul$ns(J.get$z$x(this.p2), J.get$z$x(this.p2)));
      if (typeof t13 !== "number")
        return H.iae(t13);
      return t3 / 6 * (2 * t4 - 2 * t5 * t6 * t7 * t8 + 2 * t2 + 2 * t9 * t10 + t18 + t1 - 2 * t11 * t12 * t13);
    },
    Hyperboloid$6: function(o2w, w2o, ro, p1, p2, tm) {
      var t1, radius1, t, pp, xy1, xy2, t2, t3, t4;
      t1 = J.$add$ns(J.$mul$ns(J.get$x$x(this.p1), J.get$x$x(this.p1)), J.$mul$ns(J.get$y$x(this.p1), J.get$y$x(this.p1)));
      if (typeof t1 !== "number")
        H.throwExpression(P.ArgumentError$(t1));
      radius1 = Math.sqrt(t1);
      t1 = J.$add$ns(J.$mul$ns(J.get$x$x(this.p2), J.get$x$x(this.p2)), J.$mul$ns(J.get$y$x(this.p2), J.get$y$x(this.p2)));
      if (typeof t1 !== "number")
        H.throwExpression(P.ArgumentError$(t1));
      this.rmax = P.max(radius1, Math.sqrt(t1));
      this.zmin = P.min(J.get$z$x(this.p1), J.get$z$x(this.p2));
      this.zmax = P.max(J.get$z$x(this.p1), J.get$z$x(this.p2));
      t1 = J.clamp$2$n(tm, 0, 360);
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.phiMax = 0.017453292519943295 * t1;
      if (J.$eq(J.get$z$x(this.p2), 0)) {
        t = this.p1;
        this.p1 = this.p2;
        this.p2 = t;
      }
      pp = this.p1;
      do {
        pp = J.$add$ns(pp, J.$mul$ns(J.$sub$n(this.p2, this.p1), 2));
        t1 = J.getInterceptor$x(pp);
        xy1 = J.$add$ns(J.$mul$ns(t1.get$x(pp), t1.get$x(pp)), J.$mul$ns(t1.get$y(pp), t1.get$y(pp)));
        xy2 = J.$add$ns(J.$mul$ns(J.get$x$x(this.p2), J.get$x$x(this.p2)), J.$mul$ns(J.get$y$x(this.p2), J.get$y$x(this.p2)));
        if (typeof xy1 !== "number")
          return H.iae(xy1);
        t2 = J.$mul$ns(t1.get$z(pp), t1.get$z(pp));
        t3 = J.get$z$x(this.p2);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = J.get$z$x(this.p2);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t4 = J.$div$n(t2, xy1 * t3 * t4);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t1 = J.$mul$ns(J.$mul$ns(xy2, t1.get$z(pp)), t1.get$z(pp));
        t3 = J.get$z$x(this.p2);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t2 = J.get$z$x(this.p2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = J.$div$n(t1, xy1 * t3 * t2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = (1 / xy1 - t4) / (1 - t2);
        this.a = t2;
        if (typeof xy2 !== "number")
          return H.iae(xy2);
        t4 = J.$mul$ns(J.get$z$x(this.p2), J.get$z$x(this.p2));
        if (typeof t4 !== "number")
          return H.iae(t4);
        this.c = (t2 * xy2 - 1) / t4;
        t1 = this.a;
        t1.toString;
      } while (t1 == Infinity || t1 == -Infinity || isNaN(t1));
    },
    static: {Hyperboloid$: function(o2w, w2o, ro, p1, p2, tm) {
        var t1 = $.Shape__nextShapeId;
        $.Shape__nextShapeId = t1 + 1;
        t1 = new M.Hyperboloid(p1, p2, null, null, null, null, null, null, o2w, w2o, ro, false, t1);
        t1.Hyperboloid$6(o2w, w2o, ro, p1, p2, tm);
        return t1;
      }, Hyperboloid_Create: [function(o2w, w2o, reverseOrientation, params) {
        return M.Hyperboloid$(o2w, w2o, reverseOrientation, params.findOnePoint$2("p1", new G.Point(0, 0, 0)), params.findOnePoint$2("p2", new G.Point(1, 1, 1)), params.findOneFloat$2("phimax", 360));
      }, "call$4", "Hyperboloid_Create$closure", 8, 0, 60]}
  },
  Hyperboloid_area_SQR: {
    "^": "Closure:92;",
    call$1: function(a) {
      return J.$mul$ns(a, a);
    }
  },
  Hyperboloid_area_QUAD: {
    "^": "Closure:92;",
    call$1: function(a) {
      return J.$mul$ns(J.$mul$ns(J.$mul$ns(a, a), a), a);
    }
  },
  LoopSubdivision: {
    "^": "Shape;nLevels,vertices,faces,objectToWorld,worldToObject,reverseOrientation,transformSwapsHandedness,shapeId",
    canIntersect$0: function() {
      return false;
    },
    refine$1: function(refined) {
      var f, v, t1, i, newFaces, newVertices, j, t2, t3, k, edgeVerts, face, fv1, k0, fv2, vert, t4, vertNum, t5, f2, Plimit, Ns, Pring, $S, $T, valence, theta, ntris, verts, totVerts, usedVerts, vi, vi0, paramSet;
      f = this.faces;
      v = this.vertices;
      t1 = this.nLevels;
      if (typeof t1 !== "number")
        return H.iae(t1);
      i = 0;
      for (; i < t1; ++i, v = newVertices, f = newFaces) {
        newFaces = [];
        newVertices = [];
        for (j = 0; j < v.length; ++j) {
          t2 = v[j];
          t2.set$child(new M._SDVertex(null, null, null, false, false));
          t3 = v.length;
          if (j >= t3)
            return H.ioore(v, j);
          t2.child.regular = t2.regular;
          if (j >= t3)
            return H.ioore(v, j);
          t2.child.boundary = t2.boundary;
          if (j >= t3)
            return H.ioore(v, j);
          newVertices.push(t2.child);
        }
        for (j = 0; j < f.length; ++j)
          for (k = 0; k < 4; ++k) {
            if (j >= f.length)
              return H.ioore(f, j);
            J.$indexSet$ax(J.get$children$x(f[j]), k, new M._SDFace([null, null, null], [null, null, null], [null, null, null, null]));
            if (j >= f.length)
              return H.ioore(f, j);
            newFaces.push(J.$index$asx(J.get$children$x(f[j]), k));
          }
        for (j = 0; j < v.length; ++j) {
          t2 = v[j];
          if (!t2.get$boundary())
            if (t2.regular)
              t2.child.P = M.LoopSubdivision_weightOneRing(t2, 0.0625);
            else
              t2.child.P = M.LoopSubdivision_weightOneRing(t2, M.LoopSubdivision_beta(t2.valence$0()));
          else
            t2.child.P = M.LoopSubdivision_weightBoundary(t2, 0.125);
        }
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        edgeVerts = new M._SDEdgeMap(t2);
        for (j = 0; j < f.length; ++j) {
          face = f[j];
          for (k = 0; k < 3; k = k0) {
            fv1 = J.$index$asx(face.get$v(), k);
            k0 = k + 1;
            fv2 = J.$index$asx(face.get$v(), C.JSInt_methods.$mod(k0, 3));
            if (edgeVerts.getEdge$2(fv1, fv2) == null) {
              vert = new M._SDVertex(null, null, null, false, false);
              newVertices.push(vert);
              vert.regular = true;
              vert.boundary = J.$index$asx(face.get$f(), k) == null;
              vert.startFace = J.$index$asx(J.get$children$x(face), 3);
              if (vert.boundary)
                vert.P = J.$add$ns(J.$mul$ns(fv1.get$P(), 0.5), J.$mul$ns(fv2.get$P(), 0.5));
              else {
                t3 = J.$add$ns(J.$mul$ns(fv1.get$P(), 0.375), J.$mul$ns(fv2.get$P(), 0.375));
                vert.P = t3;
                t3 = J.$add$ns(t3, J.$mul$ns(face.otherVert$2(fv1, fv2).get$P(), 0.125));
                vert.P = t3;
                t4 = face.f;
                if (k >= t4.length)
                  return H.ioore(t4, k);
                vert.P = J.$add$ns(t3, J.$mul$ns(t4[k].otherVert$2(fv1, fv2).get$P(), 0.125));
              }
              if (!t2.containsKey$1(fv1))
                t2.$indexSet(0, fv1, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
              J.$indexSet$ax(t2.$index(0, fv1), fv2, vert);
            }
          }
        }
        for (j = 0; j < v.length; ++j) {
          vert = v[j];
          vertNum = vert.get$startFace().vnum$1(vert);
          vert.child.startFace = J.$index$asx(J.get$children$x(vert.startFace), vertNum);
        }
        for (j = 0; j < f.length; ++j) {
          face = f[j];
          for (t2 = J.getInterceptor$x(face), k = 0; k < 3; k = k0) {
            t3 = J.$index$asx(t2.get$children(face), 3).get$f();
            t4 = t2.get$children(face);
            k0 = k + 1;
            t5 = C.JSInt_methods.$mod(k0, 3);
            J.$indexSet$ax(t3, k, J.$index$asx(t4, t5));
            J.$indexSet$ax(J.$index$asx(t2.get$children(face), k).get$f(), t5, J.$index$asx(t2.get$children(face), 3));
            f2 = J.$index$asx(face.get$f(), k);
            t5 = J.$index$asx(t2.get$children(face), k).get$f();
            J.$indexSet$ax(t5, k, f2 != null ? J.$index$asx(J.get$children$x(f2), f2.vnum$1(J.$index$asx(face.get$v(), k))) : null);
            t3 = face.get$f();
            t4 = C.JSInt_methods.$mod(k + 2, 3);
            f2 = J.$index$asx(t3, t4);
            t3 = J.$index$asx(t2.get$children(face), k).get$f();
            J.$indexSet$ax(t3, t4, f2 != null ? J.$index$asx(J.get$children$x(f2), f2.vnum$1(J.$index$asx(face.get$v(), k))) : null);
          }
        }
        for (j = 0; j < f.length; ++j) {
          face = f[j];
          for (t2 = J.getInterceptor$x(face), k = 0; k < 3; k = k0) {
            J.$indexSet$ax(J.$index$asx(t2.get$children(face), k).get$v(), k, J.$index$asx(face.get$v(), k).get$child());
            fv1 = J.$index$asx(face.get$v(), k);
            t3 = face.get$v();
            k0 = k + 1;
            t4 = C.JSInt_methods.$mod(k0, 3);
            vert = edgeVerts.getEdge$2(fv1, J.$index$asx(t3, t4));
            J.$indexSet$ax(J.$index$asx(t2.get$children(face), k).get$v(), t4, vert);
            J.$indexSet$ax(J.$index$asx(t2.get$children(face), t4).get$v(), k, vert);
            J.$indexSet$ax(J.$index$asx(t2.get$children(face), 3).get$v(), k, vert);
          }
        }
      }
      t1 = Array(v.length);
      t1.fixed$length = init;
      Plimit = H.setRuntimeTypeInfo(t1, [G.Point]);
      for (t1 = Plimit.length, i = 0; i < v.length; ++i) {
        t2 = v[i];
        if (t2.get$boundary()) {
          t2 = M.LoopSubdivision_weightBoundary(t2, 0.2);
          if (i >= t1)
            return H.ioore(Plimit, i);
          Plimit[i] = t2;
        } else {
          t3 = t2.valence$0();
          t3 = M.LoopSubdivision_weightOneRing(t2, 1 / (t3 + 3 / (8 * M.LoopSubdivision_beta(t3))));
          if (i >= t1)
            return H.ioore(Plimit, i);
          Plimit[i] = t3;
        }
      }
      for (i = 0; i < v.length; ++i) {
        t2 = v[i];
        if (i >= t1)
          return H.ioore(Plimit, i);
        t2.set$P(Plimit[i]);
      }
      Ns = [];
      Pring = H.setRuntimeTypeInfo([], [G.Point]);
      C.JSArray_methods.set$length(Pring, 16);
      for (i = 0; i < v.length; ++i) {
        vert = v[i];
        $S = new G.Vector(0, 0, 0);
        $T = new G.Vector(0, 0, 0);
        valence = vert.valence$0();
        if (valence > Pring.length)
          C.JSArray_methods.set$length(Pring, valence);
        vert.oneRing$2(Pring, 0);
        if (!vert.boundary)
          for (k = 0; k < valence; ++k) {
            if (k >= Pring.length)
              return H.ioore(Pring, k);
            t1 = Pring[k];
            t2 = 6.283185307179586 * k / valence;
            t1 = J.$mul$ns(t1, Math.cos(t2));
            t3 = J.getInterceptor$x(t1);
            $S = new G.Vector(J.$add$ns($S.x, t3.get$x(t1)), J.$add$ns($S.y, t3.get$y(t1)), J.$add$ns($S.z, t3.get$z(t1)));
            if (k >= Pring.length)
              return H.ioore(Pring, k);
            t1 = Pring[k];
            t1 = J.$mul$ns(t1, Math.sin(t2));
            t2 = J.getInterceptor$x(t1);
            $T = new G.Vector(J.$add$ns($T.x, t2.get$x(t1)), J.$add$ns($T.y, t2.get$y(t1)), J.$add$ns($T.z, t2.get$z(t1)));
          }
        else {
          t1 = valence - 1;
          t2 = Pring.length;
          if (t1 < 0 || t1 >= t2)
            return H.ioore(Pring, t1);
          t3 = Pring[t1];
          if (0 >= t2)
            return H.ioore(Pring, 0);
          $S = J.$sub$n(t3, Pring[0]);
          if (valence === 2) {
            t1 = Pring.length;
            if (0 >= t1)
              return H.ioore(Pring, 0);
            t2 = Pring[0];
            if (1 >= t1)
              return H.ioore(Pring, 1);
            $T = J.$sub$n(J.$add$ns(t2, Pring[1]), J.$mul$ns(vert.P, 2));
          } else if (valence === 3) {
            if (1 >= Pring.length)
              return H.ioore(Pring, 1);
            $T = J.$sub$n(Pring[1], vert.P);
          } else {
            t2 = Pring.length;
            t3 = Pring[0];
            if (valence === 4) {
              if (0 >= t2)
                return H.ioore(Pring, 0);
              t1 = J.$mul$ns(t3, -1);
              if (1 >= Pring.length)
                return H.ioore(Pring, 1);
              t1 = J.$add$ns(t1, J.$mul$ns(Pring[1], 2));
              if (2 >= Pring.length)
                return H.ioore(Pring, 2);
              t1 = J.$add$ns(t1, J.$mul$ns(Pring[2], 2));
              if (3 >= Pring.length)
                return H.ioore(Pring, 3);
              $T = J.$add$ns(J.$add$ns(t1, J.$mul$ns(Pring[3], -1)), J.$mul$ns(vert.P, -2));
            } else {
              theta = 3.141592653589793 / t1;
              if (0 >= t2)
                return H.ioore(Pring, 0);
              if (t1 >= t2)
                return H.ioore(Pring, t1);
              t2 = J.$add$ns(t3, Pring[t1]);
              $T = J.$mul$ns(t2, Math.sin(theta));
              for (k = 1; k < t1; ++k) {
                t2 = Math.cos(theta);
                t3 = Math.sin(k * theta);
                if (k >= Pring.length)
                  return H.ioore(Pring, k);
                $T = J.$add$ns($T, J.$mul$ns(Pring[k], (2 * t2 - 2) * t3));
              }
              $T = J.$negate$n($T);
            }
          }
        }
        t1 = G.Vector_Cross($S, $T);
        Ns.push(new G.Normal(t1.x, t1.y, t1.z));
      }
      ntris = f.length;
      t1 = 3 * ntris;
      verts = new Uint32Array(t1);
      totVerts = v.length;
      usedVerts = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      for (i = 0; i < totVerts; ++i) {
        if (i >= v.length)
          return H.ioore(v, i);
        usedVerts.$indexSet(0, v[i], i);
      }
      for (vi = 0, i = 0; i < ntris; ++i)
        for (j = 0; j < 3; ++j, vi = vi0) {
          vi0 = vi + 1;
          if (i >= f.length)
            return H.ioore(f, i);
          t2 = usedVerts.$index(0, J.$index$asx(f[i].get$v(), j));
          if (vi < 0 || vi >= t1)
            return H.ioore(verts, vi);
          verts[vi] = t2;
        }
      paramSet = new G.ParamSet([], [], [], [], [], [], [], [], []);
      paramSet.addInt$2("indices", verts);
      paramSet.addPoint$2("P", Plimit);
      paramSet.addNormal$2("N", Ns);
      refined.push(M.TriangleMesh_Create(this.objectToWorld, this.worldToObject, this.reverseOrientation, paramSet, null));
    },
    objectBound$0: function() {
      var b, t1, t2, i, t3, t4, t5, t6, t7;
      b = G.BBox$(null, null);
      for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i].get$P();
        t4 = b.pMin;
        t5 = t4.x;
        t6 = t4.y;
        t4 = t4.z;
        t7 = b.pMax;
        b = new G.BBox(new G.Point(t5, t6, t4), new G.Point(t7.x, t7.y, t7.z)).unionPoint$1(t3);
      }
      return b;
    },
    worldBound$0: function() {
      var b, t1, t2, t3, i, t4, t5, t6, t7, t8;
      b = G.BBox$(null, null);
      for (t1 = this.vertices, t2 = t1.length, t3 = this.objectToWorld, i = 0; i < t2; ++i) {
        t4 = t3.transformPoint$1(t1[i].get$P());
        t5 = b.pMin;
        t6 = t5.x;
        t7 = t5.y;
        t5 = t5.z;
        t8 = b.pMax;
        b = new G.BBox(new G.Point(t6, t7, t5), new G.Point(t8.x, t8.y, t8.z)).unionPoint$1(t4);
      }
      return b;
    },
    LoopSubdivision$8: function(o2w, w2o, ro, nfaces, nvertices, vertexIndices, $P, nLevels) {
      var t1, t2, t3, i, t4, t5, j, t6, f, j0, t7, v, edges, ei, v0, ei0, v1, edge, t8, val;
      if (typeof nvertices !== "number")
        return H.iae(nvertices);
      t1 = this.vertices;
      t2 = J.getInterceptor$asx($P);
      t3 = t1.length;
      i = 0;
      for (; i < nvertices; ++i) {
        t4 = t2.$index($P, i);
        if (i >= t3)
          return H.ioore(t1, i);
        t1[i] = new M._SDVertex(t4, null, null, false, false);
      }
      if (typeof nfaces !== "number")
        return H.iae(nfaces);
      t2 = this.faces;
      t4 = t2.length;
      t5 = J.getInterceptor$asx(vertexIndices);
      i = 0;
      j = 0;
      for (; i < nfaces; ++i, j = j0) {
        t6 = [null, null, null];
        f = new M._SDFace(t6, [null, null, null], [null, null, null, null]);
        if (i >= t4)
          return H.ioore(t2, i);
        t2[i] = f;
        j0 = j + 1;
        t7 = t5.$index(vertexIndices, j);
        if (t7 >>> 0 !== t7 || t7 >= t3)
          return H.ioore(t1, t7);
        v = t1[t7];
        if (0 >= t6.length)
          return H.ioore(t6, 0);
        t6[0] = v;
        v.set$startFace(f);
        j = j0 + 1;
        t7 = t5.$index(vertexIndices, j0);
        if (t7 >>> 0 !== t7 || t7 >= t3)
          return H.ioore(t1, t7);
        v = t1[t7];
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t6[1] = v;
        v.set$startFace(f);
        j0 = j + 1;
        t7 = t5.$index(vertexIndices, j);
        if (t7 >>> 0 !== t7 || t7 >= t3)
          return H.ioore(t1, t7);
        v = t1[t7];
        if (2 >= t6.length)
          return H.ioore(t6, 2);
        t6[2] = v;
        v.set$startFace(f);
      }
      t5 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      edges = new M._SDEdgeMap(t5);
      for (i = 0; i < nfaces; ++i) {
        if (i >= t4)
          return H.ioore(t2, i);
        f = t2[i];
        for (ei = 0; ei < 3; ei = ei0) {
          v0 = J.$index$asx(f.get$v(), ei);
          ei0 = ei + 1;
          v1 = J.$index$asx(f.get$v(), C.JSInt_methods.$mod(ei0, 3));
          edge = edges.getEdge$2(v0, v1);
          if (edge == null) {
            t6 = [null, null];
            t7 = [null, null];
            edge = new M._SDEdge(t6, t7, null);
            t8 = t6.length;
            if (0 >= t8)
              return H.ioore(t6, 0);
            t6[0] = v0;
            if (1 >= t8)
              return H.ioore(t6, 1);
            t6[1] = v1;
            edge.f0edgeNum = -1;
            if (0 >= t7.length)
              return H.ioore(t7, 0);
            t7[0] = f;
            edge.f0edgeNum = ei;
            if (!t5.containsKey$1(v0))
              t5.$indexSet(0, v0, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
            J.$indexSet$ax(t5.$index(0, v0), v1, edge);
          } else {
            J.$indexSet$ax(J.$index$asx(edge.get$f(), 0).get$f(), edge.get$f0edgeNum(), f);
            t6 = f.get$f();
            t7 = edge.f;
            if (0 >= t7.length)
              return H.ioore(t7, 0);
            J.$indexSet$ax(t6, ei, t7[0]);
          }
        }
      }
      for (i = 0; i < nvertices; ++i) {
        if (i >= t3)
          return H.ioore(t1, i);
        v = t1[i];
        f = v.get$startFace();
        do {
          f = f.nextFace$1(v);
          t2 = f == null;
        } while (!t2 && !J.$eq(f, v.startFace));
        v.boundary = t2;
        val = v.valence$0();
        t2 = v.boundary;
        if (!t2 && val === 6)
          v.regular = true;
        else if (t2 && val === 4)
          v.regular = true;
        else
          v.regular = false;
      }
    },
    static: {LoopSubdivision_Create: [function(o2w, w2o, reverseOrientation, params) {
        var nlevels, vi, $P;
        nlevels = params.findOneInt$2("nlevels", 1);
        vi = params.findInt$1("indices");
        $P = params.findPoint$1("P");
        if (vi == null || $P == null)
          return;
        return M.LoopSubdivision$(o2w, w2o, reverseOrientation, J.$tdiv$n(J.get$length$asx(vi), 3), J.get$length$asx($P), vi, $P, nlevels);
      }, "call$4", "LoopSubdivision_Create$closure", 8, 0, 61], LoopSubdivision$: function(o2w, w2o, ro, nfaces, nvertices, vertexIndices, $P, nLevels) {
        var t1, t2;
        t1 = $.Shape__nextShapeId;
        $.Shape__nextShapeId = t1 + 1;
        if (typeof nvertices !== "number")
          return H.iae(nvertices);
        t2 = H.setRuntimeTypeInfo(Array(nvertices), [M._SDVertex]);
        if (typeof nfaces !== "number")
          return H.iae(nfaces);
        t1 = new M.LoopSubdivision(nLevels, t2, H.setRuntimeTypeInfo(Array(nfaces), [M._SDFace]), o2w, w2o, ro, false, t1);
        t1.LoopSubdivision$8(o2w, w2o, ro, nfaces, nvertices, vertexIndices, $P, nLevels);
        return t1;
      }, LoopSubdivision_beta: function(valence) {
        if (valence === 3)
          return 0.1875;
        return 3 / (8 * valence);
      }, LoopSubdivision_weightOneRing: function(vert, beta) {
        var valence, Pring, $P, i;
        valence = vert.valence$0();
        Pring = Array(valence);
        Pring.$builtinTypeInfo = [G.Point];
        vert.oneRing$1(Pring);
        $P = J.$mul$ns(vert.P, 1 - valence * beta);
        for (i = 0; i < valence; ++i)
          $P = J.$add$ns($P, J.$mul$ns(Pring[i], beta));
        return $P;
      }, LoopSubdivision_weightBoundary: function(vert, beta) {
        var valence, Pring, $P, t1;
        valence = vert.valence$0();
        Pring = Array(valence);
        Pring.$builtinTypeInfo = [G.Point];
        vert.oneRing$1(Pring);
        $P = J.$mul$ns(vert.P, 1 - 2 * beta);
        if (0 >= valence)
          return H.ioore(Pring, 0);
        $P = J.$add$ns($P, J.$mul$ns(Pring[0], beta));
        t1 = valence - 1;
        if (t1 < 0)
          return H.ioore(Pring, t1);
        return J.$add$ns($P, J.$mul$ns(Pring[t1], beta));
      }}
  },
  _SDEdgeMap: {
    "^": "Object;_edgeMap",
    getEdge$2: function(a, b) {
      var t1 = this._edgeMap;
      if (t1.containsKey$1(a))
        if (t1.$index(0, a).containsKey$1(b))
          return t1.$index(0, a).$index(0, b);
      if (t1.containsKey$1(b))
        if (t1.$index(0, b).containsKey$1(a))
          return t1.$index(0, b).$index(0, a);
      return;
    }
  },
  _SDVertex: {
    "^": "Object;P@,startFace@,child@,regular,boundary<",
    valence$0: function() {
      var f, nf;
      f = this.startFace;
      if (!this.boundary) {
        for (nf = 1; f = f.nextFace$1(this), !J.$eq(f, this.startFace);)
          ++nf;
        return nf;
      } else {
        for (nf = 1; f = f.nextFace$1(this), f != null;)
          ++nf;
        f = this.startFace;
        for (; f = f.prevFace$1(this), ++nf, f != null;)
          ;
        return nf;
      }
    },
    oneRing$2: function(p, pi) {
      var t1, face, pi0, t2, t3, f2;
      t1 = this.boundary;
      face = this.startFace;
      if (!t1) {
        t1 = p.length;
        do {
          pi0 = pi + 1;
          t2 = face.nextVert$1(this).get$P();
          if (pi >= t1)
            return H.ioore(p, pi);
          p[pi] = t2;
          t2 = face.f;
          t3 = face.vnum$1(this);
          if (t3 < 0 || t3 >= t2.length)
            return H.ioore(t2, t3);
          face = t2[t3];
          if (!J.$eq(face, this.startFace)) {
            pi = pi0;
            continue;
          } else
            break;
        } while (true);
      } else {
        for (; f2 = face.nextFace$1(this), f2 != null; face = f2)
          ;
        pi0 = pi + 1;
        t1 = face.nextVert$1(this).get$P();
        t2 = p.length;
        if (pi >= t2)
          return H.ioore(p, pi);
        p[pi] = t1;
        pi = pi0;
        do {
          pi0 = pi + 1;
          t1 = face.prevVert$1(this).get$P();
          if (pi >= t2)
            return H.ioore(p, pi);
          p[pi] = t1;
          t1 = face.f;
          t3 = C.JSInt_methods.$mod(face.vnum$1(this) + 2, 3);
          if (t3 >= t1.length)
            return H.ioore(t1, t3);
          face = t1[t3];
          if (face != null) {
            pi = pi0;
            continue;
          } else
            break;
        } while (true);
      }
    },
    oneRing$1: function(p) {
      return this.oneRing$2(p, 0);
    }
  },
  _SDFace: {
    "^": "Object;v<,f<,children>",
    vnum$1: function(vert) {
      var t1, i;
      for (t1 = this.v, i = 0; i < 3; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t1[i], vert))
          return i;
      }
      $.Log.call$2(3, "Basic logic error in SDFace::vnum()");
      return -1;
    },
    nextFace$1: function(vert) {
      var t1, t2;
      t1 = this.f;
      t2 = this.vnum$1(vert);
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    prevFace$1: function(vert) {
      var t1, t2;
      t1 = this.f;
      t2 = C.JSInt_methods.$mod(this.vnum$1(vert) + 2, 3);
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    nextVert$1: function(vert) {
      var t1, t2;
      t1 = this.v;
      t2 = C.JSInt_methods.$mod(this.vnum$1(vert) + 1, 3);
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    prevVert$1: function(vert) {
      var t1, t2;
      t1 = this.v;
      t2 = C.JSInt_methods.$mod(this.vnum$1(vert) + 2, 3);
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    otherVert$2: function(v0, v1) {
      var t1, i, t2;
      for (t1 = this.v, i = 0; i < 3; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (!J.$eq(t1[i], v0)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = !J.$eq(t1[i], v1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t1[i];
        }
      }
      $.Log.call$2(3, "Basic logic error in SDVertex::otherVert()");
      return;
    }
  },
  _SDEdge: {
    "^": "Object;v<,f<,f0edgeNum<"
  },
  Nurbs: {
    "^": "Shape;nu,uorder,nv,vorder,umin,umax,vmin,vmax,uknot,vknot,isHomogeneous,P@,objectToWorld,worldToObject,reverseOrientation,transformSwapsHandedness,shapeId",
    objectBound$0: function() {
      var bound, t1, t2, t3, i, pi, t4, t5, t6, t7, t8, t9, t10;
      if (!this.isHomogeneous) {
        bound = G.BBox$(null, null);
        t1 = this.nu;
        t2 = this.nv;
        t3 = J.getInterceptor$ns(t1);
        i = 0;
        pi = 0;
        while (true) {
          t4 = t3.$mul(t1, t2);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          t4 = J.$index$asx(this.P, pi);
          t5 = J.$index$asx(this.P, pi + 1);
          t6 = J.$index$asx(this.P, pi + 2);
          t7 = bound.pMin;
          t8 = t7.x;
          t9 = t7.y;
          t7 = t7.z;
          t10 = bound.pMax;
          bound = new G.BBox(new G.Point(t8, t9, t7), new G.Point(t10.x, t10.y, t10.z)).unionPoint$1(new G.Point(t4, t5, t6));
          ++i;
          pi += 3;
        }
        return bound;
      } else {
        bound = G.BBox$(null, null);
        t1 = this.nu;
        t2 = this.nv;
        t3 = J.getInterceptor$ns(t1);
        i = 0;
        pi = 0;
        while (true) {
          t4 = t3.$mul(t1, t2);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          t4 = pi + 3;
          t5 = J.$div$n(J.$index$asx(this.P, pi), J.$index$asx(this.P, t4));
          t6 = J.$div$n(J.$index$asx(this.P, pi + 1), J.$index$asx(this.P, t4));
          t4 = J.$div$n(J.$index$asx(this.P, pi + 2), J.$index$asx(this.P, t4));
          t7 = bound.pMin;
          t8 = t7.x;
          t9 = t7.y;
          t7 = t7.z;
          t10 = bound.pMax;
          bound = new G.BBox(new G.Point(t8, t9, t7), new G.Point(t10.x, t10.y, t10.z)).unionPoint$1(new G.Point(t5, t6, t4));
          ++i;
          pi += 4;
        }
        return bound;
      }
    },
    worldBound$0: function() {
      var bound, t1, t2, t3, t4, i, pi, t5, t6, t7, t8, t9;
      if (!this.isHomogeneous) {
        bound = G.BBox$(null, null);
        t1 = this.nu;
        t2 = this.nv;
        t3 = J.getInterceptor$ns(t1);
        t4 = this.objectToWorld;
        i = 0;
        pi = 0;
        while (true) {
          t5 = t3.$mul(t1, t2);
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (!(i < t5))
            break;
          t5 = t4.transformPoint$1(new G.Point(J.$index$asx(this.P, pi), J.$index$asx(this.P, pi + 1), J.$index$asx(this.P, pi + 2)));
          t6 = bound.pMin;
          t7 = t6.x;
          t8 = t6.y;
          t6 = t6.z;
          t9 = bound.pMax;
          bound = new G.BBox(new G.Point(t7, t8, t6), new G.Point(t9.x, t9.y, t9.z)).unionPoint$1(t5);
          ++i;
          pi += 3;
        }
        return bound;
      } else {
        bound = G.BBox$(null, null);
        t1 = this.nu;
        t2 = this.nv;
        t3 = J.getInterceptor$ns(t1);
        t4 = this.objectToWorld;
        i = 0;
        pi = 0;
        while (true) {
          t5 = t3.$mul(t1, t2);
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (!(i < t5))
            break;
          t5 = pi + 3;
          t5 = t4.transformPoint$1(new G.Point(J.$div$n(J.$index$asx(this.P, pi), J.$index$asx(this.P, t5)), J.$div$n(J.$index$asx(this.P, pi + 1), J.$index$asx(this.P, t5)), J.$div$n(J.$index$asx(this.P, pi + 2), J.$index$asx(this.P, t5))));
          t6 = bound.pMin;
          t7 = t6.x;
          t8 = t6.y;
          t6 = t6.z;
          t9 = bound.pMax;
          bound = new G.BBox(new G.Point(t7, t8, t6), new G.Point(t9.x, t9.y, t9.z)).unionPoint$1(t5);
          ++i;
          pi += 4;
        }
        return bound;
      }
    },
    canIntersect$0: function() {
      return false;
    },
    refine$1: function(refined) {
      var ueval, veval, t1, evalPs, evalNs, t2, i, t3, uvs, Pw, t4, pi, wi, t5, wi0, pi0, t6, t7, t8, v, u, t9, t10, dPdu, dPdv, pt, t11, t12, t13, vertices, vi, v0, vi0, u0, paramSet;
      ueval = new Float32Array(30);
      veval = new Float32Array(30);
      t1 = Array(900);
      t1.fixed$length = init;
      evalPs = H.setRuntimeTypeInfo(t1, [G.Point]);
      t1 = Array(900);
      t1.fixed$length = init;
      evalNs = H.setRuntimeTypeInfo(t1, [G.Normal]);
      for (t1 = this.umin, t2 = this.umax, i = 0; i < 30; ++i) {
        t3 = i / 29;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (typeof t2 !== "number")
          return H.iae(t2);
        ueval[i] = (1 - t3) * t1 + t3 * t2;
      }
      for (t1 = this.vmin, t2 = this.vmax, i = 0; i < 30; ++i) {
        t3 = i / 29;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (typeof t2 !== "number")
          return H.iae(t2);
        veval[i] = (1 - t3) * t1 + t3 * t2;
      }
      uvs = new Float32Array(1800);
      Pw = this.P;
      if (!this.isHomogeneous) {
        t1 = this.nu;
        t2 = this.nv;
        t3 = J.getInterceptor$ns(t1);
        t4 = J.$mul$ns(t3.$mul(t1, t2), 4);
        if (typeof t4 !== "number" || Math.floor(t4) !== t4)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t4)));
        Pw = new Float32Array(t4);
        t4 = Pw.length;
        i = 0;
        pi = 0;
        wi = 0;
        while (true) {
          t5 = t3.$mul(t1, t2);
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (!(i < t5))
            break;
          wi0 = wi + 1;
          pi0 = pi + 1;
          t5 = J.$index$asx(this.P, pi);
          if (wi >= t4)
            return H.ioore(Pw, wi);
          Pw[wi] = t5;
          wi = wi0 + 1;
          pi = pi0 + 1;
          t5 = J.$index$asx(this.P, pi0);
          if (wi0 >= t4)
            return H.ioore(Pw, wi0);
          Pw[wi0] = t5;
          wi0 = wi + 1;
          pi0 = pi + 1;
          t5 = J.$index$asx(this.P, pi);
          if (wi >= t4)
            return H.ioore(Pw, wi);
          Pw[wi] = t5;
          wi = wi0 + 1;
          if (wi0 >= t4)
            return H.ioore(Pw, wi0);
          Pw[wi0] = 1;
          ++i;
          pi = pi0;
        }
      }
      for (t1 = evalNs.length, t2 = this.uorder, t3 = this.uknot, t4 = this.nu, t5 = this.vorder, t6 = this.vknot, t7 = this.nv, t8 = evalPs.length, v = 0, pi = 0; v < 30; ++v)
        for (u = 0; u < 30; ++u, ++pi) {
          t9 = 2 * pi;
          t10 = ueval[u];
          if (t9 >= 1800)
            return H.ioore(uvs, t9);
          uvs[t9] = t10;
          ++t9;
          t10 = veval[v];
          if (t9 >= 1800)
            return H.ioore(uvs, t9);
          uvs[t9] = t10;
          dPdu = new G.Vector(0, 0, 0);
          dPdv = new G.Vector(0, 0, 0);
          pt = M.Nurbs_NurbsEvaluateSurface(t2, t3, t4, ueval[u], t5, t6, t7, veval[v], Pw, dPdu, dPdv);
          if (pi < 0 || pi >= t8)
            return H.ioore(evalPs, pi);
          evalPs[pi] = pt;
          t10 = G.Vector_Cross(dPdu, dPdv);
          t9 = t10.x;
          t11 = t10.y;
          t10 = t10.z;
          t12 = new G.Normal(t9, t11, t10);
          t13 = J.$add$ns(J.$add$ns(J.$mul$ns(t9, t9), J.$mul$ns(t11, t11)), J.$mul$ns(t10, t10));
          if (typeof t13 !== "number")
            H.throwExpression(P.ArgumentError$(t13));
          t13 = Math.sqrt(t13);
          t12.x = J.$div$n(t9, t13);
          t12.y = J.$div$n(t11, t13);
          t12.z = J.$div$n(t10, t13);
          if (pi >= t1)
            return H.ioore(evalNs, pi);
          evalNs[pi] = t12;
        }
      vertices = new Int32Array(5046);
      t1 = new M.Nurbs_refine_VN(30);
      for (vi = 0, v = 0; v < 29; v = v0)
        for (v0 = v + 1, u = 0; u < 29; u = u0) {
          vi0 = vi + 1;
          t2 = t1.call$2(u, v);
          if (vi < 0 || vi >= 5046)
            return H.ioore(vertices, vi);
          vertices[vi] = t2;
          vi = vi0 + 1;
          u0 = u + 1;
          t2 = t1.call$2(u0, v);
          if (vi0 < 0 || vi0 >= 5046)
            return H.ioore(vertices, vi0);
          vertices[vi0] = t2;
          vi0 = vi + 1;
          t2 = t1.call$2(u0, v0);
          if (vi < 0 || vi >= 5046)
            return H.ioore(vertices, vi);
          vertices[vi] = t2;
          vi = vi0 + 1;
          t2 = t1.call$2(u, v);
          if (vi0 < 0 || vi0 >= 5046)
            return H.ioore(vertices, vi0);
          vertices[vi0] = t2;
          vi0 = vi + 1;
          t2 = t1.call$2(u0, v0);
          if (vi < 0 || vi >= 5046)
            return H.ioore(vertices, vi);
          vertices[vi] = t2;
          vi = vi0 + 1;
          t2 = t1.call$2(u, v0);
          if (vi0 < 0 || vi0 >= 5046)
            return H.ioore(vertices, vi0);
          vertices[vi0] = t2;
        }
      paramSet = new G.ParamSet([], [], [], [], [], [], [], [], []);
      paramSet.addInt$2("indices", vertices);
      paramSet.addPoint$2("P", evalPs);
      paramSet.addFloat$2("uv", uvs);
      paramSet.addNormal$2("N", evalNs);
      refined.push(M.TriangleMesh_Create(this.objectToWorld, this.worldToObject, this.reverseOrientation, paramSet, null));
    },
    static: {Nurbs_Create: [function(o2w, w2o, ReverseOrientation, params) {
        var nu, uorder, uknots, t1, u0, u1, nv, vorder, vknots, v0, v1, p, t2, $P, i, j, t3, j0, npt, isHomogeneous;
        nu = params.findOneInt$2("nu", -1);
        uorder = params.findOneInt$2("uorder", -1);
        uknots = params.findFloat$1("uknots");
        t1 = J.getInterceptor$asx(uknots);
        u0 = params.findOneFloat$2("u0", t1.$index(uknots, J.$sub$n(uorder, 1)));
        u1 = params.findOneFloat$2("u1", t1.$index(uknots, nu));
        nv = params.findOneInt$2("nv", -1);
        vorder = params.findOneInt$2("vorder", -1);
        vknots = params.findFloat$1("vknots");
        t1 = J.getInterceptor$asx(vknots);
        v0 = params.findOneFloat$2("v0", t1.$index(vknots, J.$sub$n(vorder, 1)));
        v1 = params.findOneFloat$2("v1", t1.$index(vknots, nv));
        p = params.findPoint$1("P");
        if (p != null) {
          t1 = J.getInterceptor$asx(p);
          t2 = J.$mul$ns(t1.get$length(p), 3);
          if (typeof t2 !== "number" || Math.floor(t2) !== t2)
            H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
          $P = new Float32Array(t2);
          t2 = $P.length;
          i = 0;
          j = 0;
          while (true) {
            t3 = t1.get$length(p);
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(i < t3))
              break;
            j0 = j + 1;
            t3 = J.get$x$x(t1.$index(p, i));
            if (j >= t2)
              return H.ioore($P, j);
            $P[j] = t3;
            j = j0 + 1;
            t3 = J.get$y$x(t1.$index(p, i));
            if (j0 >= t2)
              return H.ioore($P, j0);
            $P[j0] = t3;
            j0 = j + 1;
            t3 = J.get$z$x(t1.$index(p, i));
            if (j >= t2)
              return H.ioore($P, j);
            $P[j] = t3;
            ++i;
            j = j0;
          }
          npt = C.JSInt_methods._tdivFast$1(t2, 3);
          isHomogeneous = false;
        } else {
          $P = params.findFloat$1("Pw");
          if ($P == null) {
            $.Log.call$2(2, "Must provide control points via 'P' or 'Pw' parameter to NURBS shape.");
            return;
          }
          t1 = J.getInterceptor$asx($P);
          if (J.$mod$n(t1.get$length($P), 4) !== 0) {
            $.Log.call$2(2, "Number of 'Pw' control points provided to NURBS shape must be multiple of four");
            return;
          }
          npt = J.$tdiv$n(t1.get$length($P), 4);
          isHomogeneous = true;
        }
        t1 = J.getInterceptor$ns(nu);
        if (!J.$eq(npt, t1.$mul(nu, nv))) {
          t1 = "NURBS shape was expecting " + H.S(nu) + "*" + H.S(nv) + "=" + H.S(t1.$mul(nu, nv)) + " control points, was given " + H.S(J.get$length$asx($P));
          $.Log.call$2(2, t1);
          return;
        }
        t1 = $.Shape__nextShapeId;
        $.Shape__nextShapeId = t1 + 1;
        return new M.Nurbs(nu, uorder, nv, vorder, u0, u1, v0, v1, uknots, vknots, isHomogeneous, $P, o2w, w2o, ReverseOrientation, false, t1);
      }, "call$4", "Nurbs_Create$closure", 8, 0, 62], Nurbs_NurbsEvaluateSurface: function(uOrder, uKnot, ucp, u, vOrder, vKnot, vcp, v, cp, dPdu, dPdv) {
        var t1, iso, uFirstCp, t2, i, j, pt, j0, t3, vFirstCp, $P;
        t1 = P.max(uOrder, vOrder) * 4;
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        iso = new Float32Array(t1);
        uFirstCp = J.$add$ns(J.$sub$n(M.Nurbs_KnotOffset(uKnot, uOrder, ucp, u), uOrder), 1);
        if (typeof uOrder !== "number")
          return H.iae(uOrder);
        t1 = J.getInterceptor$ns(uFirstCp);
        t2 = iso.length;
        i = 0;
        j = 0;
        for (; i < uOrder; ++i) {
          pt = M.Nurbs_NurbsEvaluate(vOrder, vKnot, cp, J.$mul$ns(t1.$add(uFirstCp, i), 4), vcp, ucp, v, null);
          j0 = j + 1;
          t3 = pt[0];
          if (j >= t2)
            return H.ioore(iso, j);
          iso[j] = t3;
          j = j0 + 1;
          t3 = pt[1];
          if (j0 >= t2)
            return H.ioore(iso, j0);
          iso[j0] = t3;
          j0 = j + 1;
          t3 = pt[2];
          if (j >= t2)
            return H.ioore(iso, j);
          iso[j] = t3;
          j = j0 + 1;
          t3 = pt[3];
          if (j0 >= t2)
            return H.ioore(iso, j0);
          iso[j0] = t3;
        }
        vFirstCp = J.$add$ns(J.$sub$n(M.Nurbs_KnotOffset(vKnot, vOrder, vcp, v), vOrder), 1);
        $P = M.Nurbs_NurbsEvaluate(uOrder, uKnot, iso, J.$mul$ns(t1.$negate(uFirstCp), 4), ucp, 1, u, dPdu);
        if (typeof vOrder !== "number")
          return H.iae(vOrder);
        t1 = J.getInterceptor$ns(vFirstCp);
        i = 0;
        j = 0;
        for (; i < vOrder; ++i) {
          pt = M.Nurbs_NurbsEvaluate(uOrder, uKnot, cp, J.$mul$ns(J.$mul$ns(t1.$add(vFirstCp, i), ucp), 4), ucp, 1, u, null);
          j0 = j + 1;
          t3 = pt[0];
          if (j >= t2)
            return H.ioore(iso, j);
          iso[j] = t3;
          j = j0 + 1;
          t3 = pt[1];
          if (j0 >= t2)
            return H.ioore(iso, j0);
          iso[j0] = t3;
          j0 = j + 1;
          t3 = pt[2];
          if (j >= t2)
            return H.ioore(iso, j);
          iso[j] = t3;
          j = j0 + 1;
          t3 = pt[3];
          if (j0 >= t2)
            return H.ioore(iso, j0);
          iso[j0] = t3;
        }
        M.Nurbs_NurbsEvaluate(vOrder, vKnot, iso, J.$mul$ns(t1.$negate(vFirstCp), 4), vcp, 1, v, dPdv);
        return new G.Point(J.$div$n($P[0], $P[3]), J.$div$n($P[1], $P[3]), J.$div$n($P[2], $P[3]));
      }, Nurbs_NurbsEvaluate: function(order, knot, cp, cpi, np, cpStride, t, deriv) {
        var knotOffset, t1, cpOffset, t2, cpWork, t3, t4, t5, i, j, i0, j0, t6, k, l, alpha, t7, t8, t9, t10, vx, vy, vz, vw, factor, dw;
        knotOffset = M.Nurbs_KnotOffset(knot, order, np, t);
        t1 = J.getInterceptor$n(knotOffset);
        cpOffset = J.$add$ns(t1.$sub(knotOffset, order), 1);
        if (typeof order !== "number")
          return H.iae(order);
        t2 = 4 * order;
        if (typeof t2 !== "number" || Math.floor(t2) !== t2)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
        cpWork = new Float32Array(t2);
        for (t2 = cpWork.length, t3 = J.getInterceptor$ns(cpOffset), t4 = J.getInterceptor$ns(cpi), t5 = J.getInterceptor$asx(cp), i = 0; i < t2;) {
          j = t4.$add(cpi, J.$mul$ns(t3.$add(cpOffset, i), cpStride));
          i0 = i + 1;
          j0 = J.$add$ns(j, 1);
          cpWork[i] = t5.$index(cp, j);
          i = i0 + 1;
          j = J.$add$ns(j0, 1);
          t6 = t5.$index(cp, j0);
          if (i0 >= t2)
            return H.ioore(cpWork, i0);
          cpWork[i0] = t6;
          i0 = i + 1;
          j0 = J.$add$ns(j, 1);
          t6 = t5.$index(cp, j);
          if (i >= t2)
            return H.ioore(cpWork, i);
          cpWork[i] = t6;
          i = i0 + 1;
          J.$add$ns(j0, 1);
          t6 = t5.$index(cp, j0);
          if (i0 >= t2)
            return H.ioore(cpWork, i0);
          cpWork[i0] = t6;
        }
        for (t3 = order - 2, t4 = order - 1, t5 = J.getInterceptor$asx(knot), i = 0; i < t3; ++i)
          for (t6 = t4 - i, j = 0, k = 0, l = 4; j < t6; k += 4, l += 4, j = j0) {
            alpha = J.$div$n(J.$sub$n(t5.$index(knot, J.$add$ns(t1.$add(knotOffset, 1), j)), t), J.$sub$n(t5.$index(knot, J.$add$ns(t1.$add(knotOffset, 1), j)), t5.$index(knot, J.$add$ns(J.$sub$n(J.$add$ns(t1.$add(knotOffset, j), 2), order), i))));
            if (j >= t2)
              return H.ioore(cpWork, j);
            t7 = cpWork[j];
            if (typeof alpha !== "number")
              return H.iae(alpha);
            if (l >= t2)
              return H.ioore(cpWork, l);
            t8 = cpWork[l];
            t9 = 1 - alpha;
            if (k >= t2)
              return H.ioore(cpWork, k);
            cpWork[k] = t7 * alpha + t8 * t9;
            t8 = k + 1;
            j0 = j + 1;
            if (j0 >= t2)
              return H.ioore(cpWork, j0);
            t7 = cpWork[j0];
            t10 = l + 1;
            if (t10 >= t2)
              return H.ioore(cpWork, t10);
            t10 = cpWork[t10];
            if (t8 >= t2)
              return H.ioore(cpWork, t8);
            cpWork[t8] = t7 * alpha + t10 * t9;
            t10 = k + 2;
            t7 = j + 2;
            if (t7 >= t2)
              return H.ioore(cpWork, t7);
            t7 = cpWork[t7];
            t8 = l + 2;
            if (t8 >= t2)
              return H.ioore(cpWork, t8);
            t8 = cpWork[t8];
            if (t10 >= t2)
              return H.ioore(cpWork, t10);
            cpWork[t10] = t7 * alpha + t8 * t9;
            t8 = k + 3;
            t7 = j + 3;
            if (t7 >= t2)
              return H.ioore(cpWork, t7);
            t7 = cpWork[t7];
            t10 = l + 3;
            if (t10 >= t2)
              return H.ioore(cpWork, t10);
            t10 = cpWork[t10];
            if (t8 >= t2)
              return H.ioore(cpWork, t8);
            cpWork[t8] = t7 * alpha + t10 * t9;
          }
        alpha = J.$div$n(J.$sub$n(t5.$index(knot, t1.$add(knotOffset, 1)), t), J.$sub$n(t5.$index(knot, t1.$add(knotOffset, 1)), t5.$index(knot, t1.$add(knotOffset, 0))));
        if (0 >= t2)
          return H.ioore(cpWork, 0);
        t3 = cpWork[0];
        if (typeof alpha !== "number")
          return H.iae(alpha);
        if (4 >= t2)
          return H.ioore(cpWork, 4);
        t6 = 1 - alpha;
        vx = t3 * alpha + cpWork[4] * t6;
        t3 = cpWork[1];
        if (5 >= t2)
          return H.ioore(cpWork, 5);
        vy = t3 * alpha + cpWork[5] * t6;
        t3 = cpWork[2];
        if (6 >= t2)
          return H.ioore(cpWork, 6);
        vz = t3 * alpha + cpWork[6] * t6;
        t3 = cpWork[3];
        if (7 >= t2)
          return H.ioore(cpWork, 7);
        vw = t3 * alpha + cpWork[7] * t6;
        if (deriv != null) {
          t1 = J.$sub$n(t5.$index(knot, t1.$add(knotOffset, 1)), t5.$index(knot, knotOffset));
          if (typeof t1 !== "number")
            return H.iae(t1);
          factor = t4 / t1;
          t1 = cpWork[4];
          t4 = cpWork[0];
          t2 = cpWork[5];
          t3 = cpWork[1];
          t5 = cpWork[6];
          t6 = cpWork[2];
          dw = (cpWork[7] - cpWork[3]) * factor;
          t7 = vw * vw;
          deriv.x = (t1 - t4) * factor / vw - vx * dw / t7;
          deriv.y = (t2 - t3) * factor / vw - vy * dw / t7;
          deriv.z = (t5 - t6) * factor / vw - vz * dw / t7;
        }
        return [vx, vy, vz, vw];
      }, Nurbs_KnotOffset: function(knot, order, np, t) {
        var firstKnot, t1, knotOffset, t2, t3;
        firstKnot = J.$sub$n(order, 1);
        t1 = J.getInterceptor$asx(knot);
        knotOffset = firstKnot;
        while (true) {
          t2 = J.getInterceptor$ns(knotOffset);
          t3 = t1.$index(knot, t2.$add(knotOffset, 1));
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(t > t3))
            break;
          knotOffset = t2.$add(knotOffset, 1);
        }
        return knotOffset;
      }}
  },
  Nurbs_refine_VN: {
    "^": "Closure:113;diceu_0",
    call$2: function(u, v) {
      return v * this.diceu_0 + u;
    }
  },
  Paraboloid: {
    "^": "Shape;radius,zmin,zmax,phiMax,objectToWorld,worldToObject,reverseOrientation,transformSwapsHandedness,shapeId",
    objectBound$0: function() {
      var t1, t2;
      t1 = this.radius;
      t2 = J.getInterceptor$n(t1);
      return G.BBox$(new G.Point(t2.$negate(t1), t2.$negate(t1), this.zmin), new G.Point(t1, t1, this.zmax));
    },
    area$0: function() {
      var t1, t2, t3;
      t1 = this.phiMax;
      t2 = this.zmin;
      t2 = Math.pow(1 + 4 * t2, 1.5);
      t3 = this.zmax;
      return t1 / 12 * (t2 - Math.pow(1 + 4 * t3, 1.5));
    },
    Paraboloid$7: function(o2w, w2o, ro, radius, z0, z1, tm) {
      var t1;
      this.zmin = P.min(z0, z1);
      this.zmax = P.max(z0, z1);
      t1 = J.clamp$2$n(tm, 0, 360);
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.phiMax = 0.017453292519943295 * t1;
    },
    static: {Paraboloid_Create: [function(o2w, w2o, reverseOrientation, params) {
        var radius, zmin, zmax, phimax, t1;
        radius = params.findOneFloat$2("radius", 1);
        zmin = params.findOneFloat$2("zmin", 0);
        zmax = params.findOneFloat$2("zmax", 1);
        phimax = params.findOneFloat$2("phimax", 360);
        t1 = $.Shape__nextShapeId;
        $.Shape__nextShapeId = t1 + 1;
        t1 = new M.Paraboloid(radius, null, null, null, o2w, w2o, reverseOrientation, false, t1);
        t1.Paraboloid$7(o2w, w2o, reverseOrientation, radius, zmin, zmax, phimax);
        return t1;
      }, "call$4", "Paraboloid_Create$closure", 8, 0, 63]}
  },
  Sphere: {
    "^": "Shape;radius,phiMax,zmin,zmax,thetaMin,thetaMax,objectToWorld,worldToObject,reverseOrientation,transformSwapsHandedness,shapeId",
    objectBound$0: function() {
      var t1, t2;
      t1 = this.radius;
      t2 = J.getInterceptor$n(t1);
      return G.BBox$(new G.Point(t2.$negate(t1), t2.$negate(t1), this.zmin), new G.Point(t1, t1, this.zmax));
    },
    area$0: function() {
      var t1, t2;
      t1 = this.phiMax;
      t2 = this.radius;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 * t2 * (this.zmax - this.zmin);
    },
    Sphere$7: function(o2w, w2o, ro, radius, z0, z1, pm) {
      var t1, t2;
      t1 = this.radius;
      t2 = J.getInterceptor$n(t1);
      this.zmin = C.JSNumber_methods.clamp$2(P.min(z0, z1), t2.$negate(t1), t1);
      this.zmax = C.JSNumber_methods.clamp$2(P.max(z0, z1), t2.$negate(t1), t1);
      t2 = this.zmin;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = C.JSNumber_methods.clamp$2(t2 / t1, -1, 1);
      this.thetaMin = Math.acos(t2);
      t1 = C.JSNumber_methods.clamp$2(this.zmax / t1, -1, 1);
      this.thetaMax = Math.acos(t1);
      t1 = J.clamp$2$n(pm, 0, 360);
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.phiMax = 0.017453292519943295 * t1;
    },
    static: {Sphere_Create: [function(o2w, w2o, reverseOrientation, params) {
        var radius, zmin, zmax, phimax, t1;
        radius = params.findOneFloat$2("radius", 1);
        zmin = params.findOneFloat$2("zmin", J.$negate$n(radius));
        zmax = params.findOneFloat$2("zmax", radius);
        phimax = params.findOneFloat$2("phimax", 360);
        t1 = $.Shape__nextShapeId;
        $.Shape__nextShapeId = t1 + 1;
        t1 = new M.Sphere(radius, null, null, null, null, null, o2w, w2o, reverseOrientation, false, t1);
        t1.Sphere$7(o2w, w2o, reverseOrientation, radius, zmin, zmax, phimax);
        return t1;
      }, "call$4", "Sphere_Create$closure", 8, 0, 64]}
  },
  Triangle: {
    "^": "Shape;mesh,index,objectToWorld,worldToObject,reverseOrientation,transformSwapsHandedness,shapeId",
    objectBound$0: function() {
      var t1, t2, t3, t4, t5, p1, p2, p3;
      t1 = this.mesh;
      t2 = t1.p;
      t3 = t1.vertexIndex;
      t4 = J.getInterceptor$asx(t3);
      t5 = t4.$index(t3, this.index);
      if (t5 >>> 0 !== t5 || t5 >= t2.length)
        return H.ioore(t2, t5);
      p1 = t2[t5];
      t5 = t1.p;
      t2 = t4.$index(t3, this.index + 1);
      if (t2 >>> 0 !== t2 || t2 >= t5.length)
        return H.ioore(t5, t2);
      p2 = t5[t2];
      t1 = t1.p;
      t3 = t4.$index(t3, this.index + 2);
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        return H.ioore(t1, t3);
      p3 = t1[t3];
      t3 = this.worldToObject;
      t1 = G.BBox$(t3.transformPoint$1(p1), t3.transformPoint$1(p2));
      t3 = t3.transformPoint$1(p3);
      return G.BBox$from(t1).unionPoint$1(t3);
    },
    worldBound$0: function() {
      var t1, t2, t3, t4, t5, p1, p2, p3;
      t1 = this.mesh;
      t2 = t1.p;
      t3 = t1.vertexIndex;
      t4 = J.getInterceptor$asx(t3);
      t5 = t4.$index(t3, this.index);
      if (t5 >>> 0 !== t5 || t5 >= t2.length)
        return H.ioore(t2, t5);
      p1 = t2[t5];
      t5 = t1.p;
      t2 = t4.$index(t3, this.index + 1);
      if (t2 >>> 0 !== t2 || t2 >= t5.length)
        return H.ioore(t5, t2);
      p2 = t5[t2];
      t1 = t1.p;
      t3 = t4.$index(t3, this.index + 2);
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        return H.ioore(t1, t3);
      p3 = t1[t3];
      return G.BBox$from(G.BBox$(p1, p2)).unionPoint$1(p3);
    },
    v$1: [function(i) {
      var t1 = this.index;
      if (typeof i !== "number")
        return H.iae(i);
      return J.$index$asx(this.mesh.vertexIndex, t1 + i);
    }, "call$1", "get$v", 2, 0, 110],
    area$0: function() {
      var t1, t2, t3, t4, t5, p1, p2, p3;
      t1 = this.mesh;
      t2 = t1.p;
      t3 = t1.vertexIndex;
      t4 = J.getInterceptor$asx(t3);
      t5 = t4.$index(t3, this.index);
      if (t5 >>> 0 !== t5 || t5 >= t2.length)
        return H.ioore(t2, t5);
      p1 = t2[t5];
      t5 = t1.p;
      t2 = t4.$index(t3, this.index + 1);
      if (t2 >>> 0 !== t2 || t2 >= t5.length)
        return H.ioore(t5, t2);
      p2 = t5[t2];
      t1 = t1.p;
      t3 = t4.$index(t3, this.index + 2);
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        return H.ioore(t1, t3);
      p3 = t1[t3];
      t3 = G.Vector_Cross(J.$sub$n(p2, p1), J.$sub$n(p3, p1)).lengthSquared$0();
      if (typeof t3 !== "number")
        H.throwExpression(P.ArgumentError$(t3));
      return 0.5 * Math.sqrt(t3);
    }
  },
  TriangleMesh: {
    "^": "Shape;ntris,nverts,vertexIndex,p>,n,s,uvs,alphaTexture,objectToWorld,worldToObject,reverseOrientation,transformSwapsHandedness,shapeId",
    objectBound$0: function() {
      var objectBounds, t1, t2, i, t3, t4, t5, t6, t7;
      objectBounds = G.BBox$(null, null);
      t1 = this.nverts;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.worldToObject;
      i = 0;
      for (; i < t1; ++i) {
        t3 = this.p;
        if (i >= t3.length)
          return H.ioore(t3, i);
        t3 = t2.transformPoint$1(t3[i]);
        t4 = objectBounds.pMin;
        t5 = t4.x;
        t6 = t4.y;
        t4 = t4.z;
        t7 = objectBounds.pMax;
        objectBounds = new G.BBox(new G.Point(t5, t6, t4), new G.Point(t7.x, t7.y, t7.z)).unionPoint$1(t3);
      }
      return objectBounds;
    },
    worldBound$0: function() {
      var worldBounds, t1, i, t2, t3, t4, t5, t6;
      worldBounds = G.BBox$(null, null);
      t1 = this.nverts;
      if (typeof t1 !== "number")
        return H.iae(t1);
      i = 0;
      for (; i < t1; ++i) {
        t2 = this.p;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2 = t2[i];
        t3 = worldBounds.pMin;
        t4 = t3.x;
        t5 = t3.y;
        t3 = t3.z;
        t6 = worldBounds.pMax;
        worldBounds = new G.BBox(new G.Point(t4, t5, t3), new G.Point(t6.x, t6.y, t6.z)).unionPoint$1(t2);
      }
      return worldBounds;
    },
    canIntersect$0: function() {
      return false;
    },
    refine$1: function(refined) {
      var t1, t2, t3, i, t4, t5;
      t1 = this.ntris;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.objectToWorld;
      t3 = this.worldToObject;
      i = 0;
      for (; i < t1; ++i) {
        t4 = this.reverseOrientation;
        t5 = $.Shape__nextShapeId;
        $.Shape__nextShapeId = t5 + 1;
        t5 = new M.Triangle(this, i, t2, t3, t4, false, t5);
        t5.index = i * 3;
        refined.push(t5);
      }
    },
    TriangleMesh$11: function(o2w, w2o, ro, ntris, nverts, vertexIndex, $P, n, s, uvs, alphaTexture) {
      var t1, t2, t3, i, t4, t5;
      t1 = this.nverts;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = Array(t1);
      t2.fixed$length = init;
      this.p = H.setRuntimeTypeInfo(t2, [G.Point]);
      for (t2 = this.objectToWorld, t3 = J.getInterceptor$asx($P), i = 0; i < t1; ++i) {
        t4 = this.p;
        t5 = t2.transformPoint$1(t3.$index($P, i));
        if (i >= t4.length)
          return H.ioore(t4, i);
        t4[i] = t5;
      }
    },
    static: {TriangleMesh$: function(o2w, w2o, ro, ntris, nverts, vertexIndex, $P, n, s, uvs, alphaTexture) {
        var t1 = $.Shape__nextShapeId;
        $.Shape__nextShapeId = t1 + 1;
        t1 = new M.TriangleMesh(ntris, nverts, vertexIndex, null, n, s, uvs, alphaTexture, o2w, w2o, ro, false, t1);
        t1.TriangleMesh$11(o2w, w2o, ro, ntris, nverts, vertexIndex, $P, n, s, uvs, alphaTexture);
        return t1;
      }, TriangleMesh_Create: [function(o2w, w2o, reverseOrientation, params, floatTextures) {
        var vi, $P, uvs, discardDegnerateUVs, t1, npi, t2, nuvi, t3, t4, $S, $N, nvi, vp, i, t5, t6, t7, t8, alphaTexName, alphaTex;
        vi = params.findInt$1("indices");
        $P = params.findPoint$1("P");
        uvs = params.findFloat$1("uv");
        if (uvs == null)
          uvs = params.findFloat$1("st");
        if (vi == null || $P == null)
          return;
        discardDegnerateUVs = params.findOneBool$2("discarddegenerateUVs", false);
        if (uvs != null) {
          t1 = J.getInterceptor$asx($P);
          npi = t1.get$length($P);
          t2 = J.getInterceptor$asx(uvs);
          nuvi = t2.get$length(uvs);
          t3 = t2.get$length(uvs);
          t4 = t1.get$length($P);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (J.$lt$n(t3, 2 * t4)) {
            if (typeof npi !== "number")
              return H.iae(npi);
            t1 = "Not enough of 'uv's for triangle mesh. Expencted " + H.S(2 * npi) + ", found " + H.S(nuvi) + ".  Discarding.";
            $.Log.call$2(1, t1);
            uvs = null;
          } else {
            t2 = t2.get$length(uvs);
            t1 = t1.get$length($P);
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (J.$gt$n(t2, 2 * t1)) {
              if (typeof npi !== "number")
                return H.iae(npi);
              t1 = "More 'uv's provided than will be used for triangle mesh.  (" + H.S(2 * npi) + " expcted, " + H.S(nuvi) + " found)";
              $.Log.call$2(1, t1);
            }
          }
        }
        $S = params.findVector$1("S");
        if ($S != null && !J.$eq(J.get$length$asx($S), J.get$length$asx($P))) {
          $.Log.call$2(1, "Number of 'S's for triangle mesh must match 'P's");
          $S = null;
        }
        $N = params.findNormal$1("N");
        if ($N != null && !J.$eq(J.get$length$asx($N), J.get$length$asx($P))) {
          $.Log.call$2(1, "Number of 'N's for triangle mesh must match 'P's");
          $N = null;
        }
        if (discardDegnerateUVs === true && uvs != null && $N != null) {
          nvi = J.get$length$asx($N);
          if (typeof nvi !== "number")
            return H.iae(nvi);
          t1 = J.getInterceptor$asx(uvs);
          t2 = J.getInterceptor$asx(vi);
          t3 = J.getInterceptor$asx($P);
          vp = 0;
          i = 0;
          for (; i < nvi; i += 3, vp += 3) {
            t4 = vp + 1;
            t5 = vp + 2;
            t6 = G.Vector_Cross(J.$sub$n(t3.$index($P, t2.$index(vi, vp)), t3.$index($P, t2.$index(vi, t4))), J.$sub$n(t3.$index($P, t2.$index(vi, t5)), t3.$index($P, t2.$index(vi, t4))));
            t7 = t6.x;
            t7 = J.$mul$ns(t7, t7);
            t8 = t6.y;
            t8 = J.$add$ns(t7, J.$mul$ns(t8, t8));
            t6 = t6.z;
            t6 = J.$add$ns(t8, J.$mul$ns(t6, t6));
            if (typeof t6 !== "number")
              H.throwExpression(P.ArgumentError$(t6));
            if (0.5 * Math.sqrt(t6) < 1e-7)
              continue;
            t6 = t2.$index(vi, vp);
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = t1.$index(uvs, 2 * t6);
            t7 = t2.$index(vi, t4);
            if (typeof t7 !== "number")
              return H.iae(t7);
            if (J.$eq(t6, t1.$index(uvs, 2 * t7))) {
              t6 = t2.$index(vi, vp);
              if (typeof t6 !== "number")
                return H.iae(t6);
              t6 = t1.$index(uvs, 2 * t6 + 1);
              t7 = t2.$index(vi, t4);
              if (typeof t7 !== "number")
                return H.iae(t7);
              t7 = J.$eq(t6, t1.$index(uvs, 2 * t7 + 1));
              t6 = t7;
            } else
              t6 = false;
            if (!t6) {
              t6 = t2.$index(vi, t4);
              if (typeof t6 !== "number")
                return H.iae(t6);
              t6 = t1.$index(uvs, 2 * t6);
              t7 = t2.$index(vi, t5);
              if (typeof t7 !== "number")
                return H.iae(t7);
              if (J.$eq(t6, t1.$index(uvs, 2 * t7))) {
                t4 = t2.$index(vi, t4);
                if (typeof t4 !== "number")
                  return H.iae(t4);
                t4 = t1.$index(uvs, 2 * t4 + 1);
                t6 = t2.$index(vi, t5);
                if (typeof t6 !== "number")
                  return H.iae(t6);
                t6 = J.$eq(t4, t1.$index(uvs, 2 * t6 + 1));
                t4 = t6;
              } else
                t4 = false;
              if (!t4) {
                t4 = t2.$index(vi, t5);
                if (typeof t4 !== "number")
                  return H.iae(t4);
                t4 = t1.$index(uvs, 2 * t4);
                t6 = t2.$index(vi, vp);
                if (typeof t6 !== "number")
                  return H.iae(t6);
                if (J.$eq(t4, t1.$index(uvs, 2 * t6))) {
                  t4 = t2.$index(vi, t5);
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  t4 = t1.$index(uvs, 2 * t4 + 1);
                  t5 = t2.$index(vi, vp);
                  if (typeof t5 !== "number")
                    return H.iae(t5);
                  t5 = J.$eq(t4, t1.$index(uvs, 2 * t5 + 1));
                  t4 = t5;
                } else
                  t4 = false;
              } else
                t4 = true;
            } else
              t4 = true;
            if (t4) {
              $.Log.call$2(1, "Degenerate uv coordinates in triangle mesh. Discarding all uvs.");
              uvs = null;
              break;
            }
          }
        }
        t1 = J.getInterceptor$asx($P);
        npi = t1.get$length($P);
        t2 = J.getInterceptor$asx(vi);
        nvi = t2.get$length(vi);
        if (typeof nvi !== "number")
          return H.iae(nvi);
        i = 0;
        for (; i < nvi; ++i)
          if (J.$ge$n(t2.$index(vi, i), npi)) {
            t1 = "TriangleMesh has out of-bounds vertex index " + H.S(t2.$index(vi, i)) + " (" + H.S(npi) + " 'P' values were given";
            $.Log.call$2(1, t1);
            return;
          }
        alphaTexName = params.findTexture$1("alpha");
        if (!J.$eq(alphaTexName, ""))
          if (floatTextures.containsKey$1(alphaTexName) === true)
            alphaTex = floatTextures.$index(0, alphaTexName);
          else {
            t3 = "Couldn't find float texture '" + H.S(alphaTexName) + "' for 'alpha' parameter";
            $.Log.call$2(1, t3);
            alphaTex = null;
          }
        else
          alphaTex = J.$eq(params.findOneFloat$2("alpha", 1), 0) ? new G.ConstantTexture(0) : null;
        return M.TriangleMesh$(o2w, w2o, reverseOrientation, J.$tdiv$n(t2.get$length(vi), 3), t1.get$length($P), vi, $P, $N, $S, uvs, alphaTex);
      }, function(o2w, w2o, reverseOrientation, params) {
        return M.TriangleMesh_Create(o2w, w2o, reverseOrientation, params, null);
      }, null, "call$5", "call$4", "TriangleMesh_Create$closure", 8, 2, 65, 12]}
  }
}],
["surface_integrators", "package:dartray/surface_integrators/surface_integrators.dart", , U, {
  "^": "",
  AmbientOcclusionIntegrator: {
    "^": "SurfaceIntegrator;nSamples,minDist,maxDist",
    static: {AmbientOcclusionIntegrator_Create: [function(params) {
        var nSamples, maxDist, t1;
        nSamples = params.findOneInt$2("nsamples", 2048);
        maxDist = params.findOneFloat$2("maxdist", 1 / 0);
        t1 = new U.AmbientOcclusionIntegrator(null, params.findOneFloat$2("mindist", 0.0001), maxDist);
        t1.nSamples = G.RoundUpPow2(nSamples);
        return t1;
      }, "call$1", "AmbientOcclusionIntegrator_Create$closure", 2, 0, 66]}
  },
  DiffusePRTIntegrator: {
    "^": "SurfaceIntegrator;lmax,nSamples,c_in",
    DiffusePRTIntegrator$2: function(lm, ns) {
      var t1, len, i;
      for (t1 = this.c_in, len = t1.length, i = 0; i < len; ++i)
        t1[i] = G.Spectrum_Spectrum(0);
    },
    static: {DiffusePRTIntegrator$: function(lm, ns) {
        var t1, t2;
        t1 = G.RoundUpPow2(ns);
        t2 = J.getInterceptor$ns(lm);
        t2 = J.$mul$ns(t2.$add(lm, 1), t2.$add(lm, 1));
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new U.DiffusePRTIntegrator(lm, t1, H.setRuntimeTypeInfo(Array(t2), [G.Spectrum]));
        t2.DiffusePRTIntegrator$2(lm, ns);
        return t2;
      }, DiffusePRTIntegrator_Create: [function(params) {
        return U.DiffusePRTIntegrator$(params.findOneInt$2("lmax", 4), params.findOneInt$2("nsamples", 4096));
      }, "call$1", "DiffusePRTIntegrator_Create$closure", 2, 0, 67]}
  },
  DirectLightingIntegrator: {
    "^": "SurfaceIntegrator;strategy,maxDepth,lightSampleOffsets,bsdfSampleOffsets,lightNumOffset",
    static: {"^": "DirectLightingIntegrator_SAMPLE_ALL_UNIFORM,DirectLightingIntegrator_SAMPLE_ONE_UNIFORM", DirectLightingIntegrator_Create: [function(params) {
        var maxDepth, st, t1, strategy;
        maxDepth = params.findOneInt$2("maxdepth", 5);
        st = params.findOneString$2("strategy", "all");
        t1 = J.getInterceptor(st);
        if (t1.$eq(st, "one"))
          strategy = 1;
        else {
          if (t1.$eq(st, "all"))
            ;
          else {
            t1 = "Strategy '" + H.S(st) + "' for direct lighting unknown. Using 'all'.";
            $.Log.call$2(1, t1);
          }
          strategy = 0;
        }
        return new U.DirectLightingIntegrator(strategy, maxDepth, null, null, null);
      }, "call$1", "DirectLightingIntegrator_Create$closure", 2, 0, 68]}
  },
  GlossyPRTIntegrator: {
    "^": "SurfaceIntegrator;Kd,Ks,roughness,lmax,nSamples,c_in,B",
    static: {GlossyPRTIntegrator_Create: [function(params) {
        var lmax, ns, t1;
        lmax = params.findOneInt$2("lmax", 4);
        ns = params.findOneInt$2("nsamples", 4096);
        t1 = new U.GlossyPRTIntegrator(params.findOneSpectrum$2("Kd", G.Spectrum_Spectrum(0.5)), params.findOneSpectrum$2("Ks", G.Spectrum_Spectrum(0.25)), params.findOneFloat$2("roughness", 0.1), lmax, null, null, null);
        t1.nSamples = G.RoundUpPow2(ns);
        return t1;
      }, "call$1", "GlossyPRTIntegrator_Create$closure", 2, 0, 69]}
  },
  IGIIntegrator: {
    "^": "SurfaceIntegrator;lightSampleOffsets,bsdfSampleOffsets,nLightPaths,nLightSets,gLimit,nGatherSamples,rrThreshold,maxSpecularDepth,vlSetOffset,gatherSampleOffset,virtualLights",
    IGIIntegrator$6: function(nl, ns, rrt, maxd, gl, ng) {
      var t1, i, t2;
      this.nLightPaths = G.RoundUpPow2(nl);
      t1 = G.RoundUpPow2(ns);
      this.nLightSets = t1;
      this.rrThreshold = rrt;
      this.maxSpecularDepth = maxd;
      this.virtualLights = Array(t1);
      this.gLimit = gl;
      this.nGatherSamples = ng;
      i = 0;
      while (true) {
        t1 = this.nLightSets;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.virtualLights;
        t2 = [];
        t2.$builtinTypeInfo = [U._VirtualLight];
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        ++i;
      }
    },
    static: {IGIIntegrator$: function(nl, ns, rrt, maxd, gl, ng) {
        var t1 = new U.IGIIntegrator(null, null, null, null, null, null, null, null, null, null, null);
        t1.IGIIntegrator$6(nl, ns, rrt, maxd, gl, ng);
        return t1;
      }, IGIIntegrator_Create: [function(params) {
        return U.IGIIntegrator$(params.findOneInt$2("nlights", 64), params.findOneInt$2("nsets", 4), params.findOneFloat$2("rrthreshold", 0.0001), params.findOneInt$2("maxdepth", 5), params.findOneFloat$2("glimit", 10), params.findOneInt$2("gathersamples", 16));
      }, "call$1", "IGIIntegrator_Create$closure", 2, 0, 70]}
  },
  _VirtualLight: {
    "^": "Object;"
  },
  IrradianceCacheIntegrator: {
    "^": "SurfaceIntegrator;minSamplePixelSpacing,maxSamplePixelSpacing,minWeight,cosMaxSampleAngleDifference,nSamples,maxSpecularDepth,maxIndirectDepth,lightSampleOffsets,bsdfSampleOffsets,octree",
    static: {IrradianceCacheIntegrator_Create: [function(params) {
        var minWeight, minSpacing, maxSpacing, maxAngle, maxSpecularDepth, maxIndirectDepth, t1;
        minWeight = params.findOneFloat$2("minweight", 0.5);
        minSpacing = params.findOneFloat$2("minpixelspacing", 2.5);
        maxSpacing = params.findOneFloat$2("maxpixelspacing", 15);
        maxAngle = params.findOneFloat$2("maxangledifference", 10);
        maxSpecularDepth = params.findOneInt$2("maxspeculardepth", 5);
        maxIndirectDepth = params.findOneInt$2("maxindirectdepth", 3);
        t1 = new U.IrradianceCacheIntegrator(minSpacing, maxSpacing, minWeight, null, params.findOneInt$2("nsamples", 4096), maxSpecularDepth, maxIndirectDepth, null, null, null);
        if (typeof maxAngle !== "number")
          return H.iae(maxAngle);
        t1.cosMaxSampleAngleDifference = Math.cos(57.29577951308232 * maxAngle);
        return t1;
      }, "call$1", "IrradianceCacheIntegrator_Create$closure", 2, 0, 71]}
  },
  PathIntegrator: {
    "^": "SurfaceIntegrator;maxDepth,lightSampleOffsets,lightNumOffset,bsdfSampleOffsets,pathSampleOffsets",
    static: {"^": "PathIntegrator_SAMPLE_DEPTH", PathIntegrator_Create: [function(params) {
        var maxDepth, t1;
        maxDepth = params.findOneInt$2("maxdepth", 5);
        t1 = new U.PathIntegrator(null, H.setRuntimeTypeInfo(Array(3), [G.LightSampleOffsets]), H.setRuntimeTypeInfo(Array(3), [J.JSInt]), H.setRuntimeTypeInfo(Array(3), [G.BSDFSampleOffsets]), H.setRuntimeTypeInfo(Array(3), [G.BSDFSampleOffsets]));
        t1.maxDepth = maxDepth;
        return t1;
      }, "call$1", "PathIntegrator_Create$closure", 2, 0, 72]}
  },
  PhotonMapIntegrator: {
    "^": "SurfaceIntegrator;nCausticPhotonsWanted,nIndirectPhotonsWanted,nLookup,maxDistSquared,maxSpecularDepth,maxPhotonDepth,finalGather,gatherSamples,cosGatherAngle,lightSampleOffsets,bsdfSampleOffsets,bsdfGatherSampleOffsets,indirGatherSampleOffsets,nCausticPaths,nIndirectPaths,causticMap,indirectMap,radianceMap",
    static: {PhotonMapIntegrator_Create: [function(params) {
        var nCaustic, nIndirect, nUsed, maxSpecularDepth, maxPhotonDepth, finalGather, gatherSamples, maxDist, gatherAngle, t1;
        nCaustic = params.findOneInt$2("causticphotons", 20000);
        nIndirect = params.findOneInt$2("indirectphotons", 100000);
        nUsed = params.findOneInt$2("nused", 50);
        maxSpecularDepth = params.findOneInt$2("maxspeculardepth", 5);
        maxPhotonDepth = params.findOneInt$2("maxphotondepth", 5);
        finalGather = params.findOneBool$2("finalgather", true);
        gatherSamples = params.findOneInt$2("finalgathersamples", 32);
        maxDist = params.findOneFloat$2("maxdist", 0.1);
        gatherAngle = params.findOneFloat$2("gatherangle", 10);
        t1 = J.$mul$ns(maxDist, maxDist);
        if (typeof gatherAngle !== "number")
          return H.iae(gatherAngle);
        return new U.PhotonMapIntegrator(nCaustic, nIndirect, nUsed, [t1], maxSpecularDepth, maxPhotonDepth, finalGather, gatherSamples, Math.cos(0.017453292519943295 * gatherAngle), null, null, null, null, 0, 0, null, null, null);
      }, "call$1", "PhotonMapIntegrator_Create$closure", 2, 0, 73]}
  },
  WhittedIntegrator: {
    "^": "SurfaceIntegrator;maxDepth",
    static: {WhittedIntegrator_Create: [function(params) {
        return new U.WhittedIntegrator(params.findOneInt$2("maxdepth", 5));
      }, "call$1", "WhittedIntegrator_Create$closure", 2, 0, 74]}
  }
}],
["textures", "package:dartray/textures/textures.dart", , G, {
  "^": "",
  BilerpTexture: {
    "^": "Texture;mapping,v00,v01,v10,v11",
    static: {BilerpTexture_CreateFloat: [function(tex2world, tp) {
        var type, t1, map, t2, t3, t4;
        type = tp.findString$2("mapping", "uv");
        t1 = J.getInterceptor(type);
        if (t1.$eq(type, "uv")) {
          t1 = tp.geomParams;
          map = new G.UVMapping2D(t1.findOneFloat$2("uscale", tp.materialParams.findOneFloat$2("uscale", 1)), t1.findOneFloat$2("vscale", tp.materialParams.findOneFloat$2("vscale", 1)), t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0)), t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0)));
        } else if (t1.$eq(type, "spherical"))
          map = new G.SphericalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "cylindrical"))
          map = new G.CylindricalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "planar")) {
          t1 = tp.geomParams;
          t2 = t1.findOneVector$2("v1", tp.materialParams.findOneVector$2("v1", new G.Vector(1, 0, 0)));
          t3 = t1.findOneVector$2("v2", tp.materialParams.findOneVector$2("v2", new G.Vector(0, 1, 0)));
          t4 = t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0));
          t1 = t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0));
          map = new G.PlanarMapping2D(G.Vector$from(t2), G.Vector$from(t3), t4, t1);
        } else {
          t1 = "2D texture mapping \"" + H.S(type) + "\" unknown";
          $.Log.call$2(2, t1);
          map = new G.UVMapping2D(1, 1, 0, 0);
        }
        t1 = tp.geomParams;
        return new G.BilerpTexture(map, t1.findOneFloat$2("v00", tp.materialParams.findOneFloat$2("v00", 0)), t1.findOneFloat$2("v01", tp.materialParams.findOneFloat$2("v01", 1)), t1.findOneFloat$2("v10", tp.materialParams.findOneFloat$2("v10", 0)), t1.findOneFloat$2("v11", tp.materialParams.findOneFloat$2("v11", 1)));
      }, "call$2", "BilerpTexture_CreateFloat$closure", 4, 0, 75], BilerpTexture_CreateSpectrum: [function(tex2world, tp) {
        var type, t1, map, t2, t3, t4, t5;
        type = tp.findString$2("mapping", "uv");
        t1 = J.getInterceptor(type);
        if (t1.$eq(type, "uv")) {
          t1 = tp.geomParams;
          map = new G.UVMapping2D(t1.findOneFloat$2("uscale", tp.materialParams.findOneFloat$2("uscale", 1)), t1.findOneFloat$2("vscale", tp.materialParams.findOneFloat$2("vscale", 1)), t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0)), t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0)));
        } else if (t1.$eq(type, "spherical"))
          map = new G.SphericalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "cylindrical"))
          map = new G.CylindricalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "planar")) {
          t1 = tp.geomParams;
          t2 = t1.findOneVector$2("v1", tp.materialParams.findOneVector$2("v1", new G.Vector(1, 0, 0)));
          t3 = t1.findOneVector$2("v2", tp.materialParams.findOneVector$2("v2", new G.Vector(0, 1, 0)));
          t4 = t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0));
          t1 = t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0));
          map = new G.PlanarMapping2D(G.Vector$from(t2), G.Vector$from(t3), t4, t1);
        } else {
          t1 = "2D texture mapping \"" + H.S(type) + "\" unknown";
          $.Log.call$2(2, t1);
          map = new G.UVMapping2D(1, 1, 0, 0);
        }
        t1 = G.Spectrum_Spectrum(0);
        t2 = tp.geomParams;
        t1 = t2.findOneSpectrum$2("v00", tp.materialParams.findOneSpectrum$2("v00", t1));
        t3 = G.Spectrum_Spectrum(1);
        t3 = t2.findOneSpectrum$2("v01", tp.materialParams.findOneSpectrum$2("v01", t3));
        t4 = G.Spectrum_Spectrum(0);
        t4 = t2.findOneSpectrum$2("v10", tp.materialParams.findOneSpectrum$2("v10", t4));
        t5 = G.Spectrum_Spectrum(1);
        return new G.BilerpTexture(map, t1, t3, t4, t2.findOneSpectrum$2("v11", tp.materialParams.findOneSpectrum$2("v11", t5)));
      }, "call$2", "BilerpTexture_CreateSpectrum$closure", 4, 0, 75]}
  },
  Checkerboard3DTexture: {
    "^": "Texture;mapping,tex1,tex2"
  },
  CheckerboardTexture: {
    "^": "Texture;mapping,tex1,tex2,aaMethod",
    static: {"^": "CheckerboardTexture_AA_NONE,CheckerboardTexture_AA_CLOSED_FORM", CheckerboardTexture__Create: function(tex2world, tp, tex1, tex2) {
        var t1, dim, t2, type, map, t3, t4, t5, aa, aaMethod;
        t1 = tp.geomParams;
        dim = t1.findOneInt$2("dimension", tp.materialParams.findOneInt$2("dimension", 2));
        t2 = J.getInterceptor(dim);
        if (!t2.$eq(dim, 2) && !t2.$eq(dim, 3)) {
          t1 = H.S(dim) + " dimensional checkerboard texture not supported";
          $.Log.call$2(1, t1);
          return;
        }
        if (t2.$eq(dim, 2)) {
          type = t1.findOneString$2("mapping", tp.materialParams.findOneString$2("mapping", "uv"));
          t2 = J.getInterceptor(type);
          if (t2.$eq(type, "uv"))
            map = new G.UVMapping2D(t1.findOneFloat$2("uscale", tp.materialParams.findOneFloat$2("uscale", 1)), t1.findOneFloat$2("vscale", tp.materialParams.findOneFloat$2("vscale", 1)), t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0)), t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0)));
          else if (t2.$eq(type, "spherical"))
            map = new G.SphericalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
          else if (t2.$eq(type, "cylindrical"))
            map = new G.CylindricalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
          else if (t2.$eq(type, "planar")) {
            t2 = t1.findOneVector$2("v1", tp.materialParams.findOneVector$2("v1", new G.Vector(1, 0, 0)));
            t3 = t1.findOneVector$2("v2", tp.materialParams.findOneVector$2("v2", new G.Vector(0, 1, 0)));
            t4 = t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0));
            t5 = t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0));
            map = new G.PlanarMapping2D(G.Vector$from(t2), G.Vector$from(t3), t4, t5);
          } else {
            t2 = "2D texture mapping \"" + H.S(type) + "\" unknown";
            $.Log.call$2(1, t2);
            map = new G.UVMapping2D(1, 1, 0, 0);
          }
          aa = t1.findOneString$2("aamode", tp.materialParams.findOneString$2("aamode", "closedform"));
          t1 = J.getInterceptor(aa);
          if (t1.$eq(aa, "none"))
            aaMethod = 0;
          else {
            if (t1.$eq(aa, "closedform"))
              ;
            else {
              t1 = "Antialiasing mode \"" + H.S(aa) + "\" not understood by Checkerboard2DTexture; using \"closedform\"";
              $.Log.call$2(1, t1);
            }
            aaMethod = 1;
          }
          return new G.CheckerboardTexture(map, tex1, tex2, aaMethod);
        } else
          return new G.Checkerboard3DTexture(new G.IdentityMapping3D(tex2world), tex1, tex2);
      }, CheckerboardTexture_CreateFloat: [function(tex2world, tp) {
        return G.CheckerboardTexture__Create(tex2world, tp, tp.getFloatTexture$2("tex1", 1), tp.getFloatTexture$2("tex2", 0));
      }, "call$2", "CheckerboardTexture_CreateFloat$closure", 4, 0, 76], CheckerboardTexture_CreateSpectrum: [function(tex2world, tp) {
        return G.CheckerboardTexture__Create(tex2world, tp, tp.getSpectrumTexture$2("tex1", G.Spectrum_Spectrum(1)), tp.getSpectrumTexture$2("tex2", G.Spectrum_Spectrum(0)));
      }, "call$2", "CheckerboardTexture_CreateSpectrum$closure", 4, 0, 76]}
  },
  DotsTexture: {
    "^": "Texture;mapping,outsideDot,insideDot",
    static: {DotsTexture_CreateFloat: [function(tex2world, tp) {
        var type, t1, map, t2, t3, t4;
        type = tp.findString$2("mapping", "uv");
        t1 = J.getInterceptor(type);
        if (t1.$eq(type, "uv")) {
          t1 = tp.geomParams;
          map = new G.UVMapping2D(t1.findOneFloat$2("uscale", tp.materialParams.findOneFloat$2("uscale", 1)), t1.findOneFloat$2("vscale", tp.materialParams.findOneFloat$2("vscale", 1)), t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0)), t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0)));
        } else if (t1.$eq(type, "spherical"))
          map = new G.SphericalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "cylindrical"))
          map = new G.CylindricalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "planar")) {
          t1 = tp.geomParams;
          t2 = t1.findOneVector$2("v1", tp.materialParams.findOneVector$2("v1", new G.Vector(1, 0, 0)));
          t3 = t1.findOneVector$2("v2", tp.materialParams.findOneVector$2("v2", new G.Vector(0, 1, 0)));
          t4 = t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0));
          t1 = t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0));
          map = new G.PlanarMapping2D(G.Vector$from(t2), G.Vector$from(t3), t4, t1);
        } else {
          t1 = "2D texture mapping \"" + H.S(type) + "\" unknown";
          $.Log.call$2(2, t1);
          map = new G.UVMapping2D(1, 1, 0, 0);
        }
        return new G.DotsTexture(map, tp.getFloatTexture$2("inside", 1), tp.getFloatTexture$2("outside", 0));
      }, "call$2", "DotsTexture_CreateFloat$closure", 4, 0, 77], DotsTexture_CreateSpectrum: [function(tex2world, tp) {
        var type, t1, map, t2, t3, t4;
        type = tp.findString$2("mapping", "uv");
        t1 = J.getInterceptor(type);
        if (t1.$eq(type, "uv")) {
          t1 = tp.geomParams;
          map = new G.UVMapping2D(t1.findOneFloat$2("uscale", tp.materialParams.findOneFloat$2("uscale", 1)), t1.findOneFloat$2("vscale", tp.materialParams.findOneFloat$2("vscale", 1)), t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0)), t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0)));
        } else if (t1.$eq(type, "spherical"))
          map = new G.SphericalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "cylindrical"))
          map = new G.CylindricalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "planar")) {
          t1 = tp.geomParams;
          t2 = t1.findOneVector$2("v1", tp.materialParams.findOneVector$2("v1", new G.Vector(1, 0, 0)));
          t3 = t1.findOneVector$2("v2", tp.materialParams.findOneVector$2("v2", new G.Vector(0, 1, 0)));
          t4 = t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0));
          t1 = t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0));
          map = new G.PlanarMapping2D(G.Vector$from(t2), G.Vector$from(t3), t4, t1);
        } else {
          t1 = "2D texture mapping \"" + H.S(type) + "\" unknown";
          $.Log.call$2(2, t1);
          map = new G.UVMapping2D(1, 1, 0, 0);
        }
        return new G.DotsTexture(map, tp.getSpectrumTexture$2("inside", G.Spectrum_Spectrum(1)), tp.getSpectrumTexture$2("outside", G.Spectrum_Spectrum(0)));
      }, "call$2", "DotsTexture_CreateSpectrum$closure", 4, 0, 77]}
  },
  FBmTexture: {
    "^": "Texture;omega,octaves,spectrum,mapping",
    static: {FBmTexture_CreateFloat: [function(tex2world, tp) {
        var t1 = tp.findInt$2("octaves", 8);
        return new G.FBmTexture(tp.geomParams.findOneFloat$2("roughness", tp.materialParams.findOneFloat$2("roughness", 0.5)), t1, false, new G.IdentityMapping3D(tex2world));
      }, "call$2", "FBmTexture_CreateFloat$closure", 4, 0, 78], FBmTexture_CreateSpectrum: [function(tex2world, tp) {
        var t1 = tp.findInt$2("octaves", 8);
        return new G.FBmTexture(tp.geomParams.findOneFloat$2("roughness", tp.materialParams.findOneFloat$2("roughness", 0.5)), t1, true, new G.IdentityMapping3D(tex2world));
      }, "call$2", "FBmTexture_CreateSpectrum$closure", 4, 0, 78]}
  },
  ImageTexture: {
    "^": "Texture;mipmap,mapping",
    ImageTexture$8: function(mapping, filename, doTri, maxAniso, wrap, scale, gamma, spectrum) {
      var completer, v, img;
      if (J.get$isNotEmpty$asx(filename)) {
        completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        $.ResourceManager_global.requestImage$2(filename, completer.future).then$1(new G.ImageTexture_closure(this, doTri, maxAniso, wrap, scale, gamma, spectrum, completer));
      }
      if (typeof scale !== "number")
        H.throwExpression(P.ArgumentError$(scale));
      if (typeof gamma !== "number")
        H.throwExpression(P.ArgumentError$(gamma));
      v = Math.pow(scale, gamma);
      img = G.SpectrumImage$(1, 1, spectrum ? 3 : 1);
      if (spectrum)
        img.$indexSet(0, 0, G.Spectrum_Spectrum(v));
      else
        img.$indexSet(0, 0, v);
      this.mipmap = G.MIPMap$texture(img, false, 8, 0);
    },
    static: {ImageTexture$: function(mapping, filename, doTri, maxAniso, wrap, scale, gamma, spectrum) {
        var t1 = new G.ImageTexture(null, mapping);
        t1.ImageTexture$8(mapping, filename, doTri, maxAniso, wrap, scale, gamma, spectrum);
        return t1;
      }, ImageTexture_CreateFloat: [function(tex2world, tp) {
        var type, t1, map, t2, t3, t4, maxAniso, trilerp, wrap, wrapMode, scale, gamma;
        type = tp.findString$2("mapping", "uv");
        t1 = J.getInterceptor(type);
        if (t1.$eq(type, "uv")) {
          t1 = tp.geomParams;
          map = new G.UVMapping2D(t1.findOneFloat$2("uscale", tp.materialParams.findOneFloat$2("uscale", 1)), t1.findOneFloat$2("vscale", tp.materialParams.findOneFloat$2("vscale", 1)), t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0)), t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0)));
        } else if (t1.$eq(type, "spherical"))
          map = new G.SphericalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "cylindrical"))
          map = new G.CylindricalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "planar")) {
          t1 = tp.geomParams;
          t2 = t1.findOneVector$2("v1", tp.materialParams.findOneVector$2("v1", new G.Vector(1, 0, 0)));
          t3 = t1.findOneVector$2("v2", tp.materialParams.findOneVector$2("v2", new G.Vector(0, 1, 0)));
          t4 = t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0));
          t1 = t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0));
          map = new G.PlanarMapping2D(G.Vector$from(t2), G.Vector$from(t3), t4, t1);
        } else {
          t1 = "2D texture mapping '" + H.S(type) + "' unknown";
          $.Log.call$2(2, t1);
          map = new G.UVMapping2D(1, 1, 0, 0);
        }
        t1 = tp.geomParams;
        maxAniso = t1.findOneFloat$2("maxanisotropy", tp.materialParams.findOneFloat$2("maxanisotropy", 8));
        trilerp = t1.findOneBool$2("trilinear", tp.materialParams.findOneBool$2("trilinear", false));
        wrap = t1.findOneString$2("wrap", tp.materialParams.findOneString$2("wrap", "repeat"));
        t2 = J.getInterceptor(wrap);
        if (t2.$eq(wrap, "black"))
          wrapMode = 1;
        else
          wrapMode = t2.$eq(wrap, "clamp") ? 2 : 0;
        scale = t1.findOneFloat$2("scale", tp.materialParams.findOneFloat$2("scale", 1));
        gamma = t1.findOneFloat$2("gamma", tp.materialParams.findOneFloat$2("gamma", 1));
        return G.ImageTexture$(map, t1.findOneFilename$2("filename", tp.materialParams.findOneFilename$2("filename", "")), trilerp, maxAniso, wrapMode, scale, gamma, false);
      }, "call$2", "ImageTexture_CreateFloat$closure", 4, 0, 79], ImageTexture_CreateSpectrum: [function(tex2world, tp) {
        var type, t1, map, t2, t3, t4, maxAniso, trilerp, wrap, wrapMode, scale, gamma;
        type = tp.findString$2("mapping", "uv");
        t1 = J.getInterceptor(type);
        if (t1.$eq(type, "uv")) {
          t1 = tp.geomParams;
          map = new G.UVMapping2D(t1.findOneFloat$2("uscale", tp.materialParams.findOneFloat$2("uscale", 1)), t1.findOneFloat$2("vscale", tp.materialParams.findOneFloat$2("vscale", 1)), t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0)), t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0)));
        } else if (t1.$eq(type, "spherical"))
          map = new G.SphericalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "cylindrical"))
          map = new G.CylindricalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "planar")) {
          t1 = tp.geomParams;
          t2 = t1.findOneVector$2("v1", tp.materialParams.findOneVector$2("v1", new G.Vector(1, 0, 0)));
          t3 = t1.findOneVector$2("v2", tp.materialParams.findOneVector$2("v2", new G.Vector(0, 1, 0)));
          t4 = t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0));
          t1 = t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0));
          map = new G.PlanarMapping2D(G.Vector$from(t2), G.Vector$from(t3), t4, t1);
        } else {
          t1 = "2D texture mapping '" + H.S(type) + "' unknown";
          $.Log.call$2(2, t1);
          map = new G.UVMapping2D(1, 1, 0, 0);
        }
        t1 = tp.geomParams;
        maxAniso = t1.findOneFloat$2("maxanisotropy", tp.materialParams.findOneFloat$2("maxanisotropy", 8));
        trilerp = t1.findOneBool$2("trilinear", tp.materialParams.findOneBool$2("trilinear", false));
        wrap = t1.findOneString$2("wrap", tp.materialParams.findOneString$2("wrap", "repeat"));
        t2 = J.getInterceptor(wrap);
        if (t2.$eq(wrap, "black"))
          wrapMode = 1;
        else
          wrapMode = t2.$eq(wrap, "clamp") ? 2 : 0;
        scale = t1.findOneFloat$2("scale", tp.materialParams.findOneFloat$2("scale", 1));
        gamma = t1.findOneFloat$2("gamma", tp.materialParams.findOneFloat$2("gamma", 1));
        return G.ImageTexture$(map, t1.findOneFilename$2("filename", tp.materialParams.findOneFilename$2("filename", "")), trilerp, maxAniso, wrapMode, scale, gamma, true);
      }, "call$2", "ImageTexture_CreateSpectrum$closure", 4, 0, 79]}
  },
  ImageTexture_closure: {
    "^": "Closure:121;this_0,doTri_1,maxAniso_2,wrap_3,scale_4,gamma_5,spectrum_6,completer_7",
    call$1: function(img) {
      var t1, len, t2, i, t3, t4;
      if (img != null) {
        img = !this.spectrum_6 ? img.convert$1(1) : G.SpectrumImage$from(img);
        t1 = this.scale_4;
        if (!J.$eq(t1, 1) || !J.$eq(this.gamma_5, 1))
          for (len = J.get$data$x(img).length, t2 = this.gamma_5, i = 0; i < len; ++i) {
            t3 = img.data;
            if (i >= t3.length)
              return H.ioore(t3, i);
            t4 = t3[i];
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (typeof t2 !== "number")
              H.throwExpression(P.ArgumentError$(t2));
            t3[i] = Math.pow(t4 * t1, t2);
          }
        this.this_0.mipmap = G.MIPMap$texture(img, this.doTri_1, this.maxAniso_2, this.wrap_3);
      }
      t1 = this.completer_7.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  MarbleTexture: {
    "^": "Texture;octaves,omega,scale,variation,mapping",
    static: {MarbleTexture_CreateFloat: [function(tex2world, tp) {
        return;
      }, "call$2", "MarbleTexture_CreateFloat$closure", 4, 0, 80], MarbleTexture_CreateSpectrum: [function(tex2world, tp) {
        var t1, t2;
        t1 = tp.findInt$2("octaves", 8);
        t2 = tp.geomParams;
        return new G.MarbleTexture(t1, t2.findOneFloat$2("roughness", tp.materialParams.findOneFloat$2("roughness", 0.5)), t2.findOneFloat$2("scale", tp.materialParams.findOneFloat$2("scale", 1)), t2.findOneFloat$2("variation", tp.materialParams.findOneFloat$2("variation", 0.2)), new G.IdentityMapping3D(tex2world));
      }, "call$2", "MarbleTexture_CreateSpectrum$closure", 4, 0, 80]}
  },
  MixTexture: {
    "^": "Texture;tex1,tex2,amount",
    static: {MixTexture_CreateFloat: [function(tex2world, tp) {
        return new G.MixTexture(tp.getFloatTexture$2("tex1", 0), tp.getFloatTexture$2("tex2", 1), tp.getFloatTexture$2("amount", 0.5));
      }, "call$2", "MixTexture_CreateFloat$closure", 4, 0, 81], MixTexture_CreateSpectrum: [function(tex2world, tp) {
        return new G.MixTexture(tp.getSpectrumTexture$2("tex1", G.Spectrum_Spectrum(0)), tp.getSpectrumTexture$2("tex2", G.Spectrum_Spectrum(1)), tp.getFloatTexture$2("amount", 0.5));
      }, "call$2", "MixTexture_CreateSpectrum$closure", 4, 0, 81]}
  },
  ScaleTexture: {
    "^": "Texture;tex1,tex2",
    static: {ScaleTexture_CreateFloat: [function(tex2world, tp) {
        return new G.ScaleTexture(tp.getFloatTexture$2("tex1", 1), tp.getFloatTexture$2("tex2", 1));
      }, "call$2", "ScaleTexture_CreateFloat$closure", 4, 0, 82], ScaleTexture_CreateSpectrum: [function(tex2world, tp) {
        return new G.ScaleTexture(tp.getSpectrumTexture$2("tex1", G.Spectrum_Spectrum(1)), tp.getSpectrumTexture$2("tex2", G.Spectrum_Spectrum(1)));
      }, "call$2", "ScaleTexture_CreateSpectrum$closure", 4, 0, 82]}
  },
  UVTexture: {
    "^": "Texture;mapping",
    static: {UVTexture_CreateFloat: [function(tex2world, tp) {
        return;
      }, "call$2", "UVTexture_CreateFloat$closure", 4, 0, 83], UVTexture_CreateSpectrum: [function(tex2world, tp) {
        var type, t1, map, t2, t3, t4;
        type = tp.findString$2("mapping", "uv");
        t1 = J.getInterceptor(type);
        if (t1.$eq(type, "uv")) {
          t1 = tp.geomParams;
          map = new G.UVMapping2D(t1.findOneFloat$2("uscale", tp.materialParams.findOneFloat$2("uscale", 1)), t1.findOneFloat$2("vscale", tp.materialParams.findOneFloat$2("vscale", 1)), t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0)), t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0)));
        } else if (t1.$eq(type, "spherical"))
          map = new G.SphericalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "cylindrical"))
          map = new G.CylindricalMapping2D(G.Transform$(tex2world.get$mInv(), tex2world.m));
        else if (t1.$eq(type, "planar")) {
          t1 = tp.geomParams;
          t2 = t1.findOneVector$2("v1", tp.materialParams.findOneVector$2("v1", new G.Vector(1, 0, 0)));
          t3 = t1.findOneVector$2("v2", tp.materialParams.findOneVector$2("v2", new G.Vector(0, 1, 0)));
          t4 = t1.findOneFloat$2("udelta", tp.materialParams.findOneFloat$2("udelta", 0));
          t1 = t1.findOneFloat$2("vdelta", tp.materialParams.findOneFloat$2("vdelta", 0));
          map = new G.PlanarMapping2D(G.Vector$from(t2), G.Vector$from(t3), t4, t1);
        } else {
          t1 = "2D texture mapping \"" + H.S(type) + "\" unknown";
          $.Log.call$2(2, t1);
          map = new G.UVMapping2D(1, 1, 0, 0);
        }
        return new G.UVTexture(map);
      }, "call$2", "UVTexture_CreateSpectrum$closure", 4, 0, 83]}
  },
  WindyTexture: {
    "^": "Texture;mapping,spectrum",
    static: {WindyTexture_CreateFloat: [function(tex2world, tp) {
        return new G.WindyTexture(new G.IdentityMapping3D(tex2world), false);
      }, "call$2", "WindyTexture_CreateFloat$closure", 4, 0, 84], WindyTexture_CreateSpectrum: [function(tex2world, tp) {
        return new G.WindyTexture(new G.IdentityMapping3D(tex2world), true);
      }, "call$2", "WindyTexture_CreateSpectrum$closure", 4, 0, 84]}
  },
  WrinkledTexture: {
    "^": "Texture;omega,octaves,spectrum,mapping",
    static: {WrinkledTexture_CreateFloat: [function(tex2world, tp) {
        var t1 = tp.findInt$2("octaves", 8);
        return new G.WrinkledTexture(tp.geomParams.findOneFloat$2("roughness", tp.materialParams.findOneFloat$2("roughness", 0.5)), t1, false, new G.IdentityMapping3D(tex2world));
      }, "call$2", "WrinkledTexture_CreateFloat$closure", 4, 0, 85], WrinkledTexture_CreateSpectrum: [function(tex2world, tp) {
        var t1 = tp.findInt$2("octaves", 8);
        return new G.WrinkledTexture(tp.geomParams.findOneFloat$2("roughness", tp.materialParams.findOneFloat$2("roughness", 0.5)), t1, true, new G.IdentityMapping3D(tex2world));
      }, "call$2", "WrinkledTexture_CreateSpectrum$closure", 4, 0, 85]}
  }
}],
["volume_integrators", "package:dartray/volume_integrators/volume_integrators.dart", , S, {
  "^": "",
  EmissionIntegrator: {
    "^": "VolumeIntegrator;stepSize,tauSampleOffset,scatterSampleOffset",
    static: {EmissionIntegrator_Create: [function(params) {
        return new S.EmissionIntegrator(params.findOneFloat$2("stepsize", 1), null, null);
      }, "call$1", "EmissionIntegrator_Create$closure", 2, 0, 86]}
  },
  SingleScatteringIntegrator: {
    "^": "VolumeIntegrator;stepSize,tauSampleOffset,scatterSampleOffset",
    static: {SingleScatteringIntegrator_Create: [function(params) {
        return new S.SingleScatteringIntegrator(params.findOneFloat$2("stepsize", 1), null, null);
      }, "call$1", "SingleScatteringIntegrator_Create$closure", 2, 0, 87]}
  }
}],
["volume_regions", "package:dartray/volume_regions/volume_regions.dart", , B, {
  "^": "",
  ExponentialDensityRegion: {
    "^": "DensityRegion;extent,a,b,upDir,sig_a,sig_s,le,g,worldToVolume",
    worldBound$0: function() {
      var t1 = this.worldToVolume;
      return G.Transform$(t1.mInv, t1.m).transformBBox$1(this.extent);
    },
    static: {ExponentialDensityRegion_Create: [function(volume2world, params) {
        var sigma_a, sigma_s, g, Le, p0, p1, a, b, up, t1, t2;
        sigma_a = params.findOneSpectrum$2("sigma_a", G.Spectrum_Spectrum(0));
        sigma_s = params.findOneSpectrum$2("sigma_s", G.Spectrum_Spectrum(0));
        g = params.findOneFloat$2("g", 0);
        Le = params.findOneSpectrum$2("Le", G.Spectrum_Spectrum(0));
        p0 = params.findOnePoint$2("p0", new G.Point(0, 0, 0));
        p1 = params.findOnePoint$2("p1", new G.Point(1, 1, 1));
        a = params.findOneFloat$2("a", 1);
        b = params.findOneFloat$2("b", 1);
        up = params.findOneVector$2("updir", new G.Vector(0, 1, 0));
        t1 = new B.ExponentialDensityRegion(G.BBox$(p0, p1), a, b, null, G.Spectrum_Spectrum$from(sigma_a, 0), G.Spectrum_Spectrum$from(sigma_s, 0), G.Spectrum_Spectrum$from(Le, 0), g, G.Transform$(volume2world.get$mInv(), volume2world.m));
        t2 = J.getInterceptor$asx(up);
        t1.upDir = t2.$div(up, t2.length$0(up));
        return t1;
      }, "call$2", "ExponentialDensityRegion_Create$closure", 4, 0, 88]}
  },
  HomogeneousVolumeRegion: {
    "^": "VolumeRegion;sig_a,sig_s,le,g,extent,worldToVolume",
    worldBound$0: function() {
      var t1 = this.worldToVolume;
      return G.Transform$(t1.mInv, t1.m).transformBBox$1(this.extent);
    },
    p$4: [function(_, p, wi, wo, $double) {
      if (!this.extent.inside$1(this.worldToVolume.transformPoint$1(p)))
        return 0;
      return G.PhaseHG(wi, wo, this.g);
    }, "call$4", "get$p", 8, 0, 122],
    HomogeneousVolumeRegion$6: function(sa, ss, gg, emit, e, v2w) {
      this.worldToVolume = G.Transform$(v2w.get$mInv(), v2w.m);
      this.sig_a = sa;
      this.sig_s = ss;
      this.g = gg;
      this.le = emit;
      this.extent = e;
    },
    static: {HomogeneousVolumeRegion_Create: [function(volume2world, params) {
        var t1 = new B.HomogeneousVolumeRegion(null, null, null, null, null, null);
        t1.HomogeneousVolumeRegion$6(params.findOneSpectrum$2("sigma_a", G.Spectrum_Spectrum(0)), params.findOneSpectrum$2("sigma_s", G.Spectrum_Spectrum(0)), params.findOneFloat$2("g", 0), params.findOneSpectrum$2("Le", G.Spectrum_Spectrum(0)), G.BBox$(params.findOnePoint$2("p0", new G.Point(0, 0, 0)), params.findOnePoint$2("p1", new G.Point(1, 1, 1))), volume2world);
        return t1;
      }, "call$2", "HomogeneousVolumeRegion_Create$closure", 4, 0, 89]}
  },
  VolumeGridDensity: {
    "^": "DensityRegion;_density,nx<,ny,nz@,extent,sig_a,sig_s,le,g,worldToVolume",
    worldBound$0: function() {
      var t1 = this.worldToVolume;
      return G.Transform$(t1.mInv, t1.m).transformBBox$1(this.extent);
    },
    static: {VolumeGridDensity_Create: [function(volume2world, params) {
        var sigma_a, sigma_s, g, Le, p0, p1, data, nx, ny, nz, t1, t2;
        sigma_a = params.findOneSpectrum$2("sigma_a", G.Spectrum_Spectrum(0));
        sigma_s = params.findOneSpectrum$2("sigma_s", G.Spectrum_Spectrum(0));
        g = params.findOneFloat$2("g", 0);
        Le = params.findOneSpectrum$2("Le", G.Spectrum_Spectrum(0));
        p0 = params.findOnePoint$2("p0", new G.Point(0, 0, 0));
        p1 = params.findOnePoint$2("p1", new G.Point(1, 1, 1));
        data = params.findFloat$1("density");
        if (data == null) {
          $.Log.call$2(2, "No 'density' values provided for volume grid?");
          return;
        }
        nx = params.findOneInt$2("nx", 1);
        ny = params.findOneInt$2("ny", 1);
        nz = params.findOneInt$2("nz", 1);
        t1 = J.getInterceptor$asx(data);
        t2 = J.getInterceptor$ns(nx);
        if (!J.$eq(t1.get$length(data), J.$mul$ns(t2.$mul(nx, ny), nz))) {
          t1 = "VolumeGridDensity has " + H.S(t1.get$length(data)) + " density values but nx*ny*nz = " + H.S(J.$mul$ns(t2.$mul(nx, ny), nz));
          $.Log.call$2(2, t1);
          return;
        }
        t1 = new B.VolumeGridDensity(null, nx, ny, nz, G.BBox$(p0, p1), G.Spectrum_Spectrum$from(sigma_a, 0), G.Spectrum_Spectrum$from(sigma_s, 0), G.Spectrum_Spectrum$from(Le, 0), g, G.Transform$(volume2world.get$mInv(), volume2world.m));
        t1._density = new Float64Array(H._ensureNativeList(data));
        return t1;
      }, "call$2", "VolumeGridDensity_Create$closure", 4, 0, 90]}
  }
}],
["", "web_dartray.dart", , K, {
  "^": "",
  main: [function() {
    var e, t1, imageData, img, timer, t2, t3, t4, t5;
    e = document.createElement("canvas", null);
    document.body.appendChild(e);
    t1 = J.getInterceptor$x(e);
    t1.set$width(e, 256);
    t1.set$height(e, 256);
    t1.get$context2D(e).fill();
    imageData = P.convertNativeToDart_ImageData(e.getContext("2d").getImageData(0, 0, e.width, e.height));
    img = U.Image$(e.width, e.height, 4);
    timer = new P.Stopwatch(1000000, null, null);
    timer.start$0(0);
    t1 = new T.RenderManager(null, null, "", [], [], P.LinkedHashMap_LinkedHashMap$_empty(null, null));
    $.ResourceManager_global = t1;
    t2 = U.TransformSet$();
    t3 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
    t4 = U.RenderOptions$();
    t5 = new U.GraphicsState(P.LinkedHashMap_LinkedHashMap$_empty(null, null), P.LinkedHashMap_LinkedHashMap$_empty(null, null), new G.ParamSet([], [], [], [], [], [], [], [], []), null, P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, new G.ParamSet([], [], [], [], [], [], [], [], []), "", null);
    t5.material = "matte";
    t5.reverseOrientation = false;
    U.Pbrt__registerStandardPlugins();
    t1.pbrt = new U.Pbrt(t1, 1, t2, 3, t3, t4, t5, [], [], [], null, null);
    t1.render$5$image$isolate$log$preview($.scene, img, "web_isolate.dart", new K.main_closure(), new K.main_closure0(e, imageData)).then$1(new K.main_closure1(e, imageData, img, timer));
  }, "call$0", "main$closure", 0, 0, 9],
  main_closure: {
    "^": "Closure:123;",
    call$2: function(type, msg) {
      var div;
      P.print(H.S(msg));
      div = W.Element_Element$html("<pre>" + H.S(msg) + "</pre>", null, null);
      document.body.appendChild(div);
    }
  },
  main_closure0: {
    "^": "Closure:124;c_0,imageData_1",
    call$1: function(img) {
      var bytes, t1;
      bytes = H.NativeUint8List_NativeUint8List$view(img.data.buffer, 0, null);
      t1 = this.imageData_1;
      C.NativeUint8ClampedList_methods.setRange$3(J.get$data$x(t1), 0, bytes.length, bytes);
      J.putImageData$3$x(this.c_0.getContext("2d"), t1, 0, 0);
    }
  },
  main_closure1: {
    "^": "Closure:125;c_2,imageData_3,img_4,timer_5",
    call$1: function(output) {
      var t1, bytes;
      t1 = this.timer_5;
      t1.stop$0(0);
      t1 = "RENDER FINISHED: " + P.Duration$(0, 0, C.JSNumber_methods.$tdiv(t1.get$elapsedTicks() * 1000000, t1.frequency), 0, 0, 0).toString$0(0);
      $.Log.call$2(0, t1);
      if (G.Stats_getString().length !== 0) {
        t1 = "STATS....\n" + G.Stats_getString();
        $.Log.call$2(0, t1);
      }
      bytes = H.NativeUint8List_NativeUint8List$view(this.img_4.data.buffer, 0, null);
      t1 = this.imageData_3;
      C.NativeUint8ClampedList_methods.setRange$3(J.get$data$x(t1), 0, bytes.length, bytes);
      J.putImageData$3$x(this.c_2.getContext("2d"), t1, 0, 0);
    }
  }
},
1],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
J.JSDouble.$isdouble = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.Node.$isNode = true;
W.Node.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isPattern = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
J.JSArray.$isList = true;
J.JSArray.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isObject = true;
W.NodeValidator.$isNodeValidator = true;
W.NodeValidator.$isObject = true;
U.RenderTask.$isObject = true;
G.OutputImage.$isOutputImage = true;
G.OutputImage.$isObject = true;
P.Isolate.$isObject = true;
H.RawReceivePortImpl.$isObject = true;
W.HttpRequest.$isObject = true;
W.ProgressEvent.$isObject = true;
G.SpectrumImage.$isSpectrumImage = true;
G.SpectrumImage.$isObject = true;
G._ResampleWeight.$isObject = true;
P.Uint32List.$isUint32List = true;
P.Uint32List.$isObject = true;
U.ExrHufDec.$isObject = true;
U._PizChannelData.$isObject = true;
U.VP8BitReader.$isObject = true;
U.VP8QuantMatrix.$isObject = true;
U._HuffmanTree.$isObject = true;
U._HTreeGroup.$isObject = true;
U.VP8FInfo.$isObject = true;
U.VP8TopSamples.$isObject = true;
U.VP8MB.$isObject = true;
U.VP8MBData.$isObject = true;
U.VP8BandProbas.$isObject = true;
P.Uint8List.$isUint8List = true;
P.Uint8List.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
G.Point.$isPoint = true;
G.Point.$isVector = true;
G.Point.$isObject = true;
M._SDVertex.$isObject = true;
M._SDFace.$isObject = true;
G._KdNode.$isObject = true;
G.Normal.$isNormal = true;
G.Normal.$isVector = true;
G.Normal.$isObject = true;
G.LightSampleOffsets.$isObject = true;
G.BSDFSampleOffsets.$isObject = true;
U._VirtualLight.$isObject = true;
G.Spectrum.$isSpectrum = true;
G.Spectrum.$isObject = true;
G.BBox.$isBBox = true;
G.BBox.$isObject = true;
E._BoundEdge.$isObject = true;
E._KdAccelNode.$isObject = true;
E._Voxel.$isObject = true;
E._LinearBVHNode.$isObject = true;
E._BVHBucketInfo.$isObject = true;
G.Transform.$isTransform = true;
G.Transform.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
U.Image.$isImage = true;
U.Image.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
E._BVHPrimitiveInfo.$is_BVHPrimitiveInfo = true;
E._BVHPrimitiveInfo.$isObject = true;
P.Object.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isNodeValidator = true;
W._Html5NodeValidator.$isObject = true;
E.BVHAccel.$isBVHAccel = true;
E.BVHAccel.$isPrimitive = true;
E.BVHAccel.$isObject = true;
G.Primitive.$isPrimitive = true;
G.Primitive.$isObject = true;
G.ParamSet.$isParamSet = true;
G.ParamSet.$isObject = true;
E.GridAccel.$isGridAccel = true;
E.GridAccel.$isPrimitive = true;
E.GridAccel.$isObject = true;
E.KdTreeAccel.$isKdTreeAccel = true;
E.KdTreeAccel.$isPrimitive = true;
E.KdTreeAccel.$isObject = true;
E.BruteForceAccel.$isBruteForceAccel = true;
E.BruteForceAccel.$isPrimitive = true;
E.BruteForceAccel.$isObject = true;
K.EnvironmentCamera.$isEnvironmentCamera = true;
K.EnvironmentCamera.$isCamera = true;
K.EnvironmentCamera.$isObject = true;
G.AnimatedTransform.$isAnimatedTransform = true;
G.AnimatedTransform.$isObject = true;
G.Film.$isFilm = true;
G.Film.$isObject = true;
K.OrthographicCamera.$isOrthographicCamera = true;
K.OrthographicCamera.$isCamera = true;
K.OrthographicCamera.$isObject = true;
K.PerspectiveCamera.$isPerspectiveCamera = true;
K.PerspectiveCamera.$isCamera = true;
K.PerspectiveCamera.$isObject = true;
R.ImageFilm.$isImageFilm = true;
R.ImageFilm.$isFilm = true;
R.ImageFilm.$isObject = true;
G.Filter.$isFilter = true;
G.Filter.$isObject = true;
S.BoxFilter.$isBoxFilter = true;
S.BoxFilter.$isFilter = true;
S.BoxFilter.$isObject = true;
S.GaussianFilter.$isGaussianFilter = true;
S.GaussianFilter.$isFilter = true;
S.GaussianFilter.$isObject = true;
S.LanczosSincFilter.$isLanczosSincFilter = true;
S.LanczosSincFilter.$isFilter = true;
S.LanczosSincFilter.$isObject = true;
S.MitchellFilter.$isMitchellFilter = true;
S.MitchellFilter.$isFilter = true;
S.MitchellFilter.$isObject = true;
S.TriangleFilter.$isTriangleFilter = true;
S.TriangleFilter.$isFilter = true;
S.TriangleFilter.$isObject = true;
U.AmbientOcclusionIntegrator.$isAmbientOcclusionIntegrator = true;
U.AmbientOcclusionIntegrator.$isObject = true;
U.DiffusePRTIntegrator.$isDiffusePRTIntegrator = true;
U.DiffusePRTIntegrator.$isObject = true;
U.DirectLightingIntegrator.$isDirectLightingIntegrator = true;
U.DirectLightingIntegrator.$isObject = true;
U.GlossyPRTIntegrator.$isGlossyPRTIntegrator = true;
U.GlossyPRTIntegrator.$isObject = true;
U.IGIIntegrator.$isIGIIntegrator = true;
U.IGIIntegrator.$isObject = true;
U.IrradianceCacheIntegrator.$isIrradianceCacheIntegrator = true;
U.IrradianceCacheIntegrator.$isObject = true;
U.PathIntegrator.$isPathIntegrator = true;
U.PathIntegrator.$isObject = true;
U.PhotonMapIntegrator.$isPhotonMapIntegrator = true;
U.PhotonMapIntegrator.$isObject = true;
U.WhittedIntegrator.$isWhittedIntegrator = true;
U.WhittedIntegrator.$isObject = true;
O.DistantLight.$isDistantLight = true;
O.DistantLight.$isObject = true;
O.PointLight.$isPointLight = true;
O.PointLight.$isObject = true;
O.SpotLight.$isSpotLight = true;
O.SpotLight.$isObject = true;
O.InfiniteAreaLight.$isInfiniteAreaLight = true;
O.InfiniteAreaLight.$isObject = true;
O.GoniometricLight.$isGoniometricLight = true;
O.GoniometricLight.$isObject = true;
O.ProjectionLight.$isProjectionLight = true;
O.ProjectionLight.$isObject = true;
O.DiffuseAreaLight.$isDiffuseAreaLight = true;
O.DiffuseAreaLight.$isObject = true;
G.Shape.$isShape = true;
G.Shape.$isObject = true;
D.GlassMaterial.$isGlassMaterial = true;
D.GlassMaterial.$isObject = true;
G.TextureParams.$isTextureParams = true;
G.TextureParams.$isObject = true;
D.KdSubsurfaceMaterial.$isKdSubsurfaceMaterial = true;
D.KdSubsurfaceMaterial.$isObject = true;
D.MatteMaterial.$isMatteMaterial = true;
D.MatteMaterial.$isObject = true;
D.MeasuredMaterial.$isMeasuredMaterial = true;
D.MeasuredMaterial.$isObject = true;
D.MetalMaterial.$isMetalMaterial = true;
D.MetalMaterial.$isObject = true;
D.MirrorMaterial.$isMirrorMaterial = true;
D.MirrorMaterial.$isObject = true;
D.PlasticMaterial.$isPlasticMaterial = true;
D.PlasticMaterial.$isObject = true;
D.ShinyMetalMaterial.$isShinyMetalMaterial = true;
D.ShinyMetalMaterial.$isObject = true;
D.SubstrateMaterial.$isSubstrateMaterial = true;
D.SubstrateMaterial.$isObject = true;
D.SubsurfaceMaterial.$isSubsurfaceMaterial = true;
D.SubsurfaceMaterial.$isObject = true;
D.TranslucentMaterial.$isTranslucentMaterial = true;
D.TranslucentMaterial.$isObject = true;
D.UberMaterial.$isUberMaterial = true;
D.UberMaterial.$isObject = true;
F.LinearPixelSampler.$isLinearPixelSampler = true;
F.LinearPixelSampler.$isPixelSampler = true;
F.LinearPixelSampler.$isObject = true;
F.RandomPixelSampler.$isRandomPixelSampler = true;
F.RandomPixelSampler.$isPixelSampler = true;
F.RandomPixelSampler.$isObject = true;
F.TilePixelSampler.$isTilePixelSampler = true;
F.TilePixelSampler.$isPixelSampler = true;
F.TilePixelSampler.$isObject = true;
U.AdaptiveSampler.$isAdaptiveSampler = true;
U.AdaptiveSampler.$isObject = true;
G.Camera.$isCamera = true;
G.Camera.$isObject = true;
G.PixelSampler.$isPixelSampler = true;
G.PixelSampler.$isObject = true;
U.BestCandidateSampler.$isBestCandidateSampler = true;
U.BestCandidateSampler.$isObject = true;
U.HaltonSampler.$isHaltonSampler = true;
U.HaltonSampler.$isObject = true;
U.LowDiscrepancySampler.$isLowDiscrepancySampler = true;
U.LowDiscrepancySampler.$isObject = true;
U.RandomSampler.$isRandomSampler = true;
U.RandomSampler.$isObject = true;
U.StratifiedSampler.$isStratifiedSampler = true;
U.StratifiedSampler.$isObject = true;
M.Cone.$isCone = true;
M.Cone.$isShape = true;
M.Cone.$isObject = true;
M.Cylinder.$isCylinder = true;
M.Cylinder.$isShape = true;
M.Cylinder.$isObject = true;
M.Disk.$isDisk = true;
M.Disk.$isShape = true;
M.Disk.$isObject = true;
M.Heightfield.$isHeightfield = true;
M.Heightfield.$isShape = true;
M.Heightfield.$isObject = true;
M.Hyperboloid.$isHyperboloid = true;
M.Hyperboloid.$isShape = true;
M.Hyperboloid.$isObject = true;
M.LoopSubdivision.$isLoopSubdivision = true;
M.LoopSubdivision.$isShape = true;
M.LoopSubdivision.$isObject = true;
M.Nurbs.$isNurbs = true;
M.Nurbs.$isShape = true;
M.Nurbs.$isObject = true;
M.Paraboloid.$isParaboloid = true;
M.Paraboloid.$isShape = true;
M.Paraboloid.$isObject = true;
M.Sphere.$isSphere = true;
M.Sphere.$isShape = true;
M.Sphere.$isObject = true;
M.TriangleMesh.$isTriangleMesh = true;
M.TriangleMesh.$isShape = true;
M.TriangleMesh.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
G.Texture.$isTexture = true;
G.Texture.$isObject = true;
G.BilerpTexture.$isBilerpTexture = true;
G.BilerpTexture.$isTexture = true;
G.BilerpTexture.$isObject = true;
G.DotsTexture.$isDotsTexture = true;
G.DotsTexture.$isTexture = true;
G.DotsTexture.$isObject = true;
G.FBmTexture.$isFBmTexture = true;
G.FBmTexture.$isTexture = true;
G.FBmTexture.$isObject = true;
G.ImageTexture.$isImageTexture = true;
G.ImageTexture.$isTexture = true;
G.ImageTexture.$isObject = true;
G.MarbleTexture.$isMarbleTexture = true;
G.MarbleTexture.$isTexture = true;
G.MarbleTexture.$isObject = true;
G.MixTexture.$isMixTexture = true;
G.MixTexture.$isTexture = true;
G.MixTexture.$isObject = true;
G.ScaleTexture.$isScaleTexture = true;
G.ScaleTexture.$isTexture = true;
G.ScaleTexture.$isObject = true;
G.UVTexture.$isUVTexture = true;
G.UVTexture.$isTexture = true;
G.UVTexture.$isObject = true;
G.WindyTexture.$isWindyTexture = true;
G.WindyTexture.$isTexture = true;
G.WindyTexture.$isObject = true;
G.WrinkledTexture.$isWrinkledTexture = true;
G.WrinkledTexture.$isTexture = true;
G.WrinkledTexture.$isObject = true;
S.EmissionIntegrator.$isEmissionIntegrator = true;
S.EmissionIntegrator.$isObject = true;
S.SingleScatteringIntegrator.$isSingleScatteringIntegrator = true;
S.SingleScatteringIntegrator.$isObject = true;
B.ExponentialDensityRegion.$isExponentialDensityRegion = true;
B.ExponentialDensityRegion.$isObject = true;
B.HomogeneousVolumeRegion.$isHomogeneousVolumeRegion = true;
B.HomogeneousVolumeRegion.$isObject = true;
B.VolumeGridDensity.$isVolumeGridDensity = true;
B.VolumeGridDensity.$isObject = true;
U.InputBuffer.$isInputBuffer = true;
U.InputBuffer.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Capability.$isCapability = true;
P.Capability.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
G.Vector.$isVector = true;
G.Vector.$isObject = true;
G.Quaternion.$isQuaternion = true;
G.Quaternion.$isObject = true;
U.JpegComponent.$isJpegComponent = true;
U.JpegComponent.$isObject = true;
G.BxDF.$isBxDF = true;
G.BxDF.$isObject = true;
G.Ray.$isRay = true;
G.Ray.$isObject = true;
P.Pattern.$isPattern = true;
P.Pattern.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$n(receiver).$and(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mod$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$mod(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return J.getInterceptor$n(receiver).$or(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$tdiv$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.ceil$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).ceil$0(receiver);
};
J.clamp$2$n = function(receiver, a0, a1) {
  return J.getInterceptor$n(receiver).clamp$2(receiver, a0, a1);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.fillRange$3$ax = function(receiver, a0, a1, a2) {
  return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
};
J.floor$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).floor$0(receiver);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$buffer$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$buffer(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$codeUnits$s = function(receiver) {
  return J.getInterceptor$s(receiver).get$codeUnits(receiver);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$first$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$first(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$last$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$last(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$p$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$p(receiver);
};
J.get$response$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$response(receiver);
};
J.get$size$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$size(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.get$z$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$z(receiver);
};
J.putImageData$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).putImageData$3(receiver, a0, a1, a2);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$duration$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$duration(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$offset$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$offset(receiver, value);
};
J.setRange$3$ax = function(receiver, a0, a1, a2) {
  return J.getInterceptor$ax(receiver).setRange$3(receiver, a0, a1, a2);
};
J.setRange$4$ax = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
};
J.sort$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
};
J.sublist$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toList$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).toList$2(receiver, a0, a1);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.NativeFloat32List_methods = H.NativeFloat32List.prototype;
C.NativeInt32List_methods = H.NativeInt32List.prototype;
C.NativeUint32List_methods = H.NativeUint32List.prototype;
C.NativeUint8ClampedList_methods = H.NativeUint8ClampedList.prototype;
C.NativeUint8List_methods = H.NativeUint8List.prototype;
C.NodeList_methods = W.NodeList.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_EmptyIterator = new H.EmptyIterator();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C__DelayedDone = new P._DelayedDone();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_error = new W.EventStreamProvider("error");
C.EventStreamProvider_load = new W.EventStreamProvider("load");
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_IX5 = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_U4w = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_aQP = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
C.List_0W6 = Isolate.makeConstantList([U.VP8Filter_DC8uv$closure(), U.VP8Filter_TM8uv$closure(), U.VP8Filter_VE8uv$closure(), U.VP8Filter_HE8uv$closure(), U.VP8Filter_DC8uvNoTop$closure(), U.VP8Filter_DC8uvNoLeft$closure(), U.VP8Filter_DC8uvNoTopLeft$closure()]);
C.List_0_2567483615 = Isolate.makeConstantList([0, 2567483615]);
C.List_0_2_8 = Isolate.makeConstantList([0, 2, 8]);
C.List_0_4_2_1 = Isolate.makeConstantList([0, 4, 2, 1]);
C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [J.JSInt]);
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.List_292_260_226_226 = Isolate.makeConstantList([292, 260, 226, 226]);
C.List_2Bc = Isolate.makeConstantList([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]);
C.List_2Vk = Isolate.makeConstantList([137, 80, 78, 71, 13, 10, 26, 10]);
C.List_2_3_7 = Isolate.makeConstantList([2, 3, 7]);
C.List_3_3_11 = Isolate.makeConstantList([3, 3, 11]);
C.List_511_1023_2047_4095 = Isolate.makeConstantList([511, 1023, 2047, 4095]);
C.List_65X = Isolate.makeConstantList([0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 352, 368, 384, 400, 416, 432, 448, 464, 480, 496, 512, 528, 544, 560, 576, 592, 608, 624, 640, 656, 672, 688, 704, 720, 736, 752, 768, 784, 800, 816, 832, 848, 864, 880, 896, 912, 928, 944, 960, 976, 992, 1008, 1024, 1040, 1056, 1072, 1088, 1104, 1120, 1136, 1152, 1168, 1184, 1200, 1216, 1232, 1248, 1264, 1280, 1296, 1312, 1328, 1344, 1360, 1376, 1392, 1408, 1424, 1440, 1456, 1472, 1488, 1504, 1520, 1536, 1552, 1568, 1584, 1600, 1616, 1632, 1648, 1664, 1680, 1696, 1712, 1728, 1744, 1760, 1776, 1792, 1808, 1824, 1840, 1856, 1872, 1888, 1904, 1920, 1936, 1952, 1968, 1984, 2000, 2016, 2032, 2048, 2064, 2080, 2096, 2112, 2128, 2144, 2160, 2176, 2192, 2208, 2224, 2240, 2256, 2272, 2288, 2304, 2320, 2336, 2352, 2368, 2384, 2400, 2416, 2432, 2448, 2464, 2480, 2496, 2512, 2528, 2544, 2560, 2576, 2592, 2608, 2624, 2640, 2656, 2672, 2688, 2704, 2720, 2736, 2752, 2768, 2784, 2800, 2816, 2832, 2848, 2864, 2880, 2896, 2912, 2928, 2944, 2960, 2976, 2992, 3008, 3024, 3040, 3056, 3072, 3088, 3104, 3120, 3136, 3152, 3168, 3184, 3200, 3216, 3232, 3248, 3264, 3280, 3296, 3312, 3328, 3344, 3360, 3376, 3392, 3408, 3424, 3440, 3456, 3472, 3488, 3504, 3520, 3536, 3552, 3568, 3584, 3600, 3616, 3632, 3648, 3664, 3680, 3696, 3712, 3728, 3744, 3760, 3776, 3792, 3808, 3824, 3840, 3856, 3872, 3888, 3904, 3920, 3936, 3952, 3968, 3984, 4000, 4016, 4032, 4048, 4064, 4080]);
C.List_6Pr = Isolate.makeConstantList([0, 0, 26624, 1023, 0, 0, 65534, 2047]);
C.List_U2p = Isolate.makeConstantList([231, 120, 48, 89, 115, 113, 120, 152, 112]);
C.List_yXZ = Isolate.makeConstantList([152, 179, 64, 126, 170, 118, 46, 70, 95]);
C.List_yXZ0 = Isolate.makeConstantList([175, 69, 143, 80, 85, 82, 72, 155, 103]);
C.List_yXZ1 = Isolate.makeConstantList([56, 58, 10, 171, 218, 189, 17, 13, 152]);
C.List_yXZ2 = Isolate.makeConstantList([114, 26, 17, 163, 44, 195, 21, 10, 173]);
C.List_yXZ3 = Isolate.makeConstantList([121, 24, 80, 195, 26, 62, 44, 64, 85]);
C.List_yXZ4 = Isolate.makeConstantList([144, 71, 10, 38, 171, 213, 144, 34, 26]);
C.List_yXZ5 = Isolate.makeConstantList([170, 46, 55, 19, 136, 160, 33, 206, 71]);
C.List_yXZ6 = Isolate.makeConstantList([63, 20, 8, 114, 114, 208, 12, 9, 226]);
C.List_yXZ7 = Isolate.makeConstantList([81, 40, 11, 96, 182, 84, 29, 16, 36]);
C.List_sty0 = Isolate.makeConstantList([C.List_U2p, C.List_yXZ, C.List_yXZ0, C.List_yXZ1, C.List_yXZ2, C.List_yXZ3, C.List_yXZ4, C.List_yXZ5, C.List_yXZ6, C.List_yXZ7]);
C.List_yXZ8 = Isolate.makeConstantList([134, 183, 89, 137, 98, 101, 106, 165, 148]);
C.List_yXZ9 = Isolate.makeConstantList([72, 187, 100, 130, 157, 111, 32, 75, 80]);
C.List_yXZ10 = Isolate.makeConstantList([66, 102, 167, 99, 74, 62, 40, 234, 128]);
C.List_kfn = Isolate.makeConstantList([41, 53, 9, 178, 241, 141, 26, 8, 107]);
C.List_yXZ11 = Isolate.makeConstantList([74, 43, 26, 146, 73, 166, 49, 23, 157]);
C.List_yXZ12 = Isolate.makeConstantList([65, 38, 105, 160, 51, 52, 31, 115, 128]);
C.List_eDA = Isolate.makeConstantList([104, 79, 12, 27, 217, 255, 87, 17, 7]);
C.List_yXZ13 = Isolate.makeConstantList([87, 68, 71, 44, 114, 51, 15, 186, 23]);
C.List_yXZ14 = Isolate.makeConstantList([47, 41, 14, 110, 182, 183, 21, 17, 194]);
C.List_yXZ15 = Isolate.makeConstantList([66, 45, 25, 102, 197, 189, 23, 18, 22]);
C.List_L3W = Isolate.makeConstantList([C.List_yXZ8, C.List_yXZ9, C.List_yXZ10, C.List_kfn, C.List_yXZ11, C.List_yXZ12, C.List_eDA, C.List_yXZ13, C.List_yXZ14, C.List_yXZ15]);
C.List_yXZ16 = Isolate.makeConstantList([88, 88, 147, 150, 42, 46, 45, 196, 205]);
C.List_yXZ17 = Isolate.makeConstantList([43, 97, 183, 117, 85, 38, 35, 179, 61]);
C.List_yXZ18 = Isolate.makeConstantList([39, 53, 200, 87, 26, 21, 43, 232, 171]);
C.List_yXZ19 = Isolate.makeConstantList([56, 34, 51, 104, 114, 102, 29, 93, 77]);
C.List_yXZ20 = Isolate.makeConstantList([39, 28, 85, 171, 58, 165, 90, 98, 64]);
C.List_yXZ21 = Isolate.makeConstantList([34, 22, 116, 206, 23, 34, 43, 166, 73]);
C.List_yXZ22 = Isolate.makeConstantList([107, 54, 32, 26, 51, 1, 81, 43, 31]);
C.List_yXZ23 = Isolate.makeConstantList([68, 25, 106, 22, 64, 171, 36, 225, 114]);
C.List_yXZ24 = Isolate.makeConstantList([34, 19, 21, 102, 132, 188, 16, 76, 124]);
C.List_yXZ25 = Isolate.makeConstantList([62, 18, 78, 95, 85, 57, 50, 48, 51]);
C.List_ECY = Isolate.makeConstantList([C.List_yXZ16, C.List_yXZ17, C.List_yXZ18, C.List_yXZ19, C.List_yXZ20, C.List_yXZ21, C.List_yXZ22, C.List_yXZ23, C.List_yXZ24, C.List_yXZ25]);
C.List_yXZ26 = Isolate.makeConstantList([193, 101, 35, 159, 215, 111, 89, 46, 111]);
C.List_yXZ27 = Isolate.makeConstantList([60, 148, 31, 172, 219, 228, 21, 18, 111]);
C.List_eDA0 = Isolate.makeConstantList([112, 113, 77, 85, 179, 255, 38, 120, 114]);
C.List_kfn0 = Isolate.makeConstantList([40, 42, 1, 196, 245, 209, 10, 25, 109]);
C.List_yXZ28 = Isolate.makeConstantList([88, 43, 29, 140, 166, 213, 37, 43, 154]);
C.List_yXZ29 = Isolate.makeConstantList([61, 63, 30, 155, 67, 45, 68, 1, 209]);
C.List_yXZ30 = Isolate.makeConstantList([100, 80, 8, 43, 154, 1, 51, 26, 71]);
C.List_kfn1 = Isolate.makeConstantList([142, 78, 78, 16, 255, 128, 34, 197, 171]);
C.List_yXZ31 = Isolate.makeConstantList([41, 40, 5, 102, 211, 183, 4, 1, 221]);
C.List_yXZ32 = Isolate.makeConstantList([51, 50, 17, 168, 209, 192, 23, 25, 82]);
C.List_JO4 = Isolate.makeConstantList([C.List_yXZ26, C.List_yXZ27, C.List_eDA0, C.List_kfn0, C.List_yXZ28, C.List_yXZ29, C.List_yXZ30, C.List_kfn1, C.List_yXZ31, C.List_yXZ32]);
C.List_knt1 = Isolate.makeConstantList([138, 31, 36, 171, 27, 166, 38, 44, 229]);
C.List_yXZ33 = Isolate.makeConstantList([67, 87, 58, 169, 82, 115, 26, 59, 179]);
C.List_yXZ34 = Isolate.makeConstantList([63, 59, 90, 180, 59, 166, 93, 73, 154]);
C.List_yXZ35 = Isolate.makeConstantList([40, 40, 21, 116, 143, 209, 34, 39, 175]);
C.List_yXZ36 = Isolate.makeConstantList([47, 15, 16, 183, 34, 223, 49, 45, 183]);
C.List_yXZ37 = Isolate.makeConstantList([46, 17, 33, 183, 6, 98, 15, 32, 183]);
C.List_yXZ38 = Isolate.makeConstantList([57, 46, 22, 24, 128, 1, 54, 17, 37]);
C.List_yXZ39 = Isolate.makeConstantList([65, 32, 73, 115, 28, 128, 23, 128, 205]);
C.List_yXZ40 = Isolate.makeConstantList([40, 3, 9, 115, 51, 192, 18, 6, 223]);
C.List_yXZ41 = Isolate.makeConstantList([87, 37, 9, 115, 59, 77, 64, 21, 47]);
C.List_wEo = Isolate.makeConstantList([C.List_knt1, C.List_yXZ33, C.List_yXZ34, C.List_yXZ35, C.List_yXZ36, C.List_yXZ37, C.List_yXZ38, C.List_yXZ39, C.List_yXZ40, C.List_yXZ41]);
C.List_yXZ42 = Isolate.makeConstantList([104, 55, 44, 218, 9, 54, 53, 130, 226]);
C.List_yXZ43 = Isolate.makeConstantList([64, 90, 70, 205, 40, 41, 23, 26, 57]);
C.List_yXZ44 = Isolate.makeConstantList([54, 57, 112, 184, 5, 41, 38, 166, 213]);
C.List_yXZ45 = Isolate.makeConstantList([30, 34, 26, 133, 152, 116, 10, 32, 134]);
C.List_knt2 = Isolate.makeConstantList([39, 19, 53, 221, 26, 114, 32, 73, 255]);
C.List_yXZ46 = Isolate.makeConstantList([31, 9, 65, 234, 2, 15, 1, 118, 73]);
C.List_eDA1 = Isolate.makeConstantList([75, 32, 12, 51, 192, 255, 160, 43, 51]);
C.List_yXZ47 = Isolate.makeConstantList([88, 31, 35, 67, 102, 85, 55, 186, 85]);
C.List_yXZ48 = Isolate.makeConstantList([56, 21, 23, 111, 59, 205, 45, 37, 192]);
C.List_yXZ49 = Isolate.makeConstantList([55, 38, 70, 124, 73, 102, 1, 34, 98]);
C.List_0 = Isolate.makeConstantList([C.List_yXZ42, C.List_yXZ43, C.List_yXZ44, C.List_yXZ45, C.List_knt2, C.List_yXZ46, C.List_eDA1, C.List_yXZ47, C.List_yXZ48, C.List_yXZ49]);
C.List_yXZ50 = Isolate.makeConstantList([125, 98, 42, 88, 104, 85, 117, 175, 82]);
C.List_yXZ51 = Isolate.makeConstantList([95, 84, 53, 89, 128, 100, 113, 101, 45]);
C.List_yXZ52 = Isolate.makeConstantList([75, 79, 123, 47, 51, 128, 81, 171, 1]);
C.List_yXZ53 = Isolate.makeConstantList([57, 17, 5, 71, 102, 57, 53, 41, 49]);
C.List_yXZ54 = Isolate.makeConstantList([38, 33, 13, 121, 57, 73, 26, 1, 85]);
C.List_yXZ55 = Isolate.makeConstantList([41, 10, 67, 138, 77, 110, 90, 47, 114]);
C.List_eDA2 = Isolate.makeConstantList([115, 21, 2, 10, 102, 255, 166, 23, 6]);
C.List_yXZ56 = Isolate.makeConstantList([101, 29, 16, 10, 85, 128, 101, 196, 26]);
C.List_yXZ57 = Isolate.makeConstantList([57, 18, 10, 102, 102, 213, 34, 20, 43]);
C.List_yXZ58 = Isolate.makeConstantList([117, 20, 15, 36, 163, 128, 68, 1, 26]);
C.List_a5W = Isolate.makeConstantList([C.List_yXZ50, C.List_yXZ51, C.List_yXZ52, C.List_yXZ53, C.List_yXZ54, C.List_yXZ55, C.List_eDA2, C.List_yXZ56, C.List_yXZ57, C.List_yXZ58]);
C.List_h47 = Isolate.makeConstantList([102, 61, 71, 37, 34, 53, 31, 243, 192]);
C.List_yXZ59 = Isolate.makeConstantList([69, 60, 71, 38, 73, 119, 28, 222, 37]);
C.List_h470 = Isolate.makeConstantList([68, 45, 128, 34, 1, 47, 11, 245, 171]);
C.List_yXZ60 = Isolate.makeConstantList([62, 17, 19, 70, 146, 85, 55, 62, 70]);
C.List_yXZ61 = Isolate.makeConstantList([37, 43, 37, 154, 100, 163, 85, 160, 1]);
C.List_yXZ62 = Isolate.makeConstantList([63, 9, 92, 136, 28, 64, 32, 201, 85]);
C.List_eDA3 = Isolate.makeConstantList([75, 15, 9, 9, 64, 255, 184, 119, 16]);
C.List_eDA4 = Isolate.makeConstantList([86, 6, 28, 5, 64, 255, 25, 248, 1]);
C.List_eDA5 = Isolate.makeConstantList([56, 8, 17, 132, 137, 255, 55, 116, 128]);
C.List_yXZ63 = Isolate.makeConstantList([58, 15, 20, 82, 135, 57, 26, 121, 40]);
C.List_6oq = Isolate.makeConstantList([C.List_h47, C.List_yXZ59, C.List_h470, C.List_yXZ60, C.List_yXZ61, C.List_yXZ62, C.List_eDA3, C.List_eDA4, C.List_eDA5, C.List_yXZ63]);
C.List_yXZ64 = Isolate.makeConstantList([164, 50, 31, 137, 154, 133, 25, 35, 218]);
C.List_yXZ65 = Isolate.makeConstantList([51, 103, 44, 131, 131, 123, 31, 6, 158]);
C.List_yXZ66 = Isolate.makeConstantList([86, 40, 64, 135, 148, 224, 45, 183, 128]);
C.List_yXZ67 = Isolate.makeConstantList([22, 26, 17, 131, 240, 154, 14, 1, 209]);
C.List_yXZ68 = Isolate.makeConstantList([45, 16, 21, 91, 64, 222, 7, 1, 197]);
C.List_yXZ69 = Isolate.makeConstantList([56, 21, 39, 155, 60, 138, 23, 102, 213]);
C.List_eDA6 = Isolate.makeConstantList([83, 12, 13, 54, 192, 255, 68, 47, 28]);
C.List_yXZ70 = Isolate.makeConstantList([85, 26, 85, 85, 128, 128, 32, 146, 171]);
C.List_yXZ71 = Isolate.makeConstantList([18, 11, 7, 63, 144, 171, 4, 4, 246]);
C.List_yXZ72 = Isolate.makeConstantList([35, 27, 10, 146, 174, 171, 12, 26, 128]);
C.List_a5W0 = Isolate.makeConstantList([C.List_yXZ64, C.List_yXZ65, C.List_yXZ66, C.List_yXZ67, C.List_yXZ68, C.List_yXZ69, C.List_eDA6, C.List_yXZ70, C.List_yXZ71, C.List_yXZ72]);
C.List_yXZ73 = Isolate.makeConstantList([190, 80, 35, 99, 180, 80, 126, 54, 45]);
C.List_yXZ74 = Isolate.makeConstantList([85, 126, 47, 87, 176, 51, 41, 20, 32]);
C.List_yXZ75 = Isolate.makeConstantList([101, 75, 128, 139, 118, 146, 116, 128, 85]);
C.List_yXZ76 = Isolate.makeConstantList([56, 41, 15, 176, 236, 85, 37, 9, 62]);
C.List_eDA7 = Isolate.makeConstantList([71, 30, 17, 119, 118, 255, 17, 18, 138]);
C.List_yXZ77 = Isolate.makeConstantList([101, 38, 60, 138, 55, 70, 43, 26, 142]);
C.List_eDA8 = Isolate.makeConstantList([146, 36, 19, 30, 171, 255, 97, 27, 20]);
C.List_yXZ78 = Isolate.makeConstantList([138, 45, 61, 62, 219, 1, 81, 188, 64]);
C.List_yXZ79 = Isolate.makeConstantList([32, 41, 20, 117, 151, 142, 20, 21, 163]);
C.List_yXZ80 = Isolate.makeConstantList([112, 19, 12, 61, 195, 128, 48, 4, 24]);
C.List_RrN = Isolate.makeConstantList([C.List_yXZ73, C.List_yXZ74, C.List_yXZ75, C.List_yXZ76, C.List_eDA7, C.List_yXZ77, C.List_eDA8, C.List_yXZ78, C.List_yXZ79, C.List_yXZ80]);
C.List_799 = Isolate.makeConstantList([C.List_sty0, C.List_L3W, C.List_ECY, C.List_JO4, C.List_wEo, C.List_0, C.List_a5W, C.List_6oq, C.List_a5W0, C.List_RrN]);
C.List_89P = Isolate.makeConstantList([3226, 6412, 200, 168, 38, 38, 134, 134, 100, 100, 100, 100, 68, 68, 68, 68]);
C.List_8_8_4_2 = Isolate.makeConstantList([8, 8, 4, 2]);
C.List_8aB = Isolate.makeConstantList([U.VP8Filter_DC16$closure(), U.VP8Filter_TM16$closure(), U.VP8Filter_VE16$closure(), U.VP8Filter_HE16$closure(), U.VP8Filter_DC16NoTop$closure(), U.VP8Filter_DC16NoLeft$closure(), U.VP8Filter_DC16NoTopLeft$closure()]);
C.List_8co = Isolate.makeConstantList([80, 88, 23, 71, 30, 30, 62, 62, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41]);
C.List_8co0 = Isolate.makeConstantList([7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]);
C.List_8co1 = Isolate.makeConstantList([4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157]);
C.List_AIB = Isolate.makeConstantList([1.400313, 1.38, 1.358438, 1.34, 1.329063, 1.325, 1.3325, 1.34, 1.334375, 1.325, 1.317812, 1.31, 1.300313, 1.29, 1.281563, 1.27, 1.249062, 1.225, 1.2, 1.18, 1.174375, 1.175, 1.1775, 1.18, 1.178125, 1.175, 1.172812, 1.17, 1.165312, 1.16, 1.155312, 1.15, 1.142812, 1.135, 1.131562, 1.12, 1.092437, 1.04, 0.950375, 0.826, 0.645875, 0.468, 0.35125, 0.272, 0.230813, 0.214, 0.20925, 0.213, 0.21625, 0.223, 0.2365, 0.25, 0.254188, 0.26, 0.28, 0.3]);
C.List_AYZ = Isolate.makeConstantList([24, 7, 23, 25, 40, 6, 39, 41, 22, 26, 38, 42, 56, 5, 55, 57, 21, 27, 54, 58, 37, 43, 72, 4, 71, 73, 20, 28, 53, 59, 70, 74, 36, 44, 88, 69, 75, 52, 60, 3, 87, 89, 19, 29, 86, 90, 35, 45, 68, 76, 85, 91, 51, 61, 104, 2, 103, 105, 18, 30, 102, 106, 34, 46, 84, 92, 67, 77, 101, 107, 50, 62, 120, 1, 119, 121, 83, 93, 17, 31, 100, 108, 66, 78, 118, 122, 33, 47, 117, 123, 49, 63, 99, 109, 82, 94, 0, 116, 124, 65, 79, 16, 32, 98, 110, 48, 115, 125, 81, 95, 64, 114, 126, 97, 111, 80, 113, 127, 96, 112]);
C.List_AZw = Isolate.makeConstantList([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63]);
C.List_AiM = Isolate.makeConstantList([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284]);
C.List_B8J = Isolate.makeConstantList([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]);
C.List_DFB = Isolate.makeConstantList([1.041462802142675, 1.0328661533771188, 1.0126146228964314, 1.035046052483621, 1.0078661447098567, 1.042228038508128, 1.0442596738499825, 1.0535238290294409, 1.018077622693812, 1.0442729908727713, 1.052936254192075, 1.0537034271160244, 1.053390186921597, 1.0537782700979574, 1.0527093770467102, 1.0530449040446797, 1.0550554640191208, 1.055367361072482, 1.0454306634683976, 0.623489506392308, 0.18038071613188977, -0.007630375920198454, -0.00015217847035781367, -0.007510225734725831, -0.002170863932849147, 0.0006591946660236964, 0.01227881531853978, -0.004466977563720803, 0.017119799082865147, 0.00492110897597598, 0.0058762925143334985, 0.02525939941555008]);
C.List_DKo = Isolate.makeConstantList([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647, 4294967295]);
C.List_F1L = Isolate.makeConstantList([0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0]);
C.List_HHa = Isolate.makeConstantList([null, U.WebPFilters_horizontalUnfilter$closure(), U.WebPFilters_verticalUnfilter$closure(), U.WebPFilters_gradientUnfilter$closure()]);
C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
C.List_KEl = Isolate.makeConstantList([380, 390.967743, 401.935486, 412.903229, 423.870972, 434.838715, 445.806458, 456.7742, 467.741943, 478.709686, 489.677429, 500.645172, 511.612915, 522.580627, 533.54834, 544.516052, 555.483765, 566.451477, 577.419189, 588.386902, 599.354614, 610.322327, 621.290039, 632.257751, 643.225464, 654.193176, 665.160889, 676.128601, 687.096313, 698.064026, 709.031738, 720]);
C.List_LkP = Isolate.makeConstantList([0.002775695896581197, 0.003967382099064661, -0.0001460693678860675, 0.00036198394557748065, -0.00025819258699309733, -0.000050133191628082274, -0.00024437242866157116, -0.00007806141994803895, 0.04969030120754092, 0.48515973574763166, 1.029572585436059, 1.0333210878457741, 1.0368102644026933, 1.0364884018886333, 1.0365427939411784, 1.036859540285454, 1.0365645405660555, 1.0363938240707142, 1.0367205578770746, 1.036523932944605, 1.0361531226427443, 1.0348785007827348, 1.0042729660717318, 0.8421848643235428, 0.7375939489480157, 0.6585315450029464, 0.6053168244406628, 0.5954979413242074, 0.5941926127844314, 0.5651768232663427, 0.5606118601496856, 0.5822861038101872]);
C.List_Ls5 = Isolate.makeConstantList([0.9920977146972068, 0.9887642605936913, 0.9953904074450564, 0.9952931735300822, 0.9918144741163395, 1.0002584039673432, 0.9996847843734251, 0.9998812076665717, 0.9850401214637043, 0.7902984905303128, 0.5608219861746397, 0.3313345851399653, 0.13692410840839175, 0.01891490655966415, -0.000005112977093255089, -0.00042395493167891873, -0.00041934593101534273, 0.0017473028136486615, 0.0037999160177631316, -0.0005510147490658864, -0.000043716662898480967, 0.00758745017487328, 0.02579565078055402, 0.03816837653250055, 0.04948958640803083, 0.049595992290102905, 0.04981481950581225, 0.03984091106497802, 0.03050102493723387, 0.02124305476524108, 0.00695965321043564, 0.0041733649330980525]);
C.List_MEg = Isolate.makeConstantList([28679, 28679, 31752, -32759, -31735, -30711, -29687, -28663, 29703, 29703, 30727, 30727, -27639, -26615, -25591, -24567]);
C.List_q8u = Isolate.makeConstantList([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_2du = Isolate.makeConstantList([C.List_q8u, C.List_q8u, C.List_q8u]);
C.List_n3E = Isolate.makeConstantList([176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_U8c = Isolate.makeConstantList([223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_q8u0 = Isolate.makeConstantList([249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_EkO = Isolate.makeConstantList([C.List_n3E, C.List_U8c, C.List_q8u0]);
C.List_mXg = Isolate.makeConstantList([255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_sav = Isolate.makeConstantList([234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_q8u1 = Isolate.makeConstantList([253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_ezx = Isolate.makeConstantList([C.List_mXg, C.List_sav, C.List_q8u1]);
C.List_mXg0 = Isolate.makeConstantList([255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_wX4 = Isolate.makeConstantList([239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_U8c0 = Isolate.makeConstantList([254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_Q1p = Isolate.makeConstantList([C.List_mXg0, C.List_wX4, C.List_U8c0]);
C.List_mXg1 = Isolate.makeConstantList([255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_wX40 = Isolate.makeConstantList([251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_ycb = Isolate.makeConstantList([C.List_mXg1, C.List_wX40, C.List_q8u]);
C.List_wX41 = Isolate.makeConstantList([255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_mXg2 = Isolate.makeConstantList([251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_AuU = Isolate.makeConstantList([C.List_wX41, C.List_mXg2, C.List_U8c0]);
C.List_ekJ = Isolate.makeConstantList([255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255]);
C.List_vHK = Isolate.makeConstantList([250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255]);
C.List_Mic = Isolate.makeConstantList([254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_3oi = Isolate.makeConstantList([C.List_ekJ, C.List_vHK, C.List_Mic]);
C.List_uwP = Isolate.makeConstantList([C.List_2du, C.List_EkO, C.List_ezx, C.List_Q1p, C.List_ycb, C.List_AuU, C.List_3oi, C.List_2du]);
C.List_Mic0 = Isolate.makeConstantList([217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_ku2 = Isolate.makeConstantList([225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255]);
C.List_unK = Isolate.makeConstantList([234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255]);
C.List_EuK = Isolate.makeConstantList([C.List_Mic0, C.List_ku2, C.List_unK]);
C.List_H37 = Isolate.makeConstantList([255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_sav0 = Isolate.makeConstantList([223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_00 = Isolate.makeConstantList([238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255]);
C.List_U05 = Isolate.makeConstantList([C.List_H37, C.List_sav0, C.List_00]);
C.List_H370 = Isolate.makeConstantList([249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_wEo0 = Isolate.makeConstantList([C.List_mXg1, C.List_H370, C.List_q8u]);
C.List_q8u2 = Isolate.makeConstantList([255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_H371 = Isolate.makeConstantList([247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_HmY = Isolate.makeConstantList([C.List_q8u2, C.List_H371, C.List_q8u]);
C.List_Mic1 = Isolate.makeConstantList([252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_qJr = Isolate.makeConstantList([C.List_wX41, C.List_Mic1, C.List_q8u]);
C.List_mXg3 = Isolate.makeConstantList([255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_oIk = Isolate.makeConstantList([C.List_mXg3, C.List_q8u1, C.List_q8u]);
C.List_H372 = Isolate.makeConstantList([255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_Mic2 = Isolate.makeConstantList([250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_23h = Isolate.makeConstantList([C.List_H372, C.List_Mic2, C.List_Mic]);
C.List_Crw = Isolate.makeConstantList([C.List_EuK, C.List_U05, C.List_wEo0, C.List_HmY, C.List_qJr, C.List_oIk, C.List_23h, C.List_2du]);
C.List_U8c1 = Isolate.makeConstantList([186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_01 = Isolate.makeConstantList([234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255]);
C.List_IyW = Isolate.makeConstantList([251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255]);
C.List_ujV = Isolate.makeConstantList([C.List_U8c1, C.List_01, C.List_IyW]);
C.List_U8c2 = Isolate.makeConstantList([236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_A8Z = Isolate.makeConstantList([251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255]);
C.List_eFE = Isolate.makeConstantList([C.List_wX41, C.List_U8c2, C.List_A8Z]);
C.List_sav1 = Isolate.makeConstantList([254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_ezx0 = Isolate.makeConstantList([C.List_mXg3, C.List_sav1, C.List_q8u]);
C.List_n3E0 = Isolate.makeConstantList([254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_QXJ = Isolate.makeConstantList([C.List_H37, C.List_n3E0, C.List_Mic]);
C.List_yzJ = Isolate.makeConstantList([C.List_q8u, C.List_Mic, C.List_q8u]);
C.List_QcX = Isolate.makeConstantList([C.List_ujV, C.List_eFE, C.List_ezx0, C.List_QXJ, C.List_yzJ, C.List_2du, C.List_2du, C.List_2du]);
C.List_Mic3 = Isolate.makeConstantList([248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_AsR = Isolate.makeConstantList([250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255]);
C.List_n3E1 = Isolate.makeConstantList([248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255]);
C.List_gkc = Isolate.makeConstantList([C.List_Mic3, C.List_AsR, C.List_n3E1]);
C.List_q8u3 = Isolate.makeConstantList([255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_Mic4 = Isolate.makeConstantList([246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_02 = Isolate.makeConstantList([252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255]);
C.List_03 = Isolate.makeConstantList([C.List_q8u3, C.List_Mic4, C.List_02]);
C.List_mXg4 = Isolate.makeConstantList([255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_n3E2 = Isolate.makeConstantList([248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_m9F = Isolate.makeConstantList([253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255]);
C.List_C3E = Isolate.makeConstantList([C.List_mXg4, C.List_n3E2, C.List_m9F]);
C.List_wX42 = Isolate.makeConstantList([255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_wX43 = Isolate.makeConstantList([245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_wX44 = Isolate.makeConstantList([253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_swR = Isolate.makeConstantList([C.List_wX42, C.List_wX43, C.List_wX44]);
C.List_q8u4 = Isolate.makeConstantList([255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_U8c3 = Isolate.makeConstantList([252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_uQV = Isolate.makeConstantList([C.List_q8u4, C.List_U8c3, C.List_H37]);
C.List_H373 = Isolate.makeConstantList([255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_wX45 = Isolate.makeConstantList([249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_wX46 = Isolate.makeConstantList([255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_46y = Isolate.makeConstantList([C.List_H373, C.List_wX45, C.List_wX46]);
C.List_q8u5 = Isolate.makeConstantList([255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255]);
C.List_yzJ0 = Isolate.makeConstantList([C.List_q8u5, C.List_Mic2, C.List_q8u]);
C.List_88p = Isolate.makeConstantList([C.List_gkc, C.List_03, C.List_C3E, C.List_swR, C.List_uQV, C.List_46y, C.List_yzJ0, C.List_yzJ]);
C.List_MIe = Isolate.makeConstantList([C.List_uwP, C.List_Crw, C.List_QcX, C.List_88p]);
C.List_Qaw = Isolate.makeConstantList([0.005574062292492087, -0.004798283163144679, -0.00525365642986138, -0.006457148004449971, -0.005969351465800701, -0.002183671603768672, 0.016781120601055327, 0.09609635542906264, 0.21217357081986446, 0.3616913329068507, 0.5396101154323253, 0.7440881049217151, 0.9220957114839405, 1.0460304298411225, 1.0513824989063714, 1.0511991822135085, 1.0510530911991052, 1.051739723036051, 1.0516043086790485, 1.051194403206146, 1.0511590325868068, 1.051661246548303, 1.0514038526836869, 1.0515941029228475, 1.051146043696084, 1.0515123758830476, 1.0508871369510702, 1.050892370810238, 1.0477492815668303, 1.0493272144017338, 1.0435963333422726, 1.0392280772051465]);
C.List_QmM = Isolate.makeConstantList([1.1334479663682135, 1.1266762330194116, 1.1346827504710164, 1.1357395805744794, 1.1356371830149636, 1.1361152989346193, 1.1362179057706772, 1.1364819652587022, 1.1355107110714324, 1.1364060941199556, 1.1360363621722465, 1.1360122641141395, 1.135426688246703, 1.1363099407179136, 1.1355450412632506, 1.1353732327376378, 1.1349496420726002, 1.1111113947168556, 0.9059874042972714, 0.6116078078746533, 0.29539752170999634, 0.0959542006711501, -0.011650792030826267, -0.012144633073395025, -0.011148167569748318, -0.011997606668458151, -0.005050685547539485, -0.007998274581954215, -0.009472281770823642, -0.0055329541006658815, -0.004542891402827449, -0.012541015360921132]);
C.List_Qu6 = Isolate.makeConstantList([0.9942213815123685, 0.9898693712297568, 0.9829365828611696, 0.9962786839985931, 1.0198955019000133, 1.016639550121036, 1.0220913178757398, 0.9965166604068244, 1.0097766178917882, 1.0215422470827016, 0.6403195338779096, 0.0025012379477078184, 0.006533993955576994, 0.0028334080462675826, -5.1209675389074505e-11, -0.009059229164664638, 0.00339367183233312, -0.0030638741121828406, 0.22203936168286292, 0.6314114002481197, 0.9748098557650096, 0.9720956233359057, 1.017377030286815, 0.9987519432273413, 0.9470172573960224, 0.852586231543548, 0.9489779858166084, 0.9475187609652149, 0.9959894419105979, 0.8630135150380908, 0.8915098785352314, 0.8486649265284508]);
C.List_Qw3 = Isolate.makeConstantList([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095]);
C.List_2Vk0 = Isolate.makeConstantList([128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]);
C.List_gkc0 = Isolate.makeConstantList([C.List_2Vk0, C.List_2Vk0, C.List_2Vk0]);
C.List_cdS = Isolate.makeConstantList([253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128]);
C.List_app = Isolate.makeConstantList([189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128]);
C.List_yFh = Isolate.makeConstantList([106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128]);
C.List_y5k = Isolate.makeConstantList([C.List_cdS, C.List_app, C.List_yFh]);
C.List_INA = Isolate.makeConstantList([1, 98, 248, 255, 236, 226, 255, 255, 128, 128, 128]);
C.List_e4d = Isolate.makeConstantList([181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128]);
C.List_app0 = Isolate.makeConstantList([78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128]);
C.List_iLh = Isolate.makeConstantList([C.List_INA, C.List_e4d, C.List_app0]);
C.List_MOR = Isolate.makeConstantList([1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128]);
C.List_iUw = Isolate.makeConstantList([184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128]);
C.List_Eba = Isolate.makeConstantList([77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128]);
C.List_VS7 = Isolate.makeConstantList([C.List_MOR, C.List_iUw, C.List_Eba]);
C.List_MOR0 = Isolate.makeConstantList([1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128]);
C.List_wnc = Isolate.makeConstantList([170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128]);
C.List_XwU = Isolate.makeConstantList([37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128]);
C.List_HTJ = Isolate.makeConstantList([C.List_MOR0, C.List_wnc, C.List_XwU]);
C.List_1yC = Isolate.makeConstantList([1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128]);
C.List_Eba0 = Isolate.makeConstantList([207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128]);
C.List_iUw0 = Isolate.makeConstantList([102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128]);
C.List_4QF = Isolate.makeConstantList([C.List_1yC, C.List_Eba0, C.List_iUw0]);
C.List_uXo = Isolate.makeConstantList([1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128]);
C.List_iUw1 = Isolate.makeConstantList([177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128]);
C.List_Eba1 = Isolate.makeConstantList([80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128]);
C.List_8Pu = Isolate.makeConstantList([C.List_uXo, C.List_iUw1, C.List_Eba1]);
C.List_2hT = Isolate.makeConstantList([1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]);
C.List_2hT0 = Isolate.makeConstantList([246, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]);
C.List_10r = Isolate.makeConstantList([255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]);
C.List_Snu = Isolate.makeConstantList([C.List_2hT, C.List_2hT0, C.List_10r]);
C.List_23h0 = Isolate.makeConstantList([C.List_gkc0, C.List_y5k, C.List_iLh, C.List_VS7, C.List_HTJ, C.List_4QF, C.List_8Pu, C.List_Snu]);
C.List_2hT1 = Isolate.makeConstantList([198, 35, 237, 223, 193, 187, 162, 160, 145, 155, 62]);
C.List_2Vk1 = Isolate.makeConstantList([131, 45, 198, 221, 172, 176, 220, 157, 252, 221, 1]);
C.List_kOG = Isolate.makeConstantList([68, 47, 146, 208, 149, 167, 221, 162, 255, 223, 128]);
C.List_BDr = Isolate.makeConstantList([C.List_2hT1, C.List_2Vk1, C.List_kOG]);
C.List_qNA0 = Isolate.makeConstantList([1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128]);
C.List_app1 = Isolate.makeConstantList([184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128]);
C.List_kr3 = Isolate.makeConstantList([81, 99, 181, 242, 176, 190, 249, 202, 255, 255, 128]);
C.List_Hcu = Isolate.makeConstantList([C.List_qNA0, C.List_app1, C.List_kr3]);
C.List_oqK = Isolate.makeConstantList([1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128]);
C.List_e4d0 = Isolate.makeConstantList([99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128]);
C.List_kr30 = Isolate.makeConstantList([23, 91, 163, 242, 170, 187, 247, 210, 255, 255, 128]);
C.List_zAX = Isolate.makeConstantList([C.List_oqK, C.List_e4d0, C.List_kr30]);
C.List_uXo0 = Isolate.makeConstantList([1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128]);
C.List_YAl = Isolate.makeConstantList([109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128]);
C.List_INA0 = Isolate.makeConstantList([44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128]);
C.List_QOg = Isolate.makeConstantList([C.List_uXo0, C.List_YAl, C.List_INA0]);
C.List_niO = Isolate.makeConstantList([1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128]);
C.List_INA1 = Isolate.makeConstantList([94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128]);
C.List_app2 = Isolate.makeConstantList([22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128]);
C.List_i7r = Isolate.makeConstantList([C.List_niO, C.List_INA1, C.List_app2]);
C.List_xw8 = Isolate.makeConstantList([1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128]);
C.List_iUw2 = Isolate.makeConstantList([124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128]);
C.List_app3 = Isolate.makeConstantList([35, 77, 181, 251, 193, 211, 255, 205, 128, 128, 128]);
C.List_sQ3 = Isolate.makeConstantList([C.List_xw8, C.List_iUw2, C.List_app3]);
C.List_UkC = Isolate.makeConstantList([1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128]);
C.List_qNA1 = Isolate.makeConstantList([121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128]);
C.List_app4 = Isolate.makeConstantList([45, 99, 188, 251, 195, 217, 255, 224, 128, 128, 128]);
C.List_ACG = Isolate.makeConstantList([C.List_UkC, C.List_qNA1, C.List_app4]);
C.List_xw80 = Isolate.makeConstantList([1, 1, 251, 255, 213, 255, 128, 128, 128, 128, 128]);
C.List_e3N = Isolate.makeConstantList([203, 1, 248, 255, 255, 128, 128, 128, 128, 128, 128]);
C.List_uXo1 = Isolate.makeConstantList([137, 1, 177, 255, 224, 255, 128, 128, 128, 128, 128]);
C.List_UMT = Isolate.makeConstantList([C.List_xw80, C.List_e3N, C.List_uXo1]);
C.List_IJC = Isolate.makeConstantList([C.List_BDr, C.List_Hcu, C.List_zAX, C.List_QOg, C.List_i7r, C.List_sQ3, C.List_ACG, C.List_UMT]);
C.List_oyU = Isolate.makeConstantList([253, 9, 248, 251, 207, 208, 255, 192, 128, 128, 128]);
C.List_fnl = Isolate.makeConstantList([175, 13, 224, 243, 193, 185, 249, 198, 255, 255, 128]);
C.List_kOG0 = Isolate.makeConstantList([73, 17, 171, 221, 161, 179, 236, 167, 255, 234, 128]);
C.List_04 = Isolate.makeConstantList([C.List_oyU, C.List_fnl, C.List_kOG0]);
C.List_qNA2 = Isolate.makeConstantList([1, 95, 247, 253, 212, 183, 255, 255, 128, 128, 128]);
C.List_qph = Isolate.makeConstantList([239, 90, 244, 250, 211, 209, 255, 255, 128, 128, 128]);
C.List_yFh0 = Isolate.makeConstantList([155, 77, 195, 248, 188, 195, 255, 255, 128, 128, 128]);
C.List_S0k = Isolate.makeConstantList([C.List_qNA2, C.List_qph, C.List_yFh0]);
C.List_niO0 = Isolate.makeConstantList([1, 24, 239, 251, 218, 219, 255, 205, 128, 128, 128]);
C.List_Eba2 = Isolate.makeConstantList([201, 51, 219, 255, 196, 186, 128, 128, 128, 128, 128]);
C.List_app5 = Isolate.makeConstantList([69, 46, 190, 239, 201, 218, 255, 228, 128, 128, 128]);
C.List_gfn = Isolate.makeConstantList([C.List_niO0, C.List_Eba2, C.List_app5]);
C.List_8eb = Isolate.makeConstantList([1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128]);
C.List_xw81 = Isolate.makeConstantList([223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128]);
C.List_e3N0 = Isolate.makeConstantList([141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128]);
C.List_EJ0 = Isolate.makeConstantList([C.List_8eb, C.List_xw81, C.List_e3N0]);
C.List_e3N1 = Isolate.makeConstantList([1, 16, 248, 255, 255, 128, 128, 128, 128, 128, 128]);
C.List_uXo2 = Isolate.makeConstantList([190, 36, 230, 255, 236, 255, 128, 128, 128, 128, 128]);
C.List_2hT2 = Isolate.makeConstantList([149, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]);
C.List_WtZ = Isolate.makeConstantList([C.List_e3N1, C.List_uXo2, C.List_2hT2]);
C.List_2hT3 = Isolate.makeConstantList([1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128]);
C.List_Jio = Isolate.makeConstantList([247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128]);
C.List_2hT4 = Isolate.makeConstantList([240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128]);
C.List_wsa0 = Isolate.makeConstantList([C.List_2hT3, C.List_Jio, C.List_2hT4]);
C.List_e3N2 = Isolate.makeConstantList([1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128]);
C.List_e3N3 = Isolate.makeConstantList([213, 62, 250, 255, 255, 128, 128, 128, 128, 128, 128]);
C.List_2hT5 = Isolate.makeConstantList([55, 93, 255, 128, 128, 128, 128, 128, 128, 128, 128]);
C.List_OBP = Isolate.makeConstantList([C.List_e3N2, C.List_e3N3, C.List_2hT5]);
C.List_Net = Isolate.makeConstantList([C.List_04, C.List_S0k, C.List_gfn, C.List_EJ0, C.List_WtZ, C.List_wsa0, C.List_OBP, C.List_gkc0]);
C.List_ZEx = Isolate.makeConstantList([202, 24, 213, 235, 186, 191, 220, 160, 240, 175, 255]);
C.List_kOG1 = Isolate.makeConstantList([126, 38, 182, 232, 169, 184, 228, 174, 255, 187, 128]);
C.List_kOG2 = Isolate.makeConstantList([61, 46, 138, 219, 151, 178, 240, 170, 255, 216, 128]);
C.List_wsa1 = Isolate.makeConstantList([C.List_ZEx, C.List_kOG1, C.List_kOG2]);
C.List_kr31 = Isolate.makeConstantList([1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128]);
C.List_e4d1 = Isolate.makeConstantList([166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128]);
C.List_kr32 = Isolate.makeConstantList([39, 77, 162, 232, 172, 180, 245, 178, 255, 255, 128]);
C.List_UaZ = Isolate.makeConstantList([C.List_kr31, C.List_e4d1, C.List_kr32]);
C.List_kr33 = Isolate.makeConstantList([1, 52, 220, 246, 198, 199, 249, 220, 255, 255, 128]);
C.List_oqK0 = Isolate.makeConstantList([124, 74, 191, 243, 183, 193, 250, 221, 255, 255, 128]);
C.List_kr34 = Isolate.makeConstantList([24, 71, 130, 219, 154, 170, 243, 182, 255, 255, 128]);
C.List_i09 = Isolate.makeConstantList([C.List_kr33, C.List_oqK0, C.List_kr34]);
C.List_app6 = Isolate.makeConstantList([1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128]);
C.List_e4d2 = Isolate.makeConstantList([149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128]);
C.List_XT3 = Isolate.makeConstantList([28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128]);
C.List_OIF = Isolate.makeConstantList([C.List_app6, C.List_e4d2, C.List_XT3]);
C.List_e4d3 = Isolate.makeConstantList([1, 81, 230, 252, 204, 203, 255, 192, 128, 128, 128]);
C.List_INA2 = Isolate.makeConstantList([123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128]);
C.List_app7 = Isolate.makeConstantList([20, 95, 153, 243, 164, 173, 255, 203, 128, 128, 128]);
C.List_CKI = Isolate.makeConstantList([C.List_e4d3, C.List_INA2, C.List_app7]);
C.List_Eba3 = Isolate.makeConstantList([1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128]);
C.List_IVU = Isolate.makeConstantList([168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128]);
C.List_INA3 = Isolate.makeConstantList([47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128]);
C.List_SnA = Isolate.makeConstantList([C.List_Eba3, C.List_IVU, C.List_INA3]);
C.List_INA4 = Isolate.makeConstantList([1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128]);
C.List_e4d4 = Isolate.makeConstantList([141, 84, 213, 252, 201, 202, 255, 219, 128, 128, 128]);
C.List_e4d5 = Isolate.makeConstantList([42, 80, 160, 240, 162, 185, 255, 205, 128, 128, 128]);
C.List_xw82 = Isolate.makeConstantList([C.List_INA4, C.List_e4d4, C.List_e4d5]);
C.List_2hT6 = Isolate.makeConstantList([244, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]);
C.List_2hT7 = Isolate.makeConstantList([238, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]);
C.List_Q1p0 = Isolate.makeConstantList([C.List_2hT, C.List_2hT6, C.List_2hT7]);
C.List_uLM = Isolate.makeConstantList([C.List_wsa1, C.List_UaZ, C.List_i09, C.List_OIF, C.List_CKI, C.List_SnA, C.List_xw82, C.List_Q1p0]);
C.List_S8N = Isolate.makeConstantList([C.List_23h0, C.List_IJC, C.List_Net, C.List_uLM]);
C.List_SCE = Isolate.makeConstantList([0.0006061, 0.0006808792, 0.0007651456, 0.0008600124, 0.0009665928, 0.001086, 0.001220586, 0.001372729, 0.001543579, 0.001734286, 0.001946, 0.002177777, 0.002435809, 0.002731953, 0.003078064, 0.003486, 0.003975227, 0.00454088, 0.00515832, 0.005802907, 0.006450001, 0.007083216, 0.007745488, 0.008501152, 0.009414544, 0.01054999, 0.0119658, 0.01365587, 0.01558805, 0.01773015, 0.02005001, 0.02251136, 0.02520288, 0.02827972, 0.03189704, 0.03621, 0.04143771, 0.04750372, 0.05411988, 0.06099803, 0.06785001, 0.07448632, 0.08136156, 0.08915364, 0.09854048, 0.1102, 0.1246133, 0.1417017, 0.1613035, 0.1832568, 0.2074, 0.2336921, 0.2626114, 0.2947746, 0.3307985, 0.3713, 0.4162091, 0.4654642, 0.5196948, 0.5795303, 0.6456, 0.7184838, 0.7967133, 0.8778459, 0.959439, 1.0390501, 1.1153673, 1.1884971, 1.2581233, 1.3239296, 1.3856, 1.4426352, 1.4948035, 1.5421903, 1.5848807, 1.62296, 1.6564048, 1.6852959, 1.7098745, 1.7303821, 1.74706, 1.7600446, 1.7696233, 1.7762637, 1.7804334, 1.7826, 1.7829682, 1.7816998, 1.7791982, 1.7758671, 1.77211, 1.7682589, 1.764039, 1.7589438, 1.7524663, 1.7441, 1.7335595, 1.7208581, 1.7059369, 1.6887372, 1.6692, 1.6475287, 1.6234127, 1.5960223, 1.564528, 1.5281, 1.4861114, 1.4395215, 1.3898799, 1.3387362, 1.28764, 1.2374223, 1.1878243, 1.1387611, 1.090148, 1.0419, 0.9941976, 0.9473473, 0.9014531, 0.8566193, 0.8129501, 0.7705173, 0.7294448, 0.6899136, 0.6521049, 0.6162, 0.5823286, 0.5504162, 0.5203376, 0.4919673, 0.46518, 0.4399246, 0.4161836, 0.3938822, 0.3729459, 0.3533, 0.3348578, 0.3175521, 0.3013375, 0.2861686, 0.272, 0.2588171, 0.2464838, 0.2347718, 0.2234533, 0.2123, 0.2011692, 0.1901196, 0.1792254, 0.1685608, 0.1582, 0.1481383, 0.1383758, 0.1289942, 0.1200751, 0.1117, 0.1039048, 0.09666748, 0.08998272, 0.08384531, 0.07824999, 0.07320899, 0.06867816, 0.06456784, 0.06078835, 0.05725001, 0.05390435, 0.05074664, 0.04775276, 0.04489859, 0.04216, 0.03950728, 0.03693564, 0.03445836, 0.03208872, 0.02984, 0.02771181, 0.02569444, 0.02378716, 0.02198925, 0.0203, 0.01871805, 0.01724036, 0.01586364, 0.01458461, 0.0134, 0.01230723, 0.01130188, 0.01037792, 0.009529306, 0.008749999, 0.0080352, 0.0073816, 0.0067854, 0.0062428, 0.005749999, 0.0053036, 0.0048998, 0.0045342, 0.0042024, 0.0039, 0.0036232, 0.0033706, 0.0031414, 0.0029348, 0.002749999, 0.0025852, 0.0024386, 0.0023094, 0.0021968, 0.0021, 0.002017733, 0.0019482, 0.0018898, 0.001840933, 0.0018, 0.001766267, 0.0017378, 0.0017112, 0.001683067, 0.001650001, 0.001610133, 0.0015644, 0.0015136, 0.001458533, 0.0014, 0.001336667, 0.00127, 0.001205, 0.001146667, 0.0011, 0.0010688, 0.0010494, 0.0010356, 0.0010212, 0.001, 0.00096864, 0.00092992, 0.00088688, 0.00084256, 0.0008, 0.00076096, 0.00072368, 0.00068592, 0.00064544, 0.0006, 0.0005478667, 0.0004916, 0.0004354, 0.0003834667, 0.00034, 0.0003072533, 0.00028316, 0.00026544, 0.0002518133, 0.00024, 0.0002295467, 0.00022064, 0.00021196, 0.0002021867, 0.00019, 0.0001742133, 0.00015564, 0.00013596, 0.0001168533, 0.0001, 0.00008613333, 0.0000746, 0.000065, 0.00005693333, 0.00004999999, 0.00004416, 0.00003948, 0.00003572, 0.00003264, 0.00003, 0.00002765333, 0.00002556, 0.00002364, 0.00002181333, 0.00002, 0.00001813333, 0.0000162, 0.0000142, 0.00001213333, 0.00001, 0.000007733333, 0.0000054, 0.0000032, 0.000001333333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
C.List_Sby = Isolate.makeConstantList([0.1657560486708618, 0.11846442802747797, 0.12408293329637447, 0.11371272058349924, 0.07899243451889913, 0.03220560359310655, -0.010798365407877875, 0.018051975516730392, 0.005340719659873053, 0.013654918729501336, -0.005956421354564284, -0.0018444365067353252, -0.010571884361529504, -0.002937552107800001, -0.010790476271835936, -0.008022430669750363, -0.002266916770249594, 0.007020024049470663, -0.00815284690002993, 0.6077286696925279, 0.988315608654324, 0.9939169104407882, 1.0039338994753197, 0.9923449986116712, 0.9992653085885552, 1.008462155761727, 0.9835829682744122, 1.0085023660099048, 0.974511383265687, 0.9854326957005994, 0.9349576398096204, 0.987139077923194]);
C.List_U49 = Isolate.makeConstantList([360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830]);
C.List_UgT = Isolate.makeConstantList(["INFO", "WARNING", "ERROR", "SEVERE", "DEBUG"]);
C.List_V7h = Isolate.makeConstantList([-2872, -2849, -2827, -2804, -2782, -2760, -2737, -2715, -2692, -2670, -2647, -2625, -2603, -2580, -2558, -2535, -2513, -2490, -2468, -2446, -2423, -2401, -2378, -2356, -2333, -2311, -2289, -2266, -2244, -2221, -2199, -2176, -2154, -2132, -2109, -2087, -2064, -2042, -2019, -1997, -1975, -1952, -1930, -1907, -1885, -1862, -1840, -1817, -1795, -1773, -1750, -1728, -1705, -1683, -1660, -1638, -1616, -1593, -1571, -1548, -1526, -1503, -1481, -1459, -1436, -1414, -1391, -1369, -1346, -1324, -1302, -1279, -1257, -1234, -1212, -1189, -1167, -1145, -1122, -1100, -1077, -1055, -1032, -1010, -988, -965, -943, -920, -898, -875, -853, -830, -808, -786, -763, -741, -718, -696, -673, -651, -629, -606, -584, -561, -539, -516, -494, -472, -449, -427, -404, -382, -359, -337, -315, -292, -270, -247, -225, -202, -180, -158, -135, -113, -90, -68, -45, -23, 0, 22, 44, 67, 89, 112, 134, 157, 179, 201, 224, 246, 269, 291, 314, 336, 358, 381, 403, 426, 448, 471, 493, 515, 538, 560, 583, 605, 628, 650, 672, 695, 717, 740, 762, 785, 807, 829, 852, 874, 897, 919, 942, 964, 987, 1009, 1031, 1054, 1076, 1099, 1121, 1144, 1166, 1188, 1211, 1233, 1256, 1278, 1301, 1323, 1345, 1368, 1390, 1413, 1435, 1458, 1480, 1502, 1525, 1547, 1570, 1592, 1615, 1637, 1659, 1682, 1704, 1727, 1749, 1772, 1794, 1816, 1839, 1861, 1884, 1906, 1929, 1951, 1974, 1996, 2018, 2041, 2063, 2086, 2108, 2131, 2153, 2175, 2198, 2220, 2243, 2265, 2288, 2310, 2332, 2355, 2377, 2400, 2422, 2445, 2467, 2489, 2512, 2534, 2557, 2579, 2602, 2624, 2646, 2669, 2691, 2714, 2736, 2759, 2781, 2804, 2826, 2848]);
C.List_VSP = Isolate.makeConstantList([6430, 6400, 6400, 6400, 3225, 3225, 3225, 3225, 944, 944, 944, 944, 976, 976, 976, 976, 1456, 1456, 1456, 1456, 1488, 1488, 1488, 1488, 718, 718, 718, 718, 718, 718, 718, 718, 750, 750, 750, 750, 750, 750, 750, 750, 1520, 1520, 1520, 1520, 1552, 1552, 1552, 1552, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 654, 654, 654, 654, 654, 654, 654, 654, 1072, 1072, 1072, 1072, 1104, 1104, 1104, 1104, 1136, 1136, 1136, 1136, 1168, 1168, 1168, 1168, 1200, 1200, 1200, 1200, 1232, 1232, 1232, 1232, 622, 622, 622, 622, 622, 622, 622, 622, 1008, 1008, 1008, 1008, 1040, 1040, 1040, 1040, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 1712, 1712, 1712, 1712, 1744, 1744, 1744, 1744, 846, 846, 846, 846, 846, 846, 846, 846, 1264, 1264, 1264, 1264, 1296, 1296, 1296, 1296, 1328, 1328, 1328, 1328, 1360, 1360, 1360, 1360, 1392, 1392, 1392, 1392, 1424, 1424, 1424, 1424, 686, 686, 686, 686, 686, 686, 686, 686, 910, 910, 910, 910, 910, 910, 910, 910, 1968, 1968, 1968, 1968, 2000, 2000, 2000, 2000, 2032, 2032, 2032, 2032, 16, 16, 16, 16, 10257, 10257, 10257, 10257, 12305, 12305, 12305, 12305, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 878, 878, 878, 878, 878, 878, 878, 878, 1904, 1904, 1904, 1904, 1936, 1936, 1936, 1936, -18413, -18413, -16365, -16365, -14317, -14317, -10221, -10221, 590, 590, 590, 590, 590, 590, 590, 590, 782, 782, 782, 782, 782, 782, 782, 782, 1584, 1584, 1584, 1584, 1616, 1616, 1616, 1616, 1648, 1648, 1648, 1648, 1680, 1680, 1680, 1680, 814, 814, 814, 814, 814, 814, 814, 814, 1776, 1776, 1776, 1776, 1808, 1808, 1808, 1808, 1840, 1840, 1840, 1840, 1872, 1872, 1872, 1872, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, 14353, 14353, 14353, 14353, 16401, 16401, 16401, 16401, 22547, 22547, 24595, 24595, 20497, 20497, 20497, 20497, 18449, 18449, 18449, 18449, 26643, 26643, 28691, 28691, 30739, 30739, -32749, -32749, -30701, -30701, -28653, -28653, -26605, -26605, -24557, -24557, -22509, -22509, -20461, -20461, 8207, 8207, 8207, 8207, 8207, 8207, 8207, 8207, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232]);
C.List_VvJ = Isolate.makeConstantList([0, -128, 64, -64, 32, -96, 96, -32, 16, -112, 80, -48, 48, -80, 112, -16, 8, -120, 72, -56, 40, -88, 104, -24, 24, -104, 88, -40, 56, -72, 120, -8, 4, -124, 68, -60, 36, -92, 100, -28, 20, -108, 84, -44, 52, -76, 116, -12, 12, -116, 76, -52, 44, -84, 108, -20, 28, -100, 92, -36, 60, -68, 124, -4, 2, -126, 66, -62, 34, -94, 98, -30, 18, -110, 82, -46, 50, -78, 114, -14, 10, -118, 74, -54, 42, -86, 106, -22, 26, -102, 90, -38, 58, -70, 122, -6, 6, -122, 70, -58, 38, -90, 102, -26, 22, -106, 86, -42, 54, -74, 118, -10, 14, -114, 78, -50, 46, -82, 110, -18, 30, -98, 94, -34, 62, -66, 126, -2, 1, -127, 65, -63, 33, -95, 97, -31, 17, -111, 81, -47, 49, -79, 113, -15, 9, -119, 73, -55, 41, -87, 105, -23, 25, -103, 89, -39, 57, -71, 121, -7, 5, -123, 69, -59, 37, -91, 101, -27, 21, -107, 85, -43, 53, -75, 117, -11, 13, -115, 77, -51, 45, -83, 109, -19, 29, -99, 93, -35, 61, -67, 125, -3, 3, -125, 67, -61, 35, -93, 99, -29, 19, -109, 83, -45, 51, -77, 115, -13, 11, -117, 75, -53, 43, -85, 107, -21, 27, -101, 91, -37, 59, -69, 123, -5, 7, -121, 71, -57, 39, -89, 103, -25, 23, -105, 87, -41, 55, -73, 119, -9, 15, -113, 79, -49, 47, -81, 111, -17, 31, -97, 95, -33, 63, -65, 127, -1]);
C.List_X3d = Isolate.makeConstantList([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]);
C.List_X3d0 = Isolate.makeConstantList([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
C.List_Y3m = Isolate.makeConstantList([-0.0, 1, -1, 2, -2, 3, 4, 6, -3, 5, -4, -5, -6, 7, -7, 8, -8, -9]);
C.List_aXZ = Isolate.makeConstantList([1.0570490759328752, 1.05384669128513, 1.055049425814067, 1.0530407754701832, 1.0579930596460185, 1.057843949481237, 1.0583132387180239, 1.0579712943137616, 1.0561884233578465, 1.057139928542649, 1.0425795187752152, 0.326030843740561, -0.0019255628442412243, -0.0012959221137046478, -0.0014357356276938696, -0.0012963697250337886, -0.00192270811623739, 0.0012621152526221778, -0.0016095249003578276, -0.0013029983817879568, -0.0017666600873954916, -0.001232528114028005, 0.010316809673254932, 0.03128451264835436, 0.08877387988174648, 0.1387362174023654, 0.15535067531939065, 0.1487847717823703, 0.16624255403475907, 0.16997613960634927, 0.15769743995852967, 0.19069090525482305]);
C.List_cGl = Isolate.makeConstantList([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]);
C.List_cGl0 = Isolate.makeConstantList([0, 4, 8, 12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396]);
C.List_cGl1 = Isolate.makeConstantList([0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15]);
C.List_cQL = Isolate.makeConstantList([0.0026494153587602255, -0.005017501342973224, -0.012547236272489583, -0.009455496430838867, -0.012526086181600525, -0.007917069776043777, -0.007995573520417569, -0.009355943344446907, 0.0654686119829993, 0.3957287551763414, 0.7524402229988666, 0.9637647869021856, 0.9985443385516233, 0.9999297702528792, 0.9993908675114045, 0.999943722670714, 0.9993912181341867, 0.9991123731042448, 0.9601958487827158, 0.6318627933843244, 0.2579740102876347, 0.009401488852733564, -0.0030798345608649747, -0.0045230367033685034, -0.006893341038827404, -0.00903521955390154, -0.008591366716534021, -0.00836908691202894, -0.007868583233875431, -0.000008365757871108513, 0.005430122544281718, -0.0027745589759259194]);
C.List_chs = Isolate.makeConstantList([-3630, -3601, -3573, -3544, -3516, -3488, -3459, -3431, -3403, -3374, -3346, -3318, -3289, -3261, -3233, -3204, -3176, -3148, -3119, -3091, -3063, -3034, -3006, -2977, -2949, -2921, -2892, -2864, -2836, -2807, -2779, -2751, -2722, -2694, -2666, -2637, -2609, -2581, -2552, -2524, -2495, -2467, -2439, -2410, -2382, -2354, -2325, -2297, -2269, -2240, -2212, -2184, -2155, -2127, -2099, -2070, -2042, -2013, -1985, -1957, -1928, -1900, -1872, -1843, -1815, -1787, -1758, -1730, -1702, -1673, -1645, -1617, -1588, -1560, -1532, -1503, -1475, -1446, -1418, -1390, -1361, -1333, -1305, -1276, -1248, -1220, -1191, -1163, -1135, -1106, -1078, -1050, -1021, -993, -964, -936, -908, -879, -851, -823, -794, -766, -738, -709, -681, -653, -624, -596, -568, -539, -511, -482, -454, -426, -397, -369, -341, -312, -284, -256, -227, -199, -171, -142, -114, -86, -57, -29, 0, 28, 56, 85, 113, 141, 170, 198, 226, 255, 283, 311, 340, 368, 396, 425, 453, 481, 510, 538, 567, 595, 623, 652, 680, 708, 737, 765, 793, 822, 850, 878, 907, 935, 963, 992, 1020, 1049, 1077, 1105, 1134, 1162, 1190, 1219, 1247, 1275, 1304, 1332, 1360, 1389, 1417, 1445, 1474, 1502, 1531, 1559, 1587, 1616, 1644, 1672, 1701, 1729, 1757, 1786, 1814, 1842, 1871, 1899, 1927, 1956, 1984, 2012, 2041, 2069, 2098, 2126, 2154, 2183, 2211, 2239, 2268, 2296, 2324, 2353, 2381, 2409, 2438, 2466, 2494, 2523, 2551, 2580, 2608, 2636, 2665, 2693, 2721, 2750, 2778, 2806, 2835, 2863, 2891, 2920, 2948, 2976, 3005, 3033, 3062, 3090, 3118, 3147, 3175, 3203, 3232, 3260, 3288, 3317, 3345, 3373, 3402, 3430, 3458, 3487, 3515, 3544, 3572, 3600]);
C.List_cwh = Isolate.makeConstantList([298.7570554, 302.4004341, 306.1337728, 309.960445, 313.8839949, 317.9081487, 322.036826, 326.2741526, 330.6244747, 335.092373, 339.6826795, 344.4004944, 349.2512056, 354.2405086, 359.374429, 364.6593471, 370.1020239, 375.7096303, 381.4897785, 387.4505563, 393.6005651, 399.9489613, 406.5055016, 413.2805933, 420.2853492, 427.5316483, 435.0322035, 442.8006357, 450.8515564, 459.2006593, 467.8648226, 476.8622231, 486.2124627, 495.936712, 506.0578694, 516.6007417, 527.5922468, 539.0616435, 551.0407911, 563.5644455, 576.6705953, 590.4008476, 604.8008683, 619.92089, 635.8162974, 652.5483053, 670.1847459, 688.8009889, 708.4810171, 729.3186941, 751.4192606, 774.9011125, 799.8979226, 826.5611867, 855.0632966, 885.6012714]);
C.List_ec6 = Isolate.makeConstantList([0.02516838875551463, 0.03942743816942372, 0.006205957159642579, 0.007112085980742955, 0.0002176004464913943, 7.327183998429021e-12, -0.0216230662171817, 0.015670209409407512, 0.002801960318863622, 0.32494773799897647, 1.0164917292316602, 1.0329476657890369, 1.032158696299155, 1.0358667411948619, 1.015123547683494, 1.0338076690093119, 1.0371372378155013, 1.0361377027692558, 1.022982243255721, 0.9691032733565232, -0.005178592389987857, 0.001113126197106143, 0.006667550303301177, 0.0007402431568600196, 0.021591567633473925, 0.005148162005621723, 0.0014561928645728216, 0.00016414511045291513, -0.006463076496845329, 0.010250854718507939, 0.042387394733956134, 0.02125271692686162]);
C.List_eea = Isolate.makeConstantList([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);
C.List_fkS = Isolate.makeConstantList([-705, -700, -694, -689, -683, -678, -672, -667, -661, -656, -650, -645, -639, -634, -628, -623, -617, -612, -606, -601, -595, -590, -584, -579, -573, -568, -562, -557, -551, -546, -540, -535, -529, -524, -518, -513, -507, -502, -496, -491, -485, -480, -474, -469, -463, -458, -452, -447, -441, -435, -430, -424, -419, -413, -408, -402, -397, -391, -386, -380, -375, -369, -364, -358, -353, -347, -342, -336, -331, -325, -320, -314, -309, -303, -298, -292, -287, -281, -276, -270, -265, -259, -254, -248, -243, -237, -232, -226, -221, -215, -210, -204, -199, -193, -188, -182, -177, -171, -166, -160, -155, -149, -144, -138, -133, -127, -122, -116, -111, -105, -100, -94, -89, -83, -78, -72, -67, -61, -56, -50, -45, -39, -34, -28, -23, -17, -12, -6, 0, 5, 11, 16, 22, 27, 33, 38, 44, 49, 55, 60, 66, 71, 77, 82, 88, 93, 99, 104, 110, 115, 121, 126, 132, 137, 143, 148, 154, 159, 165, 170, 176, 181, 187, 192, 198, 203, 209, 214, 220, 225, 231, 236, 242, 247, 253, 258, 264, 269, 275, 280, 286, 291, 297, 302, 308, 313, 319, 324, 330, 335, 341, 346, 352, 357, 363, 368, 374, 379, 385, 390, 396, 401, 407, 412, 418, 423, 429, 434, 440, 446, 451, 457, 462, 468, 473, 479, 484, 490, 495, 501, 506, 512, 517, 523, 528, 534, 539, 545, 550, 556, 561, 567, 572, 578, 583, 589, 594, 600, 605, 611, 616, 622, 627, 633, 638, 644, 649, 655, 660, 666, 671, 677, 682, 688, 693, 699]);
C.List_i3t = Isolate.makeConstantList([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]);
C.List_iDZ = Isolate.makeConstantList([1.0618958571272863, 1.0615019980348779, 1.0614335379927147, 1.0622711654692485, 1.0622036218416742, 1.0625059965187085, 1.0623938486985884, 1.0624706448043137, 1.0625048144827762, 1.0624366131308856, 1.0620694238892607, 1.0613167586932164, 1.061033402937702, 1.0613868564828413, 1.0614215366116762, 1.0620336151299086, 1.062549745480505, 1.0624317487992085, 1.062524914055448, 1.0624277664486914, 1.062474985409077, 1.0625538581025402, 1.0625326910104864, 1.0623922312225325, 1.062365098035413, 1.0625256476715284, 1.0612277619533155, 1.0594262608698046, 1.0599810758292072, 1.0602547314449409, 1.0601263046243634, 1.0606565756823634]);
C.List_ild = Isolate.makeConstantList([1.0371892935878366, 1.0587542891035364, 1.0767271213688903, 1.0762706844110288, 1.0795289105258212, 1.0743644742950074, 1.0727028691194342, 1.0732447452056488, 1.0823760816041414, 1.0840545681409282, 0.9560756752630666, 0.5519789685506467, 0.08419109488724758, 0.000087940070557041, -0.002308640833507125, -0.0011248136628651192, -7.729761275498959e-11, -0.00027270769006770834, 0.014466473094035592, 0.2588311602716948, 0.5290799982756673, 0.9096662409710516, 1.0690571327307956, 1.0887326064796272, 1.0637622289511852, 1.020181291809426, 1.0262196688979945, 1.078308556061319, 0.9833384962321887, 1.070724634280262, 1.0634247770423768, 1.0150875475729566]);
C.List_int = Isolate.makeConstantList([-1463, -1452, -1440, -1429, -1417, -1406, -1394, -1383, -1372, -1360, -1349, -1337, -1326, -1315, -1303, -1292, -1280, -1269, -1257, -1246, -1235, -1223, -1212, -1200, -1189, -1177, -1166, -1155, -1143, -1132, -1120, -1109, -1097, -1086, -1075, -1063, -1052, -1040, -1029, -1017, -1006, -995, -983, -972, -960, -949, -937, -926, -915, -903, -892, -880, -869, -857, -846, -835, -823, -812, -800, -789, -777, -766, -755, -743, -732, -720, -709, -697, -686, -675, -663, -652, -640, -629, -618, -606, -595, -583, -572, -560, -549, -538, -526, -515, -503, -492, -480, -469, -458, -446, -435, -423, -412, -400, -389, -378, -366, -355, -343, -332, -320, -309, -298, -286, -275, -263, -252, -240, -229, -218, -206, -195, -183, -172, -160, -149, -138, -126, -115, -103, -92, -80, -69, -58, -46, -35, -23, -12, 0, 11, 22, 34, 45, 57, 68, 79, 91, 102, 114, 125, 137, 148, 159, 171, 182, 194, 205, 217, 228, 239, 251, 262, 274, 285, 297, 308, 319, 331, 342, 354, 365, 377, 388, 399, 411, 422, 434, 445, 457, 468, 479, 491, 502, 514, 525, 537, 548, 559, 571, 582, 594, 605, 617, 628, 639, 651, 662, 674, 685, 696, 708, 719, 731, 742, 754, 765, 776, 788, 799, 811, 822, 834, 845, 856, 868, 879, 891, 902, 914, 925, 936, 948, 959, 971, 982, 994, 1005, 1016, 1028, 1039, 1051, 1062, 1074, 1085, 1096, 1108, 1119, 1131, 1142, 1154, 1165, 1176, 1188, 1199, 1211, 1222, 1234, 1245, 1256, 1268, 1279, 1291, 1302, 1314, 1325, 1336, 1348, 1359, 1371, 1382, 1393, 1405, 1416, 1428, 1439, 1451]);
C.List_knt = Isolate.makeConstantList([0, 1, 3, 7, 15, 31, 63, 127, 255]);
C.List_knt0 = Isolate.makeConstantList([0, 128, 192, 224, 240, 248, 252, 254, 255]);
C.List_nLG = Isolate.makeConstantList([62, 62, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 588, 588, 588, 588, 588, 588, 588, 588, 1680, 1680, 20499, 22547, 24595, 26643, 1776, 1776, 1808, 1808, -24557, -22509, -20461, -18413, 1904, 1904, 1936, 1936, -16365, -14317, 782, 782, 782, 782, 814, 814, 814, 814, -12269, -10221, 10257, 10257, 12305, 12305, 14353, 14353, 16403, 18451, 1712, 1712, 1744, 1744, 28691, 30739, -32749, -30701, -28653, -26605, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 750, 750, 750, 750, 1616, 1616, 1648, 1648, 1424, 1424, 1456, 1456, 1488, 1488, 1520, 1520, 1840, 1840, 1872, 1872, 1968, 1968, 8209, 8209, 524, 524, 524, 524, 524, 524, 524, 524, 556, 556, 556, 556, 556, 556, 556, 556, 1552, 1552, 1584, 1584, 2000, 2000, 2032, 2032, 976, 976, 1008, 1008, 1040, 1040, 1072, 1072, 1296, 1296, 1328, 1328, 718, 718, 718, 718, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 4113, 4113, 6161, 6161, 848, 848, 880, 880, 912, 912, 944, 944, 622, 622, 622, 622, 654, 654, 654, 654, 1104, 1104, 1136, 1136, 1168, 1168, 1200, 1200, 1232, 1232, 1264, 1264, 686, 686, 686, 686, 1360, 1360, 1392, 1392, 12, 12, 12, 12, 12, 12, 12, 12, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390]);
C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
C.List_qNA = Isolate.makeConstantList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]);
C.List_qQn = Isolate.makeConstantList([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]);
C.List_qg4 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
C.List_s9c = Isolate.makeConstantList([0.000003917, 0.000004393581, 0.000004929604, 0.000005532136, 0.000006208245, 0.000006965, 0.000007813219, 0.000008767336, 0.000009839844, 0.00001104323, 0.00001239, 0.00001388641, 0.00001555728, 0.00001744296, 0.00001958375, 0.00002202, 0.00002483965, 0.00002804126, 0.00003153104, 0.00003521521, 0.000039, 0.0000428264, 0.0000469146, 0.0000515896, 0.0000571764, 0.000064, 0.00007234421, 0.00008221224, 0.00009350816, 0.0001061361, 0.00012, 0.000134984, 0.000151492, 0.000170208, 0.000191816, 0.000217, 0.0002469067, 0.00028124, 0.00031852, 0.0003572667, 0.000396, 0.0004337147, 0.000473024, 0.000517876, 0.0005722187, 0.00064, 0.00072456, 0.0008255, 0.00094116, 0.00106988, 0.00121, 0.001362091, 0.001530752, 0.001720368, 0.001935323, 0.00218, 0.0024548, 0.002764, 0.0031178, 0.0035264, 0.004, 0.00454624, 0.00515932, 0.00582928, 0.00654616, 0.0073, 0.008086507, 0.00890872, 0.00976768, 0.01066443, 0.0116, 0.01257317, 0.01358272, 0.01462968, 0.01571509, 0.01684, 0.01800736, 0.01921448, 0.02045392, 0.02171824, 0.023, 0.02429461, 0.02561024, 0.02695857, 0.02835125, 0.0298, 0.03131083, 0.03288368, 0.03452112, 0.03622571, 0.038, 0.03984667, 0.041768, 0.043766, 0.04584267, 0.048, 0.05024368, 0.05257304, 0.05498056, 0.05745872, 0.06, 0.06260197, 0.06527752, 0.06804208, 0.07091109, 0.0739, 0.077016, 0.0802664, 0.0836668, 0.0872328, 0.09098, 0.09491755, 0.09904584, 0.1033674, 0.1078846, 0.1126, 0.117532, 0.1226744, 0.1279928, 0.1334528, 0.13902, 0.1446764, 0.1504693, 0.1564619, 0.1627177, 0.1693, 0.1762431, 0.1835581, 0.1912735, 0.199418, 0.20802, 0.2171199, 0.2267345, 0.2368571, 0.2474812, 0.2586, 0.2701849, 0.2822939, 0.2950505, 0.308578, 0.323, 0.3384021, 0.3546858, 0.3716986, 0.3892875, 0.4073, 0.4256299, 0.4443096, 0.4633944, 0.4829395, 0.503, 0.5235693, 0.544512, 0.56569, 0.5869653, 0.6082, 0.6293456, 0.6503068, 0.6708752, 0.6908424, 0.71, 0.7281852, 0.7454636, 0.7619694, 0.7778368, 0.7932, 0.8081104, 0.8224962, 0.8363068, 0.8494916, 0.862, 0.8738108, 0.8849624, 0.8954936, 0.9054432, 0.9148501, 0.9237348, 0.9320924, 0.9399226, 0.9472252, 0.954, 0.9602561, 0.9660074, 0.9712606, 0.9760225, 0.9803, 0.9840924, 0.9874812, 0.9903128, 0.9928116, 0.9949501, 0.9967108, 0.9980983, 0.999112, 0.9997482, 1, 0.9998567, 0.9993046, 0.9983255, 0.9968987, 0.995, 0.9926005, 0.9897426, 0.9864444, 0.9827241, 0.9786, 0.9740837, 0.9691712, 0.9638568, 0.9581349, 0.952, 0.9454504, 0.9384992, 0.9311628, 0.9234576, 0.9154, 0.9070064, 0.8982772, 0.8892048, 0.8797816, 0.87, 0.8598613, 0.849392, 0.838622, 0.8275813, 0.8163, 0.8047947, 0.793082, 0.781192, 0.7691547, 0.757, 0.7447541, 0.7324224, 0.7200036, 0.7074965, 0.6949, 0.6822192, 0.6694716, 0.6566744, 0.6438448, 0.631, 0.6181555, 0.6053144, 0.5924756, 0.5796379, 0.5668, 0.5539611, 0.5411372, 0.5283528, 0.5156323, 0.503, 0.4904688, 0.4780304, 0.4656776, 0.4534032, 0.4412, 0.42908, 0.417036, 0.405032, 0.393032, 0.381, 0.3689184, 0.3568272, 0.3447768, 0.3328176, 0.321, 0.3093381, 0.2978504, 0.2865936, 0.2756245, 0.265, 0.2547632, 0.2448896, 0.2353344, 0.2260528, 0.217, 0.2081616, 0.1995488, 0.1911552, 0.1829744, 0.175, 0.1672235, 0.1596464, 0.1522776, 0.1451259, 0.1382, 0.1315003, 0.1250248, 0.1187792, 0.1127691, 0.107, 0.1014762, 0.09618864, 0.09112296, 0.08626485, 0.0816, 0.07712064, 0.07282552, 0.06871008, 0.06476976, 0.061, 0.05739621, 0.05395504, 0.05067376, 0.04754965, 0.04458, 0.04175872, 0.03908496, 0.03656384, 0.03420048, 0.032, 0.02996261, 0.02807664, 0.02632936, 0.02470805, 0.0232, 0.02180077, 0.02050112, 0.01928108, 0.01812069, 0.017, 0.01590379, 0.01483718, 0.01381068, 0.01283478, 0.01192, 0.01106831, 0.01027339, 0.009533311, 0.008846157, 0.00821, 0.007623781, 0.007085424, 0.006591476, 0.006138485, 0.005723, 0.005343059, 0.004995796, 0.004676404, 0.004380075, 0.004102, 0.003838453, 0.003589099, 0.003354219, 0.003134093, 0.002929, 0.002738139, 0.002559876, 0.002393244, 0.002237275, 0.002091, 0.001953587, 0.00182458, 0.00170358, 0.001590187, 0.001484, 0.001384496, 0.001291268, 0.001204092, 0.001122744, 0.001047, 0.0009765896, 0.0009111088, 0.0008501332, 0.0007932384, 0.00074, 0.0006900827, 0.00064331, 0.000599496, 0.0005584547, 0.00052, 0.0004839136, 0.0004500528, 0.0004183452, 0.0003887184, 0.0003611, 0.0003353835, 0.0003114404, 0.0002891656, 0.0002684539, 0.0002492, 0.0002313019, 0.0002146856, 0.0001992884, 0.0001850475, 0.0001719, 0.0001597781, 0.0001486044, 0.0001383016, 0.0001287925, 0.00012, 0.0001118595, 0.0001043224, 0.0000973356, 0.00009084587, 0.0000848, 0.00007914667, 0.000073858, 0.000068916, 0.00006430267, 0.00006, 0.00005598187, 0.0000522256, 0.0000487184, 0.00004544747, 0.0000424, 0.00003956104, 0.00003691512, 0.00003444868, 0.00003214816, 0.00003, 0.00002799125, 0.00002611356, 0.00002436024, 0.00002272461, 0.0000212, 0.00001977855, 0.00001845285, 0.00001721687, 0.00001606459, 0.00001499, 0.00001398728, 0.00001305155, 0.00001217818, 0.00001136254, 0.0000106, 0.000009885877, 0.000009217304, 0.000008592362, 0.000008009133, 0.0000074657, 0.000006959567, 0.000006487995, 0.000006048699, 0.000005639396, 0.0000052578, 0.000004901771, 0.00000456972, 0.000004260194, 0.000003971739, 0.0000037029, 0.000003452163, 0.000003218302, 0.0000030003, 0.000002797139, 0.0000026078, 0.00000243122, 0.000002266531, 0.000002113013, 0.000001969943, 0.0000018366, 0.00000171223, 0.000001596228, 0.00000148809, 0.000001387314, 0.0000012934, 0.00000120582, 0.000001124143, 0.000001048009, 9.770578e-7, 9.1093e-7, 8.492513e-7, 7.917212e-7, 7.380904e-7, 6.881098e-7, 6.4153e-7, 5.980895e-7, 5.575746e-7, 5.19808e-7, 4.846123e-7, 4.5181e-7]);
C.List_173_148_140 = Isolate.makeConstantList([173, 148, 140]);
C.List_176_155_140_135 = Isolate.makeConstantList([176, 155, 140, 135]);
C.List_yTu0 = Isolate.makeConstantList([180, 157, 141, 134, 130]);
C.List_2hT8 = Isolate.makeConstantList([254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129]);
C.List_sao = Isolate.makeConstantList([C.List_173_148_140, C.List_176_155_140_135, C.List_yTu0, C.List_2hT8]);
C.List_ssa = Isolate.makeConstantList([1.1565232050369776, 1.156722500011914, 1.1566203150243823, 1.1555782088080084, 1.15621755092157, 1.1567674012207332, 1.156802319480863, 1.156767744548552, 1.156356318295283, 1.1567054702510189, 1.1565134139372772, 1.1564336176499312, 1.1568023181530034, 1.1473147688514642, 1.1339317140561065, 1.1293876490671435, 1.1290515328639648, 1.0504864823782283, 1.0459696042230884, 0.9936668716859569, 0.9560166926539394, 0.924674820335118, 0.9149994470205176, 0.8993946765845346, 0.8954252075133111, 0.8887056669381475, 0.8822284381422811, 0.8799831137382668, 0.8763524461224458, 0.8800036833170911, 0.8806566542844112, 0.883047064602769]);
C.List_sty = Isolate.makeConstantList([U.VP8Filter_DC4$closure(), U.VP8Filter_TM4$closure(), U.VP8Filter_VE4$closure(), U.VP8Filter_HE4$closure(), U.VP8Filter_RD4$closure(), U.VP8Filter_VR4$closure(), U.VP8Filter_LD4$closure(), U.VP8Filter_VL4$closure(), U.VP8Filter_HD4$closure(), U.VP8Filter_HU4$closure()]);
C.List_uSC = Isolate.makeConstantList([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
C.List_uSC0 = Isolate.makeConstantList([17, 18, 0, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);
C.List_wQn = Isolate.makeConstantList([0.05471118715729184, 0.0556090664983034, 0.060755873790918236, 0.05623294861596237, 0.04616994053570868, 0.038012808167818095, 0.02442422575667034, 0.003898358058159218, -0.0005608225217273444, 0.0009649387125519465, 0.0003734119805151037, -0.000433673890931352, -0.00009353396225689203, -0.00012354967412842033, -0.0001452454808168746, -0.0002004769191554373, -0.0004993858769469367, 0.027255083540032476, 0.1606740590629706, 0.35069788873150953, 0.5735746553841896, 0.7639209189071895, 0.8914446674038152, 0.9639460990957489, 0.9887946427601628, 0.998974499662272, 0.9860514040356416, 0.995325028053452, 0.9743347837730537, 0.9913436461687141, 0.9886628777217475, 0.9971385608973553]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_wmc = Isolate.makeConstantList([127, 127, 191, 127, 159, 191, 223, 127, 143, 159, 175, 191, 207, 223, 239, 127, 135, 143, 151, 159, 167, 175, 183, 191, 199, 207, 215, 223, 231, 239, 247, 127, 131, 135, 139, 143, 147, 151, 155, 159, 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 223, 227, 231, 235, 239, 243, 247, 251, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 127]);
C.List_wsa = Isolate.makeConstantList([0.0001299, 0.000145847, 0.0001638021, 0.0001840037, 0.0002066902, 0.0002321, 0.000260728, 0.000293075, 0.000329388, 0.000369914, 0.0004149, 0.0004641587, 0.000518986, 0.000581854, 0.0006552347, 0.0007416, 0.0008450296, 0.0009645268, 0.001094949, 0.001231154, 0.001368, 0.00150205, 0.001642328, 0.001802382, 0.001995757, 0.002236, 0.002535385, 0.002892603, 0.003300829, 0.003753236, 0.004243, 0.004762389, 0.005330048, 0.005978712, 0.006741117, 0.00765, 0.008751373, 0.01002888, 0.0114217, 0.01286901, 0.01431, 0.01570443, 0.01714744, 0.01878122, 0.02074801, 0.02319, 0.02620736, 0.02978248, 0.03388092, 0.03846824, 0.04351, 0.0489956, 0.0550226, 0.0617188, 0.069212, 0.07763, 0.08695811, 0.09717672, 0.1084063, 0.1207672, 0.13438, 0.1493582, 0.1653957, 0.1819831, 0.198611, 0.21477, 0.2301868, 0.2448797, 0.2587773, 0.2718079, 0.2839, 0.2949438, 0.3048965, 0.3137873, 0.3216454, 0.3285, 0.3343513, 0.3392101, 0.3431213, 0.3461296, 0.34828, 0.3495999, 0.3501474, 0.350013, 0.349287, 0.34806, 0.3463733, 0.3442624, 0.3418088, 0.3390941, 0.3362, 0.3331977, 0.3300411, 0.3266357, 0.3228868, 0.3187, 0.3140251, 0.308884, 0.3032904, 0.2972579, 0.2908, 0.2839701, 0.2767214, 0.2689178, 0.2604227, 0.2511, 0.2408475, 0.2298512, 0.2184072, 0.2068115, 0.19536, 0.1842136, 0.1733273, 0.1626881, 0.1522833, 0.1421, 0.1321786, 0.1225696, 0.1132752, 0.1042979, 0.09564, 0.08729955, 0.07930804, 0.07171776, 0.06458099, 0.05795001, 0.05186211, 0.04628152, 0.04115088, 0.03641283, 0.03201, 0.0279172, 0.0241444, 0.020687, 0.0175404, 0.0147, 0.01216179, 0.00991996, 0.00796724, 0.006296346, 0.0049, 0.003777173, 0.00294532, 0.00242488, 0.002236293, 0.0024, 0.00292552, 0.00383656, 0.00517484, 0.00698208, 0.0093, 0.01214949, 0.01553588, 0.01947752, 0.02399277, 0.0291, 0.03481485, 0.04112016, 0.04798504, 0.05537861, 0.06327, 0.07163501, 0.08046224, 0.08973996, 0.09945645, 0.1096, 0.1201674, 0.1311145, 0.1423679, 0.1538542, 0.1655, 0.1772571, 0.18914, 0.2011694, 0.2133658, 0.2257499, 0.2383209, 0.2510668, 0.2639922, 0.2771017, 0.2904, 0.3038912, 0.3175726, 0.3314384, 0.3454828, 0.3597, 0.3740839, 0.3886396, 0.4033784, 0.4183115, 0.4334499, 0.4487953, 0.464336, 0.480064, 0.4959713, 0.5120501, 0.5282959, 0.5446916, 0.5612094, 0.5778215, 0.5945, 0.6112209, 0.6279758, 0.6447602, 0.6615697, 0.6784, 0.6952392, 0.7120586, 0.7288284, 0.7455188, 0.7621, 0.7785432, 0.7948256, 0.8109264, 0.8268248, 0.8425, 0.8579325, 0.8730816, 0.8878944, 0.9023181, 0.9163, 0.9297995, 0.9427984, 0.9552776, 0.9672179, 0.9786, 0.9893856, 0.9995488, 1.0090892, 1.0180064, 1.0263, 1.0339827, 1.040986, 1.047188, 1.0524667, 1.0567, 1.0597944, 1.0617992, 1.0628068, 1.0629096, 1.0622, 1.0607352, 1.0584436, 1.0552244, 1.0509768, 1.0456, 1.0390369, 1.0313608, 1.0226662, 1.0130477, 1.0026, 0.9913675, 0.9793314, 0.9664916, 0.9528479, 0.9384, 0.923194, 0.907244, 0.890502, 0.87292, 0.8544499, 0.835084, 0.814946, 0.794186, 0.772954, 0.7514, 0.7295836, 0.7075888, 0.6856022, 0.6638104, 0.6424, 0.6215149, 0.6011138, 0.5811052, 0.5613977, 0.5419, 0.5225995, 0.5035464, 0.4847436, 0.4661939, 0.4479, 0.4298613, 0.412098, 0.394644, 0.3775333, 0.3608, 0.3444563, 0.3285168, 0.3130192, 0.2980011, 0.2835, 0.2695448, 0.2561184, 0.2431896, 0.2307272, 0.2187, 0.2070971, 0.1959232, 0.1851708, 0.1748323, 0.1649, 0.1553667, 0.14623, 0.13749, 0.1291467, 0.1212, 0.1136397, 0.106465, 0.09969044, 0.09333061, 0.0874, 0.08190096, 0.07680428, 0.07207712, 0.06768664, 0.0636, 0.05980685, 0.05628216, 0.05297104, 0.04981861, 0.04677, 0.04378405, 0.04087536, 0.03807264, 0.03540461, 0.0329, 0.03056419, 0.02838056, 0.02634484, 0.02445275, 0.0227, 0.02108429, 0.01959988, 0.01823732, 0.01698717, 0.01584, 0.01479064, 0.01383132, 0.01294868, 0.0121292, 0.01135916, 0.01062935, 0.009938846, 0.009288422, 0.008678854, 0.008110916, 0.007582388, 0.007088746, 0.006627313, 0.006195408, 0.005790346, 0.005409826, 0.005052583, 0.004717512, 0.004403507, 0.004109457, 0.003833913, 0.003575748, 0.003334342, 0.003109075, 0.002899327, 0.002704348, 0.00252302, 0.002354168, 0.002196616, 0.00204919, 0.00191096, 0.001781438, 0.00166011, 0.001546459, 0.001439971, 0.001340042, 0.001246275, 0.001158471, 0.00107643, 0.0009999493, 0.0009287358, 0.0008624332, 0.0008007503, 0.000743396, 0.0006900786, 0.0006405156, 0.0005945021, 0.0005518646, 0.000512429, 0.0004760213, 0.0004424536, 0.0004115117, 0.0003829814, 0.0003566491, 0.0003323011, 0.0003097586, 0.0002888871, 0.0002695394, 0.0002515682, 0.0002348261, 0.000219171, 0.0002045258, 0.0001908405, 0.0001780654, 0.0001661505, 0.0001550236, 0.0001446219, 0.0001349098, 0.000125852, 0.000117413, 0.0001095515, 0.0001022245, 0.00009539445, 0.0000890239, 0.00008307527, 0.00007751269, 0.00007231304, 0.00006745778, 0.00006292844, 0.00005870652, 0.00005477028, 0.00005109918, 0.00004767654, 0.00004448567, 0.00004150994, 0.00003873324, 0.00003614203, 0.00003372352, 0.00003146487, 0.00002935326, 0.00002737573, 0.00002552433, 0.00002379376, 0.0000221787, 0.00002067383, 0.00001927226, 0.0000179664, 0.00001674991, 0.00001561648, 0.00001455977, 0.00001357387, 0.00001265436, 0.00001179723, 0.00001099844, 0.00001025398, 0.000009559646, 0.000008912044, 0.000008308358, 0.000007745769, 0.000007221456, 0.000006732475, 0.000006276423, 0.000005851304, 0.000005455118, 0.000005085868, 0.000004741466, 0.000004420236, 0.000004120783, 0.000003841716, 0.000003581652, 0.000003339127, 0.000003112949, 0.000002902121, 0.000002705645, 0.000002522525, 0.000002351726, 0.000002192415, 0.000002043902, 0.000001905497, 0.000001776509, 0.000001656215, 0.000001544022, 0.00000143944, 0.000001341977, 0.000001251141]);
C.List_wwi = Isolate.makeConstantList([1.662125, 1.687, 1.703313, 1.72, 1.744563, 1.77, 1.791625, 1.81, 1.822125, 1.834, 1.85175, 1.872, 1.89425, 1.916, 1.931688, 1.95, 1.972438, 2.015, 2.121562, 2.21, 2.177188, 2.13, 2.160063, 2.21, 2.249938, 2.289, 2.326, 2.362, 2.397625, 2.433, 2.469187, 2.504, 2.535875, 2.564, 2.589625, 2.605, 2.595562, 2.583, 2.5765, 2.599, 2.678062, 2.809, 3.01075, 3.24, 3.458187, 3.67, 3.863125, 4.05, 4.239563, 4.43, 4.619563, 4.817, 5.034125, 5.26, 5.485625, 5.717]);
C.List_yTu = Isolate.makeConstantList([280, 256, 256, 256, 40]);
C.List_yYQ = Isolate.makeConstantList([0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 0]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.List_2jN = Isolate.makeConstantList(["Apple", "Chicken1", "Chicken2", "Cream", "Ketchup", "Marble", "Potato", "Skimmilk", "Skin1", "Skin2", "Spectralon", "Wholemilk", "Lowfat Milk", "Reduced Milk", "Regular Milk", "Espresso", "Mint Mocha Coffee", "Lowfat Soy Milk", "Regular Soy Milk", "Lowfat Chocolate Milk", "Regular Chocolate Milk", "Coke", "Pepsi", "Sprite", "Gatorade", "Chardonnay", "White Zinfandel", "Merlot", "Budweiser Beer", "Coors Light Beer", "Clorox", "Apple Juice", "Cranberry Juice", "Grape Juice", "Ruby Grapefruit Juice", "White Grapefruit Juice", "Shampoo", "Strawberry Shampoo", "Head & Shoulders Shampoo", "Lemon Tea", "Orange Juice Powder", "Pink Lemonade", "Cappuccino Powder", "Salt Powder", "Sugar Powder", "Suisse Mocha", "Pacific Ocean Surface Water"]);
C.List_mUN = Isolate.makeConstantList([2.29, 2.39, 1.97]);
C.List_ww8 = Isolate.makeConstantList([0.003, 0.0034, 0.046]);
C.List_ezA = Isolate.makeConstantList([C.List_mUN, C.List_ww8]);
C.List_EfQ = Isolate.makeConstantList([0.15, 0.21, 0.38]);
C.List_NSV = Isolate.makeConstantList([0.015, 0.077, 0.19]);
C.List_scn = Isolate.makeConstantList([C.List_EfQ, C.List_NSV]);
C.List_ouf = Isolate.makeConstantList([0.19, 0.25, 0.32]);
C.List_aZ8 = Isolate.makeConstantList([0.018, 0.088, 0.2]);
C.List_SxQ = Isolate.makeConstantList([C.List_ouf, C.List_aZ8]);
C.List_7Vh = Isolate.makeConstantList([7.38, 5.47, 3.15]);
C.List_5Qz = Isolate.makeConstantList([0.0002, 0.0028, 0.0163]);
C.List_yT3 = Isolate.makeConstantList([C.List_7Vh, C.List_5Qz]);
C.List_O6H = Isolate.makeConstantList([0.18, 0.07, 0.03]);
C.List_Yf3 = Isolate.makeConstantList([0.061, 0.97, 1.45]);
C.List_omC = Isolate.makeConstantList([C.List_O6H, C.List_Yf3]);
C.List_QCc = Isolate.makeConstantList([2.19, 2.62, 3]);
C.List_05 = Isolate.makeConstantList([0.0021, 0.0041, 0.0071]);
C.List_woc = Isolate.makeConstantList([C.List_QCc, C.List_05]);
C.List_AWk = Isolate.makeConstantList([0.68, 0.7, 0.55]);
C.List_86y = Isolate.makeConstantList([0.0024, 0.009, 0.12]);
C.List_2ix = Isolate.makeConstantList([C.List_AWk, C.List_86y]);
C.List_FZX = Isolate.makeConstantList([0.7, 1.22, 1.9]);
C.List_ZfX = Isolate.makeConstantList([0.0014, 0.0025, 0.0142]);
C.List_Gb7 = Isolate.makeConstantList([C.List_FZX, C.List_ZfX]);
C.List_bzZ = Isolate.makeConstantList([0.74, 0.88, 1.01]);
C.List_ivu = Isolate.makeConstantList([0.032, 0.17, 0.48]);
C.List_n7e = Isolate.makeConstantList([C.List_bzZ, C.List_ivu]);
C.List_TnQ = Isolate.makeConstantList([1.09, 1.59, 1.79]);
C.List_evT = Isolate.makeConstantList([0.013, 0.07, 0.145]);
C.List_oiE = Isolate.makeConstantList([C.List_TnQ, C.List_evT]);
C.List_06 = Isolate.makeConstantList([11.6, 20.4, 14.9]);
C.List_0_0_0 = Isolate.makeConstantList([0, 0, 0]);
C.List_asd = Isolate.makeConstantList([C.List_06, C.List_0_0_0]);
C.List_gQW = Isolate.makeConstantList([2.55, 3.21, 3.77]);
C.List_4mj = Isolate.makeConstantList([0.0011, 0.0024, 0.014]);
C.List_yDQ = Isolate.makeConstantList([C.List_gQW, C.List_4mj]);
C.List_kqE = Isolate.makeConstantList([0.9126, 1.0748, 1.25]);
C.List_gA4 = Isolate.makeConstantList([0.0002, 0.0004, 0.0008]);
C.List_bkm = Isolate.makeConstantList([C.List_kqE, C.List_gA4]);
C.List_kRZ = Isolate.makeConstantList([1.075, 1.2213, 1.3941]);
C.List_pPg = Isolate.makeConstantList([0.0002, 0.0004, 0.001]);
C.List_O5U = Isolate.makeConstantList([C.List_kRZ, C.List_pPg]);
C.List_3MM = Isolate.makeConstantList([1.1874, 1.3296, 1.4602]);
C.List_Xdg = Isolate.makeConstantList([0.0001, 0.0003, 0.0013]);
C.List_c9P = Isolate.makeConstantList([C.List_3MM, C.List_Xdg]);
C.List_sIV = Isolate.makeConstantList([0.4376, 0.5115, 0.6048]);
C.List_kqs = Isolate.makeConstantList([0.1669, 0.2287, 0.3078]);
C.List_74F = Isolate.makeConstantList([C.List_sIV, C.List_kqs]);
C.List_wpv = Isolate.makeConstantList([0.19, 0.26, 0.35]);
C.List_RsV = Isolate.makeConstantList([0.0984, 0.1519, 0.204]);
C.List_uwZ = Isolate.makeConstantList([C.List_wpv, C.List_RsV]);
C.List_mRX = Isolate.makeConstantList([0.1419, 0.1625, 0.274]);
C.List_U4G = Isolate.makeConstantList([0.0001, 0.0005, 0.0025]);
C.List_G7t = Isolate.makeConstantList([C.List_mRX, C.List_U4G]);
C.List_Vjv = Isolate.makeConstantList([0.2434, 0.2719, 0.4597]);
C.List_EKW = Isolate.makeConstantList([0.0001, 0.0005, 0.0034]);
C.List_ECn = Isolate.makeConstantList([C.List_Vjv, C.List_EKW]);
C.List_cSk = Isolate.makeConstantList([0.4282, 0.5014, 0.5791]);
C.List_EYy = Isolate.makeConstantList([0.0005, 0.0016, 0.0068]);
C.List_mye = Isolate.makeConstantList([C.List_cSk, C.List_EYy]);
C.List_gam = Isolate.makeConstantList([0.7359, 0.9172, 1.0688]);
C.List_wSH = Isolate.makeConstantList([0.0007, 0.003, 0.01]);
C.List_zsT = Isolate.makeConstantList([C.List_gam, C.List_wSH]);
C.List_sEV = Isolate.makeConstantList([0.7143, 1.1688, 1.7169]);
C.List_xd9 = Isolate.makeConstantList([0.6966, 1.148, 1.7169]);
C.List_4CA = Isolate.makeConstantList([C.List_sEV, C.List_xd9]);
C.List_6pZ = Isolate.makeConstantList([0.6433, 0.999, 1.442]);
C.List_EO3 = Isolate.makeConstantList([0.6375, 0.9849, 1.442]);
C.List_BGa = Isolate.makeConstantList([C.List_6pZ, C.List_EO3]);
C.List_4QF0 = Isolate.makeConstantList([0.1299, 0.1283, 0.1395]);
C.List_E0K = Isolate.makeConstantList([0.123, 0.1194, 0.1306]);
C.List_nAy = Isolate.makeConstantList([C.List_4QF0, C.List_E0K]);
C.List_fHw = Isolate.makeConstantList([0.4009, 0.4185, 0.4324]);
C.List_7N7 = Isolate.makeConstantList([0.1617, 0.1258, 0.0579]);
C.List_vnT = Isolate.makeConstantList([C.List_fHw, C.List_7N7]);
C.List_6NN = Isolate.makeConstantList([0.1577, 0.1748, 0.3512]);
C.List_ahs = Isolate.makeConstantList([0.1547, 0.1701, 0.3443]);
C.List_We0 = Isolate.makeConstantList([C.List_6NN, C.List_ahs]);
C.List_n3g = Isolate.makeConstantList([0.1763, 0.237, 0.2913]);
C.List_SHK = Isolate.makeConstantList([0.1732, 0.2322, 0.2847]);
C.List_KlU = Isolate.makeConstantList([C.List_n3g, C.List_SHK]);
C.List_9GF = Isolate.makeConstantList([0.7639, 1.6429, 1.9196]);
C.List_omC0 = Isolate.makeConstantList([0.7586, 1.6429, 1.9196]);
C.List_JNA = Isolate.makeConstantList([C.List_9GF, C.List_omC0]);
C.List_AmO = Isolate.makeConstantList([0.1486, 0.321, 0.736]);
C.List_ESh = Isolate.makeConstantList([0.1449, 0.3141, 0.7286]);
C.List_hVR = Isolate.makeConstantList([C.List_AmO, C.List_ESh]);
C.List_8Ac = Isolate.makeConstantList([0.0295, 0.0663, 0.1521]);
C.List_cMb = Isolate.makeConstantList([0.0268, 0.0608, 0.1521]);
C.List_zpz = Isolate.makeConstantList([C.List_8Ac, C.List_cMb]);
C.List_ifn = Isolate.makeConstantList([0.16, 0.25, 0.33]);
C.List_9Bk = Isolate.makeConstantList([0.0175, 0.0777, 0.1372]);
C.List_PHN = Isolate.makeConstantList([C.List_ifn, C.List_9Bk]);
C.List_wEs = Isolate.makeConstantList([0.1215, 0.2101, 0.4407]);
C.List_b3I = Isolate.makeConstantList([0.1014, 0.1858, 0.4084]);
C.List_axY = Isolate.makeConstantList([C.List_wEs, C.List_b3I]);
C.List_luc = Isolate.makeConstantList([0.27, 0.63, 0.83]);
C.List_esx = Isolate.makeConstantList([0.2572, 0.6145, 0.8104]);
C.List_aOd = Isolate.makeConstantList([C.List_luc, C.List_esx]);
C.List_Ieh = Isolate.makeConstantList([0.55, 1.25, 1.53]);
C.List_4a0 = Isolate.makeConstantList([0.5428, 1.25, 1.53]);
C.List_8aB0 = Isolate.makeConstantList([C.List_Ieh, C.List_4a0]);
C.List_esZ = Isolate.makeConstantList([0.2513, 0.3517, 0.4305]);
C.List_8IC = Isolate.makeConstantList([0.0896, 0.1911, 0.2636]);
C.List_spY = Isolate.makeConstantList([C.List_esZ, C.List_8IC]);
C.List_KTZ = Isolate.makeConstantList([0.3609, 0.38, 0.5632]);
C.List_Vsy = Isolate.makeConstantList([0.0096, 0.0131, 0.0395]);
C.List_G3K = Isolate.makeConstantList([C.List_KTZ, C.List_Vsy]);
C.List_54c = Isolate.makeConstantList([0.0288, 0.071, 0.0952]);
C.List_WZ4 = Isolate.makeConstantList([0.0184, 0.0596, 0.0805]);
C.List_Iwp = Isolate.makeConstantList([C.List_54c, C.List_WZ4]);
C.List_k4X = Isolate.makeConstantList([0.0217, 0.0788, 0.1022]);
C.List_j00 = Isolate.makeConstantList([0.0189, 0.0756, 0.0989]);
C.List_CzM = Isolate.makeConstantList([C.List_k4X, C.List_j00]);
C.List_Nci = Isolate.makeConstantList([0.3674, 0.4527, 0.5211]);
C.List_46c = Isolate.makeConstantList([0.0883, 0.1637, 0.2125]);
C.List_GZB = Isolate.makeConstantList([C.List_Nci, C.List_46c]);
C.List_8IM = Isolate.makeConstantList([0.34, 0.58, 0.88]);
C.List_rCi = Isolate.makeConstantList([0.2602, 0.4902, 0.7727]);
C.List_Q92 = Isolate.makeConstantList([C.List_8IM, C.List_rCi]);
C.List_oKv = Isolate.makeConstantList([0.3377, 0.5573, 1.0122]);
C.List_aOh = Isolate.makeConstantList([0.1449, 0.3441, 0.7863]);
C.List_FQd = Isolate.makeConstantList([C.List_oKv, C.List_aOh]);
C.List_X3Z = Isolate.makeConstantList([0.24, 0.37, 0.45]);
C.List_Y6u = Isolate.makeConstantList([0.1165, 0.2366, 0.3195]);
C.List_mbx = Isolate.makeConstantList([C.List_X3Z, C.List_Y6u]);
C.List_GbU = Isolate.makeConstantList([0.2574, 0.3536, 0.484]);
C.List_qAw = Isolate.makeConstantList([0.192, 0.2654, 0.3272]);
C.List_Scp = Isolate.makeConstantList([C.List_GbU, C.List_qAw]);
C.List_k3D = Isolate.makeConstantList([0.76, 0.8685, 0.9363]);
C.List_c0h = Isolate.makeConstantList([0.5115, 0.5863, 0.6147]);
C.List_aFE = Isolate.makeConstantList([C.List_k3D, C.List_c0h]);
C.List_ATp = Isolate.makeConstantList([0.0795, 0.1759, 0.278]);
C.List_uUY = Isolate.makeConstantList([0.065, 0.1597, 0.2578]);
C.List_eig = Isolate.makeConstantList([C.List_ATp, C.List_uUY]);
C.List_L12 = Isolate.makeConstantList([0.5098, 0.6476, 0.7944]);
C.List_wwi0 = Isolate.makeConstantList([0.1875, 0.2893, 0.3796]);
C.List_BCk = Isolate.makeConstantList([C.List_L12, C.List_wwi0]);
C.List_mCd = Isolate.makeConstantList([3.3645, 3.3158, 3.2428]);
C.List_HCu = Isolate.makeConstantList([3.1845, 3.1324, 3.0147]);
C.List_Ec2 = Isolate.makeConstantList([C.List_mCd, C.List_HCu]);
C.Map_2j0 = new H.ConstantStringMap(47, {Apple: C.List_ezA, Chicken1: C.List_scn, Chicken2: C.List_SxQ, Cream: C.List_yT3, Ketchup: C.List_omC, Marble: C.List_woc, Potato: C.List_2ix, Skimmilk: C.List_Gb7, Skin1: C.List_n7e, Skin2: C.List_oiE, Spectralon: C.List_asd, Wholemilk: C.List_yDQ, "Lowfat Milk": C.List_bkm, "Reduced Milk": C.List_O5U, "Regular Milk": C.List_c9P, Espresso: C.List_74F, "Mint Mocha Coffee": C.List_uwZ, "Lowfat Soy Milk": C.List_G7t, "Regular Soy Milk": C.List_ECn, "Lowfat Chocolate Milk": C.List_mye, "Regular Chocolate Milk": C.List_zsT, Coke: C.List_4CA, Pepsi: C.List_BGa, Sprite: C.List_nAy, Gatorade: C.List_vnT, Chardonnay: C.List_We0, "White Zinfandel": C.List_KlU, Merlot: C.List_JNA, "Budweiser Beer": C.List_hVR, "Coors Light Beer": C.List_zpz, Clorox: C.List_PHN, "Apple Juice": C.List_axY, "Cranberry Juice": C.List_aOd, "Grape Juice": C.List_8aB0, "Ruby Grapefruit Juice": C.List_spY, "White Grapefruit Juice": C.List_G3K, Shampoo: C.List_Iwp, "Strawberry Shampoo": C.List_CzM, "Head & Shoulders Shampoo": C.List_GZB, "Lemon Tea": C.List_Q92, "Orange Juice Powder": C.List_FQd, "Pink Lemonade": C.List_mbx, "Cappuccino Powder": C.List_Scp, "Salt Powder": C.List_aFE, "Sugar Powder": C.List_eig, "Suisse Mocha": C.List_BCk, "Pacific Ocean Surface Water": C.List_Ec2}, C.List_2jN);
C.Map_Od2I8 = new H.GeneralConstantMap([315, "artist", 258, "bitsPerSample", 265, "cellLength", 264, "cellWidth", 320, "colorMap", 259, "compression", 306, "dateTime", 34665, "exifIFD", 338, "extraSamples", 266, "fillOrder", 289, "freeByteCounts", 288, "freeOffsets", 291, "grayResponseCurve", 290, "grayResponseUnit", 316, "hostComputer", 34675, "iccProfile", 270, "imageDescription", 257, "imageLength", 256, "imageWidth", 33723, "iptc", 271, "make", 281, "maxSampleValue", 280, "minSampleValue", 272, "model", 254, "newSubfileType", 274, "orientation", 262, "photometricInterpretation", 34377, "photoshop", 284, "planarConfiguration", 317, "predictor", 296, "resolutionUnit", 278, "rowsPerStrip", 277, "samplesPerPixel", 305, "software", 279, "stripByteCounts", 273, "stropOffsets", 255, "subfileType", 292, "t4Options", 293, "t6Options", 263, "thresholding", 322, "tileWidth", 323, "tileLength", 324, "tileOffsets", 325, "tileByteCounts", 700, "xmp", 282, "xResolution", 283, "yResolution", 529, "yCbCrCoefficients", 530, "yCbCrSubsampling", 531, "yCbCrPositioning"]);
C.Type_AHF = H.createRuntimeType('NativeTypedArray');
C.Type_EQs = H.createRuntimeType('GlobalEventHandlers');
C.Type_NlB = H.createRuntimeType('NativeTypedArrayOfDouble');
C.Type_QyU = H.createRuntimeType('WindowEventHandlers');
C.Type_wOW = H.createRuntimeType('NativeTypedArrayOfInt');
C.Utf8Codec_false = new P.Utf8Codec(false);
$.libraries_to_load = {};
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.Log = G.PrintLogger$closure();
$.MIPMap_weightLut = null;
$.Primitive__nextprimitiveId = 1;
$.ResourceManager_global = null;
$.Shape__nextShapeId = 1;
$.Spectrum_type = 0;
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.VP8Filter__tablesInitialized = false;
$.Half__toFloatUint32 = null;
$.Half__toFloatFloat32 = null;
$.Half__eLut = null;
$.scene = "scenes/cornell_path.pbrt";
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "_invLog2", "_invLog2", "get$_invLog2", function() {
  return 1 / Math.log(2);
});
Isolate.$lazy($, "G", "_Spectrum_G", "get$_Spectrum_G", function() {
  return G._Spectrum$();
});
Isolate.$lazy($, "_output", "SpectrumImage__output", "get$SpectrumImage__output", function() {
  var t1 = new G.RGBColor(new Float32Array(3));
  t1.Spectrum$samples$2(3, 0);
  return t1;
});
Isolate.$lazy($, "trackers", "Stats_trackers", "get$Stats_trackers", function() {
  return [];
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_nullFuture", "Future__nullFuture", "get$Future__nullFuture", function() {
  return P._Future$immediate(null, null);
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(0, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "abs0", "VP8Filter_abs0", "get$VP8Filter_abs0", function() {
  return new Uint8Array(511);
});
Isolate.$lazy($, "abs1", "VP8Filter_abs1", "get$VP8Filter_abs1", function() {
  return new Uint8Array(511);
});
Isolate.$lazy($, "sclip1", "VP8Filter_sclip1", "get$VP8Filter_sclip1", function() {
  return new Int8Array(2041);
});
Isolate.$lazy($, "sclip2", "VP8Filter_sclip2", "get$VP8Filter_sclip2", function() {
  return new Int8Array(225);
});
Isolate.$lazy($, "clip1", "VP8Filter_clip1", "get$VP8Filter_clip1", function() {
  return new Uint8Array(766);
});
Isolate.$lazy($, "PREDICTORS", "VP8LTransform_PREDICTORS", "get$VP8LTransform_PREDICTORS", function() {
  return [U.VP8LTransform__predictor0$closure(), U.VP8LTransform__predictor1$closure(), U.VP8LTransform__predictor2$closure(), U.VP8LTransform__predictor3$closure(), U.VP8LTransform__predictor4$closure(), U.VP8LTransform__predictor5$closure(), U.VP8LTransform__predictor6$closure(), U.VP8LTransform__predictor7$closure(), U.VP8LTransform__predictor8$closure(), U.VP8LTransform__predictor9$closure(), U.VP8LTransform__predictor10$closure(), U.VP8LTransform__predictor11$closure(), U.VP8LTransform__predictor12$closure(), U.VP8LTransform__predictor13$closure(), U.VP8LTransform__predictor0$closure(), U.VP8LTransform__predictor0$closure()];
});
Isolate.$lazy($, "__uint8", "__uint8", "get$__uint8", function() {
  return new Uint8Array(1);
});
Isolate.$lazy($, "__uint8ToInt8", "__uint8ToInt8", "get$__uint8ToInt8", function() {
  var t1 = $.get$__uint8().buffer;
  H._checkViewArguments(t1, 0, null);
  return new Int8Array(t1, 0);
});
Isolate.$lazy($, "__uint16", "__uint16", "get$__uint16", function() {
  return new Uint16Array(1);
});
Isolate.$lazy($, "__uint16ToInt16", "__uint16ToInt16", "get$__uint16ToInt16", function() {
  var t1 = $.get$__uint16().buffer;
  H._checkViewArguments(t1, 0, null);
  return new Int16Array(t1, 0);
});
Isolate.$lazy($, "__uint32", "__uint32", "get$__uint32", function() {
  return new Uint32Array(1);
});
Isolate.$lazy($, "__uint32ToInt32", "__uint32ToInt32", "get$__uint32ToInt32", function() {
  var t1 = $.get$__uint32().buffer;
  H._checkViewArguments(t1, 0, null);
  return new Int32Array(t1, 0);
});
Isolate.$lazy($, "__uint32ToFloat32", "__uint32ToFloat32", "get$__uint32ToFloat32", function() {
  return H.NativeFloat32List_NativeFloat32List$view($.get$__uint32().buffer, 0, null);
});
Isolate.$lazy($, "__int32", "__int32", "get$__int32", function() {
  return new Int32Array(1);
});
Isolate.$lazy($, "__int32ToUint32", "__int32ToUint32", "get$__int32ToUint32", function() {
  return H.NativeUint32List_NativeUint32List$view($.get$__int32().buffer, 0, null);
});
Isolate.$lazy($, "loadedRegularHalfangle", "MeasuredMaterial_loadedRegularHalfangle", "get$MeasuredMaterial_loadedRegularHalfangle", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "loadedThetaPhi", "MeasuredMaterial_loadedThetaPhi", "get$MeasuredMaterial_loadedThetaPhi", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_copperN", "MetalMaterial__copperN", "get$MetalMaterial__copperN", function() {
  return G.Spectrum_Spectrum(0).setSampled$2(C.List_cwh, C.List_AIB);
});
Isolate.$lazy($, "_copperK", "MetalMaterial__copperK", "get$MetalMaterial__copperK", function() {
  return G.Spectrum_Spectrum(0).setSampled$2(C.List_cwh, C.List_wwi);
});
Isolate.$lazy($, "_accelerators", "Pbrt__accelerators", "get$Pbrt__accelerators", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_cameras", "Pbrt__cameras", "get$Pbrt__cameras", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_films", "Pbrt__films", "get$Pbrt__films", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_filters", "Pbrt__filters", "get$Pbrt__filters", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_surfaceIntegrators", "Pbrt__surfaceIntegrators", "get$Pbrt__surfaceIntegrators", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_volumeIntegrators", "Pbrt__volumeIntegrators", "get$Pbrt__volumeIntegrators", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_lights", "Pbrt__lights", "get$Pbrt__lights", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_areaLights", "Pbrt__areaLights", "get$Pbrt__areaLights", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_materials", "Pbrt__materials", "get$Pbrt__materials", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_samplers", "Pbrt__samplers", "get$Pbrt__samplers", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_pixelSamplers", "Pbrt__pixelSamplers", "get$Pbrt__pixelSamplers", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_shapes", "Pbrt__shapes", "get$Pbrt__shapes", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_floatTextures", "Pbrt__floatTextures", "get$Pbrt__floatTextures", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_spectrumTextures", "Pbrt__spectrumTextures", "get$Pbrt__spectrumTextures", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "_volumeRegions", "Pbrt__volumeRegions", "get$Pbrt__volumeRegions", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
// Native classes

init.functionAliases = {};
;
init.metadata = [{func: "dynamic__String", args: [J.JSString]},
{func: "BruteForceAccel__List_ParamSet", ret: E.BruteForceAccel, args: [[J.JSArray, G.Primitive], G.ParamSet]},
{func: "BVHAccel__List_ParamSet", ret: E.BVHAccel, args: [[J.JSArray, G.Primitive], G.ParamSet]},
{func: "GridAccel__List_ParamSet", ret: E.GridAccel, args: [[J.JSArray, G.Primitive], G.ParamSet]},
{func: "KdTreeAccel__List_ParamSet", ret: E.KdTreeAccel, args: [[J.JSArray, G.Primitive], G.ParamSet]},
{func: "EnvironmentCamera__ParamSet_AnimatedTransform_Film", ret: K.EnvironmentCamera, args: [G.ParamSet, G.AnimatedTransform, G.Film]},
{func: "OrthographicCamera__ParamSet_AnimatedTransform_Film", ret: K.OrthographicCamera, args: [G.ParamSet, G.AnimatedTransform, G.Film]},
{func: "PerspectiveCamera__ParamSet_AnimatedTransform_Film", ret: K.PerspectiveCamera, args: [G.ParamSet, G.AnimatedTransform, G.Film]},
{func: "void__int_String", void: true, args: [J.JSInt, J.JSString]},
{func: "void_", void: true},
{func: "void__dynamic", void: true, args: [null]},
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
,
{func: "bool__dynamic_dynamic", ret: J.JSBool, args: [null, null]},
{func: "int__dynamic", ret: J.JSInt, args: [null]},
{func: "int__Comparable_Comparable", ret: J.JSInt, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: J.JSBool, args: [P.Object, P.Object]},
{func: "int__Object", ret: J.JSInt, args: [P.Object]},
{func: "bool__Element_String_String__Html5NodeValidator", ret: J.JSBool, args: [W.Element, J.JSString, J.JSString, W._Html5NodeValidator]},
{func: "ImageFilm__ParamSet_Filter__Image_PreviewCallback", ret: R.ImageFilm, args: [G.ParamSet, G.Filter], opt: [U.Image, {func: "dynamic__Image", args: [U.Image]}]},
{func: "BoxFilter__ParamSet", ret: S.BoxFilter, args: [G.ParamSet]},
{func: "GaussianFilter__ParamSet", ret: S.GaussianFilter, args: [G.ParamSet]},
{func: "LanczosSincFilter__ParamSet", ret: S.LanczosSincFilter, args: [G.ParamSet]},
{func: "MitchellFilter__ParamSet", ret: S.MitchellFilter, args: [G.ParamSet]},
{func: "TriangleFilter__ParamSet", ret: S.TriangleFilter, args: [G.ParamSet]},
{func: "void__InputBuffer", void: true, args: [U.InputBuffer]},
{func: "int__Uint32List_int_int", ret: J.JSInt, args: [P.Uint32List, J.JSInt, J.JSInt]},
{func: "void__int_int_int_int_int_Uint8List", void: true, args: [J.JSInt, J.JSInt, J.JSInt, J.JSInt, J.JSInt, P.Uint8List]},
{func: "DiffuseAreaLight__Transform_ParamSet_Shape", ret: O.DiffuseAreaLight, args: [G.Transform, G.ParamSet, G.Shape]},
{func: "DistantLight__Transform_ParamSet", ret: O.DistantLight, args: [G.Transform, G.ParamSet]},
{func: "GoniometricLight__Transform_ParamSet", ret: O.GoniometricLight, args: [G.Transform, G.ParamSet]},
{func: "InfiniteAreaLight__Transform_ParamSet", ret: O.InfiniteAreaLight, args: [G.Transform, G.ParamSet]},
{func: "PointLight__Transform_ParamSet", ret: O.PointLight, args: [G.Transform, G.ParamSet]},
{func: "ProjectionLight__Transform_ParamSet", ret: O.ProjectionLight, args: [G.Transform, G.ParamSet]},
{func: "SpotLight__Transform_ParamSet", ret: O.SpotLight, args: [G.Transform, G.ParamSet]},
{func: "GlassMaterial__Transform_TextureParams", ret: D.GlassMaterial, args: [G.Transform, G.TextureParams]},
{func: "KdSubsurfaceMaterial__Transform_TextureParams", ret: D.KdSubsurfaceMaterial, args: [G.Transform, G.TextureParams]},
{func: "MatteMaterial__Transform_TextureParams", ret: D.MatteMaterial, args: [G.Transform, G.TextureParams]},
{func: "MeasuredMaterial__Transform_TextureParams", ret: D.MeasuredMaterial, args: [G.Transform, G.TextureParams]},
{func: "MetalMaterial__Transform_TextureParams", ret: D.MetalMaterial, args: [G.Transform, G.TextureParams]},
{func: "MirrorMaterial__Transform_TextureParams", ret: D.MirrorMaterial, args: [G.Transform, G.TextureParams]},
{func: "PlasticMaterial__Transform_TextureParams", ret: D.PlasticMaterial, args: [G.Transform, G.TextureParams]},
{func: "ShinyMetalMaterial__Transform_TextureParams", ret: D.ShinyMetalMaterial, args: [G.Transform, G.TextureParams]},
{func: "SubstrateMaterial__Transform_TextureParams", ret: D.SubstrateMaterial, args: [G.Transform, G.TextureParams]},
{func: "SubsurfaceMaterial__Transform_TextureParams", ret: D.SubsurfaceMaterial, args: [G.Transform, G.TextureParams]},
{func: "TranslucentMaterial__Transform_TextureParams", ret: D.TranslucentMaterial, args: [G.Transform, G.TextureParams]},
{func: "UberMaterial__Transform_TextureParams", ret: D.UberMaterial, args: [G.Transform, G.TextureParams]},
{func: "LinearPixelSampler__ParamSet_Film", ret: F.LinearPixelSampler, args: [G.ParamSet, G.Film]},
{func: "RandomPixelSampler__ParamSet_Film", ret: F.RandomPixelSampler, args: [G.ParamSet, G.Film]},
{func: "TilePixelSampler__ParamSet_Film", ret: F.TilePixelSampler, args: [G.ParamSet, G.Film]},
{func: "AdaptiveSampler__ParamSet_Film_Camera_PixelSampler", ret: U.AdaptiveSampler, args: [G.ParamSet, G.Film, G.Camera, G.PixelSampler]},
{func: "BestCandidateSampler__ParamSet_Film_Camera_PixelSampler", ret: U.BestCandidateSampler, args: [G.ParamSet, G.Film, G.Camera, G.PixelSampler]},
{func: "HaltonSampler__ParamSet_Film_Camera_PixelSampler", ret: U.HaltonSampler, args: [G.ParamSet, G.Film, G.Camera, G.PixelSampler]},
{func: "LowDiscrepancySampler__ParamSet_Film_Camera_PixelSampler", ret: U.LowDiscrepancySampler, args: [G.ParamSet, G.Film, G.Camera, G.PixelSampler]},
{func: "RandomSampler__ParamSet_Film_Camera_PixelSampler", ret: U.RandomSampler, args: [G.ParamSet, G.Film, G.Camera, G.PixelSampler]},
{func: "StratifiedSampler__ParamSet_Film_Camera_PixelSampler", ret: U.StratifiedSampler, args: [G.ParamSet, G.Film, G.Camera, G.PixelSampler]},
{func: "Cone__Transform_Transform_bool_ParamSet", ret: M.Cone, args: [G.Transform, G.Transform, J.JSBool, G.ParamSet]},
{func: "Cylinder__Transform_Transform_bool_ParamSet", ret: M.Cylinder, args: [G.Transform, G.Transform, J.JSBool, G.ParamSet]},
{func: "Disk__Transform_Transform_bool_ParamSet", ret: M.Disk, args: [G.Transform, G.Transform, J.JSBool, G.ParamSet]},
{func: "Heightfield__Transform_Transform_bool_ParamSet", ret: M.Heightfield, args: [G.Transform, G.Transform, J.JSBool, G.ParamSet]},
{func: "Hyperboloid__Transform_Transform_bool_ParamSet", ret: M.Hyperboloid, args: [G.Transform, G.Transform, J.JSBool, G.ParamSet]},
{func: "LoopSubdivision__Transform_Transform_bool_ParamSet", ret: M.LoopSubdivision, args: [G.Transform, G.Transform, J.JSBool, G.ParamSet]},
{func: "Nurbs__Transform_Transform_bool_ParamSet", ret: M.Nurbs, args: [G.Transform, G.Transform, J.JSBool, G.ParamSet]},
{func: "Paraboloid__Transform_Transform_bool_ParamSet", ret: M.Paraboloid, args: [G.Transform, G.Transform, J.JSBool, G.ParamSet]},
{func: "Sphere__Transform_Transform_bool_ParamSet", ret: M.Sphere, args: [G.Transform, G.Transform, J.JSBool, G.ParamSet]},
{func: "TriangleMesh__Transform_Transform_bool_ParamSet__Map", ret: M.TriangleMesh, args: [G.Transform, G.Transform, J.JSBool, G.ParamSet], opt: [[P.Map, J.JSString, G.Texture]]},
{func: "AmbientOcclusionIntegrator__ParamSet", ret: U.AmbientOcclusionIntegrator, args: [G.ParamSet]},
{func: "DiffusePRTIntegrator__ParamSet", ret: U.DiffusePRTIntegrator, args: [G.ParamSet]},
{func: "DirectLightingIntegrator__ParamSet", ret: U.DirectLightingIntegrator, args: [G.ParamSet]},
{func: "GlossyPRTIntegrator__ParamSet", ret: U.GlossyPRTIntegrator, args: [G.ParamSet]},
{func: "IGIIntegrator__ParamSet", ret: U.IGIIntegrator, args: [G.ParamSet]},
{func: "IrradianceCacheIntegrator__ParamSet", ret: U.IrradianceCacheIntegrator, args: [G.ParamSet]},
{func: "PathIntegrator__ParamSet", ret: U.PathIntegrator, args: [G.ParamSet]},
{func: "PhotonMapIntegrator__ParamSet", ret: U.PhotonMapIntegrator, args: [G.ParamSet]},
{func: "WhittedIntegrator__ParamSet", ret: U.WhittedIntegrator, args: [G.ParamSet]},
{func: "BilerpTexture__Transform_TextureParams", ret: G.BilerpTexture, args: [G.Transform, G.TextureParams]},
{func: "Texture__Transform_TextureParams", ret: G.Texture, args: [G.Transform, G.TextureParams]},
{func: "DotsTexture__Transform_TextureParams", ret: G.DotsTexture, args: [G.Transform, G.TextureParams]},
{func: "FBmTexture__Transform_TextureParams", ret: G.FBmTexture, args: [G.Transform, G.TextureParams]},
{func: "ImageTexture__Transform_TextureParams", ret: G.ImageTexture, args: [G.Transform, G.TextureParams]},
{func: "MarbleTexture__Transform_TextureParams", ret: G.MarbleTexture, args: [G.Transform, G.TextureParams]},
{func: "MixTexture__Transform_TextureParams", ret: G.MixTexture, args: [G.Transform, G.TextureParams]},
{func: "ScaleTexture__Transform_TextureParams", ret: G.ScaleTexture, args: [G.Transform, G.TextureParams]},
{func: "UVTexture__Transform_TextureParams", ret: G.UVTexture, args: [G.Transform, G.TextureParams]},
{func: "WindyTexture__Transform_TextureParams", ret: G.WindyTexture, args: [G.Transform, G.TextureParams]},
{func: "WrinkledTexture__Transform_TextureParams", ret: G.WrinkledTexture, args: [G.Transform, G.TextureParams]},
{func: "EmissionIntegrator__ParamSet", ret: S.EmissionIntegrator, args: [G.ParamSet]},
{func: "SingleScatteringIntegrator__ParamSet", ret: S.SingleScatteringIntegrator, args: [G.ParamSet]},
{func: "ExponentialDensityRegion__Transform_ParamSet", ret: B.ExponentialDensityRegion, args: [G.Transform, G.ParamSet]},
{func: "HomogeneousVolumeRegion__Transform_ParamSet", ret: B.HomogeneousVolumeRegion, args: [G.Transform, G.ParamSet]},
{func: "VolumeGridDensity__Transform_ParamSet", ret: B.VolumeGridDensity, args: [G.Transform, G.ParamSet]},
{func: "args0"},
{func: "args1", args: [null]},
{func: "args2", args: [null, null]},
{func: "dynamic__dynamic_String", args: [null, J.JSString]},
{func: "bool___BVHPrimitiveInfo__BVHPrimitiveInfo", ret: J.JSBool, args: [E._BVHPrimitiveInfo, E._BVHPrimitiveInfo]},
{func: "bool___BVHPrimitiveInfo", ret: J.JSBool, args: [E._BVHPrimitiveInfo]},
{func: "int_", ret: J.JSInt},
{func: "args3", args: [null, null, null]},
{func: "double_", ret: J.JSDouble},
{func: "double__Point_Vector_Vector_double", ret: J.JSDouble, args: [G.Point, G.Vector, G.Vector, J.JSDouble]},
{func: "void__Object__StackTrace", void: true, args: [P.Object], opt: [P.StackTrace]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "bool_", ret: J.JSBool},
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "void__dynamic_StackTrace", void: true, args: [null, P.StackTrace]},
{func: "void__int_int", void: true, args: [J.JSInt, J.JSInt]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "String__int", ret: J.JSString, args: [J.JSInt]},
{func: "bool__int", ret: J.JSBool, args: [J.JSInt]},
{func: "int__int", ret: J.JSInt, args: [J.JSInt]},
{func: "int__dynamic_dynamic", ret: J.JSInt, args: [null, null]},
{func: "void__String", void: true, args: [J.JSString]},
{func: "int__int_int", ret: J.JSInt, args: [J.JSInt, J.JSInt]},
{func: "void__Node", void: true, args: [W.Node]},
{func: "dynamic__int", args: [J.JSInt]},
{func: "dynamic__int_dynamic", args: [J.JSInt, null]},
{func: "void__JpegComponent_List", void: true, args: [U.JpegComponent, J.JSArray]},
{func: "void__JpegComponent_dynamic", void: true, args: [U.JpegComponent, null]},
{func: "void__int", void: true, args: [J.JSInt]},
{func: "double__double_double", ret: J.JSDouble, args: [J.JSDouble, J.JSDouble]},
{func: "dynamic__SpectrumImage", args: [G.SpectrumImage]},
{func: "double__Point_Vector_Vector_dynamic", ret: J.JSDouble, args: [G.Point, G.Vector, G.Vector, null]},
{func: "dynamic__int_String", args: [J.JSInt, J.JSString]},
{func: "dynamic__Image", args: [U.Image]},
{func: "dynamic__OutputImage", args: [G.OutputImage]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner((function(a){H.startRootIsolate(K.main$closure(),a)}), []);
  } else {
    (function(a){H.startRootIsolate(K.main$closure(),a)})([]);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc["^"], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=web_dartray.dart.js.map
//@ sourceMappingURL=web_dartray.dart.js.map
