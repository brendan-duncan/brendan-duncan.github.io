// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
(function(reflectionData) {
  "use strict";
  function map(x) {
    x = {x: x};
    delete x.x;
    return x;
  }
  function processStatics(descriptor) {
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property))
        continue;
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods) {
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        }
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array) {
        addStubs(globalObject, element, property, true, descriptor, functions);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop))
            continue;
          firstChar = prop.substring(0, 1);
          if (prop === "static") {
            processStatics(init.statics[property] = element[prop]);
          } else if (firstChar === "+") {
            mangledNames[previousProp] = prop.substring(1);
            var flag = element[prop];
            if (flag > 0)
              element[previousProp].$reflectable = flag;
          } else if (firstChar === "@" && prop !== "@") {
            newDesc[prop.substring(1)]["@"] = element[prop];
          } else if (firstChar === "*") {
            newDesc[previousProp].$defaultValues = element[prop];
            var optionalMethods = newDesc.$methodsWithOptionalArguments;
            if (!optionalMethods) {
              newDesc.$methodsWithOptionalArguments = optionalMethods = {};
            }
            optionalMethods[prop] = previousProp;
          } else {
            var elem = element[prop];
            if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
              addStubs(newDesc, elem, prop, false, element, []);
            } else {
              newDesc[previousProp = prop] = elem;
            }
          }
        }
        $$[property] = [globalObject, newDesc];
        classes.push(property);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted)
        init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName)
        mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount)
        descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted ? function(x) {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
      return new cache(this, funcs[0], x, name);
    } : function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
      return new cache(this, funcs[0], null, name);
    };
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = typeof dart_precompiled == "function" ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  if (!init.interceptedNames)
    init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    "%": "MediaError|MediaKeyError|Navigator|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|SVGAnimatedTransformList|SVGPointList"
  },
  JSBool: {
    "^": "bool/Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Null/Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  JSArray: {
    "^": "List/Interceptor;",
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      return receiver.splice(index, 1)[0];
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = C.NativeUint8List_methods.get$iterator(collection); t1.moveNext$0();)
        this.add$1(receiver, t1._current);
    },
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, null);
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start == null)
        H.throwExpression(P.ArgumentError$(null));
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(P.ArgumentError$(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end == null)
        end = receiver.length;
      else {
        if (typeof end !== "number" || Math.floor(end) !== end)
          throw H.wrapException(P.ArgumentError$(end));
        if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      }
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
    },
    fillRange$3: function(receiver, start, end, fillValue) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("fill range"));
      H.IterableMixinWorkaround_fillRangeList(receiver, start, end, fillValue);
    },
    sort$1: function(receiver, compare) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.IterableMixinWorkaround_sortList(receiver, compare);
    },
    lastIndexOf$2: function(receiver, element, start) {
      return H.Lists_lastIndexOf(receiver, element, receiver.length - 1);
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = init;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    set$length: function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$(newLength));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isList: true,
    $isJSIndexable: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    static: {JSArray_JSArray$fixed: function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
        t1 = H.setRuntimeTypeInfo(new Array($length), [$E]);
        t1.fixed$length = init;
        return t1;
      }}
  },
  JSNumber: {
    "^": "num/Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    floor$0: function(receiver) {
      return this.toInt$0(Math.floor(receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (typeof lowerLimit !== "number")
        throw H.wrapException(P.ArgumentError$(lowerLimit));
      if (typeof upperLimit !== "number")
        throw H.wrapException(P.ArgumentError$(upperLimit));
      if (this.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(P.ArgumentError$(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toDouble$0: function(receiver) {
      return receiver;
    },
    toRadixString$1: function(receiver, radix) {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result;
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else {
        if (typeof other !== "number")
          H.throwExpression(P.ArgumentError$(other));
        return this.toInt$0(receiver / other);
      }
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    $shl: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver >>> other;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver & other) >>> 0;
    },
    $or: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver | other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "int/JSNumber;",
    $isdouble: true,
    $isnum: true,
    $isint: true
  },
  JSDouble: {
    "^": "double/JSNumber;",
    $isdouble: true,
    $isnum: true
  },
  JSString: {
    "^": "String/Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    get$codeUnits: function(receiver) {
      return new J._CodeUnits(receiver);
    },
    indexOf$2: function(receiver, pattern, start) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      return receiver.indexOf(pattern, start);
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2;
      start = receiver.length;
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isJSIndexable: true,
    $isString: true,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          if (index >= t1)
            H.throwExpression(P.RangeError$value(index));
          codeUnit = string.charCodeAt(index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, JSString__skipTrailingWhitespace: function(string, index) {
        var t1, index0, codeUnit;
        for (t1 = string.length; index > 0; index = index0) {
          index0 = index - 1;
          if (index0 >= t1)
            H.throwExpression(P.RangeError$value(index0));
          codeUnit = string.charCodeAt(index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }}
  },
  _CodeUnits: {
    "^": "UnmodifiableListBase;_string",
    get$length: function(_) {
      return this._string.length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, i) {
      var t1, t2;
      t1 = this._string;
      if (typeof i !== "number" || Math.floor(i) !== i)
        H.throwExpression(P.ArgumentError$(i));
      t2 = J.getInterceptor$n(i);
      if (t2.$lt(i, 0))
        H.throwExpression(P.RangeError$value(i));
      if (t2.$ge(i, t1.length))
        H.throwExpression(P.RangeError$value(i));
      return t1.charCodeAt(i);
    },
    $asUnmodifiableListBase: function() {
      return [J.JSInt];
    },
    $asListBase: function() {
      return [J.JSInt];
    },
    $asList: function() {
      return [J.JSInt];
    }
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, new Isolate(), t5, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, false);
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }

      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, new Isolate(), t4, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, false);
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "startPaused"), t1.$index(msg, "replyPort"));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  },
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  IsolateNatives_spawn: function(functionName, uri, args, message, isLight, isSpawnUri, startPaused) {
    var port, result, signalReply, t1, t2;
    if (C.JSString_methods.endsWith$1(uri, ".dart"))
      uri += ".js";
    port = P.ReceivePort_ReceivePort();
    result = port.get$first(port).then$1(new H.IsolateNatives_spawn_closure());
    signalReply = new H._NativeJsSendPort(port._rawPort, init.globalState.currentContext.id);
    if (init.globalState.supportsWorkers === true && !isLight)
      if (init.globalState.isWorker === true) {
        t1 = init.globalState.mainManager;
        t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "spawn-worker", "functionName", functionName, "args", args, "msg", message, "uri", uri, "isSpawnUri", isSpawnUri, "startPaused", startPaused, "replyPort", signalReply], null, null));
        t1.toString;
        self.postMessage(t2);
      } else
        H.IsolateNatives__spawnWorker(functionName, uri, args, message, isSpawnUri, startPaused, signalReply);
    else
      H.IsolateNatives__startNonWorker(functionName, uri, args, message, isSpawnUri, startPaused, signalReply);
    return result;
  },
  IsolateNatives__startNonWorker: function(functionName, uri, args, message, isSpawnUri, startPaused, replyPort) {
    throw H.wrapException(P.UnsupportedError$("Currently spawnUri is not supported without web workers."));
  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort.get$sendPort();
    t2 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", t1, t2, context.terminateCapability]);
    t1 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri);
    if (startPaused === true) {
      context.addPause$2(t2, t2);
      init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t1, "start isolate"));
    } else
      t1.call$0();
  },
  IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, startPaused, replyPort) {
    var worker, t1;
    if (uri == null)
      uri = $.get$IsolateNatives_thisScript();
    worker = new Worker(uri);
    worker.onmessage = function(f, a) {
      return function(e) {
        f(a, e);
      };
    }(H.IsolateNatives__processWorkerMessage, worker);
    t1 = init.globalState.nextManagerId++;
    $.get$IsolateNatives_workerIds().$indexSet(0, worker, t1);
    init.globalState.managers.$indexSet(0, t1, worker);
    worker.postMessage(H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "start", "id", t1, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "startPaused", startPaused, "functionName", functionName], null, null)));
  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "^": "Closure:94;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    }
  },
  startRootIsolate_closure0: {
    "^": "Closure:94;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    }
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t1);
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function(object) {
        };
      }
    }
  },
  _IsolateContext: {
    "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,isPaused<,delayedEvents,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(this.get$kill());
    },
    eval$1: function(code) {
      var old, result, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } finally {
        this._isExecutingEvent = false;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    handleControlMessage$1: function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "kill":
          this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
      }
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      for (t1 = this.ports, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2._current.__isolate_helper$_close$0();
      t1.clear$0(0);
      t1 = this.weakPorts;
      if (t1._collection$_length > 0) {
        t1._last = null;
        t1._first = null;
        t1._rest = null;
        t1._nums = null;
        t1._strings = null;
        t1._collection$_length = 0;
        t1._modifications = t1._modifications + 1 & 67108863;
      }
      init.globalState.isolates.remove$1(0, this.id);
      t1 = this.doneHandlers;
      if (t1 != null) {
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          J.send$1$x(t1._current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 11]
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure:11;responsePort_0",
    call$0: function() {
      J.send$1$x(this.responsePort_0, null);
    }
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:11;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.get$isPaused()) {
        t1.delayedEvents.push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:94;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }
  },
  IsolateNatives_spawn_closure: {
    "^": "Closure:95;",
    call$1: function(msg) {
      return msg;
    }
  },
  IsolateNatives__startNonWorker_closure: {
    "^": "Closure:94;functionName_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyPort_5",
    call$0: function() {
      H.IsolateNatives__startIsolate(init.globalFunctions[this.functionName_0](), this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyPort_5);
    }
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:11;topLevel_0,args_1,message_2,isSpawnUri_3",
    call$0: function() {
      var t1, t2, t3;
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (J.$eq(isolate.get$controlPort(), t3)) {
        isolate.handleControlMessage$1(t1.msg_0);
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:94;box_0,this_1,shouldSerialize_2",
    call$0: function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    }
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = this._workerId;
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = this._isolateId;
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    __isolate_helper$_close$0: function() {
      this._isClosed = true;
      this._handler = null;
    },
    close$0: function(_) {
      var t1, t2;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = this._id;
      t1.ports.remove$1(0, t2);
      t1.weakPorts.remove$1(0, t2);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    get$sendPort: function() {
      return new H._NativeJsSendPort(this, init.globalState.currentContext.id);
    },
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  ReceivePortImpl: {
    "^": "Stream;_rawPort,_controller",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    close$0: [function(_) {
      this._rawPort.close$0(0);
      this._controller.close$0(0);
    }, "call$0", "get$close", 0, 0, 11],
    ReceivePortImpl$fromRawReceivePort$1: function(_rawPort) {
      var t1 = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
      this._controller = t1;
      this._rawPort._handler = t1.get$add(t1);
    },
    $asStream: function() {
      return [null];
    }
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x._id];
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x._id);
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, i;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure:96;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, t1;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, list, t1);
      return ["list", t1, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, t1;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, map, t1);
      return ["map", t1, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:11;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:11;this_2,callback_3",
    call$0: function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash = this._id;
      if (typeof hash !== "number")
        return hash.$shr();
      hash = C.JSNumber_methods._shrOtherPositive$1(hash, 0) ^ C.JSNumber_methods._tdivFast$1(hash, 4294967296);
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this._id;
        t2 = other._id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 0],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1, maxCharCode, digitsPart, i, t2;
    handleError = H.Primitives__throwFormatException$closure();
    if (typeof source !== "string")
      H.throwExpression(P.ArgumentError$(source));
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (radix == null) {
      if (match != null) {
        t1 = match.length;
        if (2 >= t1)
          return H.ioore(match, 2);
        if (match[2] != null)
          return parseInt(source, 16);
        if (3 >= t1)
          return H.ioore(match, 3);
        if (match[3] != null)
          return parseInt(source, 10);
        return handleError.call$1(source);
      }
      radix = 10;
    } else {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
      if (match != null) {
        if (radix === 10) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] != null;
        } else
          t1 = false;
        if (t1)
          return parseInt(source, 10);
        if (!(radix < 10)) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] == null;
        } else
          t1 = true;
        if (t1) {
          maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
          if (1 >= match.length)
            return H.ioore(match, 1);
          digitsPart = match[1];
          t1 = J.getInterceptor$asx(digitsPart);
          i = 0;
          while (true) {
            t2 = t1.get$length(digitsPart);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            t1.codeUnitAt$1(digitsPart, 0);
            if (i >= digitsPart.length)
              H.throwExpression(P.RangeError$value(i));
            if (digitsPart.charCodeAt(i) > maxCharCode)
              return handleError.call$1(source);
            ++i;
          }
        }
      }
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, radix);
  },
  Primitives_parseDouble: function(source, handleError) {
    var result, trimmed;
    if (typeof source !== "string")
      H.throwExpression(P.ArgumentError$(source));
    handleError = H.Primitives__throwFormatException$closure();
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
      return handleError.call$1(source);
    result = parseFloat(source);
    if (isNaN(result)) {
      trimmed = J.trim$0$s(source);
      if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
        return result;
      return handleError.call$1(source);
    }
    return result;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_IX5(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_numMicroseconds: function() {
    if (typeof window != "undefined" && window !== null) {
      var performance = window.performance;
      if (performance != null && typeof performance.webkitNow == "function")
        return C.JSNumber_methods.toInt$0(Math.floor(1000 * performance.webkitNow()));
    }
    return 1000 * Date.now();
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [J.JSInt];
    for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(P.ArgumentError$(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i < 0)
        throw H.wrapException(P.ArgumentError$(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_stringFromCharCode: function(charCode) {
    var bits;
    if (typeof charCode !== "number")
      return H.iae(charCode);
    if (0 <= charCode) {
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSNumber_methods._shrOtherPositive$1(bits, 10)) >>> 0, (56320 | bits & 1023) >>> 0);
      }
    }
    throw H.wrapException(P.RangeError$range(charCode, 0, 1114111));
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else if (typeof dart_precompiled == "function") {
      t1 = function(a, b, c, d) {
        this.$initialize(a, b, c, d);
      };
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents += ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      buffer._contents += typeof str === "string" ? str : H.S(str);
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  checkSubtype: function(object, isField, checks, asField) {
    var $arguments, interceptor;
    if (object == null)
      return false;
    $arguments = H.getRuntimeTypeInfo(object);
    interceptor = J.getInterceptor(object);
    if (interceptor[isField] == null)
      return false;
    return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_IX5), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  },
  stringReplaceFirstUnchecked: function(receiver, from, to) {
    return receiver.replace(from, to.replace("$", "$$$$"));
  },
  ConstantMap: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !J.$eq(this.get$length(this), 0);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _throwUnmodifiable$0: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    $indexSet: function(_, key, val) {
      return this._throwUnmodifiable$0();
    },
    $isMap: true
  },
  ConstantStringMap: {
    "^": "ConstantMap;length>,_jsObject,__js_helper$_keys",
    length$0: function($receiver) {
      return this.length.call$0();
    },
    containsKey$1: function(key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[key];
    },
    forEach$1: function(_, f) {
      var keys, i, key;
      keys = this.__js_helper$_keys;
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        f.call$2(key, this._fetch$1(key));
      }
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new H._ConstantMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(this.__js_helper$_keys, new H.ConstantStringMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $isEfficientLength: true
  },
  ConstantStringMap_values_closure: {
    "^": "Closure:95;this_0",
    call$1: function(key) {
      return this.this_0._fetch$1(key);
    }
  },
  _ConstantMapKeyIterable: {
    "^": "IterableBase;__js_helper$_map",
    get$iterator: function(_) {
      return J.get$iterator$ax(this.__js_helper$_map.__js_helper$_keys);
    }
  },
  GeneralConstantMap: {
    "^": "ConstantMap;_jsData",
    _getMap$0: function() {
      if (!this.$map)
        this.$map = H.fillLiteralMap(this._jsData, P.LinkedHashMap_LinkedHashMap(null, null, null, H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)));
      return this.$map;
    },
    containsKey$1: function(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index: function(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1: function(_, f) {
      this._getMap$0().forEach$1(0, f);
    },
    get$keys: function() {
      return this._getMap$0().get$keys();
    },
    get$values: function(_) {
      var t1 = this._getMap$0();
      return t1.get$values(t1);
    },
    get$length: function(_) {
      var t1 = this._getMap$0();
      return t1.get$length(t1);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    }
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data>,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, requiredParameterCount, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        requiredParameterCount = requiredParametersInfo >> 1;
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParameterCount, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }

        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }

        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:95;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:94;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "^": "Closure:94;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "^": "Closure:94;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "^": "Closure:94;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "^": "Closure:94;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      t1 = H.Primitives_objectHashCode(this.__js_helper$_target);
      if (typeof receiverHashCode !== "number")
        return receiverHashCode.$xor();
      return (receiverHashCode ^ t1) >>> 0;
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  TypeImpl: {
    "^": "Object;_typeName,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName, unmangledName0;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName;
      unmangledName0 = init.mangledGlobalNames[unmangledName];
      unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true
  },
  initHooks_closure: {
    "^": "Closure:95;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "^": "Closure:97;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "^": "Closure:0;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  }
}],
["accelerators", "package:dartray/accelerators/accelerators.dart", , E, {
  "^": "",
  BruteForceAccel: {
    "^": "Aggregate;primitives,bounds@,primitiveId",
    worldBound$0: function() {
      return this.bounds;
    },
    canIntersect$0: function() {
      return true;
    },
    BruteForceAccel$1: function(p) {
      var t1, i, t2;
      $.Log.call$2(0, "Building Brute Force Acceleration Structures.");
      t1 = J.getInterceptor$asx(p);
      i = 0;
      while (true) {
        t2 = t1.get$length(p);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$index(p, i).fullyRefine$1(this.primitives);
        ++i;
      }
      for (i = 0; t1 = this.primitives, i < t1.length; ++i) {
        t2 = this.bounds;
        t1 = t1[i].worldBound$0();
        this.bounds = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t2.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(t2.pMax.data)))).union$1(t1);
      }
    },
    static: {BruteForceAccel_Create: [function(prims, ps) {
        return E.BruteForceAccel$(prims);
      }, "call$2", "BruteForceAccel_Create$closure", 4, 0, 1], BruteForceAccel$: function(p) {
        var t1, t2;
        t1 = G.BBox$(null, null);
        t2 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t2 + 1;
        t2 = new E.BruteForceAccel([], t1, t2);
        t2.BruteForceAccel$1(p);
        return t2;
      }}
  },
  BVHAccel: {
    "^": "Aggregate;maxPrimsInNode,splitMethod,primitives,nodes,primitiveId",
    worldBound$0: function() {
      var t1 = this.nodes;
      if (t1 != null) {
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = t1[0].get$bounds();
      } else
        t1 = G.BBox$(null, null);
      return t1;
    },
    canIntersect$0: function() {
      return true;
    },
    _accelerators$_recursiveBuild$5: function(buildData, start, end, totalNodes, orderedPrims) {
      var t1, node, bbox, t2, i, t3, nPrimitives, firstPrimOffset, primNum, centroidBounds, t4, dim, mid, t5, mid0, buckets, t6, b, b0, b1, cost, count0, j, j0, count1, minCost, minCost0, c2;
      t1 = {};
      totalNodes[0] = J.$add$ns(totalNodes[0], 1);
      node = new E._BVHBuildNode(G.BBox$(null, null), [null, null], null, null, null);
      bbox = G.BBox$(null, null);
      for (t2 = buildData.length, i = start; i < end; ++i) {
        if (i >= t2)
          return H.ioore(buildData, i);
        t3 = buildData[i].get$bounds();
        bbox = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(bbox.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(bbox.pMax.data)))).union$1(t3);
      }
      nPrimitives = end - start;
      if (nPrimitives === 1) {
        firstPrimOffset = orderedPrims.length;
        for (i = start; i < end; ++i) {
          if (i >= t2)
            return H.ioore(buildData, i);
          primNum = buildData[i].get$primitiveNumber();
          t1 = this.primitives;
          if (primNum >= t1.length)
            return H.ioore(t1, primNum);
          orderedPrims.push(t1[primNum]);
        }
        node.firstPrimOffset = firstPrimOffset;
        node.nPrimitives = nPrimitives;
        node.bounds.copy$1(bbox);
      } else {
        centroidBounds = G.BBox$(null, null);
        t1.centroidBounds_0 = centroidBounds;
        for (t3 = centroidBounds, i = start; i < end; ++i, t3 = centroidBounds) {
          if (i >= t2)
            return H.ioore(buildData, i);
          t4 = buildData[i].get$centroid();
          centroidBounds = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t3.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(t3.pMax.data)))).unionPoint$1(t4);
          t1.centroidBounds_0 = centroidBounds;
        }
        dim = t3.maximumExtent$0();
        mid = C.JSInt_methods._tdivFast$1(start + end, 2);
        t3 = t1.centroidBounds_0;
        t4 = t3.pMax.data;
        if (dim >= t4.length)
          return H.ioore(t4, dim);
        t4 = t4[dim];
        t3 = t3.pMin.data;
        if (dim >= t3.length)
          return H.ioore(t3, dim);
        t3 = t3[dim];
        if (t4 === t3) {
          firstPrimOffset = orderedPrims.length;
          for (i = start; i < end; ++i) {
            if (i >= t2)
              return H.ioore(buildData, i);
            primNum = buildData[i].get$primitiveNumber();
            t1 = this.primitives;
            if (primNum >= t1.length)
              return H.ioore(t1, primNum);
            orderedPrims.push(t1[primNum]);
          }
          node.firstPrimOffset = firstPrimOffset;
          node.nPrimitives = nPrimitives;
          node.bounds.copy$1(bbox);
          return node;
        }
        t5 = new E.BVHAccel__recursiveBuild_ComparePoints(dim);
        switch (this.splitMethod) {
          case 0:
            mid0 = G.partition(buildData, new E.BVHAccel__recursiveBuild_CompareToMid(dim, 0.5 * (t3 + t4)), start, end);
            if (mid0 !== start && mid0 !== end) {
              mid = mid0;
              break;
            }
            G.nth_element(buildData, start, mid, end, t5);
            break;
          case 1:
            G.nth_element(buildData, start, mid, end, t5);
            break;
          case 2:
            if (nPrimitives <= 4)
              G.nth_element(buildData, start, mid, end, t5);
            else {
              buckets = H.setRuntimeTypeInfo(Array(12), [E._BVHBucketInfo]);
              for (t3 = buckets.length, i = 0; i < 12; ++i) {
                t4 = G.BBox$(null, null);
                if (i >= t3)
                  return H.ioore(buckets, i);
                buckets[i] = new E._BVHBucketInfo(0, t4);
              }
              for (i = start; i < end; ++i) {
                if (i >= t2)
                  return H.ioore(buildData, i);
                t4 = buildData[i].get$centroid().data;
                if (dim >= t4.length)
                  return H.ioore(t4, dim);
                t4 = t4[dim];
                t5 = t1.centroidBounds_0;
                t6 = t5.pMin.data;
                if (dim >= t6.length)
                  return H.ioore(t6, dim);
                t6 = t6[dim];
                t5 = t5.pMax.data;
                if (dim >= t5.length)
                  return H.ioore(t5, dim);
                b = C.JSNumber_methods.toInt$0(12 * ((t4 - t6) / (t5[dim] - t6)));
                if (b === 12)
                  b = 11;
                if (b < 0 || b >= t3)
                  return H.ioore(buckets, b);
                t4 = buckets[b];
                t4.set$count(J.$add$ns(t4.get$count(), 1));
                t4 = buckets[b];
                t5 = t4.get$bounds();
                t6 = buildData[i].get$bounds();
                t4.set$bounds(new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t5.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(t5.pMax.data)))).union$1(t6));
              }
              b0 = G.BBox$(null, null);
              b1 = G.BBox$(null, null);
              cost = new Float32Array(11);
              for (i = 0; i < 11; i = j) {
                b0.reset$0(0);
                b1.reset$0(0);
                for (count0 = 0, j = 0; j <= i; ++j) {
                  if (j >= t3)
                    return H.ioore(buckets, j);
                  t4 = buckets[j].get$bounds();
                  b0 = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(b0.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(b0.pMax.data)))).union$1(t4);
                  t4 = buckets[j].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count0 += t4;
                }
                for (j = i + 1, j0 = j, count1 = 0; j0 < 12; ++j0) {
                  if (j0 >= t3)
                    return H.ioore(buckets, j0);
                  t4 = buckets[j0].get$bounds();
                  b1 = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(b1.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(b1.pMax.data)))).union$1(t4);
                  t4 = buckets[j0].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count1 += t4;
                }
                cost[i] = 0.125 + (count0 * b0.surfaceArea$0() + count1 * b1.surfaceArea$0()) / bbox.surfaceArea$0();
              }
              minCost = cost[0];
              t1.minCostSplit_1 = 0;
              for (i = 1; i < 11; ++i) {
                minCost0 = cost[i];
                if (minCost0 < minCost) {
                  t1.minCostSplit_1 = i;
                  minCost = minCost0;
                }
              }
              if (nPrimitives > this.maxPrimsInNode || minCost < nPrimitives)
                mid = G.partition(buildData, new E.BVHAccel__recursiveBuild_CompareToBucket(t1, dim, 12), start, end);
              else {
                firstPrimOffset = orderedPrims.length;
                for (i = start; i < end; ++i) {
                  if (i >= t2)
                    return H.ioore(buildData, i);
                  primNum = buildData[i].get$primitiveNumber();
                  t1 = this.primitives;
                  if (primNum >= t1.length)
                    return H.ioore(t1, primNum);
                  orderedPrims.push(t1[primNum]);
                }
                node.firstPrimOffset = firstPrimOffset;
                node.nPrimitives = nPrimitives;
                node.bounds.copy$1(bbox);
                return node;
              }
            }
            break;
          default:
            if (nPrimitives <= 4)
              G.nth_element(buildData, start, mid, end, t5);
            else {
              buckets = H.setRuntimeTypeInfo(Array(12), [E._BVHBucketInfo]);
              for (t3 = buckets.length, i = 0; i < 12; ++i) {
                t4 = G.BBox$(null, null);
                if (i >= t3)
                  return H.ioore(buckets, i);
                buckets[i] = new E._BVHBucketInfo(0, t4);
              }
              for (i = start; i < end; ++i) {
                if (i >= t2)
                  return H.ioore(buildData, i);
                t4 = buildData[i].get$centroid().data;
                if (dim >= t4.length)
                  return H.ioore(t4, dim);
                t4 = t4[dim];
                t5 = t1.centroidBounds_0;
                t6 = t5.pMin.data;
                if (dim >= t6.length)
                  return H.ioore(t6, dim);
                t6 = t6[dim];
                t5 = t5.pMax.data;
                if (dim >= t5.length)
                  return H.ioore(t5, dim);
                b = C.JSNumber_methods.toInt$0(12 * ((t4 - t6) / (t5[dim] - t6)));
                if (b === 12)
                  b = 11;
                if (b < 0 || b >= t3)
                  return H.ioore(buckets, b);
                t4 = buckets[b];
                t4.set$count(J.$add$ns(t4.get$count(), 1));
                t4 = buckets[b];
                t5 = t4.get$bounds();
                t6 = buildData[i].get$bounds();
                t4.set$bounds(new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t5.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(t5.pMax.data)))).union$1(t6));
              }
              b0 = G.BBox$(null, null);
              b1 = G.BBox$(null, null);
              cost = new Float32Array(11);
              for (i = 0; i < 11; i = j) {
                b0.reset$0(0);
                b1.reset$0(0);
                for (count0 = 0, j = 0; j <= i; ++j) {
                  if (j >= t3)
                    return H.ioore(buckets, j);
                  t4 = buckets[j].get$bounds();
                  b0 = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(b0.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(b0.pMax.data)))).union$1(t4);
                  t4 = buckets[j].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count0 += t4;
                }
                for (j = i + 1, j0 = j, count1 = 0; j0 < 12; ++j0) {
                  if (j0 >= t3)
                    return H.ioore(buckets, j0);
                  t4 = buckets[j0].get$bounds();
                  b1 = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(b1.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(b1.pMax.data)))).union$1(t4);
                  t4 = buckets[j0].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count1 += t4;
                }
                cost[i] = 0.125 + (count0 * b0.surfaceArea$0() + count1 * b1.surfaceArea$0()) / bbox.surfaceArea$0();
              }
              minCost = cost[0];
              t1.minCostSplit_1 = 0;
              for (i = 1; i < 11; ++i) {
                minCost0 = cost[i];
                if (minCost0 < minCost) {
                  t1.minCostSplit_1 = i;
                  minCost = minCost0;
                }
              }
              if (nPrimitives > this.maxPrimsInNode || minCost < nPrimitives)
                mid = G.partition(buildData, new E.BVHAccel__recursiveBuild_CompareToBucket(t1, dim, 12), start, end);
              else {
                firstPrimOffset = orderedPrims.length;
                for (i = start; i < end; ++i) {
                  if (i >= t2)
                    return H.ioore(buildData, i);
                  primNum = buildData[i].get$primitiveNumber();
                  t1 = this.primitives;
                  if (primNum >= t1.length)
                    return H.ioore(t1, primNum);
                  orderedPrims.push(t1[primNum]);
                }
                node.firstPrimOffset = firstPrimOffset;
                node.nPrimitives = nPrimitives;
                node.bounds.copy$1(bbox);
                return node;
              }
            }
            break;
        }
        c2 = this._accelerators$_recursiveBuild$5(buildData, mid, end, totalNodes, orderedPrims);
        node.initInterior$3(dim, this._accelerators$_recursiveBuild$5(buildData, start, mid, totalNodes, orderedPrims), c2);
      }
      return node;
    },
    _flattenBVHTree$2: function(node, offset) {
      var t1, t2, linearNode;
      t1 = this.nodes;
      t2 = offset[0];
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      linearNode = t1[t2];
      linearNode.set$bounds(node.get$bounds());
      offset[0] = t2 + 1;
      t1 = node.get$nPrimitives();
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        J.set$offset$x(linearNode, node.get$firstPrimOffset());
        linearNode.set$nPrimitives(node.nPrimitives);
      } else {
        linearNode.set$axis(node.get$splitAxis());
        linearNode.set$nPrimitives(0);
        this._flattenBVHTree$2(node.get$children(node)[0], offset);
        linearNode.offset = this._flattenBVHTree$2(node.children[1], offset);
      }
      return t2;
    },
    BVHAccel$3: function(p, maxPrims, splitMethod) {
      var t1, i, t2, buildData, t3, bbox, totalNodes, orderedPrims, root, len;
      $.Log.call$2(0, "Building BVH Acceleration Structures.");
      this.maxPrimsInNode = P.min(255, maxPrims);
      t1 = J.getInterceptor$asx(p);
      i = 0;
      while (true) {
        t2 = t1.get$length(p);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$index(p, i).fullyRefine$1(this.primitives);
        ++i;
      }
      t1 = "BVH: " + this.primitives.length + " Primitives";
      $.Log.call$2(0, t1);
      t1 = this.primitives.length;
      if (t1 === 0) {
        this.nodes = null;
        return;
      }
      buildData = H.setRuntimeTypeInfo(Array(t1), [E._BVHPrimitiveInfo]);
      for (t1 = buildData.length, i = 0; t2 = this.primitives, t3 = t2.length, i < t3; ++i) {
        bbox = t2[i].worldBound$0();
        t2 = new E._BVHPrimitiveInfo(i, null, bbox);
        if (bbox == null) {
          t3 = G.BBox$(null, null);
          t2.bounds = t3;
        } else
          t3 = bbox;
        t2.centroid = t3.get$center();
        if (i >= t1)
          return H.ioore(buildData, i);
        buildData[i] = t2;
      }
      totalNodes = [0];
      orderedPrims = [];
      root = this._accelerators$_recursiveBuild$5(buildData, 0, t3, totalNodes, orderedPrims);
      this.primitives = orderedPrims;
      t1 = "BVH created with " + H.S(totalNodes[0]) + " nodes for " + this.primitives.length + " primitives";
      $.Log.call$2(0, t1);
      t1 = totalNodes[0];
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = H.setRuntimeTypeInfo(Array(t1), [E._LinearBVHNode]);
      this.nodes = t1;
      len = totalNodes[0];
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = new E._LinearBVHNode(null, null, null, null);
      }
      this._flattenBVHTree$2(root, [0]);
    },
    static: {"^": "BVHAccel_SPLIT_MIDDLE,BVHAccel_SPLIT_EQUAL_COUNTS,BVHAccel_SPLIT_SAH", BVHAccel$: function(p, maxPrims, splitMethod) {
        var t1 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t1 + 1;
        t1 = new E.BVHAccel(null, splitMethod, [], null, t1);
        t1.BVHAccel$3(p, maxPrims, splitMethod);
        return t1;
      }, BVHAccel_Create: [function(prims, ps) {
        var splitMethod, maxPrimsInNode, t1, sm;
        splitMethod = ps.findOneString$2("splitmethod", "sah");
        maxPrimsInNode = ps.findOneInt$2("maxnodeprims", 4);
        t1 = J.getInterceptor(splitMethod);
        if (t1.$eq(splitMethod, "sah"))
          sm = 2;
        else if (t1.$eq(splitMethod, "middle"))
          sm = 0;
        else {
          t1 = t1.$eq(splitMethod, "equal") ? 1 : 2;
          sm = t1;
        }
        return E.BVHAccel$(prims, maxPrimsInNode, sm);
      }, "call$2", "BVHAccel_Create$closure", 4, 0, 2]}
  },
  BVHAccel__recursiveBuild_ComparePoints: {
    "^": "Closure:98;dim_1",
    call$2: function(a, b) {
      var t1, t2, t3;
      t1 = this.dim_1;
      t2 = a.get$centroid().data;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      t2 = t2[t1];
      t3 = b.get$centroid().data;
      if (t1 >= t3.length)
        return H.ioore(t3, t1);
      return t2 < t3[t1];
    }
  },
  BVHAccel__recursiveBuild_CompareToMid: {
    "^": "Closure:99;dim_2,pmid_3",
    call$1: function(a) {
      var t1, t2;
      t1 = this.dim_2;
      t2 = a.get$centroid().data;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1] < this.pmid_3;
    }
  },
  BVHAccel__recursiveBuild_CompareToBucket: {
    "^": "Closure:99;box_0,dim_4,nBuckets_5",
    call$1: function(p) {
      var t1, t2, t3, t4, t5, t6, b;
      t1 = this.nBuckets_5;
      t2 = this.dim_4;
      t3 = p.get$centroid().data;
      if (t2 >= t3.length)
        return H.ioore(t3, t2);
      t3 = t3[t2];
      t4 = this.box_0;
      t5 = t4.centroidBounds_0;
      t6 = t5.pMin.data;
      if (t2 >= t6.length)
        return H.ioore(t6, t2);
      t6 = t6[t2];
      t5 = t5.pMax.data;
      if (t2 >= t5.length)
        return H.ioore(t5, t2);
      b = C.JSNumber_methods.toInt$0(Math.floor(t1 * ((t3 - t6) / (t5[t2] - t6))));
      if (b === t1)
        b = t1 - 1;
      return b <= t4.minCostSplit_1;
    }
  },
  _BVHPrimitiveInfo: {
    "^": "Object;primitiveNumber<,centroid<,bounds@"
  },
  _BVHBucketInfo: {
    "^": "Object;count@,bounds@"
  },
  _BVHBuildNode: {
    "^": "Object;bounds@,children>,splitAxis<,firstPrimOffset<,nPrimitives<",
    initInterior$3: function(axis, c0, c1) {
      var t1, t2;
      t1 = this.children;
      t1[0] = c0;
      t1[1] = c1;
      t1 = c0.get$bounds();
      t2 = c1.get$bounds();
      this.bounds = G.BBox$from(t1).union$1(t2);
      this.splitAxis = axis;
      this.nPrimitives = 0;
    }
  },
  _LinearBVHNode: {
    "^": "Object;bounds@,offset',nPrimitives@,axis?"
  },
  GridAccel: {
    "^": "Aggregate;primitives,nVoxels,bounds@,width>,invWidth,voxels,primitiveId",
    worldBound$0: function() {
      return G.BBox$from(this.bounds);
    },
    canIntersect$0: function() {
      return true;
    },
    posToVoxel$2: function($P, axis) {
      var t1, t2, t3, v;
      t1 = $P.data;
      if (axis >= t1.length)
        return H.ioore(t1, axis);
      t1 = t1[axis];
      t2 = this.bounds.get$pMin().data;
      if (axis >= t2.length)
        return H.ioore(t2, axis);
      t2 = t2[axis];
      t3 = this.invWidth.data;
      if (axis >= t3.length)
        return H.ioore(t3, axis);
      v = C.JSNumber_methods.toInt$0((t1 - t2) * t3[axis]);
      t3 = this.nVoxels;
      if (axis >= 3)
        return H.ioore(t3, axis);
      return C.JSInt_methods.clamp$2(v, 0, J.$sub$n(t3[axis], 1));
    },
    GridAccel$2: function(p, refineImmediately) {
      var t1, i, t2, delta, maxAxis, t3, t4, voxelsPerUnitDist, axis, t5, t6, t7, t8, nv, vmin, vmax, prim, pb, z, y, x, o;
      $.Log.call$2(0, "Building Hierarchical Grid Acceleration Structures.");
      t1 = J.getInterceptor$asx(p);
      t1.get$length(p);
      if (refineImmediately === true) {
        i = 0;
        while (true) {
          t2 = t1.get$length(p);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          t1.$index(p, i).fullyRefine$1(this.primitives);
          ++i;
        }
      } else
        this.primitives = p;
      i = 0;
      while (true) {
        t1 = J.get$length$asx(this.primitives);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.bounds;
        if (!(i < t1))
          break;
        t1 = J.$index$asx(this.primitives, i).worldBound$0();
        this.bounds = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t2.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(t2.pMax.data)))).union$1(t1);
        ++i;
      }
      delta = t2.get$pMax().$sub(0, t2.pMin);
      maxAxis = this.bounds.maximumExtent$0();
      t1 = delta.data;
      t2 = t1.length;
      if (maxAxis >= t2)
        return H.ioore(t1, maxAxis);
      t3 = t1[maxAxis];
      t4 = J.get$length$asx(this.primitives);
      if (typeof t4 !== "number")
        H.throwExpression(P.ArgumentError$(t4));
      voxelsPerUnitDist = 3 * Math.pow(t4, 0.3333333333333333) * (1 / t3);
      for (t3 = this.nVoxels, axis = 0; axis < 3; ++axis) {
        if (axis >= t2)
          return H.ioore(t1, axis);
        t4 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1[axis] * voxelsPerUnitDist));
        t3[axis] = t4;
        t3[axis] = C.JSInt_methods.clamp$2(t4, 1, 64);
      }
      for (t4 = this.width.data, t5 = t4.length, t6 = this.invWidth, axis = 0; axis < 3; ++axis) {
        if (axis >= t2)
          return H.ioore(t1, axis);
        t7 = t1[axis];
        t8 = t3[axis];
        if (typeof t8 !== "number")
          return H.iae(t8);
        if (axis >= t5)
          return H.ioore(t4, axis);
        t4[axis] = t7 / t8;
        t7 = t4[axis];
        t7 = t7 === 0 ? 0 : 1 / t7;
        t8 = t6.data;
        if (axis >= t8.length)
          return H.ioore(t8, axis);
        t8[axis] = t7;
      }
      nv = J.$mul$ns(J.$mul$ns(t3[0], t3[1]), t3[2]);
      if (typeof nv !== "number")
        return H.iae(nv);
      this.voxels = H.setRuntimeTypeInfo(Array(nv), [E._Voxel]);
      vmin = [0, 0, 0];
      vmax = [0, 0, 0];
      i = 0;
      while (true) {
        t1 = J.get$length$asx(this.primitives);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        prim = J.$index$asx(this.primitives, i);
        pb = prim.worldBound$0();
        for (axis = 0; axis < 3; ++axis) {
          vmin[axis] = this.posToVoxel$2(pb.get$pMin(), axis);
          vmax[axis] = this.posToVoxel$2(pb.pMax, axis);
        }
        for (z = vmin[2]; t1 = J.getInterceptor$n(z), t1.$le(z, vmax[2]); z = t1.$add(z, 1))
          for (y = vmin[1]; t2 = J.getInterceptor$n(y), t2.$le(y, vmax[1]); y = t2.$add(y, 1))
            for (x = vmin[0]; t4 = J.getInterceptor$n(x), t4.$le(x, vmax[0]); x = t4.$add(x, 1)) {
              o = J.$add$ns(J.$add$ns(J.$mul$ns(t1.$mul(z, t3[0]), t3[1]), t2.$mul(y, t3[0])), x);
              t5 = this.voxels;
              if (o >>> 0 !== o || o >= t5.length)
                return H.ioore(t5, o);
              t6 = t5[o];
              if (t6 == null) {
                t6 = [];
                t7 = new E._Voxel(t6, null);
                t7.allCanIntersect = false;
                t6.push(prim);
                t5[o] = t7;
              } else
                t6.addPrimitive$1(prim);
            }
        ++i;
      }
    },
    static: {GridAccel_Create: [function(prims, ps) {
        return E.GridAccel$(prims, ps.findOneBool$2("refineimmediately", true));
      }, "call$2", "GridAccel_Create$closure", 4, 0, 3], GridAccel$: function(p, refineImmediately) {
        var t1, t2, t3, t4;
        t1 = G.BBox$(null, null);
        t2 = G.Vector$(0, 0, 0);
        t3 = G.Vector$(0, 0, 0);
        t4 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t4 + 1;
        t4 = new E.GridAccel([], [0, 0, 0], t1, t2, t3, null, t4);
        t4.GridAccel$2(p, refineImmediately);
        return t4;
      }}
  },
  _Voxel: {
    "^": "Object;primitives,allCanIntersect",
    size$0: [function(_) {
      return this.primitives.length;
    }, "call$0", "get$size", 0, 0, 100],
    addPrimitive$1: function(prim) {
      this.primitives.push(prim);
    }
  },
  KdTreeAccel: {
    "^": "Aggregate;isectCost,traversalCost,maxPrims,maxDepth,emptyBonus,primitives,nodes,nAllocedNodes,nextFreeNode,bounds@,primitiveId",
    worldBound$0: function() {
      return this.bounds;
    },
    canIntersect$0: function() {
      return true;
    },
    _buildTree$11: function(nodeNum, nodeBounds, allPrimBounds, primNums, nPrimitives, depth, edges, prims0, prims1, prims1Offset, badRefines) {
      var t1, t2, nAlloc, n, i, t3, i0, t4, oldCost, invTotalSA, d, axis, t5, t6, t7, eb, t8, t9, bestAxis, bestOffset, bestCost, retries, t10, pn, bbox, t11, t12, t13, nAbove, nBelow, edget, otherAxis0, otherAxis1, t14, t15, eb0, cost, n0, n00, n1, n10, tsplit, aboveChild;
      t1 = this.nextFreeNode;
      t2 = this.nAllocedNodes;
      if (t1 === t2) {
        nAlloc = P.max(2 * t2, 512);
        n = H.setRuntimeTypeInfo(Array(nAlloc), [E._KdAccelNode]);
        i = this.nAllocedNodes;
        if (i > 0) {
          for (t1 = this.nodes, t2 = t1.length, t3 = n.length, i0 = 0; i0 < i; ++i0) {
            if (i0 >= t2)
              return H.ioore(t1, i0);
            t4 = t1[i0];
            if (i0 >= t3)
              return H.ioore(n, i0);
            n[i0] = t4;
          }
          for (; i < t3; ++i) {
            if (i >>> 0 !== i || i >= t3)
              return H.ioore(n, i);
            n[i] = new E._KdAccelNode(null, null, null, null);
          }
        } else
          for (t1 = n.length, i = 0; i < t1; ++i)
            n[i] = new E._KdAccelNode(null, null, null, null);
        this.nodes = n;
        this.nAllocedNodes = nAlloc;
      }
      ++this.nextFreeNode;
      t1 = this.maxPrims;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (nPrimitives <= t1 || J.$eq(depth, 0)) {
        t1 = this.nodes;
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum].initLeaf$2(primNums, nPrimitives);
        return;
      }
      t1 = this.isectCost;
      t2 = J.getInterceptor$ns(t1);
      oldCost = t2.$mul(t1, nPrimitives);
      invTotalSA = 1 / nodeBounds.surfaceArea$0();
      d = nodeBounds.pMax.$sub(0, nodeBounds.pMin);
      axis = nodeBounds.maximumExtent$0();
      for (t3 = 2 * nPrimitives, t4 = this.traversalCost, t5 = J.getInterceptor$ns(t4), t6 = d.data, t7 = t6.length, eb = this.emptyBonus, t8 = primNums.length, t9 = allPrimBounds.length, bestAxis = -1, bestOffset = -1, bestCost = 1 / 0, retries = 0; true;) {
        for (i = 0; t10 = edges[axis], i < nPrimitives; ++i) {
          if (i >= t8)
            return H.ioore(primNums, i);
          pn = primNums[i];
          if (pn >= t9)
            return H.ioore(allPrimBounds, pn);
          bbox = allPrimBounds[pn];
          if (axis < 0 || axis >= 3)
            return H.ioore(edges, axis);
          t11 = 2 * i;
          t12 = bbox.get$pMin().data;
          if (axis >= t12.length)
            return H.ioore(t12, axis);
          t13 = new E._BoundEdge(null, null, null);
          t13.t = t12[axis];
          t13.primNum = pn;
          t13.type = 1;
          J.$indexSet$ax(t10, t11, t13);
          t10 = edges[axis];
          t12 = bbox.pMax.data;
          if (axis >= t12.length)
            return H.ioore(t12, axis);
          t13 = new E._BoundEdge(null, null, null);
          t13.t = t12[axis];
          t13.primNum = pn;
          t13.type = 0;
          J.$indexSet$ax(t10, t11 + 1, t13);
        }
        if (axis < 0 || axis >= 3)
          return H.ioore(edges, axis);
        J.sort$1$ax(t10, new E.KdTreeAccel__buildTree_closure());
        for (t10 = axis + 1, t11 = axis + 2, nAbove = nPrimitives, nBelow = 0, i = 0; i < t3; ++i) {
          if (J.$eq(J.get$type$x(J.$index$asx(edges[axis], i)), 0))
            --nAbove;
          edget = J.$index$asx(edges[axis], i).get$t();
          t12 = nodeBounds.pMin.data;
          if (axis >= t12.length)
            return H.ioore(t12, axis);
          t12 = t12[axis];
          if (typeof edget !== "number")
            return edget.$gt();
          if (edget > t12) {
            t13 = nodeBounds.pMax.data;
            if (axis >= t13.length)
              return H.ioore(t13, axis);
            t13 = edget < t13[axis];
          } else
            t13 = false;
          if (t13) {
            otherAxis0 = C.JSInt_methods.$mod(t10, 3);
            otherAxis1 = C.JSInt_methods.$mod(t11, 3);
            if (otherAxis0 >= t7)
              return H.ioore(t6, otherAxis0);
            t13 = t6[otherAxis0];
            if (otherAxis1 >= t7)
              return H.ioore(t6, otherAxis1);
            t14 = t6[otherAxis1];
            t15 = t13 * t14;
            t14 = t13 + t14;
            t13 = nodeBounds.pMax.data;
            if (axis >= t13.length)
              return H.ioore(t13, axis);
            t13 = t13[axis];
            eb0 = nAbove === 0 || nBelow === 0 ? eb : 0;
            if (typeof eb0 !== "number")
              return H.iae(eb0);
            cost = t5.$add(t4, J.$mul$ns(t2.$mul(t1, 1 - eb0), 2 * (t15 + (edget - t12) * t14) * invTotalSA * nBelow + 2 * (t15 + (t13 - edget) * t14) * invTotalSA * nAbove));
            if (J.$lt$n(cost, bestCost)) {
              bestCost = cost;
              bestOffset = i;
              bestAxis = axis;
            }
          }
          if (J.$eq(J.get$type$x(J.$index$asx(edges[axis], i)), 1))
            ++nBelow;
        }
        if (bestAxis === -1 && retries < 2) {
          ++retries;
          axis = C.JSInt_methods.$mod(t10, 3);
          continue;
        }
        break;
      }
      t1 = J.getInterceptor$n(bestCost);
      if (t1.$gt(bestCost, oldCost))
        ++badRefines;
      if (typeof oldCost !== "number")
        return H.iae(oldCost);
      if (t1.$gt(bestCost, 4 * oldCost) && nPrimitives < 16 || bestAxis === -1 || badRefines === 3) {
        t1 = this.nodes;
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum].initLeaf$2(primNums, nPrimitives);
        return;
      }
      for (t1 = prims0.length, n0 = 0, i = 0; i < bestOffset; ++i) {
        if (bestAxis < 0 || bestAxis >= 3)
          return H.ioore(edges, bestAxis);
        if (J.$eq(J.get$type$x(J.$index$asx(edges[bestAxis], i)), 1)) {
          n00 = n0 + 1;
          t2 = J.$index$asx(edges[bestAxis], i).get$primNum();
          if (n0 >= t1)
            return H.ioore(prims0, n0);
          prims0[n0] = t2;
          n0 = n00;
        }
      }
      for (i = bestOffset + 1, t1 = prims1.length, n1 = 0; i < t3; ++i) {
        if (bestAxis < 0 || bestAxis >= 3)
          return H.ioore(edges, bestAxis);
        if (J.$eq(J.get$type$x(J.$index$asx(edges[bestAxis], i)), 0)) {
          n10 = n1 + 1;
          t2 = prims1Offset + n1;
          t4 = J.$index$asx(edges[bestAxis], i).get$primNum();
          if (t2 >= t1)
            return H.ioore(prims1, t2);
          prims1[t2] = t4;
          n1 = n10;
        }
      }
      if (bestAxis < 0 || bestAxis >= 3)
        return H.ioore(edges, bestAxis);
      tsplit = J.$index$asx(edges[bestAxis], bestOffset).get$t();
      t1 = nodeBounds.pMax;
      t2 = nodeBounds.pMin.data;
      if (bestAxis >= t2.length)
        return H.ioore(t2, bestAxis);
      t2[bestAxis] = tsplit;
      t1 = t1.data;
      if (bestAxis >= t1.length)
        return H.ioore(t1, bestAxis);
      t1[bestAxis] = tsplit;
      t1 = J.getInterceptor$n(depth);
      this._buildTree$11(nodeNum + 1, nodeBounds, allPrimBounds, prims0, n0, t1.$sub(depth, 1), edges, prims0, prims1, nPrimitives, badRefines);
      aboveChild = this.nextFreeNode;
      t2 = this.nodes;
      if (nodeNum >= t2.length)
        return H.ioore(t2, nodeNum);
      t2[nodeNum].initInterior$3(bestAxis, aboveChild, tsplit);
      this._buildTree$11(aboveChild, nodeBounds, allPrimBounds, prims1, n1, t1.$sub(depth, 1), edges, prims0, prims1, nPrimitives, badRefines);
    },
    _buildTree$10: function(nodeNum, nodeBounds, allPrimBounds, primNums, nPrimitives, depth, edges, prims0, prims1, prims1Offset) {
      return this._buildTree$11(nodeNum, nodeBounds, allPrimBounds, primNums, nPrimitives, depth, edges, prims0, prims1, prims1Offset, 0);
    },
    KdTreeAccel$6: function(p, isectCost, traversalCost, emptyBonus, maxPrims, maxDepth) {
      var t1, i, t2, primBounds, b, edges, len, j, prims0, prims1, primNums;
      $.Log.call$2(0, "Building Kd-Tree Acceleration Structures.");
      t1 = J.getInterceptor$asx(p);
      i = 0;
      while (true) {
        t2 = t1.get$length(p);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$index(p, i).fullyRefine$1(this.primitives);
        ++i;
      }
      this.nextFreeNode = 0;
      this.nAllocedNodes = 0;
      if (J.$le$n(this.maxDepth, 0)) {
        t1 = this.primitives.length;
        t1 = Math.log(t1);
        t2 = $.get$_invLog2();
        if (typeof t2 !== "number")
          return H.iae(t2);
        this.maxDepth = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(8 + 1.3 * C.JSDouble_methods.toInt$0(t1 * t2)));
      }
      this.bounds = G.BBox$(null, null);
      primBounds = H.setRuntimeTypeInfo(Array(this.primitives.length), [G.BBox]);
      for (t1 = primBounds.length, i = 0; t2 = this.primitives, i < t2.length; ++i) {
        b = t2[i].worldBound$0();
        t2 = this.bounds;
        this.bounds = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t2.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(t2.pMax.data)))).union$1(b);
        if (i >= t1)
          return H.ioore(primBounds, i);
        primBounds[i] = b;
      }
      edges = H.setRuntimeTypeInfo(Array(3), [[J.JSArray, E._BoundEdge]]);
      for (i = 0; t1 = this.primitives, i < 3; ++i) {
        len = 2 * t1.length;
        t1 = Array(len);
        t1.fixed$length = init;
        t1.$builtinTypeInfo = [E._BoundEdge];
        edges[i] = t1;
        for (j = 0; j < len; ++j) {
          t1 = edges[i];
          t2 = new E._BoundEdge(null, null, null);
          t2.t = 0;
          t2.primNum = 0;
          t2.type = 0;
          J.$indexSet$ax(t1, j, t2);
        }
      }
      t1 = t1.length;
      prims0 = new Uint32Array(t1);
      t1 = J.$mul$ns(J.$add$ns(this.maxDepth, 1), this.primitives.length);
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      prims1 = new Uint32Array(t1);
      t1 = this.primitives.length;
      primNums = new Uint32Array(t1);
      for (t2 = this.primitives.length, i = 0; i < t2; ++i) {
        if (i >= t1)
          return H.ioore(primNums, i);
        primNums[i] = i;
      }
      this._buildTree$10(0, this.bounds, primBounds, primNums, t2, this.maxDepth, edges, prims0, prims1, 0);
    },
    static: {KdTreeAccel_Create: [function(prims, ps) {
        return E.KdTreeAccel$(prims, ps.findOneInt$2("intersectcost", 80), ps.findOneInt$2("traversalcost", 1), ps.findOneFloat$2("emptybonus", 0.5), ps.findOneInt$2("maxprims", 1), ps.findOneInt$2("maxdepth", -1));
      }, "call$2", "KdTreeAccel_Create$closure", 4, 0, 4], KdTreeAccel$: function(p, isectCost, traversalCost, emptyBonus, maxPrims, maxDepth) {
        var t1 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t1 + 1;
        t1 = new E.KdTreeAccel(isectCost, traversalCost, maxPrims, maxDepth, emptyBonus, [], [], null, null, null, t1);
        t1.KdTreeAccel$6(p, isectCost, traversalCost, emptyBonus, maxPrims, maxDepth);
        return t1;
      }}
  },
  KdTreeAccel__buildTree_closure: {
    "^": "Closure:96;",
    call$2: function(a, b) {
      return J.$lt$n(a, b) ? -1 : 1;
    }
  },
  _KdAccelNode: {
    "^": "Object;split,onePrimitive,primitives,flags",
    initLeaf$2: function(primNums, np) {
      var t1, t2, i, t3;
      this.flags = 3;
      this.flags = (3 | np << 2) >>> 0;
      if (np === 0)
        this.onePrimitive = 0;
      else if (np === 1) {
        if (0 >= primNums.length)
          return H.ioore(primNums, 0);
        this.onePrimitive = primNums[0];
      } else {
        t1 = new Uint32Array(np);
        this.primitives = t1;
        for (t2 = primNums.length, i = 0; i < np; ++i) {
          if (i >= t2)
            return H.ioore(primNums, i);
          t3 = primNums[i];
          if (i >= np)
            return H.ioore(t1, i);
          t1[i] = t3;
        }
      }
    },
    initInterior$3: function(axis, ac, s) {
      this.split = s;
      this.flags = axis;
      this.flags = (axis | ac << 2) >>> 0;
    },
    nPrimitives$0: [function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$shr();
      return C.JSInt_methods._shrOtherPositive$1(t1, 2);
    }, "call$0", "get$nPrimitives", 0, 0, 100],
    splitAxis$0: [function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return t1 & 3;
    }, "call$0", "get$splitAxis", 0, 0, 100]
  },
  _BoundEdge: {
    "^": "Object;t<,primNum<,type>",
    $lt: function(_, e) {
      var t1, t2;
      t1 = this.t;
      t2 = e.get$t();
      if (t1 === t2)
        return this.type < e.get$type(e);
      else {
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 < t2;
      }
    },
    static: {"^": "_BoundEdge_START,_BoundEdge_END"}
  }
}],
["archive", "package:archive/archive.dart", , T, {
  "^": "",
  getAdler32: function(array, adler) {
    var s1, s2, len, len0, i, n, i0;
    s1 = adler & 65535;
    s2 = adler >>> 16;
    len = array.length;
    for (len0 = len, i = 0; len0 > 0;) {
      n = 3800 > len0 ? len0 : 3800;
      len0 -= n;
      for (; --n, n >= 0; i = i0) {
        i0 = i + 1;
        if (i < 0 || i >= len)
          return H.ioore(array, i);
        s1 += array[i] & 255;
        s2 += s1;
      }
      s1 = C.JSInt_methods.$mod(s1, 65521);
      s2 = C.JSInt_methods.$mod(s2, 65521);
    }
    return (s2 << 16 | s1) >>> 0;
  },
  getCrc32: function(array, crc) {
    var t1, len, ip, ip0, t2;
    t1 = J.getInterceptor$asx(array);
    len = t1.get$length(array);
    crc ^= 4294967295;
    for (ip = 0; len >= 8;) {
      ip0 = ip + 1;
      t2 = t1.$index(array, ip);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = C.List_B8J[(crc ^ t2) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = t1.$index(array, ip0);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = C.List_B8J[(crc ^ t2) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip0 = ip + 1;
      t2 = t1.$index(array, ip);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = C.List_B8J[(crc ^ t2) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = t1.$index(array, ip0);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = C.List_B8J[(crc ^ t2) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip0 = ip + 1;
      t2 = t1.$index(array, ip);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = C.List_B8J[(crc ^ t2) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = t1.$index(array, ip0);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = C.List_B8J[(crc ^ t2) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip0 = ip + 1;
      t2 = t1.$index(array, ip);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = C.List_B8J[(crc ^ t2) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = t1.$index(array, ip0);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = C.List_B8J[(crc ^ t2) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      len -= 8;
    }
    if (len > 0)
      do {
        ip0 = ip + 1;
        t2 = t1.$index(array, ip);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = C.List_B8J[(crc ^ t2) & 255];
        if (typeof t2 !== "number")
          return t2.$xor();
        crc = t2 ^ crc >>> 8;
        if (--len, len > 0) {
          ip = ip0;
          continue;
        } else
          break;
      } while (true);
    return (crc ^ 4294967295) >>> 0;
  },
  _rshift: function(number, bits) {
    if (typeof number !== "number")
      return number.$ge();
    if (number >= 0)
      return C.JSNumber_methods.$shr(number, bits);
    else
      return C.JSNumber_methods.$shr(number, bits) + C.JSInt_methods._shlPositive$1(2, (~bits >>> 0) + 65536 & 65535);
  },
  ArchiveException: {
    "^": "Object;message",
    toString$0: function(_) {
      return "ArchiveException: " + this.message;
    },
    static: {ArchiveException$: function(message) {
        return new T.ArchiveException(message);
      }}
  },
  InputStream: {
    "^": "Object;buffer>,offset*,start>,byteOrder,_archive$_length",
    get$length: function(_) {
      var t1, t2, t3;
      t1 = this._archive$_length;
      t2 = this.offset;
      t3 = this.start;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      return J.$sub$n(t1, t2 - t3);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, index) {
      var t1 = this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof index !== "number")
        return H.iae(index);
      return J.$index$asx(this.buffer, t1 + index);
    },
    subset$2: function(position, $length) {
      var t1, t2;
      t1 = this.start;
      if (typeof t1 !== "number")
        return H.iae(t1);
      position += t1;
      if ($length == null || J.$lt$n($length, 0)) {
        t1 = this._archive$_length;
        t2 = this.start;
        if (typeof t2 !== "number")
          return H.iae(t2);
        $length = J.$sub$n(t1, position - t2);
      }
      return T.InputStream$(this.buffer, this.byteOrder, $length, position);
    },
    skip$1: function(_, count) {
      var t1 = this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof count !== "number")
        return H.iae(count);
      this.offset = t1 + count;
    },
    readUint32$0: function() {
      var t1, t2, t3, b1, b2, b3, b4;
      t1 = this.buffer;
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      t3 = J.getInterceptor$asx(t1);
      b1 = J.$and$n(t3.$index(t1, t2), 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      b2 = J.$and$n(t3.$index(t1, t2), 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      b3 = J.$and$n(t3.$index(t1, t2), 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      b4 = J.$and$n(t3.$index(t1, t2), 255);
      if (this.byteOrder === 1)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    toUint8List$0: function() {
      var t1, t2, t3, len;
      t1 = this._archive$_length;
      t2 = this.offset;
      t3 = this.start;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      len = J.$sub$n(t1, t2 - t3);
      t1 = this.buffer;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isUint8List)
        return H.NativeUint8List_NativeUint8List$view(t2.get$buffer(t1), this.offset, len);
      t3 = this.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof len !== "number")
        return H.iae(len);
      return new Uint8Array(H._ensureNativeList(t2.sublist$2(t1, t3, t3 + len)));
    },
    InputStream$4$byteOrder$length$start: function(buffer, byteOrder, $length, start) {
      this._archive$_length = $length == null ? J.get$length$asx(buffer) : $length;
      this.offset = start;
    },
    static: {InputStream$: function(buffer, byteOrder, $length, start) {
        var t1 = !!J.getInterceptor(buffer).$isByteData ? H.NativeUint8List_NativeUint8List$view(buffer, 0, null) : buffer;
        t1 = new T.InputStream(t1, null, start, byteOrder, null);
        t1.InputStream$4$byteOrder$length$start(buffer, byteOrder, $length, start);
        return t1;
      }}
  },
  OutputStream: {
    "^": "Object;length*,byteOrder,_archive$_buffer",
    length$0: function($receiver) {
      return this.length.call$0();
    },
    writeByte$1: function(value) {
      var t1, t2;
      if (J.$eq(this.length, this._archive$_buffer.length))
        this._archive$_expandBuffer$0();
      t1 = this._archive$_buffer;
      t2 = this.length;
      this.length = J.$add$ns(t2, 1);
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = value & 255;
    },
    writeBytes$2: function(bytes, len) {
      var t1, t2;
      if (len == null)
        len = bytes.length;
      for (; t1 = J.$gt$n(J.$add$ns(this.length, len), this._archive$_buffer.length), t2 = this.length, t1;)
        this._archive$_expandBuffer$1(J.$sub$n(J.$add$ns(t2, len), this._archive$_buffer.length));
      C.NativeUint8List_methods.setRange$3(this._archive$_buffer, t2, J.$add$ns(t2, len), bytes);
      this.length = J.$add$ns(this.length, len);
    },
    writeBytes$1: function(bytes) {
      return this.writeBytes$2(bytes, null);
    },
    writeInputStream$1: function(bytes) {
      var t1, t2, t3, t4, t5;
      t1 = bytes.start;
      while (true) {
        t2 = this.length;
        t3 = bytes._archive$_length;
        t4 = bytes.offset;
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4 = J.$gt$n(J.$add$ns(t2, J.$sub$n(t3, t4 - t1)), this._archive$_buffer.length);
        t3 = bytes._archive$_length;
        t2 = this.length;
        t5 = bytes.offset;
        if (!t4)
          break;
        if (typeof t5 !== "number")
          return t5.$sub();
        this._archive$_expandBuffer$1(J.$sub$n(J.$add$ns(t2, J.$sub$n(t3, t5 - t1)), this._archive$_buffer.length));
      }
      t4 = this._archive$_buffer;
      if (typeof t5 !== "number")
        return t5.$sub();
      C.NativeUint8List_methods.setRange$4(t4, t2, J.$add$ns(t2, J.$sub$n(t3, t5 - t1)), bytes.buffer, bytes.offset);
      t5 = this.length;
      t3 = bytes._archive$_length;
      t2 = bytes.offset;
      if (typeof t2 !== "number")
        return t2.$sub();
      this.length = J.$add$ns(t5, J.$sub$n(t3, t2 - t1));
    },
    writeUint32$1: function(value) {
      if (this.byteOrder === 1) {
        this.writeByte$1(value >>> 24 & 255);
        this.writeByte$1(value >>> 16 & 255);
        this.writeByte$1(value >>> 8 & 255);
        this.writeByte$1(value & 255);
        return;
      }
      this.writeByte$1(value & 255);
      this.writeByte$1(value >>> 8 & 255);
      this.writeByte$1(value >>> 16 & 255);
      this.writeByte$1(value >>> 24 & 255);
    },
    subset$2: function(start, end) {
      if (J.$lt$n(start, 0))
        start = J.$add$ns(this.length, start);
      if (end == null)
        end = this.length;
      else if (J.$lt$n(end, 0))
        end = J.$add$ns(this.length, end);
      return H.NativeUint8List_NativeUint8List$view(this._archive$_buffer.buffer, start, J.$sub$n(end, start));
    },
    subset$1: function(start) {
      return this.subset$2(start, null);
    },
    _archive$_expandBuffer$1: function(required) {
      var blockSize, t1, newBuffer;
      blockSize = required != null ? J.$gt$n(required, 32768) ? required : 32768 : 32768;
      t1 = this._archive$_buffer;
      if (typeof blockSize !== "number")
        return H.iae(blockSize);
      t1 = t1.length + blockSize;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      newBuffer = new Uint8Array(t1);
      t1 = this._archive$_buffer;
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, t1.length, t1);
      this._archive$_buffer = newBuffer;
    },
    _archive$_expandBuffer$0: function() {
      return this._archive$_expandBuffer$1(null);
    },
    static: {"^": "OutputStream__BLOCK_SIZE", OutputStream$: function(byteOrder, size) {
        var t1 = size == null ? 32768 : size;
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        return new T.OutputStream(0, byteOrder, new Uint8Array(t1));
      }}
  },
  Deflate: {
    "^": "Object;_archive$_input,_archive$_output,_status,_pendingBuffer,_pendingBufferSize,_pendingOut,_archive$_pending,_dataType,_archive$_method,_lastFlush,_windowSize,_windowBits,_windowMask,_window,_actualWindowSize,_prev,_archive$_head,_insertHash,_hashSize,_hashBits,_hashMask,_hashShift,_blockStart,_matchLength,_prevMatch,_matchAvailable,_strStart,_matchStart,_lookAhead,_prevLength,_level,_strategy,_dynamicLengthTree,_dynamicDistTree,_bitLengthTree,_lDesc,_dDesc,_blDesc,_bitLengthCount,_heap,_heapLen,_heapMax,_depth,_lbuf,_litBufferSize,_lastLit,_dbuf,_optimalLen,_staticLen,_matches,_lastEOBLen,_bitBuffer,_numValidBits",
    _archive$_init$5$memLevel$method$strategy$windowBits: function(level, memLevel, method, strategy, windowBits) {
      var t1, t2, t3;
      if (level === -1)
        level = 6;
      $.Deflate__config = this._getConfig$1(level);
      if (memLevel >= 1)
        if (memLevel <= 9)
          if (method === 8)
            if (windowBits >= 9)
              if (windowBits <= 15)
                if (level <= 9)
                  t1 = strategy > 2;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(T.ArchiveException$("Invalid Deflate parameter"));
      this._dynamicLengthTree = new Uint16Array(1146);
      this._dynamicDistTree = new Uint16Array(122);
      this._bitLengthTree = new Uint16Array(78);
      this._windowBits = windowBits;
      t1 = C.JSInt_methods._shlPositive$1(1, windowBits);
      this._windowSize = t1;
      this._windowMask = t1 - 1;
      t2 = memLevel + 7;
      this._hashBits = t2;
      t3 = C.JSInt_methods._shlPositive$1(1, t2);
      this._hashSize = t3;
      this._hashMask = t3 - 1;
      this._hashShift = C.JSInt_methods._tdivFast$1(t2 + 3 - 1, 3);
      this._window = new Uint8Array(t1 * 2);
      t1 = this._windowSize;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this._prev = new Uint16Array(t1);
      t1 = this._hashSize;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this._archive$_head = new Uint16Array(t1);
      t1 = C.JSInt_methods._shlPositive$1(1, memLevel + 6);
      this._litBufferSize = t1;
      this._pendingBuffer = new Uint8Array(t1 * 4);
      t1 = this._litBufferSize;
      if (typeof t1 !== "number")
        return t1.$mul();
      this._pendingBufferSize = t1 * 4;
      this._dbuf = t1;
      this._lbuf = 3 * t1;
      this._level = level;
      this._strategy = strategy;
      this._archive$_method = method;
      this._archive$_pending = 0;
      this._pendingOut = 0;
      this._status = 113;
      this._lastFlush = 0;
      t1 = this._lDesc;
      t1.dynamicTree = this._dynamicLengthTree;
      t1.staticDesc = $.get$_StaticTree_staticLDesc();
      t1 = this._dDesc;
      t1.dynamicTree = this._dynamicDistTree;
      t1.staticDesc = $.get$_StaticTree_staticDDesc();
      t1 = this._blDesc;
      t1.dynamicTree = this._bitLengthTree;
      t1.staticDesc = $.get$_StaticTree_staticBlDesc();
      this._bitBuffer = 0;
      this._numValidBits = 0;
      this._lastEOBLen = 8;
      this._initBlock$0();
      this._lmInit$0();
    },
    _archive$_init$1: function(level) {
      return this._archive$_init$5$memLevel$method$strategy$windowBits(level, 8, 8, 0, 15);
    },
    _deflate$1: function(flush) {
      var t1, t2, t3, bstate, i;
      if (flush > 4 || false)
        throw H.wrapException(T.ArchiveException$("Invalid Deflate Parameter"));
      this._lastFlush = flush;
      if (this._archive$_pending !== 0)
        this._flushPending$0();
      t1 = this._archive$_input;
      t2 = t1.offset;
      t3 = t1.start;
      t1 = t1._archive$_length;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= t3 + t1)
        if (this._lookAhead === 0)
          t1 = flush !== 0 && this._status !== 666;
        else
          t1 = true;
      else
        t1 = true;
      if (t1) {
        switch ($.Deflate__config.$function) {
          case 0:
            bstate = this._deflateStored$1(flush);
            break;
          case 1:
            bstate = this._deflateFast$1(flush);
            break;
          case 2:
            bstate = this._deflateSlow$1(flush);
            break;
          default:
            bstate = -1;
            break;
        }
        t1 = bstate === 2;
        if (t1 || bstate === 3)
          this._status = 666;
        if (bstate === 0 || t1)
          return 0;
        if (bstate === 1) {
          if (flush === 1) {
            this._sendBits$2(2, 3);
            this._sendCode$2(256, C.List_Xg4);
            this.biFlush$0();
            t1 = this._lastEOBLen;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t2 = this._numValidBits;
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (1 + t1 + 10 - t2 < 9) {
              this._sendBits$2(2, 3);
              this._sendCode$2(256, C.List_Xg4);
              this.biFlush$0();
            }
            this._lastEOBLen = 7;
          } else {
            this._trStoredBlock$3(0, 0, false);
            if (flush === 3) {
              t1 = this._hashSize;
              if (typeof t1 !== "number")
                return H.iae(t1);
              t2 = this._archive$_head;
              i = 0;
              for (; i < t1; ++i) {
                if (i >= t2.length)
                  return H.ioore(t2, i);
                t2[i] = 0;
              }
            }
          }
          this._flushPending$0();
        }
      }
      if (flush !== 4)
        return 0;
      return 1;
    },
    _lmInit$0: function() {
      var t1, t2, t3, i;
      t1 = this._windowSize;
      if (typeof t1 !== "number")
        return H.iae(t1);
      this._actualWindowSize = 2 * t1;
      t1 = this._archive$_head;
      t2 = this._hashSize;
      if (typeof t2 !== "number")
        return t2.$sub();
      --t2;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = 0;
      for (i = 0; i < t2; ++i) {
        if (i >= t3)
          return H.ioore(t1, i);
        t1[i] = 0;
      }
      this._strStart = 0;
      this._blockStart = 0;
      this._lookAhead = 0;
      this._prevLength = 2;
      this._matchLength = 2;
      this._matchAvailable = 0;
      this._insertHash = 0;
    },
    _initBlock$0: function() {
      var t1, i, t2, t3;
      for (t1 = this._dynamicLengthTree, i = 0; i < 286; ++i) {
        t2 = i * 2;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2] = 0;
      }
      for (t2 = this._dynamicDistTree, i = 0; i < 30; ++i) {
        t3 = i * 2;
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3] = 0;
      }
      for (t2 = this._bitLengthTree, i = 0; i < 19; ++i) {
        t3 = i * 2;
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3] = 0;
      }
      if (512 >= t1.length)
        return H.ioore(t1, 512);
      t1[512] = 1;
      this._staticLen = 0;
      this._optimalLen = 0;
      this._matches = 0;
      this._lastLit = 0;
    },
    _pqdownheap$2: function(tree, k) {
      var t1, t2, v, j, t3, t4, j0;
      t1 = this._heap;
      t2 = t1.length;
      if (k < 0 || k >= t2)
        return H.ioore(t1, k);
      v = t1[k];
      j = k << 1 >>> 0;
      t3 = this._depth;
      while (true) {
        t4 = this._heapLen;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(j <= t4))
          break;
        if (j < t4) {
          t4 = j + 1;
          if (t4 < 0 || t4 >= t2)
            return H.ioore(t1, t4);
          t4 = t1[t4];
          if (j < 0 || j >= t2)
            return H.ioore(t1, j);
          t4 = T.Deflate__smaller(tree, t4, t1[j], t3);
        } else
          t4 = false;
        if (t4)
          ++j;
        if (j < 0 || j >= t2)
          return H.ioore(t1, j);
        if (T.Deflate__smaller(tree, v, t1[j], t3))
          break;
        t4 = t1[j];
        if (k < 0 || k >= t2)
          return H.ioore(t1, k);
        t1[k] = t4;
        j0 = j << 1 >>> 0;
        k = j;
        j = j0;
      }
      if (k < 0 || k >= t2)
        return H.ioore(t1, k);
      t1[k] = v;
    },
    _scanTree$2: function(tree, max_code) {
      var t1, nextlen, max_count, min_count, t2, n, prevlen, count, t3, nextlen0;
      t1 = tree.length;
      if (1 >= t1)
        return H.ioore(tree, 1);
      nextlen = tree[1];
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      } else {
        max_count = 7;
        min_count = 4;
      }
      if (typeof max_code !== "number")
        return max_code.$add();
      t2 = (max_code + 1) * 2 + 1;
      if (t2 < 0 || t2 >= t1)
        return H.ioore(tree, t2);
      tree[t2] = 65535;
      for (t2 = this._bitLengthTree, n = 0, prevlen = -1, count = 0; n <= max_code; nextlen = nextlen0) {
        ++n;
        t3 = n * 2 + 1;
        if (t3 >= t1)
          return H.ioore(tree, t3);
        nextlen0 = tree[t3];
        ++count;
        if (count < max_count && nextlen === nextlen0)
          continue;
        else if (count < min_count) {
          t3 = nextlen * 2;
          if (t3 >= t2.length)
            return H.ioore(t2, t3);
          t2[t3] = t2[t3] + count;
        } else if (nextlen !== 0) {
          if (nextlen !== prevlen) {
            t3 = nextlen * 2;
            if (t3 >= t2.length)
              return H.ioore(t2, t3);
            t2[t3] = t2[t3] + 1;
          }
          if (32 >= t2.length)
            return H.ioore(t2, 32);
          t2[32] = t2[32] + 1;
        } else if (count <= 10) {
          if (34 >= t2.length)
            return H.ioore(t2, 34);
          t2[34] = t2[34] + 1;
        } else {
          if (36 >= t2.length)
            return H.ioore(t2, 36);
          t2[36] = t2[36] + 1;
        }
        if (nextlen0 === 0) {
          max_count = 138;
          min_count = 3;
        } else if (nextlen === nextlen0) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
        prevlen = nextlen;
        count = 0;
      }
    },
    _buildBitLengthTree$0: function() {
      var max_blindex, t1, t2;
      this._scanTree$2(this._dynamicLengthTree, this._lDesc.maxCode);
      this._scanTree$2(this._dynamicDistTree, this._dDesc.maxCode);
      this._blDesc._archive$_buildTree$1(this);
      for (max_blindex = 18; max_blindex >= 3; --max_blindex) {
        t1 = this._bitLengthTree;
        t2 = J.$add$ns(J.$mul$ns(C.List_uSC[max_blindex], 2), 1);
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        if (t1[t2] !== 0)
          break;
      }
      t1 = this._optimalLen;
      if (typeof t1 !== "number")
        return t1.$add();
      this._optimalLen = t1 + (3 * (max_blindex + 1) + 5 + 5 + 4);
      return max_blindex;
    },
    _sendAllTrees$3: function(lcodes, dcodes, blcodes) {
      var t1, rank, t2, t3;
      this._sendBits$2(lcodes - 257, 5);
      t1 = dcodes - 1;
      this._sendBits$2(t1, 5);
      this._sendBits$2(blcodes - 4, 4);
      for (rank = 0; rank < blcodes; ++rank) {
        t2 = this._bitLengthTree;
        if (rank >= 19)
          return H.ioore(C.List_uSC, rank);
        t3 = J.$add$ns(J.$mul$ns(C.List_uSC[rank], 2), 1);
        if (t3 >>> 0 !== t3 || t3 >= t2.length)
          return H.ioore(t2, t3);
        this._sendBits$2(t2[t3], 3);
      }
      this._sendTree$2(this._dynamicLengthTree, lcodes - 1);
      this._sendTree$2(this._dynamicDistTree, t1);
    },
    _sendTree$2: function(tree, max_code) {
      var t1, nextlen, max_count, min_count, n, prevlen, count, t2, nextlen0, t3, t4, t5, t6;
      t1 = tree.length;
      if (1 >= t1)
        return H.ioore(tree, 1);
      nextlen = tree[1];
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      } else {
        max_count = 7;
        min_count = 4;
      }
      for (n = 0, prevlen = -1, count = 0; n <= max_code; nextlen = nextlen0) {
        ++n;
        t2 = n * 2 + 1;
        if (t2 >= t1)
          return H.ioore(tree, t2);
        nextlen0 = tree[t2];
        ++count;
        if (count < max_count && nextlen === nextlen0)
          continue;
        else if (count < min_count) {
          t2 = nextlen * 2;
          t3 = t2 + 1;
          do {
            t4 = this._bitLengthTree;
            t5 = t4.length;
            if (t2 >= t5)
              return H.ioore(t4, t2);
            t6 = t4[t2];
            if (t3 >= t5)
              return H.ioore(t4, t3);
            this._sendBits$2(t6 & 65535, t4[t3] & 65535);
          } while (--count, count !== 0);
        } else if (nextlen !== 0) {
          if (nextlen !== prevlen) {
            t2 = this._bitLengthTree;
            t3 = nextlen * 2;
            t4 = t2.length;
            if (t3 >= t4)
              return H.ioore(t2, t3);
            t5 = t2[t3];
            ++t3;
            if (t3 >= t4)
              return H.ioore(t2, t3);
            this._sendBits$2(t5 & 65535, t2[t3] & 65535);
            --count;
          }
          t2 = this._bitLengthTree;
          t3 = t2.length;
          if (32 >= t3)
            return H.ioore(t2, 32);
          t4 = t2[32];
          if (33 >= t3)
            return H.ioore(t2, 33);
          this._sendBits$2(t4 & 65535, t2[33] & 65535);
          this._sendBits$2(count - 3, 2);
        } else {
          t2 = this._bitLengthTree;
          if (count <= 10) {
            t3 = t2.length;
            if (34 >= t3)
              return H.ioore(t2, 34);
            t4 = t2[34];
            if (35 >= t3)
              return H.ioore(t2, 35);
            this._sendBits$2(t4 & 65535, t2[35] & 65535);
            this._sendBits$2(count - 3, 3);
          } else {
            t3 = t2.length;
            if (36 >= t3)
              return H.ioore(t2, 36);
            t4 = t2[36];
            if (37 >= t3)
              return H.ioore(t2, 37);
            this._sendBits$2(t4 & 65535, t2[37] & 65535);
            this._sendBits$2(count - 11, 7);
          }
        }
        if (nextlen0 === 0) {
          max_count = 138;
          min_count = 3;
        } else if (nextlen === nextlen0) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
        prevlen = nextlen;
        count = 0;
      }
    },
    _putBytes$3: function(p, start, len) {
      var t1, t2;
      if (len === 0)
        return;
      t1 = this._pendingBuffer;
      t2 = this._archive$_pending;
      if (typeof t2 !== "number")
        return t2.$add();
      J.setRange$4$ax(t1, t2, t2 + len, p, start);
      t2 = this._archive$_pending;
      if (typeof t2 !== "number")
        return t2.$add();
      this._archive$_pending = t2 + len;
    },
    _sendCode$2: function(c, tree) {
      var t1, t2;
      t1 = J.getInterceptor$ns(c);
      t2 = t1.$mul(c, 2);
      if (t2 >>> 0 !== t2 || t2 >= tree.length)
        return H.ioore(tree, t2);
      t2 = J.$and$n(tree[t2], 65535);
      t1 = J.$add$ns(t1.$mul(c, 2), 1);
      if (t1 >>> 0 !== t1 || t1 >= tree.length)
        return H.ioore(tree, t1);
      this._sendBits$2(t2, J.$and$n(tree[t1], 65535));
    },
    _sendBits$2: function(value_Renamed, $length) {
      var t1, t2, t3;
      t1 = this._numValidBits;
      if (typeof $length !== "number")
        return H.iae($length);
      if (typeof t1 !== "number")
        return t1.$gt();
      t2 = this._bitBuffer;
      if (t1 > 16 - $length) {
        if (typeof value_Renamed !== "number")
          return value_Renamed.$shl();
        t1 = C.JSNumber_methods.$shl(value_Renamed, t1);
        if (typeof t2 !== "number")
          return t2.$or();
        t1 = (t2 | t1 & 65535) >>> 0;
        this._bitBuffer = t1;
        t2 = this._pendingBuffer;
        t3 = this._archive$_pending;
        if (typeof t3 !== "number")
          return t3.$add();
        this._archive$_pending = t3 + 1;
        if (t3 >>> 0 !== t3 || t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3] = t1;
        t1 = T._rshift(t1, 8);
        t3 = this._pendingBuffer;
        t2 = this._archive$_pending;
        if (typeof t2 !== "number")
          return t2.$add();
        this._archive$_pending = t2 + 1;
        if (t2 >>> 0 !== t2 || t2 >= t3.length)
          return H.ioore(t3, t2);
        t3[t2] = t1;
        t1 = this._numValidBits;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._bitBuffer = T._rshift(value_Renamed, 16 - t1);
        t1 = this._numValidBits;
        if (typeof t1 !== "number")
          return t1.$add();
        this._numValidBits = t1 + ($length - 16);
      } else {
        if (typeof value_Renamed !== "number")
          return value_Renamed.$shl();
        t3 = C.JSNumber_methods.$shl(value_Renamed, t1);
        if (typeof t2 !== "number")
          return t2.$or();
        this._bitBuffer = (t2 | t3 & 65535) >>> 0;
        this._numValidBits = t1 + $length;
      }
    },
    _trTally$2: function(dist, lc) {
      var t1, t2, t3, t4, out_length, dcode, t5;
      t1 = this._pendingBuffer;
      t2 = this._dbuf;
      t3 = this._lastLit;
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t2 !== "number")
        return t2.$add();
      t3 = t2 + t3 * 2;
      t2 = T._rshift(dist, 8);
      if (t3 >= t1.length)
        return H.ioore(t1, t3);
      t1[t3] = t2;
      t2 = this._pendingBuffer;
      t3 = this._dbuf;
      t1 = this._lastLit;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = t3 + t1 * 2 + 1;
      t4 = t2.length;
      if (t3 >= t4)
        return H.ioore(t2, t3);
      t2[t3] = dist;
      t3 = this._lbuf;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 += t1;
      if (t3 >= t4)
        return H.ioore(t2, t3);
      t2[t3] = lc;
      this._lastLit = t1 + 1;
      if (dist === 0) {
        t1 = this._dynamicLengthTree;
        t2 = lc * 2;
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2] = t1[t2] + 1;
      } else {
        t1 = this._matches;
        if (typeof t1 !== "number")
          return t1.$add();
        this._matches = t1 + 1;
        --dist;
        t1 = this._dynamicLengthTree;
        if (lc >>> 0 !== lc || lc >= 256)
          return H.ioore(C.List_NUU, lc);
        t2 = J.$mul$ns(J.$add$ns(J.$add$ns(C.List_NUU[lc], 256), 1), 2);
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2] = t1[t2] + 1;
        t2 = this._dynamicDistTree;
        if (dist < 256) {
          if (dist >>> 0 !== dist || dist >= 512)
            return H.ioore(C.List_AyI, dist);
          t1 = C.List_AyI[dist];
        } else {
          t1 = 256 + T._rshift(dist, 7);
          if (t1 >= 512)
            return H.ioore(C.List_AyI, t1);
          t1 = C.List_AyI[t1];
        }
        t1 = J.$mul$ns(t1, 2);
        if (t1 >>> 0 !== t1 || t1 >= t2.length)
          return H.ioore(t2, t1);
        t2[t1] = t2[t1] + 1;
      }
      t1 = this._lastLit;
      if (typeof t1 !== "number")
        return t1.$and();
      if ((t1 & 8191) === 0) {
        t2 = this._level;
        if (typeof t2 !== "number")
          return t2.$gt();
        t2 = t2 > 2;
      } else
        t2 = false;
      if (t2) {
        out_length = t1 * 8;
        t1 = this._strStart;
        t2 = this._blockStart;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        for (t3 = this._dynamicDistTree, dcode = 0; dcode < 30; ++dcode) {
          t4 = dcode * 2;
          if (t4 >= t3.length)
            return H.ioore(t3, t4);
          t4 = t3[t4];
          t5 = C.List_X3d0[dcode];
          if (typeof t5 !== "number")
            return H.iae(t5);
          out_length += t4 * (5 + t5);
        }
        out_length = T._rshift(out_length, 3);
        t3 = this._matches;
        t4 = this._lastLit;
        if (typeof t4 !== "number")
          return t4.$div();
        if (typeof t3 !== "number")
          return t3.$lt();
        if (t3 < t4 / 2 && out_length < (t1 - t2) / 2)
          return true;
        t1 = t4;
      }
      t2 = this._litBufferSize;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t1 === t2 - 1;
    },
    _compressBlock$2: function(ltree, dtree) {
      var lx, code, extra, t1, t2, t3, t4, dist, lc;
      if (this._lastLit !== 0) {
        lx = 0;
        code = null;
        extra = null;
        do {
          t1 = this._pendingBuffer;
          t2 = this._dbuf;
          if (typeof t2 !== "number")
            return t2.$add();
          t2 += lx * 2;
          t3 = t1.length;
          if (t2 >= t3)
            return H.ioore(t1, t2);
          t4 = t1[t2];
          ++t2;
          if (t2 >= t3)
            return H.ioore(t1, t2);
          dist = t4 << 8 & 65280 | t1[t2] & 255;
          t2 = this._lbuf;
          if (typeof t2 !== "number")
            return t2.$add();
          t2 += lx;
          if (t2 >= t3)
            return H.ioore(t1, t2);
          lc = t1[t2] & 255;
          ++lx;
          if (dist === 0) {
            t1 = lc * 2;
            if (t1 >= ltree.length)
              return H.ioore(ltree, t1);
            t2 = J.$and$n(ltree[t1], 65535);
            ++t1;
            if (t1 >= ltree.length)
              return H.ioore(ltree, t1);
            this._sendBits$2(t2, J.$and$n(ltree[t1], 65535));
          } else {
            code = C.List_NUU[lc];
            t1 = J.$add$ns(J.$add$ns(code, 256), 1);
            t2 = J.getInterceptor$ns(t1);
            t3 = t2.$mul(t1, 2);
            if (t3 >>> 0 !== t3 || t3 >= ltree.length)
              return H.ioore(ltree, t3);
            t3 = J.$and$n(ltree[t3], 65535);
            t1 = J.$add$ns(t2.$mul(t1, 2), 1);
            if (t1 >>> 0 !== t1 || t1 >= ltree.length)
              return H.ioore(ltree, t1);
            this._sendBits$2(t3, J.$and$n(ltree[t1], 65535));
            if (code >>> 0 !== code || code >= 29)
              return H.ioore(C.List_qQn0, code);
            extra = C.List_qQn0[code];
            if (!J.$eq(extra, 0)) {
              t1 = C.List_qQn1[code];
              if (typeof t1 !== "number")
                return H.iae(t1);
              this._sendBits$2(lc - t1, extra);
            }
            --dist;
            if (dist < 256) {
              if (dist < 0)
                return H.ioore(C.List_AyI, dist);
              code = C.List_AyI[dist];
            } else {
              t1 = 256 + T._rshift(dist, 7);
              if (t1 >= 512)
                return H.ioore(C.List_AyI, t1);
              code = C.List_AyI[t1];
            }
            t1 = J.getInterceptor$ns(code);
            t2 = t1.$mul(code, 2);
            if (t2 >>> 0 !== t2 || t2 >= dtree.length)
              return H.ioore(dtree, t2);
            t2 = J.$and$n(dtree[t2], 65535);
            t1 = J.$add$ns(t1.$mul(code, 2), 1);
            if (t1 >>> 0 !== t1 || t1 >= dtree.length)
              return H.ioore(dtree, t1);
            this._sendBits$2(t2, J.$and$n(dtree[t1], 65535));
            if (code >>> 0 !== code || code >= 30)
              return H.ioore(C.List_X3d0, code);
            extra = C.List_X3d0[code];
            if (!J.$eq(extra, 0)) {
              t1 = C.List_X3d1[code];
              if (typeof t1 !== "number")
                return H.iae(t1);
              this._sendBits$2(dist - t1, extra);
            }
          }
          t1 = this._lastLit;
          if (typeof t1 !== "number")
            return H.iae(t1);
        } while (lx < t1);
      }
      this._sendCode$2(256, ltree);
      if (513 >= ltree.length)
        return H.ioore(ltree, 513);
      this._lastEOBLen = ltree[513];
    },
    setDataType$0: function() {
      var t1, n, bin_freq, t2, ascii_freq;
      for (t1 = this._dynamicLengthTree, n = 0, bin_freq = 0; n < 7;) {
        t2 = n * 2;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        bin_freq += t1[t2];
        ++n;
      }
      for (ascii_freq = 0; n < 128;) {
        t2 = n * 2;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        ascii_freq += t1[t2];
        ++n;
      }
      for (; n < 256;) {
        t2 = n * 2;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        bin_freq += t1[t2];
        ++n;
      }
      this._dataType = bin_freq > T._rshift(ascii_freq, 2) ? 0 : 1;
    },
    biFlush$0: function() {
      var t1, t2, t3;
      t1 = this._numValidBits;
      if (t1 === 16) {
        t1 = this._bitBuffer;
        t2 = this._pendingBuffer;
        t3 = this._archive$_pending;
        if (typeof t3 !== "number")
          return t3.$add();
        this._archive$_pending = t3 + 1;
        if (t3 >>> 0 !== t3 || t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3] = t1;
        t1 = T._rshift(t1, 8);
        t3 = this._pendingBuffer;
        t2 = this._archive$_pending;
        if (typeof t2 !== "number")
          return t2.$add();
        this._archive$_pending = t2 + 1;
        if (t2 >>> 0 !== t2 || t2 >= t3.length)
          return H.ioore(t3, t2);
        t3[t2] = t1;
        this._bitBuffer = 0;
        this._numValidBits = 0;
      } else {
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 >= 8) {
          t1 = this._bitBuffer;
          t2 = this._pendingBuffer;
          t3 = this._archive$_pending;
          if (typeof t3 !== "number")
            return t3.$add();
          this._archive$_pending = t3 + 1;
          if (t3 >>> 0 !== t3 || t3 >= t2.length)
            return H.ioore(t2, t3);
          t2[t3] = t1;
          this._bitBuffer = T._rshift(t1, 8);
          t1 = this._numValidBits;
          if (typeof t1 !== "number")
            return t1.$sub();
          this._numValidBits = t1 - 8;
        }
      }
    },
    _biWindup$0: function() {
      var t1, t2, t3;
      t1 = this._numValidBits;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 8) {
        t1 = this._bitBuffer;
        t2 = this._pendingBuffer;
        t3 = this._archive$_pending;
        if (typeof t3 !== "number")
          return t3.$add();
        this._archive$_pending = t3 + 1;
        if (t3 >>> 0 !== t3 || t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3] = t1;
        t1 = T._rshift(t1, 8);
        t3 = this._pendingBuffer;
        t2 = this._archive$_pending;
        if (typeof t2 !== "number")
          return t2.$add();
        this._archive$_pending = t2 + 1;
        if (t2 >>> 0 !== t2 || t2 >= t3.length)
          return H.ioore(t3, t2);
        t3[t2] = t1;
      } else if (t1 > 0) {
        t1 = this._bitBuffer;
        t2 = this._pendingBuffer;
        t3 = this._archive$_pending;
        if (typeof t3 !== "number")
          return t3.$add();
        this._archive$_pending = t3 + 1;
        if (t3 >>> 0 !== t3 || t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3] = t1;
      }
      this._bitBuffer = 0;
      this._numValidBits = 0;
    },
    _flushBlockOnly$1: function(eof) {
      var t1, t2, t3;
      t1 = this._blockStart;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0)
        t2 = t1;
      else
        t2 = -1;
      t3 = this._strStart;
      if (typeof t3 !== "number")
        return t3.$sub();
      this._trFlushBlock$3(t2, t3 - t1, eof);
      this._blockStart = this._strStart;
      this._flushPending$0();
    },
    _deflateStored$1: function(flush) {
      var t1, maxBlockSize, t2, t3, maxStart, t4;
      t1 = this._pendingBufferSize;
      if (typeof t1 !== "number")
        return t1.$sub();
      maxBlockSize = t1 - 5;
      maxBlockSize = 65535 > maxBlockSize ? maxBlockSize : 65535;
      for (t1 = flush === 0; true;) {
        t2 = this._lookAhead;
        if (typeof t2 !== "number")
          return t2.$le();
        if (t2 <= 1) {
          this._fillWindow$0();
          t2 = this._lookAhead;
          t3 = t2 === 0;
          if (t3 && t1)
            return 0;
          if (t3)
            break;
        }
        t3 = this._strStart;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t3 + t2;
        this._strStart = t2;
        this._lookAhead = 0;
        t3 = this._blockStart;
        if (typeof t3 !== "number")
          return t3.$add();
        maxStart = t3 + maxBlockSize;
        if (t2 >= maxStart) {
          this._lookAhead = t2 - maxStart;
          this._strStart = maxStart;
          if (t3 >= 0)
            t2 = t3;
          else
            t2 = -1;
          this._trFlushBlock$3(t2, maxStart - t3, false);
          this._blockStart = this._strStart;
          this._flushPending$0();
        }
        t2 = this._strStart;
        t3 = this._blockStart;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t2 -= t3;
        t4 = this._windowSize;
        if (typeof t4 !== "number")
          return t4.$sub();
        if (t2 >= t4 - 262) {
          if (t3 >= 0)
            ;
          else
            t3 = -1;
          this._trFlushBlock$3(t3, t2, false);
          this._blockStart = this._strStart;
          this._flushPending$0();
        }
      }
      t1 = flush === 4;
      this._flushBlockOnly$1(t1);
      return t1 ? 3 : 1;
    },
    _trStoredBlock$3: function(buf, storedLen, eof) {
      var t1, t2, t3, t4, t5;
      this._sendBits$2(eof ? 1 : 0, 3);
      this._biWindup$0();
      this._lastEOBLen = 8;
      t1 = this._pendingBuffer;
      t2 = this._archive$_pending;
      if (typeof t2 !== "number")
        return t2.$add();
      this._archive$_pending = t2 + 1;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = storedLen;
      t2 = T._rshift(storedLen, 8);
      t1 = this._pendingBuffer;
      t3 = this._archive$_pending;
      if (typeof t3 !== "number")
        return t3.$add();
      t4 = t3 + 1;
      this._archive$_pending = t4;
      t5 = t1.length;
      if (t3 >>> 0 !== t3 || t3 >= t5)
        return H.ioore(t1, t3);
      t1[t3] = t2;
      t2 = (~storedLen >>> 0) + 65536 & 65535;
      this._archive$_pending = t4 + 1;
      if (t4 >>> 0 !== t4 || t4 >= t5)
        return H.ioore(t1, t4);
      t1[t4] = t2;
      t2 = T._rshift(t2, 8);
      t4 = this._pendingBuffer;
      t1 = this._archive$_pending;
      if (typeof t1 !== "number")
        return t1.$add();
      this._archive$_pending = t1 + 1;
      if (t1 >>> 0 !== t1 || t1 >= t4.length)
        return H.ioore(t4, t1);
      t4[t1] = t2;
      this._putBytes$3(this._window, buf, storedLen);
    },
    _trFlushBlock$3: function(buf, storedLen, eof) {
      var t1, max_blindex, optLenb, staticLenb, t2;
      t1 = this._level;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        if (this._dataType === 2)
          this.setDataType$0();
        this._lDesc._archive$_buildTree$1(this);
        this._dDesc._archive$_buildTree$1(this);
        max_blindex = this._buildBitLengthTree$0();
        t1 = this._optimalLen;
        if (typeof t1 !== "number")
          return t1.$add();
        optLenb = T._rshift(t1 + 3 + 7, 3);
        t1 = this._staticLen;
        if (typeof t1 !== "number")
          return t1.$add();
        staticLenb = T._rshift(t1 + 3 + 7, 3);
        if (staticLenb <= optLenb)
          optLenb = staticLenb;
      } else {
        staticLenb = storedLen + 5;
        optLenb = staticLenb;
        max_blindex = 0;
      }
      if (storedLen + 4 <= optLenb && buf !== -1)
        this._trStoredBlock$3(buf, storedLen, eof);
      else if (staticLenb === optLenb) {
        this._sendBits$2(2 + (eof ? 1 : 0), 3);
        this._compressBlock$2(C.List_Xg4, C.List_iYO);
      } else {
        this._sendBits$2(4 + (eof ? 1 : 0), 3);
        t1 = this._lDesc.maxCode;
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = this._dDesc.maxCode;
        if (typeof t2 !== "number")
          return t2.$add();
        this._sendAllTrees$3(t1 + 1, t2 + 1, max_blindex + 1);
        this._compressBlock$2(this._dynamicLengthTree, this._dynamicDistTree);
      }
      this._initBlock$0();
      if (eof)
        this._biWindup$0();
    },
    _fillWindow$0: function() {
      var t1, t2, t3, t4, t5, more, n, p, m, t6, t7, t8;
      t1 = this._archive$_input;
      t2 = t1.start;
      do {
        t3 = this._actualWindowSize;
        t4 = this._lookAhead;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = this._strStart;
        if (typeof t5 !== "number")
          return H.iae(t5);
        more = t3 - t4 - t5;
        if (more === 0 && t5 === 0 && t4 === 0)
          more = this._windowSize;
        else {
          t3 = this._windowSize;
          if (typeof t3 !== "number")
            return t3.$add();
          if (t5 >= t3 + t3 - 262) {
            t4 = this._window;
            J.setRange$4$ax(t4, 0, t3, t4, t3);
            t3 = this._matchStart;
            t4 = this._windowSize;
            if (typeof t4 !== "number")
              return H.iae(t4);
            this._matchStart = t3 - t4;
            t3 = this._strStart;
            if (typeof t3 !== "number")
              return t3.$sub();
            this._strStart = t3 - t4;
            t3 = this._blockStart;
            if (typeof t3 !== "number")
              return t3.$sub();
            this._blockStart = t3 - t4;
            n = this._hashSize;
            t3 = this._archive$_head;
            p = n;
            do {
              if (typeof p !== "number")
                return p.$sub();
              --p;
              if (p < 0 || p >= t3.length)
                return H.ioore(t3, p);
              m = t3[p] & 65535;
              t3[p] = m >= t4 ? m - t4 : 0;
              if (typeof n !== "number")
                return n.$sub();
              --n;
            } while (n !== 0);
            t3 = this._prev;
            p = t4;
            n = p;
            do {
              --p;
              if (p < 0 || p >= t3.length)
                return H.ioore(t3, p);
              m = t3[p] & 65535;
              t3[p] = m >= t4 ? m - t4 : 0;
            } while (--n, n !== 0);
            more += t4;
          }
        }
        t3 = t1.offset;
        t4 = t1._archive$_length;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= t2 + t4)
          return;
        t3 = this._window;
        t4 = this._strStart;
        t5 = this._lookAhead;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        n = this._readBuf$3(t3, t4 + t5, more);
        t5 = this._lookAhead;
        if (typeof t5 !== "number")
          return t5.$add();
        if (typeof n !== "number")
          return H.iae(n);
        t5 += n;
        this._lookAhead = t5;
        if (t5 >= 3) {
          t3 = this._window;
          t4 = this._strStart;
          t6 = t3.length;
          if (t4 >>> 0 !== t4 || t4 >= t6)
            return H.ioore(t3, t4);
          t7 = t3[t4] & 255;
          this._insertHash = t7;
          t8 = this._hashShift;
          if (typeof t8 !== "number")
            return H.iae(t8);
          t8 = C.JSInt_methods.$shl(t7, t8);
          ++t4;
          if (t4 >= t6)
            return H.ioore(t3, t4);
          t4 = t3[t4];
          t3 = this._hashMask;
          if (typeof t3 !== "number")
            return H.iae(t3);
          this._insertHash = ((t8 ^ t4 & 255) & t3) >>> 0;
        }
        if (t5 < 262) {
          t3 = t1.offset;
          t4 = t1._archive$_length;
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (typeof t3 !== "number")
            return t3.$ge();
          t4 = !(t3 >= t2 + t4);
          t3 = t4;
        } else
          t3 = false;
      } while (t3);
    },
    _deflateFast$1: function(flush) {
      var t1, hash_head, t2, t3, t4, t5, t6, t7, bflush, t8;
      for (t1 = flush === 0, hash_head = 0; true;) {
        t2 = this._lookAhead;
        if (typeof t2 !== "number")
          return t2.$lt();
        if (t2 < 262) {
          this._fillWindow$0();
          t2 = this._lookAhead;
          if (typeof t2 !== "number")
            return t2.$lt();
          if (t2 < 262 && t1)
            return 0;
          if (t2 === 0)
            break;
        }
        if (typeof t2 !== "number")
          return t2.$ge();
        if (t2 >= 3) {
          t2 = this._insertHash;
          t3 = this._hashShift;
          if (typeof t2 !== "number")
            return t2.$shl();
          if (typeof t3 !== "number")
            return H.iae(t3);
          t3 = C.JSInt_methods.$shl(t2, t3);
          t2 = this._window;
          t4 = this._strStart;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = t4 + 2;
          if (t5 >>> 0 !== t5 || t5 >= t2.length)
            return H.ioore(t2, t5);
          t5 = t2[t5];
          t2 = this._hashMask;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = ((t3 ^ t5 & 255) & t2) >>> 0;
          this._insertHash = t2;
          t5 = this._archive$_head;
          if (t2 >= t5.length)
            return H.ioore(t5, t2);
          t3 = t5[t2];
          hash_head = t3 & 65535;
          t6 = this._prev;
          t7 = this._windowMask;
          if (typeof t7 !== "number")
            return H.iae(t7);
          t7 = (t4 & t7) >>> 0;
          if (t7 < 0 || t7 >= t6.length)
            return H.ioore(t6, t7);
          t6[t7] = t3;
          t5[t2] = t4;
        }
        if (hash_head !== 0) {
          t2 = this._strStart;
          if (typeof t2 !== "number")
            return t2.$sub();
          t3 = this._windowSize;
          if (typeof t3 !== "number")
            return t3.$sub();
          t3 = (t2 - hash_head & 65535) <= t3 - 262;
          t2 = t3;
        } else
          t2 = false;
        if (t2)
          if (this._strategy !== 2)
            this._matchLength = this._longestMatch$1(hash_head);
        t2 = this._matchLength;
        if (typeof t2 !== "number")
          return t2.$ge();
        t3 = this._strStart;
        if (t2 >= 3) {
          t4 = this._matchStart;
          if (typeof t3 !== "number")
            return t3.$sub();
          bflush = this._trTally$2(t3 - t4, t2 - 3);
          t2 = this._lookAhead;
          t4 = this._matchLength;
          if (typeof t2 !== "number")
            return t2.$sub();
          if (typeof t4 !== "number")
            return H.iae(t4);
          t2 -= t4;
          this._lookAhead = t2;
          if (t4 <= $.Deflate__config.maxLazy && t2 >= 3) {
            t2 = t4 - 1;
            this._matchLength = t2;
            do {
              t3 = this._strStart;
              if (typeof t3 !== "number")
                return t3.$add();
              ++t3;
              this._strStart = t3;
              t4 = this._insertHash;
              t5 = this._hashShift;
              if (typeof t4 !== "number")
                return t4.$shl();
              if (typeof t5 !== "number")
                return H.iae(t5);
              t5 = C.JSInt_methods.$shl(t4, t5);
              t4 = this._window;
              t6 = t3 + 2;
              if (t6 >>> 0 !== t6 || t6 >= t4.length)
                return H.ioore(t4, t6);
              t6 = t4[t6];
              t4 = this._hashMask;
              if (typeof t4 !== "number")
                return H.iae(t4);
              t4 = ((t5 ^ t6 & 255) & t4) >>> 0;
              this._insertHash = t4;
              t6 = this._archive$_head;
              if (t4 >= t6.length)
                return H.ioore(t6, t4);
              t5 = t6[t4];
              hash_head = t5 & 65535;
              t7 = this._prev;
              t8 = this._windowMask;
              if (typeof t8 !== "number")
                return H.iae(t8);
              t8 = (t3 & t8) >>> 0;
              if (t8 < 0 || t8 >= t7.length)
                return H.ioore(t7, t8);
              t7[t8] = t5;
              t6[t4] = t3;
            } while (--t2, this._matchLength = t2, t2 !== 0);
            t2 = t3 + 1;
            this._strStart = t2;
          } else {
            t2 = this._strStart;
            if (typeof t2 !== "number")
              return t2.$add();
            t4 = t2 + t4;
            this._strStart = t4;
            this._matchLength = 0;
            t2 = this._window;
            t3 = t2.length;
            if (t4 >>> 0 !== t4 || t4 >= t3)
              return H.ioore(t2, t4);
            t5 = t2[t4] & 255;
            this._insertHash = t5;
            t6 = this._hashShift;
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = C.JSInt_methods.$shl(t5, t6);
            t5 = t4 + 1;
            if (t5 >= t3)
              return H.ioore(t2, t5);
            t5 = t2[t5];
            t2 = this._hashMask;
            if (typeof t2 !== "number")
              return H.iae(t2);
            this._insertHash = ((t6 ^ t5 & 255) & t2) >>> 0;
            t2 = t4;
          }
        } else {
          t2 = this._window;
          if (t3 >>> 0 !== t3 || t3 >= t2.length)
            return H.ioore(t2, t3);
          bflush = this._trTally$2(0, t2[t3] & 255);
          t3 = this._lookAhead;
          if (typeof t3 !== "number")
            return t3.$sub();
          this._lookAhead = t3 - 1;
          t3 = this._strStart;
          if (typeof t3 !== "number")
            return t3.$add();
          ++t3;
          this._strStart = t3;
          t2 = t3;
        }
        if (bflush) {
          t3 = this._blockStart;
          if (typeof t3 !== "number")
            return t3.$ge();
          if (t3 >= 0)
            t4 = t3;
          else
            t4 = -1;
          this._trFlushBlock$3(t4, t2 - t3, false);
          this._blockStart = this._strStart;
          this._flushPending$0();
        }
      }
      t1 = flush === 4;
      this._flushBlockOnly$1(t1);
      return t1 ? 3 : 1;
    },
    _deflateSlow$1: function(flush) {
      var t1, hash_head, bflush, t2, t3, t4, t5, t6, t7, max_insert, t8;
      for (t1 = flush === 0, hash_head = 0, bflush = null; true;) {
        t2 = this._lookAhead;
        if (typeof t2 !== "number")
          return t2.$lt();
        if (t2 < 262) {
          this._fillWindow$0();
          t2 = this._lookAhead;
          if (typeof t2 !== "number")
            return t2.$lt();
          if (t2 < 262 && t1)
            return 0;
          if (t2 === 0)
            break;
        }
        if (typeof t2 !== "number")
          return t2.$ge();
        if (t2 >= 3) {
          t2 = this._insertHash;
          t3 = this._hashShift;
          if (typeof t2 !== "number")
            return t2.$shl();
          if (typeof t3 !== "number")
            return H.iae(t3);
          t3 = C.JSInt_methods.$shl(t2, t3);
          t2 = this._window;
          t4 = this._strStart;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = t4 + 2;
          if (t5 >>> 0 !== t5 || t5 >= t2.length)
            return H.ioore(t2, t5);
          t5 = t2[t5];
          t2 = this._hashMask;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = ((t3 ^ t5 & 255) & t2) >>> 0;
          this._insertHash = t2;
          t5 = this._archive$_head;
          if (t2 >= t5.length)
            return H.ioore(t5, t2);
          t3 = t5[t2];
          hash_head = t3 & 65535;
          t6 = this._prev;
          t7 = this._windowMask;
          if (typeof t7 !== "number")
            return H.iae(t7);
          t7 = (t4 & t7) >>> 0;
          if (t7 < 0 || t7 >= t6.length)
            return H.ioore(t6, t7);
          t6[t7] = t3;
          t5[t2] = t4;
        }
        t2 = this._matchLength;
        this._prevLength = t2;
        this._prevMatch = this._matchStart;
        this._matchLength = 2;
        if (hash_head !== 0) {
          t3 = $.Deflate__config.maxLazy;
          if (typeof t2 !== "number")
            return t2.$lt();
          if (t2 < t3) {
            t2 = this._strStart;
            if (typeof t2 !== "number")
              return t2.$sub();
            t3 = this._windowSize;
            if (typeof t3 !== "number")
              return t3.$sub();
            t3 = (t2 - hash_head & 65535) <= t3 - 262;
            t2 = t3;
          } else
            t2 = false;
        } else
          t2 = false;
        if (t2) {
          if (this._strategy !== 2) {
            t2 = this._longestMatch$1(hash_head);
            this._matchLength = t2;
          } else
            t2 = 2;
          if (typeof t2 !== "number")
            return t2.$le();
          if (t2 <= 5)
            if (this._strategy !== 1)
              if (t2 === 3) {
                t3 = this._strStart;
                t4 = this._matchStart;
                if (typeof t3 !== "number")
                  return t3.$sub();
                t4 = t3 - t4 > 4096;
                t3 = t4;
              } else
                t3 = false;
            else
              t3 = true;
          else
            t3 = false;
          if (t3) {
            this._matchLength = 2;
            t2 = 2;
          }
        } else
          t2 = 2;
        t3 = this._prevLength;
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= 3) {
          if (typeof t2 !== "number")
            return t2.$le();
          t2 = t2 <= t3;
        } else
          t2 = false;
        if (t2) {
          t2 = this._strStart;
          t4 = this._lookAhead;
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t4 !== "number")
            return H.iae(t4);
          max_insert = t2 + t4 - 3;
          t4 = this._prevMatch;
          if (typeof t4 !== "number")
            return H.iae(t4);
          bflush = this._trTally$2(t2 - 1 - t4, t3 - 3);
          t3 = this._lookAhead;
          t4 = this._prevLength;
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t3 !== "number")
            return t3.$sub();
          this._lookAhead = t3 - (t4 - 1);
          t4 -= 2;
          this._prevLength = t4;
          t2 = t4;
          do {
            t3 = this._strStart;
            if (typeof t3 !== "number")
              return t3.$add();
            ++t3;
            this._strStart = t3;
            if (t3 <= max_insert) {
              t4 = this._insertHash;
              t5 = this._hashShift;
              if (typeof t4 !== "number")
                return t4.$shl();
              if (typeof t5 !== "number")
                return H.iae(t5);
              t5 = C.JSInt_methods.$shl(t4, t5);
              t4 = this._window;
              t6 = t3 + 2;
              if (t6 >>> 0 !== t6 || t6 >= t4.length)
                return H.ioore(t4, t6);
              t6 = t4[t6];
              t4 = this._hashMask;
              if (typeof t4 !== "number")
                return H.iae(t4);
              t4 = ((t5 ^ t6 & 255) & t4) >>> 0;
              this._insertHash = t4;
              t6 = this._archive$_head;
              if (t4 >= t6.length)
                return H.ioore(t6, t4);
              t5 = t6[t4];
              hash_head = t5 & 65535;
              t7 = this._prev;
              t8 = this._windowMask;
              if (typeof t8 !== "number")
                return H.iae(t8);
              t8 = (t3 & t8) >>> 0;
              if (t8 < 0 || t8 >= t7.length)
                return H.ioore(t7, t8);
              t7[t8] = t5;
              t6[t4] = t3;
            }
          } while (--t2, this._prevLength = t2, t2 !== 0);
          this._matchAvailable = 0;
          this._matchLength = 2;
          t2 = t3 + 1;
          this._strStart = t2;
          if (bflush) {
            t3 = this._blockStart;
            if (typeof t3 !== "number")
              return t3.$ge();
            if (t3 >= 0)
              t4 = t3;
            else
              t4 = -1;
            this._trFlushBlock$3(t4, t2 - t3, false);
            this._blockStart = this._strStart;
            this._flushPending$0();
          }
        } else if (this._matchAvailable !== 0) {
          t2 = this._window;
          t3 = this._strStart;
          if (typeof t3 !== "number")
            return t3.$sub();
          --t3;
          if (t3 >>> 0 !== t3 || t3 >= t2.length)
            return H.ioore(t2, t3);
          bflush = this._trTally$2(0, t2[t3] & 255);
          if (bflush) {
            t2 = this._blockStart;
            if (typeof t2 !== "number")
              return t2.$ge();
            if (t2 >= 0)
              t3 = t2;
            else
              t3 = -1;
            t4 = this._strStart;
            if (typeof t4 !== "number")
              return t4.$sub();
            this._trFlushBlock$3(t3, t4 - t2, false);
            this._blockStart = this._strStart;
            this._flushPending$0();
          }
          t2 = this._strStart;
          if (typeof t2 !== "number")
            return t2.$add();
          this._strStart = t2 + 1;
          t2 = this._lookAhead;
          if (typeof t2 !== "number")
            return t2.$sub();
          this._lookAhead = t2 - 1;
        } else {
          this._matchAvailable = 1;
          t2 = this._strStart;
          if (typeof t2 !== "number")
            return t2.$add();
          this._strStart = t2 + 1;
          t2 = this._lookAhead;
          if (typeof t2 !== "number")
            return t2.$sub();
          this._lookAhead = t2 - 1;
        }
      }
      if (this._matchAvailable !== 0) {
        t1 = this._window;
        t2 = this._strStart;
        if (typeof t2 !== "number")
          return t2.$sub();
        --t2;
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        this._trTally$2(0, t1[t2] & 255);
        this._matchAvailable = 0;
      }
      t1 = flush === 4;
      this._flushBlockOnly$1(t1);
      return t1 ? 3 : 1;
    },
    _longestMatch$1: function(cur_match) {
      var t1, chain_length, scan, best_len, t2, limit, nice_match, wmask, strend, t3, t4, t5, scan_end1, scan_end, scan0, len, match;
      t1 = $.Deflate__config;
      chain_length = t1.maxChain;
      scan = this._strStart;
      best_len = this._prevLength;
      t2 = this._windowSize;
      if (typeof t2 !== "number")
        return t2.$sub();
      t2 -= 262;
      if (typeof scan !== "number")
        return scan.$gt();
      limit = scan > t2 ? scan - t2 : 0;
      nice_match = t1.niceLength;
      wmask = this._windowMask;
      strend = scan + 258;
      t2 = this._window;
      if (typeof best_len !== "number")
        return H.iae(best_len);
      t3 = scan + best_len;
      t4 = t3 - 1;
      t5 = t2.length;
      if (t4 >>> 0 !== t4 || t4 >= t5)
        return H.ioore(t2, t4);
      scan_end1 = t2[t4];
      if (t3 >>> 0 !== t3 || t3 >= t5)
        return H.ioore(t2, t3);
      scan_end = t2[t3];
      if (best_len >= t1.goodLength)
        chain_length = chain_length >>> 2;
      t1 = this._lookAhead;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (nice_match > t1)
        nice_match = t1;
      scan0 = strend - 258;
      len = null;
      do {
        c$0: {
          t1 = this._window;
          t2 = cur_match + best_len;
          t3 = t1.length;
          if (t2 >>> 0 !== t2 || t2 >= t3)
            return H.ioore(t1, t2);
          if (t1[t2] === scan_end) {
            --t2;
            if (t2 < 0)
              return H.ioore(t1, t2);
            if (t1[t2] === scan_end1) {
              if (cur_match < 0 || cur_match >= t3)
                return H.ioore(t1, cur_match);
              t2 = t1[cur_match];
              if (scan >>> 0 !== scan || scan >= t3)
                return H.ioore(t1, scan);
              if (t2 === t1[scan]) {
                match = cur_match + 1;
                if (match >= t3)
                  return H.ioore(t1, match);
                t2 = t1[match];
                t4 = scan + 1;
                if (t4 >= t3)
                  return H.ioore(t1, t4);
                t4 = t2 !== t1[t4];
                t2 = t4;
              } else {
                match = cur_match;
                t2 = true;
              }
            } else {
              match = cur_match;
              t2 = true;
            }
          } else {
            match = cur_match;
            t2 = true;
          }
          if (t2)
            break c$0;
          scan += 2;
          ++match;
          do {
            ++scan;
            if (scan >>> 0 !== scan || scan >= t3)
              return H.ioore(t1, scan);
            t2 = t1[scan];
            ++match;
            if (match < 0 || match >= t3)
              return H.ioore(t1, match);
            if (t2 === t1[match]) {
              ++scan;
              if (scan >= t3)
                return H.ioore(t1, scan);
              t2 = t1[scan];
              ++match;
              if (match >= t3)
                return H.ioore(t1, match);
              if (t2 === t1[match]) {
                ++scan;
                if (scan >= t3)
                  return H.ioore(t1, scan);
                t2 = t1[scan];
                ++match;
                if (match >= t3)
                  return H.ioore(t1, match);
                if (t2 === t1[match]) {
                  ++scan;
                  if (scan >= t3)
                    return H.ioore(t1, scan);
                  t2 = t1[scan];
                  ++match;
                  if (match >= t3)
                    return H.ioore(t1, match);
                  if (t2 === t1[match]) {
                    ++scan;
                    if (scan >= t3)
                      return H.ioore(t1, scan);
                    t2 = t1[scan];
                    ++match;
                    if (match >= t3)
                      return H.ioore(t1, match);
                    if (t2 === t1[match]) {
                      ++scan;
                      if (scan >= t3)
                        return H.ioore(t1, scan);
                      t2 = t1[scan];
                      ++match;
                      if (match >= t3)
                        return H.ioore(t1, match);
                      if (t2 === t1[match]) {
                        ++scan;
                        if (scan >= t3)
                          return H.ioore(t1, scan);
                        t2 = t1[scan];
                        ++match;
                        if (match >= t3)
                          return H.ioore(t1, match);
                        if (t2 === t1[match]) {
                          ++scan;
                          if (scan >= t3)
                            return H.ioore(t1, scan);
                          t2 = t1[scan];
                          ++match;
                          if (match >= t3)
                            return H.ioore(t1, match);
                          t2 = t2 === t1[match] && scan < strend;
                        } else
                          t2 = false;
                      } else
                        t2 = false;
                    } else
                      t2 = false;
                  } else
                    t2 = false;
                } else
                  t2 = false;
              } else
                t2 = false;
            } else
              t2 = false;
          } while (t2);
          len = 258 - (strend - scan);
          if (len > best_len) {
            this._matchStart = cur_match;
            if (len >= nice_match) {
              best_len = len;
              break;
            }
            t1 = this._window;
            t2 = scan0 + len;
            t3 = t2 - 1;
            t4 = t1.length;
            if (t3 >>> 0 !== t3 || t3 >= t4)
              return H.ioore(t1, t3);
            scan_end1 = t1[t3];
            if (t2 >>> 0 !== t2 || t2 >= t4)
              return H.ioore(t1, t2);
            scan_end = t1[t2];
            best_len = len;
          }
          scan = scan0;
        }
        t1 = this._prev;
        if (typeof wmask !== "number")
          return H.iae(wmask);
        t2 = cur_match & wmask;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        cur_match = t1[t2] & 65535;
        if (cur_match > limit) {
          --chain_length;
          t1 = chain_length !== 0;
        } else
          t1 = false;
      } while (t1);
      t1 = this._lookAhead;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (best_len <= t1)
        return best_len;
      return t1;
    },
    _readBuf$3: function(buf, start, size) {
      var t1, t2, t3, t4, len, bytes, t5;
      t1 = this._archive$_input;
      t2 = t1._archive$_length;
      t3 = t1.offset;
      t4 = t1.start;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      len = J.$sub$n(t2, t3 - t4);
      if (J.$gt$n(len, size))
        len = size;
      if (J.$eq(len, 0))
        return 0;
      t2 = t1.offset;
      if (typeof t2 !== "number")
        return t2.$sub();
      bytes = t1.subset$2(t2 - t4, len);
      t4 = t1.offset;
      t2 = bytes._archive$_length;
      t3 = bytes.offset;
      t5 = bytes.start;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t5 !== "number")
        return H.iae(t5);
      t5 = J.$sub$n(t2, t3 - t5);
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1.offset = t4 + t5;
      if (typeof len !== "number")
        return H.iae(len);
      J.setRange$3$ax(buf, start, start + len, bytes.toUint8List$0());
      return len;
    },
    _flushPending$0: function() {
      var len, t1;
      len = this._archive$_pending;
      this._archive$_output.writeBytes$2(this._pendingBuffer, len);
      t1 = this._pendingOut;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof len !== "number")
        return H.iae(len);
      this._pendingOut = t1 + len;
      t1 = this._archive$_pending;
      if (typeof t1 !== "number")
        return t1.$sub();
      t1 -= len;
      this._archive$_pending = t1;
      if (t1 === 0)
        this._pendingOut = 0;
    },
    _getConfig$1: function(level) {
      switch (level) {
        case 0:
          return new T._DeflaterConfig(0, 0, 0, 0, 0);
        case 1:
          return new T._DeflaterConfig(4, 4, 8, 4, 1);
        case 2:
          return new T._DeflaterConfig(4, 5, 16, 8, 1);
        case 3:
          return new T._DeflaterConfig(4, 6, 32, 32, 1);
        case 4:
          return new T._DeflaterConfig(4, 4, 16, 16, 2);
        case 5:
          return new T._DeflaterConfig(8, 16, 32, 32, 2);
        case 6:
          return new T._DeflaterConfig(8, 16, 128, 128, 2);
        case 7:
          return new T._DeflaterConfig(8, 32, 128, 256, 2);
        case 8:
          return new T._DeflaterConfig(32, 128, 258, 1024, 2);
        case 9:
          return new T._DeflaterConfig(32, 258, 258, 4096, 2);
      }
      return;
    },
    static: {"^": "Deflate_DEFAULT_COMPRESSION,Deflate_BEST_COMPRESSION,Deflate_BEST_SPEED,Deflate_NO_COMPRESSION,Deflate_NO_FLUSH,Deflate_PARTIAL_FLUSH,Deflate_SYNC_FLUSH,Deflate_FULL_FLUSH,Deflate_FINISH,Deflate_MAX_MEM_LEVEL,Deflate_Z_DEFAULT_COMPRESSION,Deflate_MAX_WBITS,Deflate_DEF_MEM_LEVEL,Deflate_STORED,Deflate_FAST,Deflate_SLOW,Deflate__config,Deflate_NEED_MORE,Deflate_BLOCK_DONE,Deflate_FINISH_STARTED,Deflate_FINISH_DONE,Deflate_Z_FILTERED,Deflate_Z_HUFFMAN_ONLY,Deflate_Z_DEFAULT_STRATEGY,Deflate_Z_OK,Deflate_Z_STREAM_END,Deflate_Z_NEED_DICT,Deflate_Z_ERRNO,Deflate_Z_STREAM_ERROR,Deflate_Z_DATA_ERROR,Deflate_Z_MEM_ERROR,Deflate_Z_BUF_ERROR,Deflate_Z_VERSION_ERROR,Deflate_INIT_STATE,Deflate_BUSY_STATE,Deflate_FINISH_STATE,Deflate_Z_DEFLATED,Deflate_STORED_BLOCK,Deflate_STATIC_TREES,Deflate_DYN_TREES,Deflate_Z_BINARY,Deflate_Z_ASCII,Deflate_Z_UNKNOWN,Deflate_BUF_SIZE,Deflate_REP_3_6,Deflate_REPZ_3_10,Deflate_REPZ_11_138,Deflate_MIN_MATCH,Deflate_MAX_MATCH,Deflate_MIN_LOOKAHEAD,Deflate_MAX_BITS,Deflate_D_CODES,Deflate_BL_CODES,Deflate_LENGTH_CODES,Deflate_LITERALS,Deflate_L_CODES,Deflate_HEAP_SIZE,Deflate_END_BLOCK", Deflate__smaller: function(tree, n, m, depth) {
        var t1, t2, t3;
        t1 = n * 2;
        t2 = tree.length;
        if (t1 >= t2)
          return H.ioore(tree, t1);
        t1 = tree[t1];
        t3 = m * 2;
        if (t3 >= t2)
          return H.ioore(tree, t3);
        t3 = tree[t3];
        if (t1 >= t3)
          if (t1 === t3) {
            t1 = depth.length;
            if (n >= t1)
              return H.ioore(depth, n);
            t2 = depth[n];
            if (m >= t1)
              return H.ioore(depth, m);
            t2 = t2 <= depth[m];
            t1 = t2;
          } else
            t1 = false;
        else
          t1 = true;
        return t1;
      }}
  },
  _DeflaterConfig: {
    "^": "Object;goodLength,maxLazy,niceLength,maxChain,$function"
  },
  _HuffmanTree0: {
    "^": "Object;dynamicTree,maxCode,staticDesc",
    _genBitlen$1: function(s) {
      var tree, t1, stree, extra, base_Renamed, max_length, t2, bits, t3, t4, t5, t6, t7, h, xbits, f, overflow, n, t8, t9, bits0, m;
      tree = this.dynamicTree;
      t1 = this.staticDesc;
      stree = t1.staticTree;
      extra = t1.extraBits;
      base_Renamed = t1.extraBase;
      max_length = t1.maxLength;
      for (t1 = s._bitLengthCount, t2 = t1.length, bits = 0; bits <= 15; ++bits) {
        if (bits >= t2)
          return H.ioore(t1, bits);
        t1[bits] = 0;
      }
      t3 = s._heap;
      t4 = s._heapMax;
      t5 = t3.length;
      if (t4 >>> 0 !== t4 || t4 >= t5)
        return H.ioore(t3, t4);
      t6 = t3[t4] * 2 + 1;
      t7 = tree.length;
      if (t6 >= t7)
        return H.ioore(tree, t6);
      tree[t6] = 0;
      for (h = t4 + 1, t4 = stree != null, xbits = null, f = null, overflow = 0; h < 573; ++h) {
        if (h >= t5)
          return H.ioore(t3, h);
        n = t3[h];
        t6 = n * 2;
        t8 = t6 + 1;
        if (t8 >= t7)
          return H.ioore(tree, t8);
        t9 = tree[t8] * 2 + 1;
        if (t9 >= t7)
          return H.ioore(tree, t9);
        bits = tree[t9] + 1;
        if (bits > max_length) {
          ++overflow;
          bits = max_length;
        }
        tree[t8] = bits;
        t9 = this.maxCode;
        if (typeof t9 !== "number")
          return H.iae(t9);
        if (n > t9)
          continue;
        if (bits >= t2)
          return H.ioore(t1, bits);
        t1[bits] = t1[bits] + 1;
        if (n >= base_Renamed) {
          t9 = n - base_Renamed;
          if (t9 < 0 || t9 >= extra.length)
            return H.ioore(extra, t9);
          xbits = extra[t9];
        } else
          xbits = 0;
        if (t6 >= t7)
          return H.ioore(tree, t6);
        f = tree[t6];
        t6 = s._optimalLen;
        if (typeof xbits !== "number")
          return H.iae(xbits);
        if (typeof t6 !== "number")
          return t6.$add();
        s._optimalLen = t6 + f * (bits + xbits);
        if (t4) {
          t6 = s._staticLen;
          if (t8 >= stree.length)
            return H.ioore(stree, t8);
          t8 = J.$add$ns(stree[t8], xbits);
          if (typeof t8 !== "number")
            return H.iae(t8);
          if (typeof t6 !== "number")
            return t6.$add();
          s._staticLen = t6 + f * t8;
        }
      }
      if (overflow === 0)
        return;
      bits = max_length - 1;
      do {
        bits0 = bits;
        while (true) {
          if (bits0 < 0 || bits0 >= t2)
            return H.ioore(t1, bits0);
          t4 = t1[bits0];
          if (!(t4 === 0))
            break;
          --bits0;
        }
        t1[bits0] = t4 - 1;
        t4 = bits0 + 1;
        if (t4 >= t2)
          return H.ioore(t1, t4);
        t1[t4] = t1[t4] + 2;
        if (max_length >= t2)
          return H.ioore(t1, max_length);
        t1[max_length] = t1[max_length] - 1;
        overflow -= 2;
      } while (overflow > 0);
      for (bits = max_length, m = null; bits !== 0; --bits) {
        if (bits < 0 || bits >= t2)
          return H.ioore(t1, bits);
        n = t1[bits];
        for (; n !== 0;) {
          --h;
          if (h < 0 || h >= t5)
            return H.ioore(t3, h);
          m = t3[h];
          t4 = this.maxCode;
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (m > t4)
            continue;
          t4 = m * 2;
          t6 = t4 + 1;
          if (t6 >= t7)
            return H.ioore(tree, t6);
          t8 = tree[t6];
          if (t8 !== bits) {
            t9 = s._optimalLen;
            if (t4 >= t7)
              return H.ioore(tree, t4);
            t4 = tree[t4];
            if (typeof t9 !== "number")
              return t9.$add();
            s._optimalLen = t9 + (bits - t8) * t4;
            tree[t6] = bits;
          }
          --n;
        }
      }
    },
    _archive$_buildTree$1: function(s) {
      var tree, t1, stree, elems, t2, t3, t4, n, max_code, t5, t6, node, t7, m, t8, t9, t10, node0;
      tree = this.dynamicTree;
      t1 = this.staticDesc;
      stree = t1.staticTree;
      elems = t1.numElements;
      s._heapLen = 0;
      s._heapMax = 573;
      for (t1 = s._heap, t2 = t1.length, t3 = s._depth, t4 = t3.length, n = 0, max_code = -1; n < elems; ++n) {
        t5 = n * 2;
        t6 = tree.length;
        if (t5 >= t6)
          return H.ioore(tree, t5);
        if (tree[t5] !== 0) {
          t5 = s._heapLen;
          if (typeof t5 !== "number")
            return t5.$add();
          ++t5;
          s._heapLen = t5;
          if (t5 < 0 || t5 >= t2)
            return H.ioore(t1, t5);
          t1[t5] = n;
          if (n >= t4)
            return H.ioore(t3, n);
          t3[n] = 0;
          max_code = n;
        } else {
          ++t5;
          if (t5 >= t6)
            return H.ioore(tree, t5);
          tree[t5] = 0;
        }
      }
      t5 = stree != null;
      while (true) {
        t6 = s._heapLen;
        if (typeof t6 !== "number")
          return t6.$lt();
        if (!(t6 < 2))
          break;
        ++t6;
        s._heapLen = t6;
        if (max_code < 2) {
          ++max_code;
          node = max_code;
        } else
          node = 0;
        if (t6 < 0 || t6 >= t2)
          return H.ioore(t1, t6);
        t1[t6] = node;
        t6 = node * 2;
        if (t6 < 0 || t6 >= tree.length)
          return H.ioore(tree, t6);
        tree[t6] = 1;
        if (node >= t4)
          return H.ioore(t3, node);
        t3[node] = 0;
        t7 = s._optimalLen;
        if (typeof t7 !== "number")
          return t7.$sub();
        s._optimalLen = t7 - 1;
        if (t5) {
          t7 = s._staticLen;
          ++t6;
          if (t6 >= stree.length)
            return H.ioore(stree, t6);
          t6 = stree[t6];
          if (typeof t7 !== "number")
            return t7.$sub();
          if (typeof t6 !== "number")
            return H.iae(t6);
          s._staticLen = t7 - t6;
        }
      }
      this.maxCode = max_code;
      for (n = C.JSInt_methods._tdivFast$1(t6, 2); n >= 1; --n)
        s._pqdownheap$2(tree, n);
      if (1 >= t2)
        return H.ioore(t1, 1);
      node = elems;
      do {
        n = t1[1];
        t5 = s._heapLen;
        if (typeof t5 !== "number")
          return t5.$sub();
        s._heapLen = t5 - 1;
        if (t5 < 0 || t5 >= t2)
          return H.ioore(t1, t5);
        t1[1] = t1[t5];
        s._pqdownheap$2(tree, 1);
        m = t1[1];
        t5 = s._heapMax;
        if (typeof t5 !== "number")
          return t5.$sub();
        --t5;
        s._heapMax = t5;
        if (t5 < 0 || t5 >= t2)
          return H.ioore(t1, t5);
        t1[t5] = n;
        --t5;
        s._heapMax = t5;
        if (t5 < 0 || t5 >= t2)
          return H.ioore(t1, t5);
        t1[t5] = m;
        t5 = node * 2;
        t6 = n * 2;
        t7 = tree.length;
        if (t6 >= t7)
          return H.ioore(tree, t6);
        t8 = tree[t6];
        t9 = m * 2;
        if (t9 >= t7)
          return H.ioore(tree, t9);
        t10 = tree[t9];
        if (t5 >= t7)
          return H.ioore(tree, t5);
        tree[t5] = t8 + t10;
        if (n >= t4)
          return H.ioore(t3, n);
        t10 = t3[n];
        if (m >= t4)
          return H.ioore(t3, m);
        t8 = t3[m];
        t5 = t10 > t8 ? t10 : t8;
        if (node >= t4)
          return H.ioore(t3, node);
        t3[node] = t5 + 1;
        ++t6;
        ++t9;
        if (t9 >= t7)
          return H.ioore(tree, t9);
        tree[t9] = node;
        if (t6 >= t7)
          return H.ioore(tree, t6);
        tree[t6] = node;
        node0 = node + 1;
        t1[1] = node;
        s._pqdownheap$2(tree, 1);
        t5 = s._heapLen;
        if (typeof t5 !== "number")
          return t5.$ge();
        if (t5 >= 2) {
          node = node0;
          continue;
        } else
          break;
      } while (true);
      t3 = s._heapMax;
      if (typeof t3 !== "number")
        return t3.$sub();
      --t3;
      s._heapMax = t3;
      t4 = t1[1];
      if (t3 < 0 || t3 >= t2)
        return H.ioore(t1, t3);
      t1[t3] = t4;
      this._genBitlen$1(s);
      T._HuffmanTree__genCodes(tree, max_code, s._bitLengthCount);
    },
    static: {"^": "_HuffmanTree_MAX_BITS,_HuffmanTree_BL_CODES,_HuffmanTree_D_CODES,_HuffmanTree_LITERALS,_HuffmanTree_LENGTH_CODES,_HuffmanTree_L_CODES,_HuffmanTree_HEAP_SIZE,_HuffmanTree_MAX_BL_BITS,_HuffmanTree_END_BLOCK,_HuffmanTree_REP_3_6,_HuffmanTree_REPZ_3_10,_HuffmanTree_REPZ_11_138,_HuffmanTree_EXTRA_L_BITS,_HuffmanTree_EXTRA_D_BITS,_HuffmanTree_EXTRA_BL_BITS,_HuffmanTree_BL_ORDER,_HuffmanTree_BUF_SIZE,_HuffmanTree_DIST_CODE_LEN,_HuffmanTree__DIST_CODE,_HuffmanTree_LENGTH_CODE,_HuffmanTree_BASE_LENGTH,_HuffmanTree_BASE_DIST", _HuffmanTree__genCodes: function(tree, max_code, bl_count) {
        var next_code, t1, code, bits, t2, n, t3, len;
        next_code = new Uint16Array(16);
        for (t1 = bl_count.length, code = 0, bits = 1; bits <= 15; ++bits) {
          t2 = bits - 1;
          if (t2 >= t1)
            return H.ioore(bl_count, t2);
          code = code + bl_count[t2] << 1 >>> 0;
          next_code[bits] = code;
        }
        for (t1 = tree.length, n = 0; n <= max_code; ++n) {
          t2 = n * 2;
          t3 = t2 + 1;
          if (t3 >= t1)
            return H.ioore(tree, t3);
          len = tree[t3];
          if (len === 0)
            continue;
          if (len >= 16)
            return H.ioore(next_code, len);
          t3 = next_code[len];
          next_code[len] = t3 + 1;
          t3 = T._HuffmanTree__reverseBits(t3, len);
          if (t2 >= t1)
            return H.ioore(tree, t2);
          tree[t2] = t3;
        }
      }, _HuffmanTree__reverseBits: function(code, len) {
        var res, code0;
        res = 0;
        do {
          code0 = T._rshift(code, 1);
          res = (res | code & 1) << 1 >>> 0;
          if (--len, len > 0) {
            code = code0;
            continue;
          } else
            break;
        } while (true);
        return T._rshift(res, 1);
      }}
  },
  _StaticTree: {
    "^": "Object;staticTree,extraBits,extraBase,numElements,maxLength",
    static: {"^": "_StaticTree_MAX_BITS,_StaticTree_BL_CODES,_StaticTree_D_CODES,_StaticTree_LITERALS,_StaticTree_LENGTH_CODES,_StaticTree_L_CODES,_StaticTree_MAX_BL_BITS,_StaticTree_STATIC_LTREE,_StaticTree_STATIC_DTREE,_StaticTree_staticLDesc,_StaticTree_staticDDesc,_StaticTree_staticBlDesc"}
  },
  HuffmanTable: {
    "^": "Object;table,maxCodeLength,minCodeLength",
    HuffmanTable$1: function(lengths) {
      var listSize, i, t1, size, bitLength, code, skip, rtemp, reversed, j, t2, t3;
      listSize = lengths.length;
      for (i = 0; i < listSize; ++i) {
        if (i >= lengths.length)
          return H.ioore(lengths, i);
        if (J.$gt$n(lengths[i], this.maxCodeLength)) {
          if (i >= lengths.length)
            return H.ioore(lengths, i);
          this.maxCodeLength = lengths[i];
        }
        if (i >= lengths.length)
          return H.ioore(lengths, i);
        if (J.$lt$n(lengths[i], this.minCodeLength)) {
          if (i >= lengths.length)
            return H.ioore(lengths, i);
          this.minCodeLength = lengths[i];
        }
      }
      t1 = this.maxCodeLength;
      if (typeof t1 !== "number")
        return H.iae(t1);
      size = C.JSInt_methods.$shl(1, t1);
      this.table = new Uint32Array(size);
      bitLength = 1;
      code = 0;
      skip = 2;
      while (true) {
        t1 = this.maxCodeLength;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(bitLength <= t1))
          break;
        for (t1 = bitLength << 16, i = 0; i < listSize; ++i) {
          if (i >= lengths.length)
            return H.ioore(lengths, i);
          if (J.$eq(lengths[i], bitLength)) {
            for (rtemp = code, reversed = 0, j = 0; j < bitLength; ++j) {
              reversed = (reversed << 1 | rtemp & 1) >>> 0;
              rtemp = rtemp >>> 1;
            }
            for (t2 = this.table, t3 = (t1 | i) >>> 0, j = reversed; j < size; j += skip) {
              if (j < 0 || j >= t2.length)
                return H.ioore(t2, j);
              t2[j] = t3;
            }
            ++code;
          }
        }
        ++bitLength;
        code = code << 1 >>> 0;
        skip = skip << 1 >>> 0;
      }
    },
    static: {HuffmanTable$: function(lengths) {
        var t1 = new T.HuffmanTable(null, 0, 2147483647);
        t1.HuffmanTable$1(lengths);
        return t1;
      }}
  },
  Inflate: {
    "^": "Object;input,output,_bitBuffer,_bitBufferLen,_blockPos,_fixedLiteralLengthTable,_fixedDistanceTable",
    _inflate$0: function() {
      this._bitBuffer = 0;
      this._bitBufferLen = 0;
      var t1 = this.output;
      t1._archive$_buffer = new Uint8Array(32768);
      t1.length = 0;
      for (; this._parseBlock$0();)
        ;
    },
    _parseBlock$0: function() {
      var t1, t2, t3, hdr, btype, len, bytes, t4, t5;
      t1 = this.input;
      t2 = t1.offset;
      t3 = t1.start;
      t1 = t1._archive$_length;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= t3 + t1)
        return false;
      hdr = this._readBits$1(3);
      btype = hdr >>> 1;
      switch (btype) {
        case 0:
          this._bitBuffer = 0;
          this._bitBufferLen = 0;
          len = this._readBits$1(16);
          if (len === ~this._readBits$1(16) >>> 0)
            H.throwExpression(T.ArchiveException$("Invalid uncompressed block header"));
          t1 = this.input;
          t2 = t1._archive$_length;
          t3 = t1.offset;
          t1 = t1.start;
          if (typeof t3 !== "number")
            return t3.$sub();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = J.$sub$n(t2, t3 - t1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (len > t1)
            H.throwExpression(T.ArchiveException$("Input buffer is broken"));
          t1 = this.input;
          t2 = t1.offset;
          t3 = t1.start;
          if (typeof t2 !== "number")
            return t2.$sub();
          if (typeof t3 !== "number")
            return H.iae(t3);
          bytes = t1.subset$2(t2 - t3, len);
          t3 = t1.offset;
          t2 = bytes._archive$_length;
          t4 = bytes.offset;
          t5 = bytes.start;
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = J.$sub$n(t2, t4 - t5);
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t1.offset = t3 + t5;
          this.output.writeInputStream$1(bytes);
          break;
        case 1:
          this._decodeHuffman$2(this._fixedLiteralLengthTable, this._fixedDistanceTable);
          break;
        case 2:
          this._parseDynamicHuffmanBlock$0();
          break;
        default:
          throw H.wrapException(T.ArchiveException$("unknown BTYPE: " + btype));
      }
      return (hdr & 1) === 0;
    },
    _readBits$1: function($length) {
      var t1, t2, t3, t4, octet;
      if (J.$eq($length, 0))
        return 0;
      if (typeof $length !== "number")
        return H.iae($length);
      for (; t1 = this._bitBufferLen, t1 < $length;) {
        t1 = this.input;
        t2 = t1.offset;
        t3 = t1.start;
        t4 = t1._archive$_length;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof t2 !== "number")
          return t2.$ge();
        if (t2 >= t3 + t4)
          throw H.wrapException(T.ArchiveException$("input buffer is broken"));
        t1.offset = t2 + 1;
        octet = J.$index$asx(t1.buffer, t2);
        t1 = this._bitBuffer;
        t2 = this._bitBufferLen;
        if (typeof octet !== "number")
          return octet.$shl();
        this._bitBuffer = (t1 | C.JSNumber_methods.$shl(octet, t2)) >>> 0;
        this._bitBufferLen = t2 + 8;
      }
      t2 = this._bitBuffer;
      t3 = C.JSInt_methods.$shl(1, $length);
      this._bitBuffer = C.JSInt_methods._shrReceiverPositive$1(t2, $length);
      this._bitBufferLen = t1 - $length;
      return (t2 & t3 - 1) >>> 0;
    },
    _readCodeByTable$1: function(table) {
      var codeTable, maxCodeLength, t1, t2, t3, t4, t5, octet, codeWithLength, codeLength;
      codeTable = table.table;
      maxCodeLength = table.maxCodeLength;
      if (typeof maxCodeLength !== "number")
        return H.iae(maxCodeLength);
      for (; t1 = this._bitBufferLen, t1 < maxCodeLength;) {
        t2 = this.input;
        t3 = t2.offset;
        t4 = t2.start;
        t5 = t2._archive$_length;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= t4 + t5)
          break;
        t2.offset = t3 + 1;
        octet = J.$index$asx(t2.buffer, t3);
        t1 = this._bitBuffer;
        t2 = this._bitBufferLen;
        if (typeof octet !== "number")
          return octet.$shl();
        this._bitBuffer = (t1 | C.JSNumber_methods.$shl(octet, t2)) >>> 0;
        this._bitBufferLen = t2 + 8;
      }
      t2 = this._bitBuffer;
      t3 = (t2 & C.JSInt_methods.$shl(1, maxCodeLength) - 1) >>> 0;
      if (t3 >= codeTable.length)
        return H.ioore(codeTable, t3);
      codeWithLength = codeTable[t3];
      codeLength = codeWithLength >>> 16;
      this._bitBuffer = C.JSInt_methods._shrBothPositive$1(t2, codeLength);
      this._bitBufferLen = t1 - codeLength;
      return codeWithLength & 65535;
    },
    _parseDynamicHuffmanBlock$0: function() {
      var numLitLengthCodes, numDistanceCodes, numCodeLengths, codeLengths, i, t1, t2, codeLengthsTable, litlenLengths, distLengths, litlen, dist;
      numLitLengthCodes = this._readBits$1(5) + 257;
      numDistanceCodes = this._readBits$1(5) + 1;
      numCodeLengths = this._readBits$1(4) + 4;
      codeLengths = new Uint8Array(19);
      for (i = 0; i < numCodeLengths; ++i) {
        if (i >= 19)
          return H.ioore(C.List_uSC, i);
        t1 = C.List_uSC[i];
        t2 = this._readBits$1(3);
        if (t1 >>> 0 !== t1 || t1 >= 19)
          return H.ioore(codeLengths, t1);
        codeLengths[t1] = t2;
      }
      codeLengthsTable = T.HuffmanTable$(codeLengths);
      litlenLengths = new Uint8Array(numLitLengthCodes);
      distLengths = new Uint8Array(numDistanceCodes);
      litlen = this._decode$3(numLitLengthCodes, codeLengthsTable, litlenLengths);
      dist = this._decode$3(numDistanceCodes, codeLengthsTable, distLengths);
      this._decodeHuffman$2(T.HuffmanTable$(litlen), T.HuffmanTable$(dist));
    },
    _decodeHuffman$2: function(litlen, dist) {
      var code, t1, t2, t3, ti, codeLength, distCode, distance;
      for (; true;) {
        code = this._readCodeByTable$1(litlen);
        if (code > 285)
          throw H.wrapException(T.ArchiveException$("Invalid Huffman Code " + code));
        if (code === 256)
          break;
        if (code < 256) {
          t1 = this.output;
          if (J.$eq(t1.length, t1._archive$_buffer.length))
            t1._archive$_expandBuffer$0();
          t2 = t1._archive$_buffer;
          t3 = t1.length;
          t1.length = J.$add$ns(t3, 1);
          if (t3 >>> 0 !== t3 || t3 >= t2.length)
            return H.ioore(t2, t3);
          t2[t3] = code & 255 & 255;
          continue;
        }
        ti = code - 257;
        if (ti < 0 || ti >= 29)
          return H.ioore(C.List_qQn, ti);
        codeLength = J.$add$ns(C.List_qQn[ti], this._readBits$1(C.List_eea[ti]));
        distCode = this._readCodeByTable$1(dist);
        if (distCode <= 29) {
          if (distCode >= 30)
            return H.ioore(C.List_i3t, distCode);
          distance = J.$add$ns(C.List_i3t[distCode], this._readBits$1(C.List_X3d0[distCode]));
          for (t1 = this.output, t2 = J.getInterceptor$n(distance); t3 = J.getInterceptor$n(codeLength), t3.$gt(codeLength, distance);) {
            t1.writeBytes$1(t1.subset$1(t2.$negate(distance)));
            codeLength = t3.$sub(codeLength, distance);
          }
          if (t3.$eq(codeLength, distance))
            t1.writeBytes$1(t1.subset$1(t2.$negate(distance)));
          else
            t1.writeBytes$1(t1.subset$2(t2.$negate(distance), t3.$sub(codeLength, distance)));
        } else
          throw H.wrapException(T.ArchiveException$("Illegal unused distance symbol"));
      }
      for (; t1 = this._bitBufferLen, t1 >= 8;) {
        this._bitBufferLen = t1 - 8;
        t1 = this.input;
        t2 = t1.offset;
        if (typeof t2 !== "number")
          return t2.$sub();
        t1.offset = t2 - 1;
      }
    },
    _decode$3: function(num, table, lengths) {
      var t1, prev, i, code, repeat, repeat0, i0;
      for (t1 = lengths.length, prev = 0, i = 0; i < num;) {
        code = this._readCodeByTable$1(table);
        switch (code) {
          case 16:
            repeat = 3 + this._readBits$1(2);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = prev;
            }
            break;
          case 17:
            repeat = 3 + this._readBits$1(3);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          case 18:
            repeat = 11 + this._readBits$1(7);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          default:
            if (code > 15)
              throw H.wrapException(T.ArchiveException$("Invalid Huffman Code: " + code));
            i0 = i + 1;
            if (i < 0 || i >= t1)
              return H.ioore(lengths, i);
            lengths[i] = code;
            i = i0;
            prev = code;
            break;
        }
      }
      return lengths;
    },
    Inflate$2: function(bytes, uncompressedSize) {
      this._inflate$0();
    },
    static: {"^": "Inflate__BLOCK_UNCOMPRESSED,Inflate__BLOCK_FIXED_HUFFMAN,Inflate__BLOCK_DYNAMIC_HUFFMAN,Inflate__FIXED_LITERAL_LENGTHS,Inflate__FIXED_DISTANCE_TABLE,Inflate__MAX_BACKWARD_LENGTH,Inflate__MAX_COPY_LENGTH,Inflate__ORDER,Inflate__LENGTH_CODE_TABLE,Inflate__LENGTH_EXTRA_TABLE,Inflate__DIST_CODE_TABLE,Inflate__DIST_EXTRA_TABLE", Inflate$: function(bytes, uncompressedSize) {
        var t1, t2;
        t1 = T.HuffmanTable$(C.List_2Bc);
        t2 = T.HuffmanTable$(C.List_X3d);
        t2 = new T.Inflate(T.InputStream$(bytes, 0, null, 0), T.OutputStream$(0, uncompressedSize), 0, 0, 0, t1, t2);
        t2.Inflate$2(bytes, uncompressedSize);
        return t2;
      }}
  },
  ZLibDecoder: {
    "^": "Object;",
    decodeBuffer$2$verify: function(input, verify) {
      var t1, t2, t3, cmf, flg, method, buffer, adler32;
      t1 = input.buffer;
      t2 = input.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      input.offset = t2 + 1;
      t3 = J.getInterceptor$asx(t1);
      cmf = t3.$index(t1, t2);
      t2 = input.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      input.offset = t2 + 1;
      flg = t3.$index(t1, t2);
      method = J.getInterceptor$n(cmf).$and(cmf, 8);
      if (typeof cmf !== "number")
        return cmf.$shr();
      C.JSNumber_methods._shrOtherPositive$1(cmf, 3);
      if (method !== 8)
        throw H.wrapException(T.ArchiveException$("Only DEFLATE compression supported: " + method));
      t1 = J.getInterceptor$n(flg);
      t1.$and(flg, 16);
      t2 = t1.$and(flg, 32);
      t1.$and(flg, 64);
      if (typeof flg !== "number")
        return H.iae(flg);
      if (C.JSNumber_methods.$mod((cmf << 8 >>> 0) + flg, 31) !== 0)
        throw H.wrapException(T.ArchiveException$("Invalid FCHECK"));
      if (t2 >>> 5 !== 0) {
        input.readUint32$0();
        throw H.wrapException(T.ArchiveException$("FDICT Encoding not currently supported"));
      }
      t1 = T.HuffmanTable$(C.List_2Bc);
      t2 = T.HuffmanTable$(C.List_X3d);
      t3 = T.OutputStream$(0, null);
      new T.Inflate(input, t3, 0, 0, 0, t1, t2)._inflate$0();
      buffer = H.NativeUint8List_NativeUint8List$view(t3._archive$_buffer.buffer, 0, t3.length);
      adler32 = input.readUint32$0();
      if (verify)
        if (adler32 !== T.getAdler32(buffer, 1))
          throw H.wrapException(T.ArchiveException$("Invalid adler-32 checksum"));
      return buffer;
    },
    static: {"^": "ZLibDecoder_DEFLATE"}
  },
  ZLibEncoder: {
    "^": "Object;",
    encode$2$level: function(data, level) {
      var output, fcheck, t1, adler32, input, t2, t3;
      output = T.OutputStream$(1, 32768);
      output.writeByte$1(120);
      for (fcheck = 0; t1 = (0 | fcheck) >>> 0, C.JSInt_methods.$mod(30720 + t1, 31) !== 0;)
        ++fcheck;
      output.writeByte$1(t1);
      adler32 = T.getAdler32(data, 1);
      input = T.InputStream$(data, 1, null, 0);
      t1 = T.OutputStream$(0, 32768);
      t2 = new Uint16Array(16);
      t3 = new Uint32Array(573);
      t2 = new T.Deflate(input, t1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, null, null, null, null, null, null, new T._HuffmanTree0(null, null, null), new T._HuffmanTree0(null, null, null), new T._HuffmanTree0(null, null, null), t2, t3, null, null, new Uint8Array(573), null, null, null, null, null, null, null, null, null, null);
      t2._archive$_init$1(level);
      t2._deflate$1(4);
      t2._flushPending$0();
      output.writeBytes$1(H.NativeUint8List_NativeUint8List$view(t1._archive$_buffer.buffer, 0, t1.length));
      output.writeUint32$1(adler32);
      return H.NativeUint8List_NativeUint8List$view(output._archive$_buffer.buffer, 0, output.length);
    },
    static: {"^": "ZLibEncoder_DEFLATE,ZLibEncoder__WINDOW_SIZE"}
  }
}],
["cameras", "package:dartray/cameras/cameras.dart", , K, {
  "^": "",
  EnvironmentCamera: {
    "^": "Camera;cameraToWorld,shutterOpen,shutterClose,film",
    static: {EnvironmentCamera_Create: [function(params, cam2world, film) {
        var shutteropen, shutterclose, t1, t0, frame, sw, $screen;
        shutteropen = params.findOneFloat$2("shutteropen", 0);
        shutterclose = params.findOneFloat$2("shutterclose", 1);
        if (J.$lt$n(shutterclose, shutteropen)) {
          t1 = "Shutter close time [" + H.S(shutterclose) + "] < shutter open [" + H.S(shutteropen) + "]. Swapping them.";
          $.Log.call$2(1, t1);
          t0 = shutterclose;
          shutterclose = shutteropen;
          shutteropen = t0;
        }
        frame = params.findOneFloat$2("frameaspectratio", film.get$xResolution() / film.yResolution);
        sw = params.findFloat$1("screenwindow");
        if (sw != null && J.$eq(J.get$length$asx(sw), 4))
          ;
        else {
          $screen = [0, 0, 0, 0];
          if (J.$gt$n(frame, 1)) {
            if (typeof frame !== "number")
              return frame.$negate();
            $screen[0] = -frame;
            $screen[1] = frame;
            $screen[2] = -1;
            $screen[3] = 1;
          } else {
            $screen[0] = -1;
            $screen[1] = 1;
            if (typeof frame !== "number")
              return H.iae(frame);
            $screen[2] = -1 / frame;
            $screen[3] = 1 / frame;
          }
        }
        return new K.EnvironmentCamera(cam2world, shutteropen, shutterclose, film);
      }, "call$3", "EnvironmentCamera_Create$closure", 6, 0, 5]}
  },
  OrthographicCamera: {
    "^": "ProjectiveCamera;dxCamera,dyCamera,cameraToScreen,rasterToCamera,screenToRaster,rasterToScreen,lensRadius,focalDistance,cameraToWorld,shutterOpen,shutterClose,film",
    OrthographicCamera$7: function(cam2world, screenWindow, sopen, sclose, lensr, focald, film) {
      this.dxCamera = this.rasterToCamera.transformVector$1(G.Vector$(1, 0, 0));
      this.dyCamera = this.rasterToCamera.transformVector$1(G.Vector$(0, 1, 0));
    },
    static: {OrthographicCamera_Create: [function(params, cam2world, film) {
        var shutteropen, shutterclose, t1, t0, lensradius, focaldistance, frame, sw, $screen, t2;
        shutteropen = params.findOneFloat$2("shutteropen", 0);
        shutterclose = params.findOneFloat$2("shutterclose", 1);
        if (J.$lt$n(shutterclose, shutteropen)) {
          t1 = "Shutter close time [" + H.S(shutterclose) + "] < shutter open [" + H.S(shutteropen) + "].  Swapping them.";
          $.Log.call$2(1, t1);
          t0 = shutterclose;
          shutterclose = shutteropen;
          shutteropen = t0;
        }
        lensradius = params.findOneFloat$2("lensradius", 0);
        focaldistance = params.findOneFloat$2("focaldistance", 1000000000000000019884624838656);
        frame = params.findOneFloat$2("frameaspectratio", film.get$xResolution() / film.yResolution);
        sw = params.findFloat$1("screenwindow");
        if (sw != null && J.$eq(J.get$length$asx(sw), 4))
          $screen = sw;
        else {
          $screen = [0, 0, 0, 0];
          if (J.$gt$n(frame, 1)) {
            if (typeof frame !== "number")
              return frame.$negate();
            $screen[0] = -frame;
            $screen[1] = frame;
            $screen[2] = -1;
            $screen[3] = 1;
          } else {
            $screen[0] = -1;
            $screen[1] = 1;
            if (typeof frame !== "number")
              return H.iae(frame);
            $screen[2] = -1 / frame;
            $screen[3] = 1 / frame;
          }
        }
        t1 = G.Transform_Scale(1, 1, 1).$mul(0, G.Transform_Translate(G.Vector$(0, 0, -0.0)));
        t2 = new K.OrthographicCamera(null, null, t1, null, null, null, lensradius, focaldistance, cam2world, shutteropen, shutterclose, film);
        t2.ProjectiveCamera$8(cam2world, t1, $screen, shutteropen, shutterclose, lensradius, focaldistance, film);
        t2.OrthographicCamera$7(cam2world, $screen, shutteropen, shutterclose, lensradius, focaldistance, film);
        return t2;
      }, "call$3", "OrthographicCamera_Create$closure", 6, 0, 6]}
  },
  PerspectiveCamera: {
    "^": "ProjectiveCamera;dxCamera,dyCamera,cameraToScreen,rasterToCamera,screenToRaster,rasterToScreen,lensRadius,focalDistance,cameraToWorld,shutterOpen,shutterClose,film",
    PerspectiveCamera$8: function(cam2world, screenWindow, sopen, sclose, lensr, focald, fov, film) {
      var t1, t2, t3;
      t1 = this.rasterToCamera;
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(1, 0, 0);
      t2 = t1.transformPoint$1(t2);
      t1 = this.rasterToCamera;
      t3 = new G.Point(new Float32Array(3));
      t3.Vector$3(0, 0, 0);
      this.dxCamera = t2.$sub(0, t1.transformPoint$1(t3));
      t3 = this.rasterToCamera;
      t1 = new G.Point(new Float32Array(3));
      t1.Vector$3(0, 1, 0);
      t1 = t3.transformPoint$1(t1);
      t3 = this.rasterToCamera;
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(0, 0, 0);
      this.dyCamera = t1.$sub(0, t3.transformPoint$1(t2));
    },
    static: {PerspectiveCamera_Create: [function(params, cam2world, film) {
        var shutteropen, shutterclose, t0, lensradius, focaldistance, frame, sw, $screen, fov, halffov, t1, t2;
        shutteropen = params.findOneFloat$2("shutteropen", 0);
        shutterclose = params.findOneFloat$2("shutterclose", 1);
        if (J.$lt$n(shutterclose, shutteropen)) {
          t0 = shutterclose;
          shutterclose = shutteropen;
          shutteropen = t0;
        }
        lensradius = params.findOneFloat$2("lensradius", 0);
        focaldistance = params.findOneFloat$2("focaldistance", 1000000000000000019884624838656);
        frame = params.findOneFloat$2("frameaspectratio", film.get$xResolution() / film.yResolution);
        sw = params.findFloat$1("screenwindow");
        if (sw != null && J.$eq(J.get$length$asx(sw), 4))
          $screen = sw;
        else {
          $screen = [0, 0, 0, 0];
          if (J.$gt$n(frame, 1)) {
            if (typeof frame !== "number")
              return frame.$negate();
            $screen[0] = -frame;
            $screen[1] = frame;
            $screen[2] = -1;
            $screen[3] = 1;
          } else {
            $screen[0] = -1;
            $screen[1] = 1;
            if (typeof frame !== "number")
              return H.iae(frame);
            $screen[2] = -1 / frame;
            $screen[3] = 1 / frame;
          }
        }
        fov = params.findOneFloat$2("fov", 60);
        halffov = params.findOneFloat$2("halffov", -1);
        if (J.$gt$n(halffov, 0)) {
          if (typeof halffov !== "number")
            return H.iae(halffov);
          fov = 2 * halffov;
        }
        t1 = G.Transform_Perspective(fov, 0.01, 1000);
        t2 = new K.PerspectiveCamera(null, null, t1, null, null, null, lensradius, focaldistance, cam2world, shutteropen, shutterclose, film);
        t2.ProjectiveCamera$8(cam2world, t1, $screen, shutteropen, shutterclose, lensradius, focaldistance, film);
        t2.PerspectiveCamera$8(cam2world, $screen, shutteropen, shutterclose, lensradius, focaldistance, fov, film);
        return t2;
      }, "call$3", "PerspectiveCamera_Create$closure", 6, 0, 7]}
  }
}],
["core", "package:dartray/core/core.dart", , G, {
  "^": "",
  RoundUpPow2: function(v) {
    v = J.$sub$n(v, 1);
    if (typeof v !== "number")
      return v.$shr();
    v |= C.JSNumber_methods._shrOtherPositive$1(v, 1);
    v |= v >>> 2;
    v |= v >>> 4;
    v |= v >>> 8;
    return ((v | v >>> 16) >>> 0) + 1;
  },
  ReadFloatFile: function(bytes, path) {
    var text, len, ZERO, t1, t2, values, ci, inNumber, curNumber, lineNumber, ci0, c, t3;
    text = H.Primitives_stringFromCharCodes(typeof bytes !== "object" || bytes === null || bytes.constructor !== Array ? P.List_List$from(bytes, true, null) : bytes);
    len = text.length;
    ZERO = "0".charCodeAt(0);
    t1 = new G.ReadFloatFile__isdigit(ZERO, "9".charCodeAt(0));
    t2 = new G.ReadFloatFile__isspace();
    values = [];
    for (ci = 0, inNumber = false, curNumber = "", lineNumber = 0; ci < len;) {
      ci0 = ci + 1;
      if (ci < 0)
        return H.ioore(text, ci);
      c = text[ci];
      if (c === "\n")
        ++lineNumber;
      if (inNumber) {
        if (t1.call$1(c) === true || c === "." || c === "e" || c === "-" || c === "+") {
          curNumber += c;
          inNumber = true;
        } else {
          values.push(H.Primitives_parseDouble(curNumber, null));
          inNumber = false;
          curNumber = "";
        }
        ci = ci0;
      } else if (t1.call$1(c) === true || c === "." || c === "-" || c === "+") {
        curNumber += c;
        ci = ci0;
        inNumber = true;
      } else {
        if (c === "#") {
          ci = ci0;
          while (true) {
            ci0 = ci + 1;
            if (ci < 0 || ci >= len)
              return H.ioore(text, ci);
            if (!(text[ci] !== "\n" && ci0 < len))
              break;
            ci = ci0;
          }
          ++lineNumber;
          ci = ci0;
        } else {
          if (t2.call$1(c) !== true) {
            t3 = "Unexpected text found at line " + lineNumber + " of float file " + H.S(path) + ": " + c;
            $.Log.call$2(1, t3);
          }
          ci = ci0;
        }
        inNumber = false;
      }
    }
    return values;
  },
  partition: function(list, pred, first, last) {
    var t1, t;
    for (t1 = list.length; first < last;) {
      while (true) {
        if (first < 0 || first >= t1)
          return H.ioore(list, first);
        if (!(pred.call$1(list[first]) === true))
          break;
        ++first;
        if (first === last)
          return first;
      }
      do {
        --last;
        if (first === last)
          return first;
        if (last < 0 || last >= t1)
          return H.ioore(list, last);
      } while (pred.call$1(list[last]) !== true);
      t = list[first];
      list[first] = list[last];
      list[last] = t;
      ++first;
    }
    return first;
  },
  nth_element: function(list, first, nth, last, pred) {
    var l, t1, i, j, t2;
    l = C.JSArray_methods.sublist$2(list, first, last);
    H.IterableMixinWorkaround_sortList(l, new G.nth_element_closure(pred));
    for (t1 = list.length, i = first, j = 0; J.$lt$n(i, last); ++i, ++j) {
      if (j >= l.length)
        return H.ioore(l, j);
      t2 = l[j];
      if (i >>> 0 !== i || i >= t1)
        return H.ioore(list, i);
      list[i] = t2;
    }
  },
  PrintLogger: [function(type, msg) {
    if (type >= 5)
      return H.ioore(C.List_UgT, type);
    P.print(H.S(C.List_UgT[type]) + ": " + H.S(msg));
    if (type === 3)
      throw H.wrapException(P.Exception_Exception(msg));
  }, "call$2", "PrintLogger$closure", 4, 0, 8],
  BRDFRemap: function(wo, wi) {
    var t1, cosi, t2, coso, t3, sini, sino, p, phii, dphi;
    t1 = J.getInterceptor$x(wi);
    cosi = J.$index$asx(t1.get$data(wi), 2);
    t2 = J.getInterceptor$x(wo);
    coso = J.$index$asx(t2.get$data(wo), 2);
    t3 = J.$mul$ns(J.$index$asx(t1.get$data(wi), 2), J.$index$asx(t1.get$data(wi), 2));
    if (typeof t3 !== "number")
      return H.iae(t3);
    t3 = P.max(0, 1 - t3);
    sini = Math.sqrt(t3);
    t3 = J.$mul$ns(J.$index$asx(t2.get$data(wo), 2), J.$index$asx(t2.get$data(wo), 2));
    if (typeof t3 !== "number")
      return H.iae(t3);
    t3 = P.max(0, 1 - t3);
    sino = Math.sqrt(t3);
    t3 = t1.get$y(wi);
    t1 = t1.get$x(wi);
    if (typeof t3 !== "number")
      H.throwExpression(P.ArgumentError$(t3));
    if (typeof t1 !== "number")
      H.throwExpression(P.ArgumentError$(t1));
    p = Math.atan2(t3, t1);
    phii = p < 0 ? p + 6.283185307179586 : p;
    t1 = t2.get$y(wo);
    t2 = t2.get$x(wo);
    if (typeof t1 !== "number")
      H.throwExpression(P.ArgumentError$(t1));
    if (typeof t2 !== "number")
      H.throwExpression(P.ArgumentError$(t2));
    p = Math.atan2(t1, t2);
    dphi = phii - (p < 0 ? p + 6.283185307179586 : p);
    if (dphi < 0)
      dphi += 6.283185307179586;
    if (dphi > 6.283185307179586)
      dphi -= 6.283185307179586;
    if (dphi > 3.141592653589793)
      dphi = 6.283185307179586 - dphi;
    t1 = J.$mul$ns(cosi, coso);
    t2 = new Float32Array(3);
    if (0 >= 3)
      return H.ioore(t2, 0);
    t2[0] = sini * sino;
    if (1 >= 3)
      return H.ioore(t2, 1);
    t2[1] = dphi / 3.141592653589793;
    if (2 >= 3)
      return H.ioore(t2, 2);
    t2[2] = t1;
    return new G.Point(t2);
  },
  Spectrum_Spectrum: function(v) {
    var t1, t2;
    t1 = $.Spectrum_type;
    if (t1 === 0) {
      t1 = new Float32Array(3);
      t2 = new G.RGBColor(t1);
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(t1, 0, 3, v);
      t1 = t2;
    } else if (t1 === 2) {
      t1 = new Float32Array(4);
      t2 = new G.SampledSpectrum(t1);
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(t1, 0, 4, v);
      t1 = t2;
    } else if (t1 === 1) {
      t1 = new Float32Array(3);
      t2 = new G.XYZColor(t1);
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(t1, 0, 3, v);
      t1 = t2;
    } else
      t1 = null;
    return t1;
  },
  Spectrum_Spectrum$from: function(other, type) {
    switch ($.Spectrum_type) {
      case 0:
        return G.RGBColor$from(other);
      case 1:
        return G.XYZColor$from(other);
      case 2:
        return G.SampledSpectrum$from(other, type);
    }
    $.Log.call$2(3, "Invalid Spectrum type");
    return;
  },
  Spectrum_Spectrum$rgb: function(r, g, b) {
    var t1, t2;
    t1 = $.Spectrum_type;
    if (t1 === 0)
      t1 = G.RGBColor$rgb(r, g, b);
    else if (t1 === 2) {
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.setRGB$3(r, g, b);
    } else if (t1 === 1) {
      t1 = new Float32Array(3);
      t2 = new G.XYZColor(t1);
      G.Spectrum_RGBToXYZ(r, g, b, t1);
      t1 = t2;
    } else
      t1 = null;
    return t1;
  },
  Spectrum_XYZToRGB: function(x, y, z, rgb) {
    var t1;
    if (typeof x !== "number")
      return H.iae(x);
    if (typeof y !== "number")
      return H.iae(y);
    if (typeof z !== "number")
      return H.iae(z);
    t1 = rgb.length;
    if (0 >= t1)
      return H.ioore(rgb, 0);
    rgb[0] = 3.240479 * x - 1.53715 * y - 0.498535 * z;
    if (1 >= t1)
      return H.ioore(rgb, 1);
    rgb[1] = -0.969256 * x + 1.875991 * y + 0.041556 * z;
    if (2 >= t1)
      return H.ioore(rgb, 2);
    rgb[2] = 0.055648 * x - 0.204043 * y + 1.057311 * z;
  },
  Spectrum_RGBToXYZ: function(r, g, b, xyz) {
    var t1;
    if (typeof r !== "number")
      return H.iae(r);
    if (typeof g !== "number")
      return H.iae(g);
    if (typeof b !== "number")
      return H.iae(b);
    t1 = xyz.length;
    if (0 >= t1)
      return H.ioore(xyz, 0);
    xyz[0] = 0.412453 * r + 0.35758 * g + 0.180423 * b;
    if (1 >= t1)
      return H.ioore(xyz, 1);
    xyz[1] = 0.212671 * r + 0.71516 * g + 0.072169 * b;
    if (2 >= t1)
      return H.ioore(xyz, 2);
    xyz[2] = 0.019334 * r + 0.119193 * g + 0.950227 * b;
  },
  Spectrum_SpectrumSamplesSorted: function(lambda) {
    var t1, i, t2, t3;
    for (t1 = lambda.length - 1, i = 0; i < t1;) {
      t2 = lambda.length;
      if (i >= t2)
        return H.ioore(lambda, i);
      t3 = lambda[i];
      ++i;
      if (i >= t2)
        return H.ioore(lambda, i);
      if (J.$gt$n(t3, lambda[i]))
        return false;
    }
    return true;
  },
  Spectrum_SortSpectrumSamples: function(lambda, vals, offset) {
    var sortVec, n, i, t1, t2;
    sortVec = [];
    n = lambda.length;
    for (i = 0; i < n; ++i) {
      if (i >= lambda.length)
        return H.ioore(lambda, i);
      t1 = lambda[i];
      t2 = offset + i;
      if (t2 < 0 || t2 >= vals.length)
        return H.ioore(vals, t2);
      sortVec.push([t1, vals[t2]]);
    }
    H.IterableMixinWorkaround_sortList(sortVec, new G.Spectrum_SortSpectrumSamples_closure());
    for (t1 = J.getInterceptor$ax(lambda), t2 = J.getInterceptor$ax(vals), i = 0; i < n; ++i) {
      if (i >= sortVec.length)
        return H.ioore(sortVec, i);
      t1.$indexSet(lambda, i, J.$index$asx(sortVec[i], 0));
      if (i >= sortVec.length)
        return H.ioore(sortVec, i);
      t2.$indexSet(vals, offset + i, J.$index$asx(sortVec[i], 1));
    }
  },
  Spectrum_AverageSpectrumSamples: function(lambda, vals, lambdaStart, lambdaEnd, offset) {
    var n, t1, t2, t3, t4, sum, i, i0, segStart, segEnd;
    n = lambda.length;
    if (0 >= n)
      return H.ioore(lambda, 0);
    t1 = J.getInterceptor$n(lambdaEnd);
    if (t1.$le(lambdaEnd, lambda[0])) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      return vals[offset];
    }
    t2 = n - 1;
    if (t2 < 0 || t2 >= lambda.length)
      return H.ioore(lambda, t2);
    t3 = J.getInterceptor$n(lambdaStart);
    if (t3.$ge(lambdaStart, lambda[t2])) {
      t1 = offset + n - 1;
      if (t1 < 0 || t1 >= vals.length)
        return H.ioore(vals, t1);
      return vals[t1];
    }
    if (n === 1) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      return vals[offset];
    }
    if (0 >= lambda.length)
      return H.ioore(lambda, 0);
    if (t3.$lt(lambdaStart, lambda[0])) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      t4 = vals[offset];
      if (0 >= lambda.length)
        return H.ioore(lambda, 0);
      t4 = J.$mul$ns(t4, J.$sub$n(lambda[0], lambdaStart));
      if (typeof t4 !== "number")
        return H.iae(t4);
      sum = 0 + t4;
    } else
      sum = 0;
    if (t2 >= lambda.length)
      return H.ioore(lambda, t2);
    if (t1.$gt(lambdaEnd, lambda[t2])) {
      t4 = offset + n - 1;
      if (t4 < 0 || t4 >= vals.length)
        return H.ioore(vals, t4);
      t4 = vals[t4];
      if (t2 >= lambda.length)
        return H.ioore(lambda, t2);
      t2 = J.$mul$ns(t4, t1.$sub(lambdaEnd, lambda[t2]));
      if (typeof t2 !== "number")
        return H.iae(t2);
      sum += t2;
    }
    i = 0;
    while (true) {
      i0 = i + 1;
      if (i0 >= lambda.length)
        return H.ioore(lambda, i0);
      if (!t3.$gt(lambdaStart, lambda[i0]))
        break;
      i = i0;
    }
    t2 = new G.Spectrum_AverageSpectrumSamples_SEG_AVG(new G.Spectrum_AverageSpectrumSamples_INTERP(lambda, vals, offset));
    while (true) {
      i0 = i + 1;
      if (i0 < n) {
        if (i >= lambda.length)
          return H.ioore(lambda, i);
        t3 = t1.$ge(lambdaEnd, lambda[i]);
      } else
        t3 = false;
      if (!t3)
        break;
      if (i >= lambda.length)
        return H.ioore(lambda, i);
      segStart = P.max(lambdaStart, lambda[i]);
      if (i0 >= lambda.length)
        return H.ioore(lambda, i0);
      segEnd = P.min(lambdaEnd, lambda[i0]);
      t3 = J.$mul$ns(t2.call$3(segStart, segEnd, i), segEnd - segStart);
      if (typeof t3 !== "number")
        return H.iae(t3);
      sum += t3;
      i = i0;
    }
    t1 = t1.$sub(lambdaEnd, lambdaStart);
    if (typeof t1 !== "number")
      return H.iae(t1);
    return sum / t1;
  },
  Spectrum_InterpolateSpectrumSamples: function(lambda, vals, l, offset) {
    var n, t1, t2, i, t3, t4, t;
    n = lambda.length;
    if (0 >= n)
      return H.ioore(lambda, 0);
    t1 = J.getInterceptor$n(l);
    if (t1.$le(l, lambda[0])) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      return vals[offset];
    }
    t2 = n - 1;
    if (t2 < 0 || t2 >= lambda.length)
      return H.ioore(lambda, t2);
    if (t1.$ge(l, lambda[t2])) {
      t1 = offset + t2;
      if (t1 < 0 || t1 >= vals.length)
        return H.ioore(vals, t1);
      return vals[t1];
    }
    for (i = 0; i < t2; ++i) {
      if (i >= lambda.length)
        return H.ioore(lambda, i);
      if (t1.$ge(l, lambda[i])) {
        t3 = i + 1;
        if (t3 >= lambda.length)
          return H.ioore(lambda, t3);
        t3 = t1.$le(l, lambda[t3]);
      } else
        t3 = false;
      if (t3) {
        if (i >= lambda.length)
          return H.ioore(lambda, i);
        t2 = t1.$sub(l, lambda[i]);
        t3 = i + 1;
        t4 = lambda.length;
        if (t3 >= t4)
          return H.ioore(lambda, t3);
        t3 = lambda[t3];
        if (i >= t4)
          return H.ioore(lambda, i);
        t3 = J.$sub$n(t3, lambda[i]);
        if (typeof t2 !== "number")
          return t2.$div();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t = t2 / t3;
        t3 = offset + i;
        t2 = vals.length;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(vals, t3);
        t4 = vals[t3];
        ++t3;
        if (t3 >= t2)
          return H.ioore(vals, t3);
        t3 = vals[t3];
        return J.$add$ns(J.$mul$ns(t4, 1 - t), J.$mul$ns(t3, t));
      }
    }
    $.Log.call$2(3, "Fatal logic error in InterpolateSpectrumSamples()");
    return 0;
  },
  Stats_getString: function() {
    var t1, s;
    for (t1 = $.get$Stats_trackers(), t1 = new H.ListIterator(t1, t1.length, 0, null), s = ""; t1.moveNext$0();)
      s += H.S(t1._current) + "\n";
    return s;
  },
  Lanczos: function(x, tau) {
    var t1, t2;
    x = Math.abs(x);
    if (x < 0.00001)
      return 1;
    if (x > 1)
      return 0;
    x *= 3.141592653589793;
    t1 = x * tau;
    t2 = Math.sin(t1);
    return t2 / t1 * (Math.sin(x) / x);
  },
  PhaseHG: function(w, wp, g) {
    var costheta, t1, t2;
    costheta = G.Vector_Dot(w, wp);
    t1 = J.getInterceptor$ns(g);
    t2 = t1.$mul(g, g);
    if (typeof t2 !== "number")
      return H.iae(t2);
    t1 = t1.$mul(g, g);
    if (typeof t1 !== "number")
      return H.iae(t1);
    if (typeof g !== "number")
      return H.iae(g);
    if (typeof costheta !== "number")
      return H.iae(costheta);
    return 0.07957747154594767 * (1 - t2) / Math.pow(1 + t1 - 2 * g * costheta, 1.5);
  },
  GetVolumeScatteringProperties: function($name, sigma_a, sigma_prime_s) {
    if (C.Map_2j0.containsKey$1($name) !== true)
      return false;
    sigma_a.setRGB$3(J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 1), 0), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 1), 1), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 2), 2));
    sigma_prime_s.setRGB$3(J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 0), 0), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 0), 1), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 0), 2));
    return true;
  },
  AnimatedTransform: {
    "^": "Object;"
  },
  BBox: {
    "^": "Object;pMin<,pMax<",
    reset$0: function(_) {
      var t1, t2;
      t1 = this.pMin.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = 1 / 0;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = 1 / 0;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = 1 / 0;
      t1 = this.pMax.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = -1 / 0;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = -1 / 0;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = -1 / 0;
    },
    copy$1: function(other) {
      this.pMin.copy$1(other.get$pMin());
      this.pMax.copy$1(other.pMax);
    },
    get$center: function() {
      return this.pMin.$mul(0, 0.5).$add(0, this.pMax.$mul(0, 0.5));
    },
    $index: function(_, index) {
      return J.$eq(index, 0) ? this.pMin : this.pMax;
    },
    inside$1: function(pt) {
      var t1, t2, t3;
      t1 = J.getInterceptor$x(pt);
      t2 = t1.get$x(pt);
      t3 = this.pMin.data;
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      if (J.$ge$n(t2, t3[0])) {
        t2 = t1.get$x(pt);
        t3 = this.pMax.data;
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        if (J.$le$n(t2, t3[0])) {
          t2 = t1.get$y(pt);
          t3 = this.pMin.data;
          if (1 >= t3.length)
            return H.ioore(t3, 1);
          if (J.$ge$n(t2, t3[1])) {
            t2 = t1.get$y(pt);
            t3 = this.pMax.data;
            if (1 >= t3.length)
              return H.ioore(t3, 1);
            if (J.$le$n(t2, t3[1])) {
              t2 = t1.get$z(pt);
              t3 = this.pMin.data;
              if (2 >= t3.length)
                return H.ioore(t3, 2);
              if (J.$ge$n(t2, t3[2])) {
                t1 = t1.get$z(pt);
                t2 = this.pMax.data;
                if (2 >= t2.length)
                  return H.ioore(t2, 2);
                t2 = J.$le$n(t1, t2[2]);
                t1 = t2;
              } else
                t1 = false;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    unionPoint$1: function(p) {
      var t1, t2;
      t1 = this.pMin.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = J.getInterceptor$x(p);
      t1[0] = P.min(t1[0], t2.get$x(p));
      t1 = this.pMin.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1[1] = P.min(t1[1], t2.get$y(p));
      t1 = this.pMin.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = P.min(t1[2], t2.get$z(p));
      t1 = this.pMax.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = P.max(t1[0], t2.get$x(p));
      t1 = this.pMax.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1[1] = P.max(t1[1], t2.get$y(p));
      t1 = this.pMax.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = P.max(t1[2], t2.get$z(p));
      return this;
    },
    union$1: function(b2) {
      var t1, t2, t3;
      t1 = this.pMin.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = t1[0];
      t3 = b2.get$pMin().data;
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t1[0] = P.min(t2, t3[0]);
      t3 = this.pMin.data;
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t2 = t3[1];
      t1 = b2.pMin.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t3[1] = P.min(t2, t1[1]);
      t1 = this.pMin.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t2 = t1[2];
      t3 = b2.pMin.data;
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t1[2] = P.min(t2, t3[2]);
      t3 = this.pMax.data;
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t2 = t3[0];
      t1 = b2.pMax.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t3[0] = P.max(t2, t1[0]);
      t1 = this.pMax.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t2 = t1[1];
      t3 = b2.pMax.data;
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t1[1] = P.max(t2, t3[1]);
      t3 = this.pMax.data;
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t2 = t3[2];
      t1 = b2.pMax.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t3[2] = P.max(t2, t1[2]);
      return this;
    },
    surfaceArea$0: function() {
      var t1, t2, t3, t4;
      t1 = this.pMax.$sub(0, this.pMin).data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      return 2 * (t3 * t4 + t3 * t1 + t4 * t1);
    },
    maximumExtent$0: function() {
      var t1, t2, t3, t4;
      t1 = this.pMax.$sub(0, this.pMin).data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (t3 > t4) {
        if (2 >= t2)
          return H.ioore(t1, 2);
        t3 = t3 > t1[2];
      } else
        t3 = false;
      if (t3)
        return 0;
      else {
        if (2 >= t2)
          return H.ioore(t1, 2);
        if (t4 > t1[2])
          return 1;
        else
          return 2;
      }
    },
    BBox$2: function(p1, p2) {
      var t1, t2, t3, t4, t5, t6;
      t1 = p1 == null;
      if (t1 && p2 == null) {
        t1 = new G.Point(new Float32Array(3));
        t1.Vector$3(1 / 0, 1 / 0, 1 / 0);
        this.pMin = t1;
        t1 = new G.Point(new Float32Array(3));
        t1.Vector$3(-1 / 0, -1 / 0, -1 / 0);
        this.pMax = t1;
      } else {
        t1 = !t1 && p2 != null;
        t2 = J.getInterceptor$x(p1);
        if (t1) {
          t1 = J.getInterceptor$x(p2);
          t3 = P.min(t2.get$x(p1), t1.get$x(p2));
          t4 = P.min(t2.get$y(p1), t1.get$y(p2));
          t5 = P.min(t2.get$z(p1), t1.get$z(p2));
          t6 = new G.Point(new Float32Array(3));
          t6.Vector$3(t3, t4, t5);
          this.pMin = t6;
          t6 = P.max(t2.get$x(p1), t1.get$x(p2));
          t5 = P.max(t2.get$y(p1), t1.get$y(p2));
          t1 = P.max(t2.get$z(p1), t1.get$z(p2));
          t2 = new G.Point(new Float32Array(3));
          t2.Vector$3(t6, t5, t1);
          this.pMax = t2;
        } else {
          this.pMin = new G.Point(new Float32Array(H._ensureNativeList(t2.get$data(p1))));
          this.pMax = new G.Point(new Float32Array(H._ensureNativeList(t2.get$data(p1))));
        }
      }
    },
    static: {BBox$: function(p1, p2) {
        var t1 = new G.BBox(null, null);
        t1.BBox$2(p1, p2);
        return t1;
      }, BBox$from: function(other) {
        return new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(other.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(other.pMax.data))));
      }}
  },
  Camera: {
    "^": "Object;shutterOpen<,shutterClose<"
  },
  ReadFloatFile__isdigit: {
    "^": "Closure:101;ZERO_0,NINE_1",
    call$1: function(c) {
      var cu = C.JSString_methods.codeUnitAt$1(c, 0);
      return cu >= this.ZERO_0 && cu <= this.NINE_1;
    }
  },
  ReadFloatFile__isspace: {
    "^": "Closure:101;",
    call$1: function(c) {
      return c === " " || c === "\t" || c === "\n" || c === "\r";
    }
  },
  nth_element_closure: {
    "^": "Closure:96;pred_0",
    call$2: function(a, b) {
      return this.pred_0.call$2(a, b) === true ? -1 : 1;
    }
  },
  Film: {
    "^": "Object;xResolution<"
  },
  Filter: {
    "^": "Object;xWidth<,yWidth<"
  },
  Integrator: {
    "^": "Object;"
  },
  KdTree: {
    "^": "Object;nodes,nodeData,nNodes,nextFreeNode",
    _recursiveBuild$5: function(nodeNum, start, end, data, buildNodes) {
      var t1, t2, bound, i, t3, splitAxis, splitPos;
      t1 = J.getInterceptor$ns(start);
      if (J.$eq(t1.$add(start, 1), end)) {
        t1 = this.nodes;
        if (nodeNum < 0 || nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum] = new G._KdNode(null, 3, false, 536870911);
        t1 = this.nodeData;
        if (start >>> 0 !== start || start >= buildNodes.length)
          return H.ioore(buildNodes, start);
        t2 = buildNodes[start];
        if (t2 >>> 0 !== t2 || t2 >= data.length)
          return H.ioore(data, t2);
        t2 = data[t2];
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum] = t2;
        return;
      }
      bound = G.BBox$(null, null);
      for (t2 = buildNodes.length, i = start; J.$lt$n(i, end); ++i) {
        if (i >>> 0 !== i || i >= t2)
          return H.ioore(buildNodes, i);
        t3 = buildNodes[i];
        if (t3 >>> 0 !== t3 || t3 >= data.length)
          return H.ioore(data, t3);
        t3 = J.get$p$x(data[t3]);
        bound = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(bound.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(bound.pMax.data)))).unionPoint$1(t3);
      }
      splitAxis = bound.maximumExtent$0();
      splitPos = J.$tdiv$n(t1.$add(start, end), 2);
      G.nth_element(buildNodes, start, splitPos, end, new G._CompareNode(data, splitAxis));
      t3 = this.nodes;
      if (splitPos >>> 0 !== splitPos || splitPos >= t2)
        return H.ioore(buildNodes, splitPos);
      t2 = buildNodes[splitPos];
      if (t2 >>> 0 !== t2 || t2 >= data.length)
        return H.ioore(data, t2);
      t2 = J.$index$asx(J.get$p$x(data[t2]), splitAxis);
      if (nodeNum < 0 || nodeNum >= t3.length)
        return H.ioore(t3, nodeNum);
      t3[nodeNum] = new G._KdNode(t2, splitAxis, false, 536870911);
      t2 = this.nodeData;
      t3 = buildNodes[splitPos];
      if (t3 >>> 0 !== t3 || t3 >= data.length)
        return H.ioore(data, t3);
      t3 = data[t3];
      if (nodeNum >= t2.length)
        return H.ioore(t2, nodeNum);
      t2[nodeNum] = t3;
      if (t1.$lt(start, splitPos)) {
        t1 = this.nodes;
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum].set$hasLeftChild(true);
        this._recursiveBuild$5(this.nextFreeNode++, start, splitPos, data, buildNodes);
      }
      t1 = splitPos + 1;
      if (typeof end !== "number")
        return H.iae(end);
      if (t1 < end) {
        t2 = this.nodes;
        if (nodeNum >= t2.length)
          return H.ioore(t2, nodeNum);
        t2[nodeNum].set$rightChild(this.nextFreeNode++);
        t2 = this.nodes;
        if (nodeNum >= t2.length)
          return H.ioore(t2, nodeNum);
        this._recursiveBuild$5(t2[nodeNum].get$rightChild(), t1, end, data, buildNodes);
      }
    },
    KdTree$1: function(data) {
      var t1, buildNodes, t2, i;
      t1 = data.length;
      this.nNodes = t1;
      this.nextFreeNode = 1;
      this.nodes = H.setRuntimeTypeInfo(Array(t1), [G._KdNode]);
      t1 = this.nNodes;
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.nodeData = Array(t1);
      buildNodes = H.setRuntimeTypeInfo(Array(t1), [J.JSInt]);
      t1 = this.nNodes;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = buildNodes.length;
      i = 0;
      for (; i < t1; ++i) {
        if (i >= t2)
          return H.ioore(buildNodes, i);
        buildNodes[i] = i;
      }
      this._recursiveBuild$5(0, 0, t1, data, buildNodes);
    },
    static: {KdTree$: function(data) {
        var t1 = new G.KdTree(null, null, null, null);
        t1.KdTree$1(data);
        return t1;
      }}
  },
  _CompareNode: {
    "^": "Object:15;data>,axis?",
    call$2: function(d1, d2) {
      var t1, t2;
      t1 = this.data;
      if (d1 >>> 0 !== d1 || d1 >= t1.length)
        return H.ioore(t1, d1);
      t1 = J.$index$asx(J.get$p$x(t1[d1]), this.axis);
      t2 = this.data;
      if (d2 >>> 0 !== d2 || d2 >= t2.length)
        return H.ioore(t2, d2);
      t2 = J.$eq(t1, J.$index$asx(J.get$p$x(t2[d2]), this.axis));
      t1 = this.data;
      if (t2) {
        if (d1 >= t1.length)
          return H.ioore(t1, d1);
        t1 = J.get$hashCode$(t1[d1]);
        t2 = this.data;
        if (d2 >= t2.length)
          return H.ioore(t2, d2);
        t2 = J.$lt$n(t1, J.get$hashCode$(t2[d2]));
        t1 = t2;
      } else {
        if (d1 >= t1.length)
          return H.ioore(t1, d1);
        t1 = J.$index$asx(J.get$p$x(t1[d1]), this.axis);
        t2 = this.data;
        if (d2 >= t2.length)
          return H.ioore(t2, d2);
        t2 = J.$lt$n(t1, J.$index$asx(J.get$p$x(t2[d2]), this.axis));
        t1 = t2;
      }
      return t1;
    }
  },
  _KdNode: {
    "^": "Object;splitPos,splitAxis,hasLeftChild?,rightChild@"
  },
  Light: {
    "^": "Object;",
    Light$2: function(l2w, ns) {
      if (this.worldToLight.hasScale$0())
        $.Log.call$2(1, "Scaling detected in world to light transformation!\nThe system has numerous assumptions, implicit and explicit,\nthat this transform will have no scale factors in it.\nProceed at your own risk; your image may have errors or\nthe system may crash as a result of this.");
    }
  },
  AreaLight: {
    "^": "Light;"
  },
  LightSampleOffsets: {
    "^": "Object;"
  },
  ShapeSet: {
    "^": "Object;shapes,area,areas,areaDistribution",
    area$0: function() {
      return this.area.call$0();
    },
    ShapeSet$1: function(s) {
      var todo, t1, sh, t2, i, a, t3;
      todo = [];
      todo.push(s);
      for (t1 = this.shapes; todo.length !== 0;) {
        sh = C.JSArray_methods.get$last(todo);
        if (0 >= todo.length)
          return H.ioore(todo, 0);
        todo.pop();
        if (sh.canIntersect$0())
          t1.push(sh);
        else
          sh.refine$1(todo);
      }
      t2 = t1.length;
      if (t2 > 64) {
        t2 = "Area light geometry turned into " + t2 + " shapes; may be very inefficient.";
        $.Log.call$2(1, t2);
      }
      this.area = 0;
      for (t2 = this.areas, i = 0; i < t1.length; ++i) {
        a = t1[i].area$0();
        t2.push(a);
        t3 = this.area;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof a !== "number")
          return H.iae(a);
        this.area = t3 + a;
      }
      this.areaDistribution = G.Distribution1D$(t2, t2.length);
    },
    static: {ShapeSet$: function(s) {
        var t1 = new G.ShapeSet([], null, [], null);
        t1.ShapeSet$1(s);
        return t1;
      }}
  },
  Material: {
    "^": "Object;"
  },
  Matrix4x4: {
    "^": "Object;data>",
    $eq: function(_, m2) {
      var t1, t2, t3, i;
      if (m2 == null)
        return false;
      for (t1 = this.data, t2 = t1.length, t3 = J.getInterceptor$x(m2), i = 0; i < 16; ++i) {
        if (i >= t2)
          return H.ioore(t1, i);
        if (t1[i] !== J.$index$asx(t3.get$data(m2), i))
          return false;
      }
      return true;
    },
    copy$1: function(other) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = J.getInterceptor$x(other);
      t3 = J.$index$asx(t2.get$data(other), 0);
      t4 = t1.length;
      if (0 >= t4)
        return H.ioore(t1, 0);
      t1[0] = t3;
      t3 = J.$index$asx(t2.get$data(other), 1);
      if (1 >= t4)
        return H.ioore(t1, 1);
      t1[1] = t3;
      t3 = J.$index$asx(t2.get$data(other), 2);
      if (2 >= t4)
        return H.ioore(t1, 2);
      t1[2] = t3;
      t3 = J.$index$asx(t2.get$data(other), 3);
      if (3 >= t4)
        return H.ioore(t1, 3);
      t1[3] = t3;
      t3 = J.$index$asx(t2.get$data(other), 4);
      if (4 >= t4)
        return H.ioore(t1, 4);
      t1[4] = t3;
      t3 = J.$index$asx(t2.get$data(other), 5);
      if (5 >= t4)
        return H.ioore(t1, 5);
      t1[5] = t3;
      t3 = J.$index$asx(t2.get$data(other), 6);
      if (6 >= t4)
        return H.ioore(t1, 6);
      t1[6] = t3;
      t3 = J.$index$asx(t2.get$data(other), 7);
      if (7 >= t4)
        return H.ioore(t1, 7);
      t1[7] = t3;
      t3 = J.$index$asx(t2.get$data(other), 8);
      if (8 >= t4)
        return H.ioore(t1, 8);
      t1[8] = t3;
      t3 = J.$index$asx(t2.get$data(other), 9);
      if (9 >= t4)
        return H.ioore(t1, 9);
      t1[9] = t3;
      t3 = J.$index$asx(t2.get$data(other), 10);
      if (10 >= t4)
        return H.ioore(t1, 10);
      t1[10] = t3;
      t3 = J.$index$asx(t2.get$data(other), 11);
      if (11 >= t4)
        return H.ioore(t1, 11);
      t1[11] = t3;
      t3 = J.$index$asx(t2.get$data(other), 12);
      if (12 >= t4)
        return H.ioore(t1, 12);
      t1[12] = t3;
      t3 = J.$index$asx(t2.get$data(other), 13);
      if (13 >= t4)
        return H.ioore(t1, 13);
      t1[13] = t3;
      t3 = J.$index$asx(t2.get$data(other), 14);
      if (14 >= t4)
        return H.ioore(t1, 14);
      t1[14] = t3;
      t2 = J.$index$asx(t2.get$data(other), 15);
      if (15 >= t4)
        return H.ioore(t1, 15);
      t1[15] = t2;
      return this;
    },
    $index: function(_, index) {
      var t1 = this.data;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this.data;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = value;
      return value;
    },
    invert$0: function() {
      var t1, t2, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, det, invDet, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      n11 = t1[0];
      if (4 >= t2)
        return H.ioore(t1, 4);
      n12 = t1[4];
      if (8 >= t2)
        return H.ioore(t1, 8);
      n13 = t1[8];
      if (12 >= t2)
        return H.ioore(t1, 12);
      n14 = t1[12];
      n21 = t1[1];
      n22 = t1[5];
      n23 = t1[9];
      if (13 >= t2)
        return H.ioore(t1, 13);
      n24 = t1[13];
      n31 = t1[2];
      n32 = t1[6];
      n33 = t1[10];
      if (14 >= t2)
        return H.ioore(t1, 14);
      n34 = t1[14];
      n41 = t1[3];
      n42 = t1[7];
      n43 = t1[11];
      if (15 >= t2)
        return H.ioore(t1, 15);
      n44 = t1[15];
      t2 = n14 * n23;
      t3 = t2 * n32;
      t4 = n13 * n24;
      t5 = t4 * n32;
      t6 = n14 * n22;
      t7 = t6 * n33;
      t8 = n12 * n24;
      t9 = t8 * n33;
      t10 = n13 * n22;
      t11 = t10 * n34;
      t12 = n12 * n23;
      t13 = t12 * n34;
      t14 = t2 * n31;
      t15 = t4 * n31;
      t16 = n14 * n21;
      t17 = t16 * n33;
      t18 = n11 * n24;
      t19 = t18 * n33;
      t20 = n13 * n21;
      t21 = t20 * n34;
      t22 = n11 * n23;
      t23 = t22 * n34;
      t24 = t6 * n31;
      t25 = t8 * n31;
      t26 = t16 * n32;
      t27 = t18 * n32;
      t28 = n12 * n21;
      t29 = t28 * n34;
      t30 = n11 * n22;
      t31 = t30 * n34;
      t32 = t10 * n31;
      t33 = t12 * n31;
      t34 = t20 * n32;
      t35 = t22 * n32;
      t36 = t28 * n33;
      t37 = t30 * n33;
      det = t3 * n41 - t5 * n41 - t7 * n41 + t9 * n41 + t11 * n41 - t13 * n41 - t14 * n42 + t15 * n42 + t17 * n42 - t19 * n42 - t21 * n42 + t23 * n42 + t24 * n43 - t25 * n43 - t26 * n43 + t27 * n43 + t29 * n43 - t31 * n43 - t32 * n44 + t33 * n44 + t34 * n44 - t35 * n44 - t36 * n44 + t37 * n44;
      if (det === 0)
        return this;
      invDet = 1 / det;
      t38 = n23 * n34;
      t39 = n24 * n33;
      t40 = n24 * n32;
      t41 = n22 * n34;
      t42 = n23 * n32;
      t43 = n22 * n33;
      t1[0] = (t38 * n42 - t39 * n42 + t40 * n43 - t41 * n43 - t42 * n44 + t43 * n44) * invDet;
      t44 = n14 * n33;
      t45 = n13 * n34;
      t46 = n14 * n32;
      t47 = n12 * n34;
      t48 = n13 * n32;
      t49 = n12 * n33;
      t1[4] = (t44 * n42 - t45 * n42 - t46 * n43 + t47 * n43 + t48 * n44 - t49 * n44) * invDet;
      t1[8] = (t4 * n42 - t2 * n42 + t6 * n43 - t8 * n43 - t10 * n44 + t12 * n44) * invDet;
      t1[12] = (t3 - t5 - t7 + t9 + t11 - t13) * invDet;
      t13 = n24 * n31;
      t11 = n21 * n34;
      t9 = n23 * n31;
      t7 = n21 * n33;
      t1[1] = (t39 * n41 - t38 * n41 - t13 * n43 + t11 * n43 + t9 * n44 - t7 * n44) * invDet;
      t38 = n14 * n31;
      t39 = n11 * n34;
      t5 = n13 * n31;
      t3 = n11 * n33;
      t1[5] = (t45 * n41 - t44 * n41 + t38 * n43 - t39 * n43 - t5 * n44 + t3 * n44) * invDet;
      t1[9] = (t2 * n41 - t4 * n41 - t16 * n43 + t18 * n43 + t20 * n44 - t22 * n44) * invDet;
      t1[13] = (t15 - t14 + t17 - t19 - t21 + t23) * invDet;
      t23 = n22 * n31;
      t21 = n21 * n32;
      t1[2] = (t41 * n41 - t40 * n41 + t13 * n42 - t11 * n42 - t23 * n44 + t21 * n44) * invDet;
      t11 = n12 * n31;
      t13 = n11 * n32;
      t1[6] = (t46 * n41 - t47 * n41 - t38 * n42 + t39 * n42 + t11 * n44 - t13 * n44) * invDet;
      t1[10] = (t8 * n41 - t6 * n41 + t16 * n42 - t18 * n42 - t28 * n44 + t30 * n44) * invDet;
      t1[14] = (t24 - t25 - t26 + t27 + t29 - t31) * invDet;
      t1[3] = (t42 * n41 - t43 * n41 - t9 * n42 + t7 * n42 + t23 * n43 - t21 * n43) * invDet;
      t1[7] = (t49 * n41 - t48 * n41 + t5 * n42 - t3 * n42 - t11 * n43 + t13 * n43) * invDet;
      t1[11] = (t10 * n41 - t12 * n41 - t20 * n42 + t22 * n42 + t28 * n43 - t30 * n43) * invDet;
      t1[15] = (t33 - t32 + t34 - t35 - t36 + t37) * invDet;
      return this;
    },
    toString$0: function(_) {
      var t1, t2, t3;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = H.S(t1[0]) + " ";
      if (1 >= t2)
        return H.ioore(t1, 1);
      t3 = t3 + H.S(t1[1]) + " ";
      if (2 >= t2)
        return H.ioore(t1, 2);
      t3 = t3 + H.S(t1[2]) + " ";
      if (3 >= t2)
        return H.ioore(t1, 3);
      t3 = t3 + H.S(t1[3]) + " ";
      if (4 >= t2)
        return H.ioore(t1, 4);
      t3 = t3 + H.S(t1[4]) + " ";
      if (5 >= t2)
        return H.ioore(t1, 5);
      t3 = t3 + H.S(t1[5]) + " ";
      if (6 >= t2)
        return H.ioore(t1, 6);
      t3 = t3 + H.S(t1[6]) + " ";
      if (7 >= t2)
        return H.ioore(t1, 7);
      t3 = t3 + H.S(t1[7]) + " ";
      if (8 >= t2)
        return H.ioore(t1, 8);
      t3 = t3 + H.S(t1[8]) + " ";
      if (9 >= t2)
        return H.ioore(t1, 9);
      t3 = t3 + H.S(t1[9]) + " ";
      if (10 >= t2)
        return H.ioore(t1, 10);
      t3 = t3 + H.S(t1[10]) + " ";
      if (11 >= t2)
        return H.ioore(t1, 11);
      t3 = t3 + H.S(t1[11]) + " ";
      if (12 >= t2)
        return H.ioore(t1, 12);
      t3 = t3 + H.S(t1[12]) + " ";
      if (13 >= t2)
        return H.ioore(t1, 13);
      t3 = t3 + H.S(t1[13]) + " ";
      if (14 >= t2)
        return H.ioore(t1, 14);
      t3 = t3 + H.S(t1[14]) + " ";
      if (15 >= t2)
        return H.ioore(t1, 15);
      return t3 + H.S(t1[15]);
    },
    Matrix4x4$values$16: function(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
      var t1, t2;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = m11;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = m12;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = m13;
      if (3 >= t2)
        return H.ioore(t1, 3);
      t1[3] = m14;
      if (4 >= t2)
        return H.ioore(t1, 4);
      t1[4] = m21;
      if (5 >= t2)
        return H.ioore(t1, 5);
      t1[5] = m22;
      if (6 >= t2)
        return H.ioore(t1, 6);
      t1[6] = m23;
      if (7 >= t2)
        return H.ioore(t1, 7);
      t1[7] = m24;
      if (8 >= t2)
        return H.ioore(t1, 8);
      t1[8] = m31;
      if (9 >= t2)
        return H.ioore(t1, 9);
      t1[9] = m32;
      if (10 >= t2)
        return H.ioore(t1, 10);
      t1[10] = m33;
      if (11 >= t2)
        return H.ioore(t1, 11);
      t1[11] = m34;
      if (12 >= t2)
        return H.ioore(t1, 12);
      t1[12] = m41;
      if (13 >= t2)
        return H.ioore(t1, 13);
      t1[13] = m42;
      if (14 >= t2)
        return H.ioore(t1, 14);
      t1[14] = m43;
      if (15 >= t2)
        return H.ioore(t1, 15);
      t1[15] = m44;
    },
    Matrix4x4$0: function() {
      var t1, t2;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = 1;
      if (5 >= t2)
        return H.ioore(t1, 5);
      t1[5] = 1;
      if (10 >= t2)
        return H.ioore(t1, 10);
      t1[10] = 1;
      if (15 >= t2)
        return H.ioore(t1, 15);
      t1[15] = 1;
    },
    static: {"^": "Matrix4x4_IDENTITY", Matrix4x4$: function() {
        var t1 = new G.Matrix4x4(new Float32Array(16));
        t1.Matrix4x4$0();
        return t1;
      }, Matrix4x4$values: function(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
        var t1 = new G.Matrix4x4(new Float32Array(16));
        t1.Matrix4x4$values$16(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44);
        return t1;
      }, Matrix4x4_Mul: function(m1, m2) {
        var r, t1, t2, t3, t4, t5, t6, i, k, t7, t8, t9, j, t10, t11, t12, t13, t14, t15, t16, t17, t18;
        r = G.Matrix4x4$();
        for (t1 = r.data, t2 = m1.data, t3 = t2.length, t4 = m2.data, t5 = t4.length, t6 = t1.length, i = 0, k = 0; i < 4; ++i, k += 4)
          for (t7 = k + 1, t8 = k + 2, t9 = k + 3, j = 0; j < 4; ++j) {
            t10 = k + j;
            if (k >= t3)
              return H.ioore(t2, k);
            t11 = t2[k];
            if (j >= t5)
              return H.ioore(t4, j);
            t12 = t4[j];
            if (t7 >= t3)
              return H.ioore(t2, t7);
            t13 = t2[t7];
            t14 = 4 + j;
            if (t14 >= t5)
              return H.ioore(t4, t14);
            t14 = t4[t14];
            if (t8 >= t3)
              return H.ioore(t2, t8);
            t15 = t2[t8];
            t16 = 8 + j;
            if (t16 >= t5)
              return H.ioore(t4, t16);
            t16 = t4[t16];
            if (t9 >= t3)
              return H.ioore(t2, t9);
            t17 = t2[t9];
            t18 = 12 + j;
            if (t18 >= t5)
              return H.ioore(t4, t18);
            t18 = t4[t18];
            if (t10 >= t6)
              return H.ioore(t1, t10);
            t1[t10] = t11 * t12 + t13 * t14 + t15 * t16 + t17 * t18;
          }
        return r;
      }}
  },
  MIPMap: {
    "^": "Object;doTrilinear,maxAnisotropy,wrapMode,pyramid,width>,height>,levels",
    texel$3: function(level, s, t) {
      var t1, l, t2, a, a0;
      t1 = this.pyramid;
      if (level >>> 0 !== level || level >= t1.length)
        return H.ioore(t1, level);
      l = t1[level];
      switch (this.wrapMode) {
        case 0:
          t1 = J.getInterceptor$x(l);
          t2 = t1.get$width(l);
          if (typeof t2 !== "number")
            return H.iae(t2);
          a = s - C.JSInt_methods.$tdiv(s, t2) * t2;
          if (a < 0)
            a += t2;
          t1 = t1.get$height(l);
          if (typeof t1 !== "number")
            return H.iae(t1);
          a0 = t - C.JSInt_methods.$tdiv(t, t1) * t1;
          if (a0 < 0)
            a0 += t1;
          t = a0;
          s = a;
          break;
        case 2:
          t1 = J.getInterceptor$x(l);
          s = C.JSInt_methods.clamp$2(s, 0, J.$sub$n(t1.get$width(l), 1));
          t = C.JSInt_methods.clamp$2(t, 0, J.$sub$n(t1.get$height(l), 1));
          break;
        case 1:
          if (s >= 0) {
            t1 = J.getInterceptor$x(l);
            t2 = t1.get$width(l);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(s >= t2))
              if (t >= 0) {
                t1 = t1.get$height(l);
                if (typeof t1 !== "number")
                  return H.iae(t1);
                t1 = t >= t1;
              } else
                t1 = true;
            else
              t1 = true;
          } else
            t1 = true;
          if (t1)
            return G.Spectrum_Spectrum(0);
          break;
      }
      t1 = J.getInterceptor$x(l);
      t2 = t1.get$width(l);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1.$index(l, t * t2 + s);
    },
    lookup$3: function(s, t, width) {
      var t1, t2, t3, level, iLevel, delta;
      t1 = this.levels;
      if (typeof t1 !== "number")
        return t1.$sub();
      t2 = P.max(width, 1e-8);
      t2 = Math.log(t2);
      t3 = $.get$_invLog2();
      if (typeof t3 !== "number")
        return H.iae(t3);
      level = t1 - 1 + t2 * t3;
      if (level < 0)
        return this.triangle$3(0, s, t);
      else {
        t1 = this.levels;
        if (typeof t1 !== "number")
          return t1.$sub();
        --t1;
        if (level >= t1)
          return this.texel$3(t1, 0, 0);
        else {
          iLevel = C.JSNumber_methods.toInt$0(Math.floor(level));
          delta = level - iLevel;
          return J.$add$ns(J.$mul$ns(this.triangle$3(iLevel, s, t), 1 - delta), J.$mul$ns(this.triangle$3(iLevel + 1, s, t), delta));
        }
      }
    },
    triangle$3: function(level, s, t) {
      var t1, s0, t00, ds, dt, t2, t3, t4;
      t1 = this.levels;
      if (typeof t1 !== "number")
        return t1.$sub();
      level = C.JSInt_methods.clamp$2(level, 0, t1 - 1);
      t1 = this.pyramid;
      if (level >>> 0 !== level || level >= t1.length)
        return H.ioore(t1, level);
      s = J.$sub$n(J.$mul$ns(s, J.get$width$x(t1[level])), 0.5);
      t1 = this.pyramid;
      if (level >= t1.length)
        return H.ioore(t1, level);
      t = J.$sub$n(J.$mul$ns(t, J.get$height$x(t1[level])), 0.5);
      s0 = J.floor$0$n(s);
      t00 = J.floor$0$n(t);
      ds = s - s0;
      dt = t - t00;
      t1 = 1 - ds;
      t2 = 1 - dt;
      t3 = t00 + 1;
      t4 = s0 + 1;
      return J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(this.texel$3(level, s0, t00), t1 * t2), J.$mul$ns(this.texel$3(level, s0, t3), t1 * dt)), J.$mul$ns(this.texel$3(level, t4, t00), ds * t2)), J.$mul$ns(this.texel$3(level, t4, t3), ds * dt));
    },
    _resampleWeights$2: function(oldres, newres) {
      var wt, t1, i, t2, center, j, t3, invSumWts;
      wt = H.setRuntimeTypeInfo(Array(newres), [G._ResampleWeight]);
      for (t1 = wt.length, i = 0; i < newres; ++i) {
        t2 = new G._ResampleWeight(null, [0, 0, 0, 0]);
        if (i >= t1)
          return H.ioore(wt, i);
        wt[i] = t2;
        if (typeof oldres !== "number")
          return H.iae(oldres);
        center = (i + 0.5) * oldres / newres;
        t2.firstTexel = C.JSNumber_methods.toInt$0(Math.floor(center - 2 + 0.5));
        for (j = 0; t2 = wt[i], j < 4; ++j) {
          t3 = t2.get$firstTexel();
          if (typeof t3 !== "number")
            return t3.$add();
          t2.weight[j] = G.Lanczos((t3 + j + 0.5 - center) / 2, 2);
        }
        t2 = t2.get$weight();
        t2 = J.$add$ns(J.$add$ns(J.$add$ns(t2[0], t2[1]), wt[i].get$weight()[2]), wt[i].get$weight()[3]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        invSumWts = 1 / t2;
        for (j = 0; j < 4; ++j) {
          t2 = wt[i].get$weight();
          t2[j] = J.$mul$ns(t2[j], invSumWts);
        }
      }
      return wt;
    },
    MIPMap$texture$5: function(img, filename, doTrilinear, maxAnisotropy, wrapMode) {
      var t1, xres, yres, t2, t3, sPow2, tPow2, sWeights, resampledImage, zero, t4, t5, t, p, t6, s, t7, j, t8, origS, a, px, tWeights, workData, offset, i, sRes, tRes;
      t1 = J.getInterceptor$x(img);
      xres = t1.get$width(img);
      yres = t1.get$height(img);
      t2 = J.getInterceptor$n(xres);
      if (t2.$and(xres, t2.$sub(xres, 1)) === 0) {
        t3 = J.getInterceptor$n(yres);
        t3 = t3.$and(yres, t3.$sub(yres, 1)) !== 0;
      } else
        t3 = true;
      if (t3) {
        sPow2 = G.RoundUpPow2(xres);
        tPow2 = G.RoundUpPow2(yres);
        if (J.get$isNotEmpty$asx(filename)) {
          t3 = "Resizing Image " + H.S(filename) + " to " + sPow2 + " " + tPow2;
          $.Log.call$2(0, t3);
        }
        sWeights = this._resampleWeights$2(xres, sPow2);
        resampledImage = G.SpectrumImage$(sPow2, tPow2, img.get$samplesPerPixel());
        zero = J.$eq(img.get$samplesPerPixel(), 1) ? 0 : G.Spectrum_Spectrum(0);
        if (typeof yres !== "number")
          return H.iae(yres);
        t3 = this.wrapMode;
        t4 = t3 === 2;
        t3 = t3 === 0;
        t5 = sWeights.length;
        t = 0;
        p = 0;
        for (; t < yres; ++t)
          for (t6 = t * sPow2, s = 0; s < sPow2; ++s, ++p) {
            resampledImage.$indexSet(0, p, zero);
            for (t7 = t6 + s, j = 0; j < 4; ++j) {
              if (s >= t5)
                return H.ioore(sWeights, s);
              t8 = sWeights[s].get$firstTexel();
              if (typeof t8 !== "number")
                return t8.$add();
              origS = t8 + j;
              if (t3) {
                if (typeof xres !== "number")
                  return H.iae(xres);
                a = origS - C.JSInt_methods.$tdiv(origS, xres) * xres;
                if (a < 0)
                  a += xres;
                origS = a;
              } else if (t4)
                origS = C.JSInt_methods.clamp$2(origS, 0, t2.$sub(xres, 1));
              if (origS >= 0) {
                if (typeof xres !== "number")
                  return H.iae(xres);
                t8 = origS < xres;
              } else
                t8 = false;
              if (t8) {
                if (typeof xres !== "number")
                  return H.iae(xres);
                px = J.$mul$ns(t1.$index(img, t * xres + origS), sWeights[s].get$weight()[j]);
                resampledImage.$indexSet(0, t7, J.$add$ns(resampledImage.$index(0, t7), px));
              }
            }
          }
        tWeights = this._resampleWeights$2(yres, tPow2);
        workData = Array(tPow2);
        for (t1 = tWeights.length, t2 = yres - 1, s = 0; s < sPow2; ++s) {
          for (t = 0; t < tPow2; ++t) {
            workData[t] = J.$eq(img.get$samplesPerPixel(), 3) ? G.Spectrum_Spectrum(0) : 0;
            for (j = 0; j < 4; ++j) {
              if (t >= t1)
                return H.ioore(tWeights, t);
              t5 = tWeights[t].get$firstTexel();
              if (typeof t5 !== "number")
                return t5.$add();
              offset = t5 + j;
              if (t3) {
                a = offset - C.JSInt_methods.$tdiv(offset, yres) * yres;
                if (a < 0)
                  a += yres;
                offset = a;
              } else if (t4)
                offset = C.JSInt_methods.clamp$2(offset, 0, t2);
              if (offset >= 0 && offset < yres) {
                px = J.$mul$ns(resampledImage.$index(0, offset * sPow2 + s), tWeights[t].get$weight()[j]);
                workData[t] = J.$add$ns(workData[t], px);
              }
            }
          }
          for (t = 0; t < tPow2; ++t)
            resampledImage.$indexSet(0, t * sPow2 + s, J.clamp$2$n(workData[t], 0, 1 / 0));
        }
        img.set$1(resampledImage);
        yres = tPow2;
        xres = sPow2;
      }
      this.width = xres;
      this.height = yres;
      t1 = P.max(xres, yres);
      t1 = Math.log(t1);
      t2 = $.get$_invLog2();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = 1 + C.JSDouble_methods.toInt$0(t1 * t2);
      this.levels = t2;
      this.pyramid = H.setRuntimeTypeInfo(Array(t2), [G.SpectrumImage]);
      t1 = J.getInterceptor$asx(filename);
      if (t1.get$isNotEmpty(filename)) {
        t2 = this.levels;
        if (typeof t2 !== "number")
          return t2.$gt();
        t2 = t2 > 1;
      } else
        t2 = false;
      if (t2) {
        t2 = H.S(filename) + ": Generating " + H.S(this.levels) + " MIPMap Levels";
        $.Log.call$2(0, t2);
      }
      t2 = this.pyramid;
      t3 = G.SpectrumImage$from(img);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2[0] = t3;
      i = 1;
      while (true) {
        t2 = this.levels;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t2 = this.pyramid;
        t3 = i - 1;
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        sRes = P.max(1, J.$tdiv$n(J.get$width$x(t2[t3]), 2));
        t2 = this.pyramid;
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        tRes = P.max(1, J.$tdiv$n(J.get$height$x(t2[t3]), 2));
        t2 = this.pyramid;
        t4 = img.get$samplesPerPixel();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = sRes * tRes * t4;
        if (typeof t5 !== "number" || Math.floor(t5) !== t5)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t5)));
        t5 = new Float32Array(t5);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = new G.SpectrumImage(sRes, tRes, t4, t5);
        for (t = 0, p = 0; t < tRes; ++t)
          for (t2 = 2 * t, t4 = t2 + 1, s = 0; s < sRes; ++s, ++p) {
            t5 = this.pyramid;
            if (i >= t5.length)
              return H.ioore(t5, i);
            t6 = 2 * s;
            t7 = t6 + 1;
            J.$indexSet$ax(t5[i], p, J.$mul$ns(J.$add$ns(J.$add$ns(J.$add$ns(this.texel$3(t3, t6, t2), this.texel$3(t3, t7, t2)), this.texel$3(t3, t6, t4)), this.texel$3(t3, t7, t4)), 0.25));
          }
        ++i;
      }
      if ($.MIPMap_weightLut == null) {
        $.MIPMap_weightLut = new Float32Array(128);
        for (i = 0; i < 128; ++i) {
          t2 = $.MIPMap_weightLut;
          t3 = Math.exp(-2 * (i / 127));
          t2[i] = t3 - Math.exp(-2);
        }
      }
      if (t1.get$isNotEmpty(filename)) {
        t1 = this.levels;
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 1;
      } else
        t1 = false;
      if (t1) {
        t1 = "Finished generating MIPMap for " + H.S(filename);
        $.Log.call$2(0, t1);
      }
    },
    static: {"^": "MIPMap_TEXTURE_REPEAT,MIPMap_TEXTURE_BLACK,MIPMap_TEXTURE_CLAMP,MIPMap_WEIGHT_LUT_SIZE,MIPMap_weightLut", MIPMap_GetTextureName: function(filename, doTri, gamma, maxAniso, scale, spectrum, wrap) {
        var $name = doTri === true ? J.$add$ns(filename, "_TRI:" + H.S(doTri)) : filename;
        if (!J.$eq(maxAniso, 8))
          $name = J.$add$ns($name, "_ANI:" + H.S(maxAniso));
        if (wrap !== 0)
          $name = J.$add$ns($name, "_WRAP:" + wrap);
        if (typeof scale === "number" && scale !== 1)
          $name = J.$add$ns($name, "_SCALE:" + H.S(scale));
        if (!!J.getInterceptor(scale).$isSpectrum && !scale.isValue$1(1))
          $name = J.$add$ns($name, "_SCALE:" + H.S(scale));
        if (!J.$eq(gamma, 1))
          $name = J.$add$ns($name, "_GAMMA:" + H.S(gamma));
        return !spectrum ? J.$add$ns($name, "_SPECTRUM:false") : $name;
      }, MIPMap$texture: function(img, filename, doTrilinear, maxAnisotropy, wrapMode) {
        var t1 = new G.MIPMap(doTrilinear, maxAnisotropy, wrapMode, null, null, null, null);
        t1.MIPMap$texture$5(img, filename, doTrilinear, maxAnisotropy, wrapMode);
        return t1;
      }}
  },
  _ResampleWeight: {
    "^": "Object;firstTexel<,weight<"
  },
  Distribution1D: {
    "^": "Object;func,cdf,funcInt<,count@",
    Distribution1D$2: function(f, count) {
      var t1, i, t2, t3, t4, t5, t6;
      t1 = this.count;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      t1 = new Float32Array(t1);
      this.func = t1;
      C.NativeFloat32List_methods.setRange$3(t1, 0, this.count, f);
      t1 = J.$add$ns(this.count, 1);
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      t1 = new Float32Array(t1);
      this.cdf = t1;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = 0;
      i = 1;
      while (true) {
        t1 = J.$add$ns(this.count, 1);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.cdf;
        t3 = this.count;
        if (!(i < t1))
          break;
        t1 = i - 1;
        t4 = t2.length;
        if (t1 >= t4)
          return H.ioore(t2, t1);
        t5 = t2[t1];
        t6 = this.func;
        if (t1 >= t6.length)
          return H.ioore(t6, t1);
        t1 = t6[t1];
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (i >= t4)
          return H.ioore(t2, i);
        t2[i] = t5 + t1 / t3;
        ++i;
      }
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        return H.ioore(t2, t3);
      t1 = t2[t3];
      this.funcInt = t1;
      if (t1 === 0) {
        t1 = t3;
        i = 1;
        while (true) {
          t1 = J.$add$ns(t1, 1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.cdf;
          t2 = this.count;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = i / t2;
          ++i;
          t1 = t2;
        }
      } else {
        i = 1;
        while (true) {
          t1 = J.$add$ns(this.count, 1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.cdf;
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t3 = this.funcInt;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t1[i] = t2 / t3;
          ++i;
        }
      }
    },
    static: {Distribution1D$: function(f, count) {
        var t1 = new G.Distribution1D(null, null, null, count);
        t1.Distribution1D$2(f, count);
        return t1;
      }}
  },
  Distribution2D: {
    "^": "Object;pConditionalV,pMarginal",
    Distribution2D$3: function(data, nu, nv) {
      var t1, t2, v, t3, marginalFunc, t4;
      if (typeof nv !== "number")
        return H.iae(nv);
      t1 = data.length;
      t2 = this.pConditionalV;
      v = 0;
      for (; v < nv; ++v) {
        if (typeof nu !== "number")
          return H.iae(nu);
        t3 = v * nu;
        t2.push(G.Distribution1D$(new Float32Array(data.subarray(t3, C.NativeFloat32List_methods._checkSublistArguments$3(data, t3, t3 + nu, t1))), nu));
      }
      if (typeof nv !== "number" || Math.floor(nv) !== nv)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(nv)));
      marginalFunc = new Float32Array(nv);
      for (t1 = t2.length, t3 = marginalFunc.length, v = 0; v < nv; ++v) {
        if (v >= t1)
          return H.ioore(t2, v);
        t4 = t2[v].get$funcInt();
        if (v >= t3)
          return H.ioore(marginalFunc, v);
        marginalFunc[v] = t4;
      }
      this.pMarginal = G.Distribution1D$(marginalFunc, nv);
    },
    static: {Distribution2D$: function(data, nu, nv) {
        var t1 = new G.Distribution2D([], null);
        t1.Distribution2D$3(data, nu, nv);
        return t1;
      }}
  },
  Normal: {
    "^": "Vector;data",
    $mul: function(_, s) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof s !== "number")
        return H.iae(s);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = new G.Normal(new Float32Array(3));
      t2.Vector$3(t3 * s, t4 * s, t1 * s);
      return t2;
    },
    $div: function(_, s) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof s !== "number")
        return H.iae(s);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = new G.Normal(new Float32Array(3));
      t2.Vector$3(t3 / s, t4 / s, t1 / s);
      return t2;
    },
    $add: function(_, p) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(p);
      t5 = t4.get$x(p);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = t4.get$y(p);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = t4.get$z(p);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = new G.Normal(new Float32Array(3));
      t2.Vector$3(t3 + t5, t6 + t7, t1 + t4);
      return t2;
    },
    $sub: function(_, p) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(p);
      t5 = t4.get$x(p);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = t4.get$y(p);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = t4.get$z(p);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = new G.Normal(new Float32Array(3));
      t2.Vector$3(t3 - t5, t6 - t7, t1 - t4);
      return t2;
    },
    $negate: function(_) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = new G.Normal(new Float32Array(3));
      t2.Vector$3(-t3, -t4, -t1);
      return t2;
    },
    $isNormal: true,
    static: {"^": "Normal_ZERO"}
  },
  OutputImage: {
    "^": "Object;width>,height>,xOffset<,yOffset<,imageWidth<,imageHeight<,rgb<",
    toImage$1$gamma: function(gamma) {
      var img, pixels, t1, t2, len, t3, i, oi, t4, t5;
      img = U.Image$(this.width, this.height, 4);
      pixels = H.NativeUint8List_NativeUint8List$view(img.data.buffer, 0, null);
      t1 = this.rgb;
      t2 = J.getInterceptor$asx(t1);
      len = t2.get$length(t1);
      if (typeof len !== "number")
        return H.iae(len);
      t3 = pixels.length;
      i = 0;
      oi = 0;
      for (; i < len; i += 3, oi += 4) {
        t4 = C.JSInt_methods.clamp$2(J.floor$0$n(J.$mul$ns(t2.$index(t1, i), 255)), 0, 255);
        if (oi >= t3)
          return H.ioore(pixels, oi);
        pixels[oi] = t4;
        t4 = oi + 1;
        t5 = C.JSInt_methods.clamp$2(J.floor$0$n(J.$mul$ns(t2.$index(t1, i + 1), 255)), 0, 255);
        if (t4 >= t3)
          return H.ioore(pixels, t4);
        pixels[t4] = t5;
        t5 = oi + 2;
        t4 = C.JSInt_methods.clamp$2(J.floor$0$n(J.$mul$ns(t2.$index(t1, i + 2), 255)), 0, 255);
        if (t5 >= t3)
          return H.ioore(pixels, t5);
        pixels[t5] = t4;
        t4 = oi + 3;
        if (t4 >= t3)
          return H.ioore(pixels, t4);
        pixels[t4] = 255;
      }
      return U.adjustColor(img, null, null, null, null, null, 1 / gamma, null, null, null, null);
    },
    OutputImage$7: function(xOffset, yOffset, width, height, imageWidth, imageHeight, rgb) {
      if (this.imageWidth == null)
        this.imageWidth = width;
      if (this.imageHeight == null)
        this.imageHeight = height;
    },
    static: {OutputImage$: function(xOffset, yOffset, width, height, imageWidth, imageHeight, rgb) {
        var t1;
        if (rgb != null)
          t1 = rgb;
        else {
          t1 = J.$mul$ns(J.$mul$ns(width, height), 3);
          if (typeof t1 !== "number" || Math.floor(t1) !== t1)
            H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
          t1 = new Float32Array(t1);
        }
        t1 = new G.OutputImage(width, height, xOffset, yOffset, imageWidth, imageHeight, t1);
        t1.OutputImage$7(xOffset, yOffset, width, height, imageWidth, imageHeight, rgb);
        return t1;
      }}
  },
  ParamSet: {
    "^": "Object;bools,ints,floats,points,vectors,normals,spectra,strings,textures",
    addFloat$2: function($name, data) {
      $name = J.toLowerCase$0$s($name);
      this.eraseFloat$1($name);
      this.floats.push(new G.ParamSetItem($name, data, false));
    },
    addInt$2: function($name, data) {
      $name = J.toLowerCase$0$s($name);
      this.eraseInt$1($name);
      this.ints.push(new G.ParamSetItem($name, data, false));
    },
    addPoint$2: function($name, data) {
      var t1, t2, numPts, pts, i, j, t3, t4, t5, t6;
      $name = J.toLowerCase$0$s($name);
      this.erasePoint$1($name);
      t1 = J.getInterceptor$asx(data);
      t2 = t1.$index(data, 0);
      if (typeof t2 === "number") {
        numPts = J.$tdiv$n(t1.get$length(data), 3);
        if (typeof numPts !== "number")
          return H.iae(numPts);
        pts = Array(numPts);
        pts.fixed$length = init;
        pts.$builtinTypeInfo = [G.Point];
        for (t2 = pts.length, i = 0, j = 0; i < numPts; ++i, j += 3) {
          t3 = t1.$index(data, j);
          t4 = t1.$index(data, j + 1);
          t5 = t1.$index(data, j + 2);
          t6 = new Float32Array(3);
          if (0 >= 3)
            return H.ioore(t6, 0);
          t6[0] = t3;
          if (1 >= 3)
            return H.ioore(t6, 1);
          t6[1] = t4;
          if (2 >= 3)
            return H.ioore(t6, 2);
          t6[2] = t5;
          if (i >= t2)
            return H.ioore(pts, i);
          pts[i] = new G.Point(t6);
        }
        this.points.push(new G.ParamSetItem($name, pts, false));
      } else if (!!J.getInterceptor(t1.$index(data, 0)).$isPoint)
        this.points.push(new G.ParamSetItem($name, data, false));
    },
    addNormal$2: function($name, data) {
      var t1, t2, numNorms, norms, i, j, t3, t4, t5, t6;
      $name = J.toLowerCase$0$s($name);
      this.eraseNormal$1($name);
      t1 = J.getInterceptor$asx(data);
      if (!!J.getInterceptor(t1.$index(data, 0)).$isNormal)
        this.normals.push(new G.ParamSetItem($name, data, false));
      else {
        t2 = t1.$index(data, 0);
        if (typeof t2 === "number") {
          numNorms = J.$tdiv$n(t1.get$length(data), 3);
          if (typeof numNorms !== "number")
            return H.iae(numNorms);
          norms = Array(numNorms);
          norms.fixed$length = init;
          norms.$builtinTypeInfo = [G.Normal];
          for (t2 = norms.length, i = 0, j = 0; i < numNorms; ++i, j += 3) {
            t3 = t1.$index(data, j);
            t4 = t1.$index(data, j + 1);
            t5 = t1.$index(data, j + 2);
            t6 = new Float32Array(3);
            if (0 >= 3)
              return H.ioore(t6, 0);
            t6[0] = t3;
            if (1 >= 3)
              return H.ioore(t6, 1);
            t6[1] = t4;
            if (2 >= 3)
              return H.ioore(t6, 2);
            t6[2] = t5;
            if (i >= t2)
              return H.ioore(norms, i);
            norms[i] = new G.Normal(t6);
          }
          this.normals.push(new G.ParamSetItem($name, norms, false));
        }
      }
    },
    eraseInt$1: function(n) {
      var t1, i;
      for (t1 = this.ints, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    eraseFloat$1: function(n) {
      var t1, i;
      for (t1 = this.floats, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    erasePoint$1: function(n) {
      var t1, i;
      for (t1 = this.points, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    eraseNormal$1: function(n) {
      var t1, i;
      for (t1 = this.normals, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    findOneFloat$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.floats, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneInt$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.ints, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneBool$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.bools, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOnePoint$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.points, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneVector$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.vectors, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneSpectrum$2: function($name, d) {
      var t1, i, t2, t3;
      $name = $name.toLowerCase();
      for (t1 = this.spectra, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          t3 = t1.length;
          if (i >= t3)
            return H.ioore(t1, i);
          if (t2.data == null)
            return d;
          if (i >= t3)
            return H.ioore(t1, i);
          if (J.$eq(J.get$length$asx(t2.data), 1)) {
            if (i >= t1.length)
              return H.ioore(t1, i);
            t2 = t1[i];
            t2.set$lookedUp(true);
            if (i >= t1.length)
              return H.ioore(t1, i);
            return J.$index$asx(t2.data, 0);
          }
        }
      return d;
    },
    findOneString$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.strings, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneFilename$2: function($name, d) {
      var filename = this.findOneString$2($name.toLowerCase(), "");
      if (J.$eq(filename, ""))
        return d;
      return filename;
    },
    findTexture$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.textures, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return "";
    },
    findFloat$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.floats, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findInt$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.ints, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findPoint$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.points, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findVector$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.vectors, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findNormal$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.normals, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findString$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.strings, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    toString$0: function(_) {
      var t1, out, p, t2, i, t3;
      for (t1 = this.bools, t1 = new H.ListIterator(t1, t1.length, 0, null), out = ""; t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        out += "\"bool " + H.S(t2.get$name(p)) + "\" [";
        i = 0;
        while (true) {
          t3 = J.get$length$asx(t2.get$data(p));
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (i !== 0)
            out += " ";
          out += J.$index$asx(t2.get$data(p), i) === true ? 1 : 0;
          ++i;
        }
        out += "] ";
      }
      for (t1 = this.ints, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("integer", t1._current);
      for (t1 = this.floats, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("float", t1._current);
      for (t1 = this.points, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("point", t1._current);
      for (t1 = this.vectors, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("vector", t1._current);
      for (t1 = this.normals, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("normals", t1._current);
      for (t1 = this.spectra, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("color", t1._current);
      for (t1 = this.strings, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        out += "\"string " + H.S(t2.get$name(p)) + "\" [";
        i = 0;
        while (true) {
          t3 = J.get$length$asx(t2.get$data(p));
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (i !== 0)
            out += " ";
          out += "\"" + H.S(J.$index$asx(t2.get$data(p), i)) + "\"";
          ++i;
        }
        out += "] ";
      }
      for (t1 = this.textures, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        out += "\"texture " + H.S(t2.get$name(p)) + "\" [";
        i = 0;
        while (true) {
          t3 = J.get$length$asx(t2.get$data(p));
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (i !== 0)
            out += " ";
          out += "\"" + H.S(J.$index$asx(t2.get$data(p), i)) + "\"";
          ++i;
        }
        out += "] ";
      }
      return out;
    },
    _paramToString$2: function(type, item) {
      var t1, out, i, t2;
      t1 = J.getInterceptor$x(item);
      out = "\"" + type + " " + H.S(t1.get$name(item)) + "\" [";
      i = 0;
      while (true) {
        t2 = J.get$length$asx(t1.get$data(item));
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        if (i !== 0)
          out += " ";
        out += H.S(J.$index$asx(t1.get$data(item), i));
        ++i;
      }
      return out + "] ";
    }
  },
  ParamSetItem: {
    "^": "Object;name>,data>,lookedUp?"
  },
  PixelSampler: {
    "^": "Object;width>,height>",
    setup$4: function(x, y, width, height) {
      this.left = x;
      this.top = y;
      this.width = width;
      this.height = height;
    }
  },
  Point: {
    "^": "Vector;data",
    $mul: function(_, s) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof s !== "number")
        return H.iae(s);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t3 * s, t4 * s, t1 * s);
      return t2;
    },
    $div: function(_, s) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof s !== "number")
        return H.iae(s);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t3 / s, t4 / s, t1 / s);
      return t2;
    },
    $add: function(_, p) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(p);
      t5 = J.$index$asx(t4.get$data(p), 0);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = J.$index$asx(t4.get$data(p), 1);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = J.$index$asx(t4.get$data(p), 2);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t3 + t5, t6 + t7, t1 + t4);
      return t2;
    },
    $sub: function(_, p) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(p);
      t5 = J.$index$asx(t4.get$data(p), 0);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = J.$index$asx(t4.get$data(p), 1);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = J.$index$asx(t4.get$data(p), 2);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t3 - t5, t6 - t7, t1 - t4);
      return t2;
    },
    $isPoint: true,
    static: {"^": "Point_ZERO"}
  },
  Primitive: {
    "^": "Object;",
    canIntersect$0: function() {
      return true;
    },
    refine$1: function(refined) {
      $.Log.call$2(3, "Unimplemented Primitive.refine() method called!");
    },
    fullyRefine$1: function(refined) {
      var todo, t1, prim;
      todo = [];
      todo.push(this);
      for (t1 = J.getInterceptor$ax(refined); todo.length !== 0;) {
        prim = C.JSArray_methods.get$last(todo);
        if (0 >= todo.length)
          return H.ioore(todo, 0);
        todo.pop();
        if (prim.canIntersect$0())
          t1.add$1(refined, prim);
        else
          prim.refine$1(todo);
      }
    }
  },
  Aggregate: {
    "^": "Primitive;"
  },
  ProjectiveCamera: {
    "^": "Camera;",
    ProjectiveCamera$8: function(cam2world, cameraToScreen, screenWindow, sopen, sclose, lensRadius, focalDistance, film) {
      var t1, t2, t3, t4;
      t1 = G.Transform_Scale(film.xResolution, film.yResolution, 1);
      t2 = J.getInterceptor$asx(screenWindow);
      t3 = J.$sub$n(t2.$index(screenWindow, 1), t2.$index(screenWindow, 0));
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = J.$sub$n(t2.$index(screenWindow, 2), t2.$index(screenWindow, 3));
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = t1.$mul(0, G.Transform_Scale(1 / t3, 1 / t4, 1)).$mul(0, G.Transform_Translate(G.Vector$(-J.toDouble$0$n(t2.$index(screenWindow, 0)), -J.toDouble$0$n(t2.$index(screenWindow, 3)), 0)));
      this.screenToRaster = t2;
      this.rasterToScreen = G.Transform$(t2.mInv, t2.m);
      t2 = this.cameraToScreen;
      this.rasterToCamera = G.Transform$(t2.mInv, t2.m).$mul(0, this.rasterToScreen);
    }
  },
  Quaternion: {
    "^": "Object;"
  },
  Ray: {
    "^": "Object;"
  },
  BSDFSampleOffsets: {
    "^": "Object;"
  },
  BxDF: {
    "^": "Object;"
  },
  IrregIsotropicBRDFSample: {
    "^": "Object;p>,v<"
  },
  RenderOverrides: {
    "^": "Object;quickRender,resolutionScale,samplingMode,filterName,filterParams,filmName,filmParams,pixelSamplerName,pixelSamplerParams,samplerName,samplerParams,acceleratorName,acceleratorParams,rendererName,rendererParams,surfaceIntegratorName,surfaceIntegratorParams,volumeIntegratorName,volumeIntegratorParams,cameraName,cameraParams",
    toJson$0: function() {
      var m = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      if (this.quickRender)
        m.$indexSet(0, "quickRender", true);
      m.$indexSet(0, "resolutionScale", this.resolutionScale);
      m.$indexSet(0, "samplingMode", this.samplingMode);
      return m;
    },
    static: {"^": "RenderOverrides_global", RenderOverrides_QuickRender: function() {
        var t1 = $.RenderOverrides_global;
        if (t1 != null)
          return t1.quickRender;
        return false;
      }, RenderOverrides_ResolutionScale: function() {
        var t1 = $.RenderOverrides_global;
        if (t1 != null)
          return t1.resolutionScale;
        return 1;
      }, RenderOverrides_SamplingMode: function() {
        var t1 = $.RenderOverrides_global;
        if (t1 != null)
          return t1.samplingMode;
        return 0;
      }}
  },
  ResourceManager: {
    "^": "Object;",
    requestFile$2: function(path, future) {
      var t1, c, t2;
      if (future != null)
        this.futures.push(future);
      t1 = this.resources;
      if (t1.containsKey$1(path)) {
        if (!!J.getInterceptor(t1.$index(0, path)).$isFuture)
          return t1.$index(0, path);
        c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        t1 = t1.$index(0, path);
        t2 = c.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
        return t2;
      }
      c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      t2 = c.future;
      t1.$indexSet(0, path, t2);
      this.loadFile$1(path).then$1(new G.ResourceManager_requestFile_closure(this, path, c));
      return t2;
    },
    requestImage$2: function(path, future) {
      var t1, t2, c;
      this.futures.push(future);
      t1 = this.resources;
      if (t1.containsKey$1(path)) {
        if (!!J.getInterceptor(t1.$index(0, path)).$isFuture)
          return t1.$index(0, path);
        t2 = [J.JSArray, J.JSInt];
        c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
        t1 = t1.$index(0, path);
        t2 = c.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
        return t2;
      }
      t2 = "LOADING " + H.S(path);
      $.Log.call$2(4, t2);
      t2 = G.SpectrumImage;
      c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
      t2 = c.future;
      t1.$indexSet(0, path, t2);
      this.loadFile$1(path).then$1(new G.ResourceManager_requestImage_closure(this, path, c));
      return t2;
    },
    getTexture$1: function($name) {
      var t1 = this.textures;
      if (t1.containsKey$1($name))
        return t1.$index(0, $name);
      return;
    }
  },
  ResourceManager_requestFile_closure: {
    "^": "Closure:95;this_0,path_1,c_2",
    call$1: function(bytes) {
      var t1;
      if (bytes == null) {
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      this.this_0.resources.$indexSet(0, this.path_1, bytes);
      t1 = this.c_2.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(bytes);
    }
  },
  ResourceManager_requestImage_closure: {
    "^": "Closure:95;this_0,path_1,c_2",
    call$1: function(bytes) {
      var t1, decoder, hdr, t2, t3, res, ri, y, x, r, g, b, ri0;
      if (bytes == null) {
        t1 = "UNABLE TO LOAD " + H.S(this.path_1);
        $.Log.call$2(0, t1);
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      decoder = U.findDecoderForData(bytes);
      if (decoder == null) {
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      hdr = decoder.decodeHdrImage$1(bytes);
      t1 = hdr.slices;
      if (t1.get$isEmpty(t1))
        t2 = 0;
      else {
        t2 = t1.get$values(t1);
        t2 = J.get$width$x(t2._f$1(J.get$first$ax(t2._iterable)));
      }
      if (t1.get$isEmpty(t1))
        t3 = 0;
      else {
        t3 = t1.get$values(t1);
        t3 = J.get$height$x(t3._f$1(J.get$first$ax(t3._iterable)));
      }
      res = G.SpectrumImage$(t2, t3, 3);
      ri = 0;
      y = 0;
      while (true) {
        if (t1.get$isEmpty(t1))
          t2 = 0;
        else {
          t2 = t1.get$values(t1);
          t2 = J.get$height$x(t2._f$1(J.get$first$ax(t2._iterable)));
        }
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(y < t2))
          break;
        x = 0;
        while (true) {
          if (t1.get$isEmpty(t1))
            t2 = 0;
          else {
            t2 = t1.get$values(t1);
            t2 = J.get$width$x(t2._f$1(J.get$first$ax(t2._iterable)));
          }
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(x < t2))
            break;
          t2 = hdr.red;
          r = t2 != null ? t2.getFloat$2(x, y) : 0;
          t2 = hdr.green;
          g = t2 != null ? t2.getFloat$2(x, y) : 0;
          t2 = hdr.blue;
          b = t2 != null ? t2.getFloat$2(x, y) : 0;
          t2 = res.data;
          ri0 = ri + 1;
          t3 = t2.length;
          if (ri < 0 || ri >= t3)
            return H.ioore(t2, ri);
          t2[ri] = r;
          ri = ri0 + 1;
          if (ri0 < 0 || ri0 >= t3)
            return H.ioore(t2, ri0);
          t2[ri0] = g;
          ri0 = ri + 1;
          if (ri < 0 || ri >= t3)
            return H.ioore(t2, ri);
          t2[ri] = b;
          ++x;
          ri = ri0;
        }
        ++y;
      }
      t1 = this.path_1;
      t2 = "HDR IMAGE LOADED " + H.S(t1);
      $.Log.call$2(4, t2);
      this.this_0.resources.$indexSet(0, t1, res);
      t1 = this.c_2.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(res);
    }
  },
  RGBColor: {
    "^": "Spectrum;c",
    setSampled$3: function(lambda, v, offset) {
      var x, y, z, yint, i, t1, val, t2;
      if (!G.Spectrum_SpectrumSamplesSorted(lambda))
        G.Spectrum_SortSpectrumSamples(lambda, v, offset);
      for (x = 0, y = 0, z = 0, yint = 0, i = 0; i < 471; ++i) {
        t1 = C.List_s9c[i];
        if (typeof t1 !== "number")
          return H.iae(t1);
        yint += t1;
        val = G.Spectrum_InterpolateSpectrumSamples(lambda, v, C.List_U49[i], offset);
        t1 = J.getInterceptor$ns(val);
        t2 = t1.$mul(val, C.List_wsa[i]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        x += t2;
        t2 = t1.$mul(val, C.List_s9c[i]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        y += t2;
        t1 = t1.$mul(val, C.List_SCE[i]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        z += t1;
      }
      G.Spectrum_XYZToRGB(x / yint, y / yint, z / yint, this.c);
      return this;
    },
    setSampled$2: function(lambda, v) {
      return this.setSampled$3(lambda, v, 0);
    },
    toRGB$0: function() {
      return this;
    },
    setRGB$4: function(r, g, b, type) {
      var t1, t2;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = r;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = g;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = b;
      return this;
    },
    setRGB$3: function(r, g, b) {
      return this.setRGB$4(r, g, b, 0);
    },
    $add: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.RGBColor$rgb(t3 + t4, t5 + t6, t1 + t2);
    },
    $sub: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.RGBColor$rgb(t3 - t4, t5 - t6, t1 - t2);
    },
    $mul: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.RGBColor$rgb(t3 * s, t4 * s, t1[2] * s);
      }
      if (!!J.getInterceptor(s).$isRGBColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.RGBColor$rgb(t3 * t6, t7 * t8, t1 * t4[2]);
      }
      $.Log.call$2(3, "RGBSpectrum or double expected.");
      t1 = new G.RGBColor(new Float32Array(3));
      t1.Spectrum$_$2(3, 0);
      return t1;
    },
    $div: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.RGBColor$rgb(t3 / s, t4 / s, t1[2] / s);
      }
      if (!!J.getInterceptor(s).$isRGBColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.RGBColor$rgb(t3 / t6, t7 / t8, t1 / t4[2]);
      }
      $.Log.call$2(3, "RGBSpectrum or double expected.");
      t1 = new G.RGBColor(new Float32Array(3));
      t1.Spectrum$_$2(3, 0);
      return t1;
    },
    $negate: function(_) {
      var t1, t2, t3, t4;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.RGBColor$rgb(-t3, -t4, -t1[2]);
    },
    luminance$0: function() {
      var t1, t2, t3, t4;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return 0.212671 * t3 + 0.71516 * t4 + 0.072169 * t1[2];
    },
    clamp$2: function(_, low, high) {
      var t1, t2, t3, t4;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = C.JSNumber_methods.clamp$2(t1[0], low, high);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = C.JSNumber_methods.clamp$2(t1[1], low, high);
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.RGBColor$rgb(t3, t4, C.JSNumber_methods.clamp$2(t1[2], low, high));
    },
    toString$0: function(_) {
      var t1, t2, t3;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = H.S(t1[0]) + " ";
      if (1 >= t2)
        return H.ioore(t1, 1);
      t3 = t3 + H.S(t1[1]) + " ";
      if (2 >= t2)
        return H.ioore(t1, 2);
      return t3 + H.S(t1[2]);
    },
    RGBColor$rgb$3: function(r, g, b) {
      var t1, t2;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = r;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = g;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = b;
    },
    RGBColor$from$1: function(s) {
      var t1, t2, t3, t4, t5;
      t1 = J.getInterceptor(s);
      if (!!t1.$isRGBColor) {
        t1 = this.c;
        t2 = s.c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      } else if (!!t1.$isXYZColor) {
        t1 = s.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        G.Spectrum_XYZToRGB(t3, t4, t1[2], this.c);
      } else if (!!t1.$isSampledSpectrum) {
        t1 = this.c;
        t2 = s.toRGB$0().c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      }
    },
    $isRGBColor: true,
    static: {RGBColor$rgb: function(r, g, b) {
        var t1 = new G.RGBColor(new Float32Array(3));
        t1.Spectrum$_$2(3, 0);
        t1.RGBColor$rgb$3(r, g, b);
        return t1;
      }, RGBColor$from: function(s) {
        var t1 = new G.RGBColor(new Float32Array(3));
        t1.Spectrum$_$2(3, 0);
        t1.RGBColor$from$1(s);
        return t1;
      }}
  },
  RNG: {
    "^": "Object;random"
  },
  SampledSpectrum: {
    "^": "Spectrum;c",
    setSampled$3: function(lambda, v, offset) {
      var t1, t2, i, t3, i0, t4;
      if (!G.Spectrum_SpectrumSamplesSorted(lambda))
        G.Spectrum_SortSpectrumSamples(lambda, v, offset);
      for (t1 = this.c, t2 = t1.length, i = 0; i < 4; i = i0) {
        t3 = i / 4;
        i0 = i + 1;
        t4 = i0 / 4;
        t4 = G.Spectrum_AverageSpectrumSamples(lambda, v, 400 * (1 - t3) + 700 * t3, 400 * (1 - t4) + 700 * t4, offset);
        if (i >= t2)
          return H.ioore(t1, i);
        t1[i] = t4;
      }
      return this;
    },
    setSampled$2: function(lambda, v) {
      return this.setSampled$3(lambda, v, 0);
    },
    $add: function(_, s) {
      var t1, r, t2, t3, i, t4, t5;
      t1 = new Float32Array(4);
      r = new G.SampledSpectrum(t1);
      r.Spectrum$_$2(4, 0);
      for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        t4 = t2[i];
        t5 = J.$index$asx(s.get$c(), i);
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (i >= 4)
          return H.ioore(t1, i);
        t1[i] = t4 + t5;
      }
      return r;
    },
    $sub: function(_, s) {
      var t1, r, t2, t3, i, t4, t5;
      t1 = new Float32Array(4);
      r = new G.SampledSpectrum(t1);
      r.Spectrum$_$2(4, 0);
      for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        t4 = t2[i];
        t5 = J.$index$asx(s.get$c(), i);
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (i >= 4)
          return H.ioore(t1, i);
        t1[i] = t4 - t5;
      }
      return r;
    },
    $mul: function(_, s) {
      var t1, r, t2, t3, i, t4, t5, t6, t7;
      if (typeof s === "number") {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$_$2(4, 0);
        for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t4 = t2[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t4 * s;
        }
        return r;
      }
      if (!!J.getInterceptor(s).$isSampledSpectrum) {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$_$2(4, 0);
        for (t2 = this.c, t3 = t2.length, t4 = s.c, t5 = t4.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t5)
            return H.ioore(t4, i);
          t7 = t4[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t6 * t7;
        }
        return r;
      }
      $.Log.call$2(3, "SampledSpectrum or num expected.");
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      return t1;
    },
    $div: function(_, s) {
      var t1, r, t2, t3, i, t4, t5, t6, t7;
      if (typeof s === "number") {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$_$2(4, 0);
        for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t4 = t2[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t4 / s;
        }
        return r;
      }
      if (!!J.getInterceptor(s).$isSampledSpectrum) {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$_$2(4, 0);
        for (t2 = this.c, t3 = t2.length, t4 = s.c, t5 = t4.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t5)
            return H.ioore(t4, i);
          t7 = t4[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t6 / t7;
        }
        return r;
      }
      $.Log.call$2(3, "SampledSpectrum or double expected.");
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      return t1;
    },
    setRGB$4: function(r, g, b, type) {
      var res, t1, t2, t3, t4, t5;
      res = new G.SampledSpectrum(new Float32Array(4));
      res.Spectrum$_$2(4, 0);
      if (type === 0) {
        t1 = J.getInterceptor$n(r);
        if (t1.$le(r, g) && t1.$le(r, b)) {
          res = res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectWhite.$mul(0, r));
          t1 = J.getInterceptor$n(g);
          t2 = J.getInterceptor$n(b);
          res = t1.$le(g, b) ? res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectCyan.$mul(0, t1.$sub(g, r))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectBlue.$mul(0, t2.$sub(b, g))) : res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectCyan.$mul(0, t2.$sub(b, r))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectGreen.$mul(0, t1.$sub(g, b)));
        } else {
          t2 = J.getInterceptor$n(g);
          if (t2.$le(g, r) && t2.$le(g, b)) {
            res = res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectWhite.$mul(0, g));
            t2 = J.getInterceptor$n(b);
            res = t1.$le(r, b) ? res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectMagenta.$mul(0, t1.$sub(r, g))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectBlue.$mul(0, t2.$sub(b, r))) : res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectMagenta.$mul(0, t2.$sub(b, g))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectRed.$mul(0, t1.$sub(r, b)));
          } else {
            res = res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectWhite.$mul(0, b));
            res = t1.$le(r, g) ? res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectYellow.$mul(0, t1.$sub(r, b))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectGreen.$mul(0, t2.$sub(g, r))) : res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectYellow.$mul(0, t2.$sub(g, b))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectRed.$mul(0, t1.$sub(r, g)));
          }
        }
        res = res.$mul(0, 0.94);
      } else {
        t1 = J.getInterceptor$n(r);
        if (t1.$le(r, g) && t1.$le(r, b)) {
          res = res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectWhite.$mul(0, r));
          t1 = J.getInterceptor$n(g);
          t2 = J.getInterceptor$n(b);
          res = t1.$le(g, b) ? res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectCyan.$mul(0, t1.$sub(g, r))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectBlue.$mul(0, t2.$sub(b, g))) : res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectCyan.$mul(0, t2.$sub(b, r))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectGreen.$mul(0, t1.$sub(g, b)));
        } else {
          t2 = J.getInterceptor$n(g);
          if (t2.$le(g, r) && t2.$le(g, b)) {
            res = res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectWhite.$mul(0, g));
            t2 = J.getInterceptor$n(b);
            res = t1.$le(r, b) ? res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectMagenta.$mul(0, t1.$sub(r, g))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectBlue.$mul(0, t2.$sub(b, r))) : res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectMagenta.$mul(0, t2.$sub(b, g))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectRed.$mul(0, t1.$sub(r, b)));
          } else {
            res = res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectWhite.$mul(0, b));
            res = t1.$le(r, g) ? res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectYellow.$mul(0, t1.$sub(r, b))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectGreen.$mul(0, t2.$sub(g, r))) : res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectYellow.$mul(0, t2.$sub(g, b))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectRed.$mul(0, t1.$sub(r, g)));
          }
        }
        res = res.$mul(0, 0.86445);
      }
      t1 = this.c;
      t2 = res.c;
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t4 = C.JSNumber_methods.clamp$2(t2[0], 0, 1 / 0);
      t5 = t1.length;
      if (0 >= t5)
        return H.ioore(t1, 0);
      t1[0] = t4;
      if (1 >= t3)
        return H.ioore(t2, 1);
      t4 = C.JSNumber_methods.clamp$2(t2[1], 0, 1 / 0);
      if (1 >= t5)
        return H.ioore(t1, 1);
      t1[1] = t4;
      if (2 >= t3)
        return H.ioore(t2, 2);
      t2 = C.JSNumber_methods.clamp$2(t2[2], 0, 1 / 0);
      if (2 >= t5)
        return H.ioore(t1, 2);
      t1[2] = t2;
      return this;
    },
    setRGB$3: function(r, g, b) {
      return this.setRGB$4(r, g, b, 0);
    },
    toXYZ$0: function() {
      var t1, xyz, t2, t3, i, t4, t5, t6;
      t1 = new Float32Array(3);
      xyz = new G.XYZColor(t1);
      xyz.Spectrum$_$2(3, 0);
      if (0 >= 3)
        return H.ioore(t1, 0);
      t1[0] = 0;
      if (1 >= 3)
        return H.ioore(t1, 1);
      t1[1] = 0;
      if (2 >= 3)
        return H.ioore(t1, 2);
      t1[2] = 0;
      for (t2 = this.c, t3 = t2.length, i = 0; t4 = t1[0], i < 4; ++i) {
        t5 = $.get$_Spectrum_G();
        t6 = t5.X.c;
        if (i >= t6.length)
          return H.ioore(t6, i);
        t6 = t6[i];
        if (i >= t3)
          return H.ioore(t2, i);
        t1[0] = t4 + t6 * t2[i];
        t6 = t1[1];
        t4 = t5.Y.c;
        if (i >= t4.length)
          return H.ioore(t4, i);
        t1[1] = t6 + t4[i] * t2[i];
        t4 = t1[2];
        t5 = t5.Z.c;
        if (i >= t5.length)
          return H.ioore(t5, i);
        t1[2] = t4 + t5[i] * t2[i];
      }
      t1[0] = t4 * 0.7018732857622337;
      t1[1] = t1[1] * 0.7018732857622337;
      t1[2] = t1[2] * 0.7018732857622337;
      return xyz;
    },
    luminance$0: function() {
      var t1, t2, yy, i, t3;
      for (t1 = this.c, t2 = t1.length, yy = 0, i = 0; i < 4; ++i) {
        t3 = $.get$_Spectrum_G().Y.c;
        if (i >= t3.length)
          return H.ioore(t3, i);
        t3 = t3[i];
        if (i >= t2)
          return H.ioore(t1, i);
        yy += t3 * t1[i];
      }
      return yy * 300 / 427.42758;
    },
    toRGB$0: function() {
      return G.RGBColor$from(this.toXYZ$0());
    },
    clamp$2: function(_, low, high) {
      var t1, r, t2, t3, i, t4;
      t1 = new Float32Array(4);
      r = new G.SampledSpectrum(t1);
      r.Spectrum$_$2(4, 0);
      for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        t4 = C.JSNumber_methods.clamp$2(t2[i], low, high);
        if (i >= 4)
          return H.ioore(t1, i);
        t1[i] = t4;
      }
      return r;
    },
    SampledSpectrum$from$2: function(s, type) {
      var t1, t2, t3, t4, i, t5;
      t1 = J.getInterceptor(s);
      if (!!t1.$isSampledSpectrum)
        for (t1 = this.c, t2 = s.c, t3 = t2.length, t4 = t1.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t5 = t2[i];
          if (i >= t4)
            return H.ioore(t1, i);
          t1[i] = t5;
        }
      else if (!!t1.$isRGBColor) {
        t1 = s.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        this.setRGB$4(t3, t4, t1[2], type);
      } else if (!!t1.$isXYZColor) {
        t1 = G.RGBColor$from(s).c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        this.setRGB$4(t3, t4, t1[2], type);
      }
    },
    $isSampledSpectrum: true,
    static: {"^": "SampledSpectrum_NUM_SAMPLES", SampledSpectrum$from: function(s, type) {
        var t1 = new G.SampledSpectrum(new Float32Array(4));
        t1.Spectrum$_$2(4, 0);
        t1.SampledSpectrum$from$2(s, type);
        return t1;
      }}
  },
  _Spectrum: {
    "^": "Object;X,Y,Z,rgbRefl2SpectWhite,rgbRefl2SpectCyan,rgbRefl2SpectMagenta,rgbRefl2SpectYellow,rgbRefl2SpectRed,rgbRefl2SpectGreen,rgbRefl2SpectBlue,rgbIllum2SpectWhite,rgbIllum2SpectCyan,rgbIllum2SpectMagenta,rgbIllum2SpectYellow,rgbIllum2SpectRed,rgbIllum2SpectGreen,rgbIllum2SpectBlue",
    _Spectrum$0: function() {
      var t1, i, wl0, i0, wl1, t2;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.X = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.Y = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.Z = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectWhite = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectCyan = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectMagenta = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectYellow = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectRed = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectGreen = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectBlue = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectWhite = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectCyan = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectMagenta = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectYellow = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectRed = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectGreen = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectBlue = t1;
      for (i = 0; i < 4; i = i0) {
        t1 = i / 4;
        wl0 = 400 * (1 - t1) + 700 * t1;
        i0 = i + 1;
        t1 = i0 / 4;
        wl1 = 400 * (1 - t1) + 700 * t1;
        t1 = this.X.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_U49, C.List_wsa, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.Y.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_U49, C.List_s9c, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.Z.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_U49, C.List_SCE, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
      }
      for (i = 0; i < 4; i = i0) {
        t1 = i / 4;
        wl0 = 400 * (1 - t1) + 700 * t1;
        i0 = i + 1;
        t1 = i0 / 4;
        wl1 = 400 * (1 - t1) + 700 * t1;
        t1 = this.rgbRefl2SpectWhite.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_iDZ, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbRefl2SpectCyan.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_DFB, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbRefl2SpectMagenta.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Qu6, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbRefl2SpectYellow.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Qaw, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbRefl2SpectRed.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Sby, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbRefl2SpectGreen.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_cQL, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbRefl2SpectBlue.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Ls5, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectWhite.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_ssa, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbIllum2SpectCyan.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_QmM, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectMagenta.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_ild, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbIllum2SpectYellow.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_LkP, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectRed.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_wQn, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbIllum2SpectGreen.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_ec6, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectBlue.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_aXZ, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
      }
    },
    static: {"^": "_Spectrum_G", _Spectrum$: function() {
        var t1 = new G._Spectrum(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1._Spectrum$0();
        return t1;
      }}
  },
  Sampler: {
    "^": "Object;width>,height>,shutterOpen<,shutterClose<,samplesPerPixel<"
  },
  Shape: {
    "^": "Object;",
    worldBound$0: function() {
      return this.objectToWorld.transformBBox$1(this.objectBound$0());
    },
    canIntersect$0: function() {
      return true;
    },
    refine$1: function(refined) {
      $.Log.call$2(3, "Unimplemented Shape.refine() method called");
    },
    area$0: function() {
      $.Log.call$2(3, "Unimplemented Shape.area() method called");
      return 0;
    }
  },
  Spectrum: {
    "^": "Object;c<",
    toList$2: function(_, data, offset) {
      return this.c;
    },
    setList$2: function(data, offset) {
      var t1, t2, t3, i;
      for (t1 = this.c, t2 = t1.length, t3 = J.getInterceptor$asx(data), i = 0; i < t2; ++i)
        t1[i] = t3.$index(data, offset + i);
    },
    copy$1: function(other) {
      var t1, n, i;
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i)
        t1[i] = J.$index$asx(other.get$c(), i);
    },
    isValue$1: function(v) {
      var t1, n, i;
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i)
        if (t1[i] !== v)
          return false;
      return true;
    },
    $add: function(_, s) {
      var r, t1, n, i, t2, t3, t4;
      r = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = r.c;
        t3 = t1[i];
        t4 = J.$index$asx(s.get$c(), i);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3 + t4;
      }
      return r;
    },
    $sub: function(_, s) {
      var r, t1, n, i, t2, t3, t4;
      r = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = r.c;
        t3 = t1[i];
        t4 = J.$index$asx(s.get$c(), i);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3 - t4;
      }
      return r;
    },
    $mul: function(_, s) {
      var r, t1, n, i, t2, t3, t4, t5, t6;
      r = G.Spectrum_Spectrum(0);
      if (typeof s === "number")
        for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
          t2 = r.c;
          t3 = t1[i];
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t3 * s;
        }
      else if (!!J.getInterceptor(s).$isSpectrum)
        for (t1 = this.c, n = t1.length, t2 = s.c, t3 = t2.length, i = 0; i < n; ++i) {
          t4 = r.c;
          t5 = t1[i];
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t4.length)
            return H.ioore(t4, i);
          t4[i] = t5 * t6;
        }
      else
        $.Log.call$2(3, "Spectrum or double expected.");
      return r;
    },
    $div: function(_, s) {
      var r, t1, n, i, t2, t3, t4, t5, t6;
      r = G.Spectrum_Spectrum(0);
      if (typeof s === "number")
        for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
          t2 = r.c;
          t3 = t1[i];
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t3 / s;
        }
      else if (!!J.getInterceptor(s).$isSpectrum)
        for (t1 = this.c, n = t1.length, t2 = s.c, t3 = t2.length, i = 0; i < n; ++i) {
          t4 = r.c;
          t5 = t1[i];
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t4.length)
            return H.ioore(t4, i);
          t4[i] = t5 / t6;
        }
      else
        $.Log.call$2(3, "Spectrum or double expected.");
      return r;
    },
    $negate: function(_) {
      var r, t1, n, i, t2, t3;
      r = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = r.c;
        t3 = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = -t3;
      }
      return r;
    },
    add$1: function(_, s) {
      var t1, n, i, t2, t3;
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = t1[i];
        t3 = J.$index$asx(s.get$c(), i);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1[i] = t2 + t3;
      }
    },
    clamp$2: function(_, low, high) {
      var s, t1, n, i, t2, t3;
      s = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = s.c;
        t3 = C.JSNumber_methods.clamp$2(t1[i], low, high);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3;
      }
      return s;
    },
    toString$0: function(_) {
      var t1, t2, s, i;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      s = H.S(t1[0]);
      for (i = 1; i < t2; ++i)
        s += " " + H.S(t1[i]);
      return s;
    },
    Spectrum$_$2: function(nSamples, v) {
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(this.c, 0, nSamples, v);
    },
    $isSpectrum: true,
    static: {"^": "Spectrum_type<"}
  },
  Spectrum_SortSpectrumSamples_closure: {
    "^": "Closure:96;",
    call$2: function(a, b) {
      return J.$lt$n(J.$index$asx(a, 0), J.$index$asx(b, 0));
    }
  },
  Spectrum_AverageSpectrumSamples_INTERP: {
    "^": "Closure:96;lambda_0,vals_1,offset_2",
    call$2: function(w, i) {
      var t1, t2, t3, t4, t5;
      t1 = this.lambda_0;
      t2 = t1.length;
      if (i >= t2)
        return H.ioore(t1, i);
      t3 = t1[i];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = i + 1;
      if (t4 >= t2)
        return H.ioore(t1, t4);
      t4 = J.$sub$n(t1[t4], t3);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t4 = (w - t3) / t4;
      t3 = this.vals_1;
      t1 = this.offset_2 + i;
      t2 = t3.length;
      if (t1 < 0 || t1 >= t2)
        return H.ioore(t3, t1);
      t5 = t3[t1];
      ++t1;
      if (t1 >= t2)
        return H.ioore(t3, t1);
      t1 = t3[t1];
      return J.$add$ns(J.$mul$ns(t5, 1 - t4), J.$mul$ns(t1, t4));
    }
  },
  Spectrum_AverageSpectrumSamples_SEG_AVG: {
    "^": "Closure:102;INTERP_3",
    call$3: function(wl0, wl1, i) {
      var t1 = this.INTERP_3;
      t1 = J.$add$ns(t1.call$2(wl0, i), t1.call$2(wl1, i));
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 0.5 * t1;
    }
  },
  SpectrumImage: {
    "^": "Object;width>,height>,samplesPerPixel<,data>",
    convert$1: function(format) {
      var out, t1, len, t2, t3, i, j, i0, r, g, b, j0, y;
      if (format === this.samplesPerPixel)
        return this;
      if (format === 1) {
        out = G.SpectrumImage$(this.width, this.height, 1);
        t1 = this.data;
        len = t1.length;
        for (t2 = out.data, t3 = t2.length, i = 0, j = 0; i < len; j = j0, i = i0) {
          i0 = i + 1;
          r = t1[i];
          i = i0 + 1;
          if (i0 >= len)
            return H.ioore(t1, i0);
          g = t1[i0];
          i0 = i + 1;
          if (i >= len)
            return H.ioore(t1, i);
          b = t1[i];
          j0 = j + 1;
          if (j >= t3)
            return H.ioore(t2, j);
          t2[j] = 0.212671 * r + 0.71516 * g + 0.072169 * b;
        }
        return out;
      }
      out = G.SpectrumImage$(this.width, this.height, 3);
      t1 = this.data;
      len = t1.length;
      for (t2 = out.data, t3 = t2.length, i = 0, j = 0; i < len; j = j0, i = i0) {
        i0 = i + 1;
        y = t1[i];
        j0 = j + 1;
        if (j >= t3)
          return H.ioore(t2, j);
        t2[j] = y;
        j = j0 + 1;
        if (j0 >= t3)
          return H.ioore(t2, j0);
        t2[j0] = y;
        j0 = j + 1;
        if (j >= t3)
          return H.ioore(t2, j);
        t2[j] = y;
      }
      return out;
    },
    set$1: function(other) {
      this.data = J.get$data$x(other);
      this.width = other.width;
      this.height = other.height;
    },
    $index: function(_, index) {
      var t1, t2, t3, t4, t5;
      if (J.$eq(this.samplesPerPixel, 1)) {
        t1 = this.data;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      }
      index = J.$mul$ns(index, this.samplesPerPixel);
      t1 = $.get$SpectrumImage__output().c;
      t2 = this.data;
      t3 = t2.length;
      if (index >>> 0 !== index || index >= t3)
        return H.ioore(t2, index);
      t4 = t2[index];
      t5 = t1.length;
      if (0 >= t5)
        return H.ioore(t1, 0);
      t1[0] = t4;
      t4 = index + 1;
      if (t4 >= t3)
        return H.ioore(t2, t4);
      t4 = t2[t4];
      if (1 >= t5)
        return H.ioore(t1, 1);
      t1[1] = t4;
      t4 = index + 2;
      if (t4 >= t2.length)
        return H.ioore(t2, t4);
      t4 = t2[t4];
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = t4;
      return $.get$SpectrumImage__output();
    },
    $indexSet: function(_, index, s) {
      var t1, t2, t3;
      if (J.$eq(this.samplesPerPixel, 1)) {
        t1 = this.data;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        t1[index] = s;
        return;
      }
      index = J.$mul$ns(index, this.samplesPerPixel);
      t1 = this.data;
      t2 = J.$index$asx(s.get$c(), 0);
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = t2;
      t2 = this.data;
      t1 = index + 1;
      t3 = J.$index$asx(s.get$c(), 1);
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      t2[t1] = t3;
      t3 = this.data;
      t1 = index + 2;
      t2 = J.$index$asx(s.get$c(), 2);
      if (t1 >= t3.length)
        return H.ioore(t3, t1);
      t3[t1] = t2;
    },
    static: {"^": "SpectrumImage_FLOAT,SpectrumImage_SPECTRUM,SpectrumImage__output", SpectrumImage$: function(width, height, samplesPerPixel) {
        var t1 = J.$mul$ns(J.$mul$ns(width, height), samplesPerPixel);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        return new G.SpectrumImage(width, height, samplesPerPixel, new Float32Array(t1));
      }, SpectrumImage$from: function(other) {
        var t1 = J.getInterceptor$x(other);
        return new G.SpectrumImage(t1.get$width(other), t1.get$height(other), other.get$samplesPerPixel(), new Float32Array(H._ensureNativeList(t1.get$data(other))));
      }}
  },
  SurfaceIntegrator: {
    "^": "Integrator;"
  },
  Texture: {
    "^": "Object;"
  },
  ConstantTexture: {
    "^": "Texture;value",
    static: {ConstantTexture_CreateSpectrum: [function(tex2world, tp) {
        return new G.ConstantTexture(tp.findSpectrum$2("value", G.Spectrum_Spectrum(1)));
      }, "call$2", "ConstantTexture_CreateSpectrum$closure", 4, 0, 9], ConstantTexture_CreateFloat: [function(tex2world, tp) {
        return new G.ConstantTexture(tp.findFloat$2("value", 1));
      }, "call$2", "ConstantTexture_CreateFloat$closure", 4, 0, 9]}
  },
  CylindricalMapping2D: {
    "^": "TextureMapping2D;worldToTexture"
  },
  IdentityMapping3D: {
    "^": "TextureMapping3D;worldToTexture"
  },
  PlanarMapping2D: {
    "^": "TextureMapping2D;vs,vt,ds,dt"
  },
  SphericalMapping2D: {
    "^": "TextureMapping2D;worldToTexture"
  },
  TextureMapping2D: {
    "^": "Object;"
  },
  TextureMapping3D: {
    "^": "Object;"
  },
  UVMapping2D: {
    "^": "TextureMapping2D;su,sv,du,dv"
  },
  TextureParams: {
    "^": "Object;"
  },
  Transform: {
    "^": "Object;m<,mInv<",
    copy$1: function(t) {
      this.m = new G.Matrix4x4(new Float32Array(H._ensureNativeList(t.get$m().data)));
      this.mInv = new G.Matrix4x4(new Float32Array(H._ensureNativeList(t.mInv.data)));
      return this;
    },
    $eq: function(_, t) {
      if (t == null)
        return false;
      return t.get$m().$eq(0, this.m) && t.mInv.$eq(0, this.mInv);
    },
    $lt: function(_, t2) {
      var t1, t3, i, t4, t5;
      for (t1 = this.m.data, t3 = t1.length, i = 0; i < 16; ++i) {
        if (i >= t3)
          return H.ioore(t1, i);
        t4 = t1[i];
        t5 = t2.get$m().data;
        if (i >= t5.length)
          return H.ioore(t5, i);
        if (t4 < t5[i])
          return true;
        t5 = t2.m.data;
        if (i >= t5.length)
          return H.ioore(t5, i);
        if (t4 > t5[i])
          return false;
      }
      return false;
    },
    $mul: function(_, t2) {
      return G.Transform$(G.Matrix4x4_Mul(this.m, t2.get$m()), G.Matrix4x4_Mul(t2.mInv, this.mInv));
    },
    hasScale$0: function() {
      var la2, lb2, lc2, t1;
      la2 = this.transformVector$1(G.Vector$(1, 0, 0)).lengthSquared$0();
      lb2 = this.transformVector$1(G.Vector$(0, 1, 0)).lengthSquared$0();
      lc2 = this.transformVector$1(G.Vector$(0, 0, 1)).lengthSquared$0();
      if (!(la2 < 0.999 || la2 > 1.001))
        t1 = lb2 < 0.999 || lb2 > 1.001 || lc2 < 0.999 || lc2 > 1.001;
      else
        t1 = true;
      return t1;
    },
    transformPoint$2: function(p, out) {
      var t1, x, y, z, t2, t3, t4, t5, t6, w;
      if (out == null) {
        out = new G.Point(new Float32Array(3));
        out.Vector$3(0, 0, 0);
      }
      t1 = J.getInterceptor$x(p);
      x = t1.get$x(p);
      y = t1.get$y(p);
      z = t1.get$z(p);
      t1 = this.m.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof x !== "number")
        return H.iae(x);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (typeof y !== "number")
        return H.iae(y);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t5 = t1[2];
      if (typeof z !== "number")
        return H.iae(z);
      if (3 >= t2)
        return H.ioore(t1, 3);
      t2 = J.getInterceptor$x(out);
      t2.set$x(out, t3 * x + t4 * y + t5 * z + t1[3]);
      t1 = this.m.data;
      t5 = t1.length;
      if (4 >= t5)
        return H.ioore(t1, 4);
      t4 = t1[4];
      if (5 >= t5)
        return H.ioore(t1, 5);
      t3 = t1[5];
      if (6 >= t5)
        return H.ioore(t1, 6);
      t6 = t1[6];
      if (7 >= t5)
        return H.ioore(t1, 7);
      t2.set$y(out, t4 * x + t3 * y + t6 * z + t1[7]);
      t1 = this.m.data;
      t6 = t1.length;
      if (8 >= t6)
        return H.ioore(t1, 8);
      t3 = t1[8];
      if (9 >= t6)
        return H.ioore(t1, 9);
      t4 = t1[9];
      if (10 >= t6)
        return H.ioore(t1, 10);
      t5 = t1[10];
      if (11 >= t6)
        return H.ioore(t1, 11);
      t2.set$z(out, t3 * x + t4 * y + t5 * z + t1[11]);
      t1 = this.m.data;
      t5 = t1.length;
      if (12 >= t5)
        return H.ioore(t1, 12);
      t4 = t1[12];
      if (13 >= t5)
        return H.ioore(t1, 13);
      t3 = t1[13];
      if (14 >= t5)
        return H.ioore(t1, 14);
      t2 = t1[14];
      if (15 >= t5)
        return H.ioore(t1, 15);
      w = t4 * x + t3 * y + t2 * z + t1[15];
      if (w !== 1)
        out.invScale$1(w);
      return out;
    },
    transformPoint$1: function(p) {
      return this.transformPoint$2(p, null);
    },
    transformVector$2: function(p, out) {
      var t1, x, y, z, t2, t3, t4, t5;
      if (out == null)
        out = G.Vector$(0, 0, 0);
      t1 = J.getInterceptor$x(p);
      x = t1.get$x(p);
      y = t1.get$y(p);
      z = t1.get$z(p);
      t1 = this.m.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof x !== "number")
        return H.iae(x);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (typeof y !== "number")
        return H.iae(y);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      if (typeof z !== "number")
        return H.iae(z);
      t2 = J.getInterceptor$x(out);
      t2.set$x(out, t3 * x + t4 * y + t1 * z);
      t1 = this.m.data;
      t4 = t1.length;
      if (4 >= t4)
        return H.ioore(t1, 4);
      t3 = t1[4];
      if (5 >= t4)
        return H.ioore(t1, 5);
      t5 = t1[5];
      if (6 >= t4)
        return H.ioore(t1, 6);
      t2.set$y(out, t3 * x + t5 * y + t1[6] * z);
      t1 = this.m.data;
      t5 = t1.length;
      if (8 >= t5)
        return H.ioore(t1, 8);
      t3 = t1[8];
      if (9 >= t5)
        return H.ioore(t1, 9);
      t4 = t1[9];
      if (10 >= t5)
        return H.ioore(t1, 10);
      t2.set$z(out, t3 * x + t4 * y + t1[10] * z);
      return out;
    },
    transformVector$1: function(p) {
      return this.transformVector$2(p, null);
    },
    transformBBox$2: function(b, out) {
      var t1, t2, t3, t4;
      out = G.BBox$(null, null);
      t1 = this.transformPoint$1(b.get$pMin());
      out.pMin.copy$1(t1);
      out.pMax.copy$1(t1);
      t1 = b.pMax.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = t1[0];
      t2 = b.pMin.data;
      t3 = t2.length;
      if (1 >= t3)
        return H.ioore(t2, 1);
      t4 = t2[1];
      if (2 >= t3)
        return H.ioore(t2, 2);
      t2 = t2[2];
      t3 = new G.Point(new Float32Array(3));
      t3.Vector$3(t1, t4, t2);
      out.unionPoint$1(this.transformPoint$1(t3));
      t3 = b.pMin.data;
      t2 = t3.length;
      if (0 >= t2)
        return H.ioore(t3, 0);
      t4 = t3[0];
      t1 = b.pMax.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1 = t1[1];
      if (2 >= t2)
        return H.ioore(t3, 2);
      t3 = t3[2];
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t4, t1, t3);
      out.unionPoint$1(this.transformPoint$1(t2));
      t2 = b.pMin.data;
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t1 = t2[0];
      if (1 >= t3)
        return H.ioore(t2, 1);
      t2 = t2[1];
      t3 = b.pMax.data;
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t3 = t3[2];
      t4 = new G.Point(new Float32Array(3));
      t4.Vector$3(t1, t2, t3);
      out.unionPoint$1(this.transformPoint$1(t4));
      t4 = b.pMin.data;
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      t3 = b.pMax.data;
      t2 = t3.length;
      if (1 >= t2)
        return H.ioore(t3, 1);
      t1 = t3[1];
      if (2 >= t2)
        return H.ioore(t3, 2);
      t3 = t3[2];
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t4, t1, t3);
      out.unionPoint$1(this.transformPoint$1(t2));
      t2 = b.pMax.data;
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t1 = t2[0];
      if (1 >= t3)
        return H.ioore(t2, 1);
      t2 = t2[1];
      t3 = b.pMin.data;
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t3 = t3[2];
      t4 = new G.Point(new Float32Array(3));
      t4.Vector$3(t1, t2, t3);
      out.unionPoint$1(this.transformPoint$1(t4));
      t4 = b.pMax.data;
      t3 = t4.length;
      if (0 >= t3)
        return H.ioore(t4, 0);
      t2 = t4[0];
      t1 = b.pMin.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1 = t1[1];
      if (2 >= t3)
        return H.ioore(t4, 2);
      t4 = t4[2];
      t3 = new G.Point(new Float32Array(3));
      t3.Vector$3(t2, t1, t4);
      out.unionPoint$1(this.transformPoint$1(t3));
      out.unionPoint$1(this.transformPoint$1(b.pMax));
      return out;
    },
    transformBBox$1: function(b) {
      return this.transformBBox$2(b, null);
    },
    static: {Transform$: function(m, inv) {
        var t1, t2;
        t1 = m == null;
        t2 = t1 ? G.Matrix4x4$() : new G.Matrix4x4(new Float32Array(H._ensureNativeList(m.data)));
        if (inv == null)
          t1 = t1 ? G.Matrix4x4$() : new G.Matrix4x4(new Float32Array(H._ensureNativeList(m.data))).invert$0();
        else
          t1 = new G.Matrix4x4(new Float32Array(H._ensureNativeList(inv.data)));
        return new G.Transform(t2, t1);
      }, Transform$from: function(t) {
        return new G.Transform(new G.Matrix4x4(new Float32Array(H._ensureNativeList(t.get$m().data))), new G.Matrix4x4(new Float32Array(H._ensureNativeList(t.mInv.data))));
      }, Transform_Translate: function(delta) {
        var t1 = J.getInterceptor$x(delta);
        return G.Transform$(G.Matrix4x4$values(1, 0, 0, t1.get$x(delta), 0, 1, 0, t1.get$y(delta), 0, 0, 1, t1.get$z(delta), 0, 0, 0, 1), G.Matrix4x4$values(1, 0, 0, J.$negate$n(t1.get$x(delta)), 0, 1, 0, J.$negate$n(t1.get$y(delta)), 0, 0, 1, J.$negate$n(t1.get$z(delta)), 0, 0, 0, 1));
      }, Transform_Scale: function(x, y, z) {
        var m = G.Matrix4x4$values(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
        if (typeof x !== "number")
          return H.iae(x);
        if (typeof y !== "number")
          return H.iae(y);
        if (typeof z !== "number")
          return H.iae(z);
        return G.Transform$(m, G.Matrix4x4$values(1 / x, 0, 0, 0, 0, 1 / y, 0, 0, 0, 0, 1 / z, 0, 0, 0, 0, 1));
      }, Transform_Perspective: function(fov, znear, zfar) {
        var t1, persp, invTanAng;
        t1 = zfar - znear;
        persp = G.Matrix4x4$values(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, zfar / t1, -zfar * znear / t1, 0, 0, 1, 0);
        if (typeof fov !== "number")
          return H.iae(fov);
        invTanAng = 1 / Math.tan(0.017453292519943295 * fov / 2);
        return G.Transform_Scale(invTanAng, invTanAng, 1).$mul(0, G.Transform$(persp, null));
      }}
  },
  Vector: {
    "^": "Object;data>",
    get$x: function(_) {
      var t1 = this.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0];
    },
    set$x: function(_, v) {
      var t1 = this.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = v;
      return v;
    },
    get$y: function(_) {
      var t1 = this.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    set$y: function(_, v) {
      var t1 = this.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1[1] = v;
      return v;
    },
    get$z: function(_) {
      var t1 = this.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      return t1[2];
    },
    set$z: function(_, v) {
      var t1 = this.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = v;
      return v;
    },
    copy$1: function(other) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = J.getInterceptor$x(other);
      t3 = J.$index$asx(t2.get$data(other), 0);
      t4 = t1.length;
      if (0 >= t4)
        return H.ioore(t1, 0);
      t1[0] = t3;
      t3 = J.$index$asx(t2.get$data(other), 1);
      if (1 >= t4)
        return H.ioore(t1, 1);
      t1[1] = t3;
      t2 = J.$index$asx(t2.get$data(other), 2);
      if (2 >= t4)
        return H.ioore(t1, 2);
      t1[2] = t2;
    },
    $add: function(_, v) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(v);
      t5 = J.$index$asx(t4.get$data(v), 0);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = J.$index$asx(t4.get$data(v), 1);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = J.$index$asx(t4.get$data(v), 2);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return G.Vector$(t3 + t5, t6 + t7, t1 + t4);
    },
    $sub: function(_, v) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(v);
      t5 = J.$index$asx(t4.get$data(v), 0);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = J.$index$asx(t4.get$data(v), 1);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = J.$index$asx(t4.get$data(v), 2);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return G.Vector$(t3 - t5, t6 - t7, t1 - t4);
    },
    $mul: function(_, f) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof f !== "number")
        return H.iae(f);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.Vector$(t3 * f, t4 * f, t1[2] * f);
    },
    $div: function(_, f) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof f !== "number")
        return H.iae(f);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.Vector$(t3 / f, t4 / f, t1[2] / f);
    },
    $negate: function(_) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.Vector$(-t3, -t4, -t1[2]);
    },
    $index: function(_, i) {
      var t1 = this.data;
      if (i >>> 0 !== i || i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.data;
      if (i >>> 0 !== i || i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = v;
      return v;
    },
    lengthSquared$0: function() {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      return t3 * t3 + t4 * t4 + t1 * t1;
    },
    length$0: [function(_) {
      var t1 = this.lengthSquared$0();
      return Math.sqrt(t1);
    }, "call$0", "get$length", 0, 0, 103],
    invScale$1: function(s) {
      var t1, t2, t3;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof s !== "number")
        return H.iae(s);
      t1[0] = t3 / s;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = t1[1] / s;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = t1[2] / s;
      return this;
    },
    add$1: function(_, s) {
      var t1, t2, t3, t4, t5;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(s);
      t5 = J.$index$asx(t4.get$data(s), 0);
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[0] = t3 + t5;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t3 = J.$index$asx(t4.get$data(s), 1);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[1] = t5 + t3;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t2 = t1[2];
      t4 = J.$index$asx(t4.get$data(s), 2);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[2] = t2 + t4;
      return this;
    },
    toString$0: function(_) {
      var t1, t2, t3;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = H.S(t1[0]) + " ";
      if (1 >= t2)
        return H.ioore(t1, 1);
      t3 = t3 + H.S(t1[1]) + " ";
      if (2 >= t2)
        return H.ioore(t1, 2);
      return t3 + H.S(t1[2]);
    },
    Vector$3: function(x, y, z) {
      var t1, t2;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = x;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = y;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = z;
    },
    static: {Vector$: function(x, y, z) {
        var t1 = new G.Vector(new Float32Array(3));
        t1.Vector$3(x, y, z);
        return t1;
      }, Vector_Dot: function(v1, v2) {
        var t1, t2;
        t1 = J.getInterceptor$x(v1);
        t2 = J.getInterceptor$x(v2);
        return J.$add$ns(J.$add$ns(J.$mul$ns(J.$index$asx(t1.get$data(v1), 0), J.$index$asx(t2.get$data(v2), 0)), J.$mul$ns(J.$index$asx(t1.get$data(v1), 1), J.$index$asx(t2.get$data(v2), 1))), J.$mul$ns(J.$index$asx(t1.get$data(v1), 2), J.$index$asx(t2.get$data(v2), 2)));
      }, Vector_Cross: function(v1, v2) {
        var t1, v1x, v1y, v1z, v2x, v2y, v2z, t2, t3, t4;
        t1 = J.getInterceptor$x(v1);
        v1x = J.$index$asx(t1.get$data(v1), 0);
        v1y = J.$index$asx(t1.get$data(v1), 1);
        v1z = J.$index$asx(t1.get$data(v1), 2);
        t1 = J.getInterceptor$x(v2);
        v2x = J.$index$asx(t1.get$data(v2), 0);
        v2y = J.$index$asx(t1.get$data(v2), 1);
        v2z = J.$index$asx(t1.get$data(v2), 2);
        t1 = J.getInterceptor$ns(v1y);
        t2 = J.getInterceptor$ns(v1z);
        t3 = J.$sub$n(t1.$mul(v1y, v2z), t2.$mul(v1z, v2y));
        t4 = J.getInterceptor$ns(v1x);
        t2 = J.$sub$n(t2.$mul(v1z, v2x), t4.$mul(v1x, v2z));
        t1 = J.$sub$n(t4.$mul(v1x, v2y), t1.$mul(v1y, v2x));
        t4 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t4, 0);
        t4[0] = t3;
        if (1 >= 3)
          return H.ioore(t4, 1);
        t4[1] = t2;
        if (2 >= 3)
          return H.ioore(t4, 2);
        t4[2] = t1;
        return new G.Vector(t4);
      }, Vector_CoordinateSystem: function(v1, v2, v3) {
        var t1, t2, invLen;
        t1 = J.getInterceptor$x(v1);
        if (J.abs$0$n(t1.get$x(v1)) > J.abs$0$n(t1.get$y(v1))) {
          t2 = J.$add$ns(J.$mul$ns(J.$index$asx(t1.get$data(v1), 0), J.$index$asx(t1.get$data(v1), 0)), J.$mul$ns(J.$index$asx(t1.get$data(v1), 2), J.$index$asx(t1.get$data(v1), 2)));
          if (typeof t2 !== "number")
            H.throwExpression(P.ArgumentError$(t2));
          invLen = 1 / Math.sqrt(t2);
          t2 = J.getInterceptor$x(v2);
          J.$indexSet$ax(t2.get$data(v2), 0, J.$mul$ns(J.$negate$n(J.$index$asx(t1.get$data(v1), 2)), invLen));
          J.$indexSet$ax(t2.get$data(v2), 1, 0);
          J.$indexSet$ax(t2.get$data(v2), 2, J.$mul$ns(J.$index$asx(t1.get$data(v1), 0), invLen));
        } else {
          t2 = J.$add$ns(J.$mul$ns(J.$index$asx(t1.get$data(v1), 1), J.$index$asx(t1.get$data(v1), 1)), J.$mul$ns(J.$index$asx(t1.get$data(v1), 2), J.$index$asx(t1.get$data(v1), 2)));
          if (typeof t2 !== "number")
            H.throwExpression(P.ArgumentError$(t2));
          invLen = 1 / Math.sqrt(t2);
          t2 = J.getInterceptor$x(v2);
          J.$indexSet$ax(t2.get$data(v2), 0, 0);
          J.$indexSet$ax(t2.get$data(v2), 1, J.$mul$ns(J.$index$asx(t1.get$data(v1), 2), invLen));
          J.$indexSet$ax(t2.get$data(v2), 2, J.$mul$ns(J.$negate$n(J.$index$asx(t1.get$data(v1), 1)), invLen));
        }
        v3.copy$1(G.Vector_Cross(v1, v2));
      }}
  },
  DensityRegion: {
    "^": "VolumeRegion;",
    p$4: [function(_, p, w, wp, d) {
      return G.PhaseHG(w, wp, this.g);
    }, "call$4", "get$p", 8, 0, 104]
  },
  VolumeRegion: {
    "^": "Object;"
  },
  VolumeIntegrator: {
    "^": "Integrator;"
  },
  XYZColor: {
    "^": "Spectrum;c",
    get$x: function(_) {
      var t1 = this.c;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0];
    },
    set$x: function(_, v) {
      var t1 = this.c;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = v;
      return v;
    },
    get$y: function(_) {
      var t1 = this.c;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    set$y: function(_, v) {
      var t1 = this.c;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1[1] = v;
      return v;
    },
    get$z: function(_) {
      var t1 = this.c;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      return t1[2];
    },
    set$z: function(_, v) {
      var t1 = this.c;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = v;
      return v;
    },
    luminance$0: function() {
      var t1 = this.c;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    toRGB$0: function() {
      return G.RGBColor$from(this);
    },
    setSampled$3: function(lambda, v, offset) {
      var t1, t2, t3, t4;
      t1 = new G.RGBColor(new Float32Array(3));
      t1.Spectrum$_$2(3, 0);
      t1 = t1.setSampled$3(lambda, v, offset).c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      G.Spectrum_RGBToXYZ(t3, t4, t1[2], this.c);
      return this;
    },
    setSampled$2: function(lambda, v) {
      return this.setSampled$3(lambda, v, 0);
    },
    setRGB$4: function(r, g, b, type) {
      G.Spectrum_RGBToXYZ(r, g, b, this.c);
      return this;
    },
    setRGB$3: function(r, g, b) {
      return this.setRGB$4(r, g, b, 0);
    },
    $add: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.XYZColor$xyz(t3 + t4, t5 + t6, t1 + t2);
    },
    $sub: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.XYZColor$xyz(t3 - t4, t5 - t6, t1 - t2);
    },
    $mul: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.XYZColor$xyz(t3 * s, t4 * s, t1[2] * s);
      }
      if (!!J.getInterceptor(s).$isXYZColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.XYZColor$xyz(t3 * t6, t7 * t8, t1 * t4[2]);
      }
      $.Log.call$2(3, "XYZColor or double expected.");
      t1 = new G.XYZColor(new Float32Array(3));
      t1.Spectrum$_$2(3, 0);
      return t1;
    },
    $div: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.XYZColor$xyz(t3 / s, t4 / s, t1[2] / s);
      }
      if (!!J.getInterceptor(s).$isXYZColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.XYZColor$xyz(t3 / t6, t7 / t8, t1 / t4[2]);
      }
      $.Log.call$2(3, "XYZColor or double expected.");
      t1 = new G.XYZColor(new Float32Array(3));
      t1.Spectrum$_$2(3, 0);
      return t1;
    },
    XYZColor$from$1: function(color) {
      var t1, t2, t3, t4, t5;
      t1 = J.getInterceptor(color);
      if (!!t1.$isRGBColor) {
        t1 = color.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        G.Spectrum_RGBToXYZ(t3, t4, t1[2], this.c);
      } else if (!!t1.$isXYZColor) {
        t1 = this.c;
        t2 = color.c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      } else if (!!t1.$isSampledSpectrum) {
        t1 = this.c;
        t2 = color.toXYZ$0().c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      }
    },
    XYZColor$xyz$3: function(x, y, z) {
      var t1, t2;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = x;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = y;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = z;
    },
    $isXYZColor: true,
    static: {XYZColor$xyz: function(x, y, z) {
        var t1 = new G.XYZColor(new Float32Array(3));
        t1.Spectrum$_$2(3, 0);
        t1.XYZColor$xyz$3(x, y, z);
        return t1;
      }, XYZColor$from: function(color) {
        var t1 = new G.XYZColor(new Float32Array(3));
        t1.Spectrum$_$2(3, 0);
        t1.XYZColor$from$1(color);
        return t1;
      }}
  }
}],
["crypto", "package:crypto/crypto.dart", , M, {
  "^": "",
  _CryptoUtils_bytesToBase64: function(bytes, urlSafe, addLineSeparator) {
    var len, lookup, remainderLength, chunkLength, t1, t2, outputLen, out, t3, j, i, c, i0, t4, t5, x, j0, y;
    len = bytes.length;
    if (len === 0)
      return "";
    lookup = urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    remainderLength = C.JSInt_methods.remainder$1(len, 3);
    chunkLength = len - remainderLength;
    t1 = C.JSInt_methods._tdivFast$1(len, 3);
    t2 = remainderLength > 0 ? 4 : 0;
    outputLen = t1 * 4 + t2;
    if (addLineSeparator)
      outputLen += C.JSInt_methods._tdivFast$1(outputLen - 1, 76) << 1 >>> 0;
    t1 = Array(outputLen);
    t1.fixed$length = init;
    out = H.setRuntimeTypeInfo(t1, [J.JSInt]);
    for (t1 = out.length, t2 = lookup.length, t3 = outputLen - 2, j = 0, i = 0, c = 0; i < chunkLength; i = i0) {
      i0 = i + 1;
      if (i >= len)
        return H.ioore(bytes, i);
      t4 = bytes[i];
      i = i0 + 1;
      if (i0 >= len)
        return H.ioore(bytes, i0);
      t5 = bytes[i0];
      i0 = i + 1;
      if (i >= len)
        return H.ioore(bytes, i);
      x = t4 << 16 & 16777215 | t5 << 8 & 16777215 | bytes[i];
      j0 = j + 1;
      t5 = x >>> 18;
      if (t5 >= t2)
        H.throwExpression(P.RangeError$value(t5));
      t4 = lookup.charCodeAt(t5);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t4;
      j = j0 + 1;
      t4 = x >>> 12 & 63;
      if (t4 >= t2)
        H.throwExpression(P.RangeError$value(t4));
      t4 = lookup.charCodeAt(t4);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t4;
      j0 = j + 1;
      t4 = x >>> 6 & 63;
      if (t4 >= t2)
        H.throwExpression(P.RangeError$value(t4));
      t4 = lookup.charCodeAt(t4);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t4;
      j = j0 + 1;
      t4 = x & 63;
      if (t4 >= t2)
        H.throwExpression(P.RangeError$value(t4));
      t4 = lookup.charCodeAt(t4);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t4;
      if (addLineSeparator) {
        ++c;
        t4 = c === 19 && j < t3;
      } else
        t4 = false;
      if (t4) {
        j0 = j + 1;
        if (j >= t1)
          return H.ioore(out, j);
        out[j] = 13;
        j = j0 + 1;
        if (j0 >= t1)
          return H.ioore(out, j0);
        out[j0] = 10;
        c = 0;
      }
    }
    if (remainderLength === 1) {
      if (i >= len)
        return H.ioore(bytes, i);
      x = bytes[i];
      j0 = j + 1;
      t2 = C.JSString_methods.codeUnitAt$1(lookup, x >>> 2);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t2;
      j = j0 + 1;
      t2 = C.JSString_methods.codeUnitAt$1(lookup, x << 4 & 63);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t2;
      j0 = j + 1;
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = 61;
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = 61;
    } else if (remainderLength === 2) {
      if (i >= len)
        return H.ioore(bytes, i);
      x = bytes[i];
      t2 = i + 1;
      if (t2 >= len)
        return H.ioore(bytes, t2);
      y = bytes[t2];
      j0 = j + 1;
      t2 = C.JSString_methods.codeUnitAt$1(lookup, x >>> 2);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t2;
      j = j0 + 1;
      t2 = C.JSString_methods.codeUnitAt$1(lookup, (x << 4 | y >>> 4) & 63);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t2;
      j0 = j + 1;
      t2 = C.JSString_methods.codeUnitAt$1(lookup, y << 2 & 63);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t2;
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = 61;
    }
    return P.String_String$fromCharCodes(out);
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      f.call$1(t1._current);
  },
  IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1, t2;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i) {
      t1 = t1[i];
      t2 = iterable;
      if (t1 == null ? t2 == null : t1 === t2)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    }
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  IterableMixinWorkaround_sortList: function(list, compare) {
    H.Sort__doSort(list, 0, list.length - 1, compare);
  },
  IterableMixinWorkaround__rangeCheck: function(list, start, end) {
    var t1 = J.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, list.length))
      throw H.wrapException(P.RangeError$range(start, 0, list.length));
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, list.length))
      throw H.wrapException(P.RangeError$range(end, start, list.length));
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length, t1, otherStart, otherList;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    $length = J.$sub$n(end, start);
    if (J.$eq($length, 0))
      return;
    if (J.$lt$n(skipCount, 0))
      throw H.wrapException(P.ArgumentError$(skipCount));
    t1 = J.getInterceptor(from);
    if (!!t1.$isList) {
      otherStart = skipCount;
      otherList = from;
    } else {
      otherList = t1.skip$1(from, skipCount).toList$1$growable(0, false);
      otherStart = 0;
    }
    if (J.$gt$n(J.$add$ns(otherStart, $length), J.get$length$asx(otherList)))
      throw H.wrapException(P.StateError$("Not enough elements"));
    H.Lists_copy(otherList, otherStart, list, start, $length);
  },
  IterableMixinWorkaround_fillRangeList: function(list, start, end, fillValue) {
    var i, t1;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    for (i = start; t1 = J.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
      C.JSArray_methods.$indexSet(list, i, fillValue);
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var t1, i, j, t2, t3;
    t1 = J.getInterceptor$n(srcStart);
    if (t1.$lt(srcStart, dstStart))
      for (i = J.$sub$n(t1.$add(srcStart, count), 1), j = J.$sub$n(J.$add$ns(dstStart, count), 1), t1 = J.getInterceptor$asx(src); t2 = J.getInterceptor$n(i), t2.$ge(i, srcStart); i = t2.$sub(i, 1), j = J.$sub$n(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
    else
      for (t2 = J.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = J.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)); i = t3.$add(i, 1), j = J.$add$ns(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
  },
  Lists_lastIndexOf: function(a, element, startIndex) {
    var t1, i;
    if (typeof startIndex !== "number")
      return startIndex.$lt();
    if (startIndex < 0)
      return -1;
    t1 = a.length;
    if (startIndex >= t1)
      startIndex = t1 - 1;
    for (i = startIndex; i >= 0; --i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  Symbol_getName: function(symbol) {
    return symbol.get$_name();
  },
  ListIterable: {
    "^": "IterableBase;",
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$first: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.elementAt$1(0, 0);
    },
    get$last: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.elementAt$1(0, this.get$length(this) - 1);
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, null);
    },
    toList$1$growable: function(_, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(this)), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      for (i = 0; i < this.get$length(this); ++i) {
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,_start,_endOrLength",
    get$_endIndex: function() {
      var $length = J.get$length$asx(this._iterable);
      return $length;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$ge$n(t1, $length))
        return 0;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return $length - t1;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    elementAt$1: function(_, index) {
      var realIndex = J.$add$ns(this.get$_startIndex(), index);
      if (J.$lt$n(index, 0) || J.$ge$n(realIndex, this.get$_endIndex()))
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    skip$1: function(_, count) {
      if (J.$lt$n(count, 0))
        throw H.wrapException(P.RangeError$value(count));
      return H.SubListIterable$(this._iterable, J.$add$ns(this._start, count), this._endOrLength, null);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1 = this._start;
      if (J.$lt$n(t1, 0))
        throw H.wrapException(P.RangeError$value(t1));
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,__internal$_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._iterable);
    },
    get$first: function(_) {
      return this._f$1(J.get$first$ax(this._iterable));
    },
    get$last: function(_) {
      return this._f$1(J.get$last$ax(this._iterable));
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!J.getInterceptor(iterable).$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "^": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  },
  MappedListIterable: {
    "^": "ListIterable;_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "^": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  ExpandIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      return new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, null);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    }
  },
  ExpandIterator: {
    "^": "Object;_iterator,_f,_currentExpansion,_current",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2;
      t1 = this._currentExpansion;
      if (t1 == null)
        return false;
      for (t2 = this._iterator; !t1.moveNext$0();) {
        this._current = null;
        if (t2.moveNext$0()) {
          this._currentExpansion = null;
          t1 = J.get$iterator$ax(this._f$1(t2.get$current()));
          this._currentExpansion = t1;
        } else
          return false;
      }
      this._current = this._currentExpansion.get$current();
      return true;
    }
  },
  SkipIterable: {
    "^": "IterableBase;_iterable,_skipCount",
    skip$1: function(_, n) {
      if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
        throw H.wrapException(P.RangeError$value(n));
      return H.SkipIterable_SkipIterable(this._iterable, J.$add$ns(this._skipCount, n), H.getTypeArgumentByIndex(this, 0));
    },
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.SkipIterator(t1.get$iterator(t1), this._skipCount);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    SkipIterable$_$2: function(_iterable, _skipCount, $E) {
      var t1 = this._skipCount;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1 || J.$lt$n(t1, 0))
        throw H.wrapException(P.RangeError$(t1));
    },
    static: {SkipIterable_SkipIterable: function(iterable, skipCount, $E) {
        var t1;
        if (!!iterable.$isEfficientLength) {
          t1 = H.setRuntimeTypeInfo(new H.EfficientLengthSkipIterable(iterable, skipCount), [$E]);
          t1.SkipIterable$_$2(iterable, skipCount, $E);
          return t1;
        }
        return H.SkipIterable$_(iterable, skipCount, $E);
      }, SkipIterable$_: function(_iterable, _skipCount, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SkipIterable(_iterable, _skipCount), [$E]);
        t1.SkipIterable$_$2(_iterable, _skipCount, $E);
        return t1;
      }}
  },
  EfficientLengthSkipIterable: {
    "^": "SkipIterable;_iterable,_skipCount",
    get$length: function(_) {
      var t1, $length;
      t1 = this._iterable;
      $length = J.$sub$n(t1.get$length(t1), this._skipCount);
      if (J.$ge$n($length, 0))
        return $length;
      return 0;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $isEfficientLength: true
  },
  SkipIterator: {
    "^": "Iterator;_iterator,_skipCount",
    moveNext$0: function() {
      var t1, i, t2;
      t1 = this._iterator;
      i = 0;
      while (true) {
        t2 = this._skipCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.moveNext$0();
        ++i;
      }
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  EmptyIterator: {
    "^": "Object;",
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    }
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  },
  UnmodifiableListMixin: {
    "^": "Object;",
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    fillRange$3: function(_, start, end, fillValue) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  UnmodifiableListBase: {
    "^": "ListBase+UnmodifiableListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo(function(victim, hasOwnProperty) {
      var result = [];
      for (var key in victim) {
        if (hasOwnProperty.call(victim, key))
          result.push(key);
      }
      return result;
    }(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    if ($.get$globalThis().scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    $.get$globalThis().scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 10],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P._createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 10],
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1) {
      zone.toString;
      return errorHandler;
    } else {
      zone.toString;
      return errorHandler;
    }
  },
  _asyncRunCallbackLoop: function() {
    var entry = $._nextCallback;
    for (; entry != null;) {
      entry.callback$0();
      entry = entry.next;
      $._nextCallback = entry;
    }
    $._lastCallback = null;
  },
  _asyncRunCallback: [function() {
    var exception;
    try {
      P._asyncRunCallbackLoop();
    } catch (exception) {
      H.unwrapException(exception);
      $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
      $._nextCallback = $._nextCallback.get$next();
      throw exception;
    }

  }, "call$0", "_asyncRunCallback$closure", 0, 0, 11],
  _scheduleAsyncCallback: function(callback) {
    var t1, t2;
    t1 = $._lastCallback;
    if (t1 == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      t2 = new P._AsyncCallbackEntry(callback, null);
      t1.next = t2;
      $._lastCallback = t2;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, callback);
      return;
    }
    P._rootScheduleMicrotask(t1, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]);
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(t1, null, t1, e, s);
    }

  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 12],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 13, 14],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 11],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreateTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreateTimer(t1, null, t1, duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  _createTimer: function(duration, callback) {
    var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  },
  _rootCreateTimer: function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure:94;callback_0",
    call$0: function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }
  },
  _AsyncError: {
    "^": "Object;error>,stackTrace<",
    $isError: true
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  _Completer: {
    "^": "Object;"
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    completeError$2: [function(error, stackTrace) {
      var t1;
      if (error == null)
        throw H.wrapException(P.ArgumentError$("Error must not be null"));
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncCompleteError$2(error, stackTrace);
    }, function(error) {
      return this.completeError$2(error, null);
    }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 105, 14]
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasValue: function() {
      return this._state === 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, f, null, P._registerErrorHandler(onError, t1), null), [null]);
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    catchError$2$test: function(onError, test) {
      var t1, t2, result;
      t1 = $.Zone__current;
      t2 = P._registerErrorHandler(onError, t1);
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, null, test, t2, null), [null]);
      this._addListener$1(result);
      return result;
    },
    catchError$1: function(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = new P._Future(0, t1, null, null, null, null, null, action);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(t1, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 13, 14],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              if (this._state !== 0)
                H.throwExpression(P.StateError$("Future already completed"));
              this._state = 1;
              t1 = this._zone;
              t1.toString;
              P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    _async$_Future$immediate$1: function(value, $T) {
      this._asyncComplete$1(value);
    },
    _async$_Future$immediateError$2: function(error, stackTrace, $T) {
      this._asyncCompleteError$2(error, stackTrace);
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future$immediate: function(value, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediate$1(value, $T);
        return t1;
      }, _Future$immediateError: function(error, stackTrace, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediateError$2(error, stackTrace, $T);
        return t1;
      }, _Future__chainForeignFuture: function(source, target) {
        target._state = 2;
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        target._state = 2;
        if (source._state >= 4)
          P._Future__propagateToListeners(source, target);
        else
          source._addListener$1(target);
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners._nextListener = null;
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, sourceValue, t5, zone, oldZone, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            t2 = t1.source_4;
            asyncError = t2.get$_error();
            t2 = t2._zone;
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          if (listeners == null)
            return;
          if (listeners._nextListener != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          t3.listenerHasValue_1 = true;
          sourceValue = t1.source_4.get$_hasValue() ? t1.source_4.get$_value() : null;
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (t2) {
            t4 = listeners._state === 2;
            if ((t4 ? null : listeners._onValueCallback) == null) {
              t5 = (t4 ? null : listeners._whenCompleteActionCallback) != null;
              t4 = t5;
            } else
              t4 = true;
          } else
            t4 = true;
          if (t4) {
            zone = listeners._zone;
            if (hasError) {
              t4 = t1.source_4.get$_zone();
              t4.toString;
              zone.toString;
              t4 = zone == null ? t4 != null : zone !== t4;
            } else
              t4 = false;
            if (t4) {
              t2 = t1.source_4;
              asyncError = t2.get$_error();
              t2 = t2._zone;
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(t2, null, t2, t3, t4);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if ((listeners._state === 2 ? null : listeners._onValueCallback) != null)
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if ((listeners._state === 2 ? null : listeners._whenCompleteActionCallback) != null)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  listeners._state = 2;
                  t1.source_4 = chainSource;
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, listeners);
              else
                P._Future__chainForeignFuture(chainSource, listeners);
              return;
            }
          }
          if (t3.listenerHasValue_1 === true) {
            listeners0 = listeners._removeListeners$0();
            t2 = t3.listenerValueOrError_2;
            listeners._state = 4;
            listeners._resultOrListeners = t2;
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            t2 = J.get$error$x(asyncError);
            t3 = asyncError.get$stackTrace();
            listeners._state = 8;
            listeners._resultOrListeners = new P._AsyncError(t2, t3);
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:94;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:95;target_0",
    call$1: function(value) {
      this.target_0._completeWithValue$1(value);
    }
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:106;target_1",
    call$2: function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:94;this_0,coreFuture_1",
    call$0: function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:94;this_2,value_3",
    call$0: function() {
      this.this_2._completeWithValue$1(this.value_3);
    }
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:94;this_0,error_1,stackTrace_2",
    call$0: function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:107;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, t1, t2, exception;
      try {
        t1 = this.zone_5;
        t2 = this.listener_3;
        t2 = t2._state === 2 ? null : t2._onValueCallback;
        t1.toString;
        this.box_1.listenerValueOrError_2 = P._rootRunUnary(t1, null, t1, t2, this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P._AsyncError(e, s);
        return false;
      }

    }
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:11;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, test, matchesTest, e, s, errorCallback, e0, s0, t1, t2, t3, exception, listenerValueOrError, t4;
      asyncError = this.box_2.source_4.get$_error();
      t1 = this.listener_6;
      test = t1._state === 2 ? null : t1._errorTestCallback;
      matchesTest = true;
      if (test != null)
        try {
          t2 = this.zone_7;
          t3 = J.get$error$x(asyncError);
          t2.toString;
          matchesTest = P._rootRunUnary(t2, null, t2, test, t3);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      errorCallback = t1._state === 2 ? null : t1._onErrorCallback;
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2) {
            t1 = J.get$error$x(asyncError);
            t2 = asyncError.get$stackTrace();
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunBinary(t3, null, t3, errorCallback, t1, t2);
          } else {
            t1 = J.get$error$x(asyncError);
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunUnary(t3, null, t3, errorCallback, t1);
          }
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:11;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, t2, t3, exception;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        t2 = this.zone_10;
        t3 = this.listener_9;
        t3 = t3._state === 2 ? null : t3._whenCompleteActionCallback;
        t2.toString;
        t1.completeResult_0 = P._rootRun(t2, null, t2, t3);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8) {
          t2 = J.get$error$x(this.box_2.source_4.get$_error());
          t3 = e;
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        t3 = this.box_1;
        if (t2)
          t3.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t3.listenerValueOrError_2 = new P._AsyncError(e, s);
        t3.listenerHasValue_1 = false;
      }

      if (!!J.getInterceptor(t1.completeResult_0).$isFuture) {
        t2 = this.listener_9;
        t2.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, t2), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, t2));
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:95;box_2,listener_11",
    call$1: function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_11);
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:106;box_0,listener_12",
    call$2: function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_12);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next@",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSInt);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSBool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    skip$1: function(_, count) {
      var t1 = H.setRuntimeTypeInfo(new P._SkipStream(count, this), [null]);
      t1._SkipStream$2(this, count, null);
      return t1;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    },
    get$last: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.result_0 = null;
      t1.foundResult_1 = false;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
      return future;
    }
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:94;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    }
  },
  Stream_forEach__closure0: {
    "^": "Closure:95;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "^": "Closure:94;future_6",
    call$0: function() {
      this.future_6._complete$1(null);
    }
  },
  Stream_length_closure: {
    "^": "Closure:95;box_0",
    call$1: function(_) {
      ++this.box_0.count_0;
    }
  },
  Stream_length_closure0: {
    "^": "Closure:94;box_0,future_1",
    call$0: function() {
      this.future_1._complete$1(this.box_0.count_0);
    }
  },
  Stream_isEmpty_closure: {
    "^": "Closure:95;box_0,future_1",
    call$1: function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    }
  },
  Stream_isEmpty_closure0: {
    "^": "Closure:94;future_2",
    call$0: function() {
      this.future_2._complete$1(true);
    }
  },
  Stream_first_closure: {
    "^": "Closure;box_0,this_1,future_2",
    call$1: function(value) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_first_closure0: {
    "^": "Closure:94;future_3",
    call$0: function() {
      this.future_3._completeError$1(new P.StateError("No elements"));
    }
  },
  Stream_last_closure: {
    "^": "Closure;box_0,this_1",
    call$1: function(value) {
      var t1 = this.box_0;
      t1.foundResult_1 = true;
      t1.result_0 = value;
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_last_closure0: {
    "^": "Closure:94;box_0,future_2",
    call$0: function() {
      var t1 = this.box_0;
      if (t1.foundResult_1) {
        this.future_2._complete$1(t1.result_0);
        return;
      }
      this.future_2._completeError$1(new P.StateError("No elements"));
    }
  },
  StreamSubscription: {
    "^": "Object;"
  },
  _StreamController: {
    "^": "Object;",
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      if ((this._state & 8) === 0) {
        var t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      t1 = this._varData.get$varData();
      return t1;
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null) {
        t1 = (this._state & 2) !== 0 ? $.get$Future__nullFuture() : P._Future$(null);
        this._doneFuture = t1;
      }
      return t1;
    },
    add$1: [function(_, value) {
      var t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null));
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }],
    close$0: function(_) {
      var t1 = this._state;
      if ((t1 & 4) !== 0) {
        this._ensureDoneFuture$0();
        return this._doneFuture;
      }
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      t1 |= 4;
      this._state = t1;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      this._ensureDoneFuture$0();
      return this._doneFuture;
    },
    _subscribe$1: function(cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, t2, null, null), [null]);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state |= 1;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var t1, future;
      if ((this._state & 8) !== 0)
        this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      t1 = new P._StreamController__recordCancel_complete(this);
      future = P._runGuarded(this.get$_onCancel());
      if (future != null)
        future = future.whenComplete$1(t1);
      else
        t1.call$0();
      return future;
    }
  },
  _StreamController__subscribe_closure: {
    "^": "Closure:94;this_0",
    call$0: function() {
      P._runGuarded(this.this_0.get$_onListen());
    }
  },
  _StreamController__recordCancel_complete: {
    "^": "Closure:11;this_0",
    call$0: function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }
  },
  _SyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  },
  _AsyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  },
  _AsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;"
  },
  _SyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__SyncStreamControllerDispatch: {
    "^": "_StreamController+_SyncStreamControllerDispatch;"
  },
  _ControllerStream: {
    "^": "_StreamImpl;_async$_controller",
    _createSubscription$1: function(cancelOnError) {
      return this._async$_controller._subscribe$1(cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true
  },
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.pause$0(0);
      P._runGuarded(t1.get$_onPause());
    }, "call$0", "get$_onPause", 0, 0, 11],
    _onResume$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.resume$0();
      P._runGuarded(t1.get$_onResume());
    }, "call$0", "get$_onResume", 0, 0, 11]
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        this._state = (this._state | 64) >>> 0;
        pendingEvents.schedule$1(this);
      }
    },
    onData$1: function(handleData) {
      this._zone.toString;
      this._async$_onData = handleData;
    },
    onError$1: function(_, handleError) {
      if (handleError == null)
        handleError = P._nullErrorHandler$closure();
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    onDone$1: function(handleDone) {
      if (handleDone == null)
        handleDone = P._nullDoneHandler$closure();
      this._zone.toString;
      this._onDone = handleDone;
    },
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1, t2;
      t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t2 = this._pending;
            t2 = !t2.get$isEmpty(t2);
          } else
            t2 = false;
          if (t2)
            this._pending.schedule$1(this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 11],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 11],
    _onCancel$0: function() {
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._async$_onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        if (!!J.getInterceptor(t1).$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, t2, isInputPaused;
      t1 = this._state;
      if ((t1 & 64) !== 0) {
        t2 = this._pending;
        t2 = t2.get$isEmpty(t2);
      } else
        t2 = false;
      if (t2) {
        t1 = (t1 & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = this._pending;
            t2 = t2 == null || t2.get$isEmpty(t2);
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        t1 = (this._state & 4294967263) >>> 0;
        this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    static: {"^": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:11;this_0,error_1,stackTrace_2",
    call$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._zone;
      t3 = $.Zone__current;
      t2.toString;
      t3.toString;
      if (t3 == null ? t2 != null : t3 !== t2)
        P._rootHandleUncaughtError(t3, null, t3, this.error_1, this.stackTrace_2);
      else {
        t3 = t1._onError;
        t4 = H.getDynamicRuntimeType();
        t4 = H.buildFunctionType(t4, [t4, t4])._isTest$1(t3);
        t5 = this.error_1;
        if (t4)
          t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
        else
          t2.runUnaryGuarded$2(t3, t5);
      }
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:11;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(0, onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error>,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:94;this_0,dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _cancelAndError_closure: {
    "^": "Closure:94;future_0,error_1,stackTrace_2",
    call$0: function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:108;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }
  },
  _cancelAndValue_closure: {
    "^": "Closure:94;future_0,value_1",
    call$0: function() {
      return this.future_0._complete$1(this.value_1);
    }
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4, result;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      result = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null), [t1, t2]);
      result._ForwardingStreamSubscription$2(this, cancelOnError, t1, t2);
      result.onData$1(onData);
      result.onError$1(0, onError);
      result.onDone$1(onDone);
      return result;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 11],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 11],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 109],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 11],
    _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    }
  },
  _SkipStream: {
    "^": "_ForwardingStream;_remaining,_async$_source",
    _handleData$2: function(inputEvent, sink) {
      if (J.$gt$n(this._remaining, 0)) {
        this._remaining = J.$sub$n(this._remaining, 1);
        return;
      }
      sink._async$_add$1(inputEvent);
    },
    _SkipStream$2: function(source, count, $T) {
      if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
        throw H.wrapException(P.ArgumentError$(count));
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  _BaseZone: {
    "^": "Object;",
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        t1 = this.runBinary$3(f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    }
  },
  _BaseZone_bindCallback_closure: {
    "^": "Closure:94;this_0,registered_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }
  },
  _BaseZone_bindCallback_closure0: {
    "^": "Closure:94;this_2,registered_3",
    call$0: function() {
      return this.this_2.run$1(this.registered_3);
    }
  },
  _BaseZone_bindUnaryCallback_closure: {
    "^": "Closure:95;this_0,registered_1",
    call$1: function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }
  },
  _BaseZone_bindUnaryCallback_closure0: {
    "^": "Closure:95;this_2,registered_3",
    call$1: function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:94;error_0,stackTrace_1",
    call$0: function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    }
  },
  _rootHandleUncaughtError__closure: {
    "^": "Closure:94;error_2,stackTrace_3",
    call$0: function() {
      var t1, trace;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null && !!J.getInterceptor(t1).$isError)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    }
  },
  _RootZone: {
    "^": "_BaseZone;",
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      return P._rootRunBinary(this, null, this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _HashSet__newHashTable: function() {
    var table = Object.create(null);
    table["<non-identifier-key>"] = table;
    delete table["<non-identifier-key>"];
    return table;
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 15],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 16],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  HashSet_HashSet$identity: function($E) {
    return H.setRuntimeTypeInfo(new P._IdentityHashSet(0, null, null, null, null), [$E]);
  },
  _iterableToString: function(iterable) {
    var parts, t1;
    if ($.get$_toStringVisiting().contains$1(0, iterable))
      return "(...)";
    $.get$_toStringVisiting().add$1(0, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      $.get$_toStringVisiting().remove$1(0, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  },
  _iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, t1, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              t1 = J.$add$ns(J.get$length$asx(parts.pop()), 2);
              if (typeof t1 !== "number")
                return H.iae(t1);
              $length -= t1;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      t1 = J.$add$ns(J.get$length$asx(parts.pop()), 2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      $length -= t1;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result, i, t2, t3;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i) {
      t2 = t2[i];
      t3 = m;
      if (t2 == null ? t3 == null : t2 === t3)
        return "{...}";
    }
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, t1, entry, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++this._collection$_length;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++this._collection$_length;
          this._keys = null;
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "^": "Closure:95;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "^": "Object;_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(key);
    },
    _remove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell._collection$_value);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_collection$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_collection$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure:95;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  LinkedHashMapCell: {
    "^": "Object;_key<,_collection$_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    },
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSet: {
    "^": "_HashSetBase;",
    get$iterator: function(_) {
      return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++this._collection$_length;
      this._elements = null;
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      --this._collection$_length;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = 0;
      ++this._collection$_length;
      this._elements = null;
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        --this._collection$_length;
        this._elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    },
    $isEfficientLength: true
  },
  _IdentityHashSet: {
    "^": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i];
        if (t1 == null ? element == null : t1 === element)
          return i;
      }
      return -1;
    }
  },
  HashSetIterator: {
    "^": "Object;_set,_elements,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_element();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    get$first: function(_) {
      var t1 = this._first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return t1.get$_element();
    },
    get$last: function(_) {
      var t1 = this._last;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return t1.get$_element();
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: true,
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_element();
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "^": "IterableBase;",
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    $isEfficientLength: true
  },
  IterableBase: {
    "^": "Object;",
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return this.get$isEmpty(this) !== true;
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(P.StateError$("No elements"));
      return it.get$current();
    },
    get$last: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(P.StateError$("No elements"));
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element, t2;
      if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        t2 = J.getInterceptor(remaining);
        if (t2.$eq(remaining, 0))
          return element;
        remaining = t2.$sub(remaining, 1);
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P._iterableToString(this);
    }
  },
  ListBase: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    where$1: function(receiver, test) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, null);
    },
    toList$1$growable: function(receiver, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(receiver)), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      for (i = 0; i < this.get$length(receiver); ++i) {
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    sort$1: function(receiver, compare) {
      H.Sort__doSort(receiver, 0, this.get$length(receiver) - 1, compare);
    },
    _rangeCheck$2: function(receiver, start, end) {
      var t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
        throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver)));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
        throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver)));
    },
    sublist$2: function(receiver, start, end) {
      var $length, result, t1, i, t2;
      if (end == null)
        end = this.get$length(receiver);
      this._rangeCheck$2(receiver, start, end);
      $length = J.$sub$n(end, start);
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      if (typeof $length !== "number")
        return H.iae($length);
      t1 = J.getInterceptor$ns(start);
      i = 0;
      for (; i < $length; ++i) {
        t2 = this.$index(receiver, t1.$add(start, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i, t1;
      this._rangeCheck$2(receiver, start, end);
      for (i = start; t1 = J.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
        this.$indexSet(receiver, i, fill);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, t2, $length, t3, otherStart, otherList, t4, i;
      t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
        H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
      t2 = J.getInterceptor$n(end);
      if (t2.$lt(end, start) || t2.$gt(end, this.get$length(receiver)))
        H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
      $length = t2.$sub(end, start);
      t2 = J.getInterceptor($length);
      if (t2.$eq($length, 0))
        return;
      if (J.$lt$n(skipCount, 0))
        throw H.wrapException(P.ArgumentError$(skipCount));
      t3 = J.getInterceptor(iterable);
      if (!!t3.$isList) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = t3.skip$1(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t3 = J.getInterceptor$ns(otherStart);
      t4 = J.getInterceptor$asx(otherList);
      if (J.$gt$n(t3.$add(otherStart, $length), t4.get$length(otherList)))
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (t3.$lt(otherStart, start))
        for (i = t2.$sub($length, 1); t2 = J.getInterceptor$n(i), t2.$ge(i, 0); i = t2.$sub(i, 1))
          this.$indexSet(receiver, t1.$add(start, i), t4.$index(otherList, t3.$add(otherStart, i)));
      else {
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i)
          this.$indexSet(receiver, t1.$add(start, i), t4.$index(otherList, t3.$add(otherStart, i)));
      }
    },
    lastIndexOf$2: function(receiver, element, startIndex) {
      var i;
      startIndex = this.get$length(receiver) - 1;
      for (i = startIndex; i >= 0; --i)
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    toString$0: function(receiver) {
      var result;
      if ($.get$_toStringVisiting().contains$1(0, receiver))
        return "[...]";
      result = P.StringBuffer$("");
      try {
        $.get$_toStringVisiting().add$1(0, receiver);
        result.write$1("[");
        result.writeAll$2(receiver, ", ");
        result.write$1("]");
      } finally {
        $.get$_toStringVisiting().remove$1(0, receiver);
      }
      return result.get$_contents();
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  Maps_mapToString_closure: {
    "^": "Closure:96;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$first: function(_) {
      var t1, t2;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(P.StateError$("No elements"));
      t2 = this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1];
    },
    get$last: function(_) {
      var t1, t2, t3;
      t1 = this._head;
      t2 = this._tail;
      if (t1 === t2)
        throw H.wrapException(P.StateError$("No elements"));
      t1 = this._table;
      t3 = t1.length;
      t2 = (t2 - 1 & t3 - 1) >>> 0;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    add$1: function(_, element) {
      this._add$1(element);
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        ++this._modificationCount;
      }
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(P.StateError$("No elements"));
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      ++this._modificationCount;
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: true,
    static: {"^": "ListQueue__INITIAL_CAPACITY"}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  }
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  Codec: {
    "^": "Object;",
    decode$1: function(encoded) {
      return this.get$decoder().convert$1(encoded);
    }
  },
  Converter: {
    "^": "Object;"
  },
  Encoding: {
    "^": "Codec;"
  },
  Utf8Codec: {
    "^": "Encoding;_allowMalformed",
    get$name: function(_) {
      return "utf-8";
    },
    decode$2$allowMalformed: function(codeUnits, allowMalformed) {
      allowMalformed = this._allowMalformed;
      return new P.Utf8Decoder(allowMalformed).convert$1(codeUnits);
    },
    decode$1: function(codeUnits) {
      return this.decode$2$allowMalformed(codeUnits, null);
    },
    get$encoder: function() {
      return new P.Utf8Encoder();
    },
    get$decoder: function() {
      return new P.Utf8Decoder(this._allowMalformed);
    }
  },
  Utf8Encoder: {
    "^": "Converter;",
    convert$1: function(string) {
      var t1, t2, encoder;
      t1 = C.JSInt_methods.get$length(string);
      t2 = Array(t1.$mul(0, 3));
      t2.fixed$length = init;
      t2 = H.setRuntimeTypeInfo(t2, [J.JSInt]);
      encoder = new P._Utf8Encoder(0, 0, t2);
      encoder._fillBuffer$3(string, 0, t1);
      encoder._writeSurrogate$2(C.JSInt_methods.codeUnitAt$1(string, t1.$sub(0, 1)), 0);
      return C.JSArray_methods.sublist$2(t2, 0, encoder._bufferIndex);
    }
  },
  _Utf8Encoder: {
    "^": "Object;_carry,_bufferIndex,_buffer",
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, rune, t3, t4;
      t1 = this._buffer;
      t2 = this._bufferIndex;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = (240 | rune >>> 18) >>> 0;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 224 | leadingSurrogate >>> 12;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
        this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | leadingSurrogate & 63;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
      if (start !== end && (J.codeUnitAt$1$s(str, J.$sub$n(end, 1)) & 64512) === 55296)
        end = J.$sub$n(end, 1);
      if (typeof end !== "number")
        return H.iae(end);
      t1 = this._buffer;
      t2 = t1.length;
      t3 = J.getInterceptor$s(str);
      stringIndex = start;
      for (; stringIndex < end; ++stringIndex) {
        codeUnit = t3.codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t4 = this._bufferIndex;
          if (t4 >= t2)
            break;
          this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else if ((codeUnit & 64512) === 55296) {
          if (this._bufferIndex + 3 >= t2)
            break;
          stringIndex0 = stringIndex + 1;
          if (stringIndex0 >= str.length)
            H.throwExpression(P.RangeError$value(stringIndex0));
          if (this._writeSurrogate$2(codeUnit, str.charCodeAt(stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t4 = this._bufferIndex;
          t5 = t4 + 1;
          if (t5 >= t2)
            break;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 192 | codeUnit >>> 6;
          this._bufferIndex = t5 + 1;
          t1[t5] = 128 | codeUnit & 63;
        } else {
          t4 = this._bufferIndex;
          if (t4 + 2 >= t2)
            break;
          t5 = t4 + 1;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 224 | codeUnit >>> 12;
          t4 = t5 + 1;
          this._bufferIndex = t4;
          if (t5 >= t2)
            return H.ioore(t1, t5);
          t1[t5] = 128 | codeUnit >>> 6 & 63;
          this._bufferIndex = t4 + 1;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 128 | codeUnit & 63;
        }
      }
      return stringIndex;
    },
    static: {"^": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE"}
  },
  Utf8Decoder: {
    "^": "Converter;_allowMalformed",
    convert$1: function(codeUnits) {
      var buffer, decoder;
      buffer = P.StringBuffer$("");
      decoder = new P._Utf8Decoder(this._allowMalformed, buffer, true, 0, 0, 0);
      decoder.convert$3(codeUnits, 0, J.get$length$asx(codeUnits));
      decoder.flush$0();
      return buffer._contents;
    }
  },
  _Utf8Decoder: {
    "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
    flush$0: function() {
      if (this._expectedUnits > 0) {
        if (this._allowMalformed !== true)
          throw H.wrapException(P.FormatException$("Unfinished UTF-8 octet sequence"));
        this._stringSink.write$1(H.Primitives_stringFromCharCode(65533));
        this._convert$_value = 0;
        this._expectedUnits = 0;
        this._extraUnits = 0;
      }
    },
    convert$3: function(codeUnits, startIndex, endIndex) {
      var t1, value, expectedUnits, extraUnits, t2, t3, t4, t5, i, unit, t6, i0, t7, to;
      t1 = {};
      value = this._convert$_value;
      expectedUnits = this._expectedUnits;
      extraUnits = this._extraUnits;
      t1.singleBytesCount_0 = 0;
      this._convert$_value = 0;
      this._expectedUnits = 0;
      this._extraUnits = 0;
      t2 = new P._Utf8Decoder_convert_addSingleBytes(t1, this, codeUnits);
      $loop$0:
        for (t3 = this._stringSink, t4 = this._allowMalformed !== true, t5 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
          $multibyte$2: {
            if (expectedUnits > 0) {
              do {
                if (i === endIndex)
                  break $loop$0;
                unit = t5.$index(codeUnits, i);
                t6 = J.getInterceptor$n(unit);
                if (t6.$and(unit, 192) !== 128) {
                  if (t4)
                    throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + t6.toRadixString$1(unit, 16)));
                  this._isFirstCharacter = false;
                  t6 = H.Primitives_stringFromCharCode(65533);
                  t3._contents += t6;
                  expectedUnits = 0;
                  break $multibyte$2;
                } else {
                  value = (value << 6 | t6.$and(unit, 63)) >>> 0;
                  --expectedUnits;
                  ++i;
                }
              } while (expectedUnits > 0);
              t6 = extraUnits - 1;
              if (t6 < 0 || t6 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t6);
              t6 = C.List_127_2047_65535_1114111[t6];
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (value <= t6) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
              if (value > 1114111) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
                value = 65533;
              }
              if (!this._isFirstCharacter || value !== 65279) {
                t6 = H.Primitives_stringFromCharCode(value);
                t3._contents += t6;
              }
              this._isFirstCharacter = false;
            }
          }
          if (typeof endIndex !== "number")
            return H.iae(endIndex);
          for (; i < endIndex; i = i0) {
            i0 = i + 1;
            unit = t5.$index(codeUnits, i);
            t6 = J.getInterceptor$n(unit);
            if (t6.$lt(unit, 0)) {
              t7 = t1.singleBytesCount_0;
              if (t7 > 0) {
                to = i0 - 1;
                t2.call$2(to - t7, to);
              }
              if (t4)
                throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + J.toRadixString$1$n(t6.$negate(unit), 16)));
              t6 = H.Primitives_stringFromCharCode(65533);
              t3._contents += t6;
            } else if (t6.$le(unit, 127)) {
              this._isFirstCharacter = false;
              ++t1.singleBytesCount_0;
            } else {
              t6 = t1.singleBytesCount_0;
              if (t6 > 0) {
                to = i0 - 1;
                t2.call$2(to - t6, to);
              }
              if (typeof unit !== "number")
                return unit.$and();
              if ((unit & 224) === 192) {
                value = unit & 31;
                expectedUnits = 1;
                extraUnits = 1;
                continue $loop$0;
              }
              if ((unit & 240) === 224) {
                value = unit & 15;
                expectedUnits = 2;
                extraUnits = 2;
                continue $loop$0;
              }
              if ((unit & 248) === 240 && unit < 245) {
                value = unit & 7;
                expectedUnits = 3;
                extraUnits = 3;
                continue $loop$0;
              }
              if (t4)
                throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + C.JSNumber_methods.toRadixString$1(unit, 16)));
              this._isFirstCharacter = false;
              t6 = H.Primitives_stringFromCharCode(65533);
              t3._contents += t6;
              value = 65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
          }
          break $loop$0;
        }
      t1 = t1.singleBytesCount_0;
      if (t1 > 0)
        t2.call$2(i - t1, endIndex);
      if (expectedUnits > 0) {
        this._convert$_value = value;
        this._expectedUnits = expectedUnits;
        this._extraUnits = extraUnits;
      }
    },
    static: {"^": "_Utf8Decoder__LIMITS"}
  },
  _Utf8Decoder_convert_addSingleBytes: {
    "^": "Closure:110;box_0,this_1,codeUnits_2",
    call$2: function(from, to) {
      var t1, t2, t3;
      t1 = from === 0 && J.$eq(to, J.get$length$asx(this.codeUnits_2));
      t2 = this.this_1;
      t3 = this.codeUnits_2;
      if (t1)
        t2._stringSink.write$1(P.String_String$fromCharCodes(t3));
      else
        t2._stringSink.write$1(P.String_String$fromCharCodes(J.sublist$2$ax(t3, from, to)));
      this.box_0.singleBytesCount_0 = 0;
    }
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  _symbolToString: function(symbol) {
    return H.Symbol_getName(symbol);
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 17],
  Error_safeToString: function(object) {
    var buffer, t1, i, t2, codeUnit;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0, t2 = "\""; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10)
            t2 = buffer._contents += "\\n";
          else if (codeUnit === 13)
            t2 = buffer._contents += "\\r";
          else if (codeUnit === 9)
            t2 = buffer._contents += "\\t";
          else {
            t2 = buffer._contents += "\\x";
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = H.Primitives_stringFromCharCode(codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit);
            t2 = buffer._contents += t2;
          }
        else if (codeUnit === 92)
          t2 = buffer._contents += "\\\\";
        else if (codeUnit === 34)
          t2 = buffer._contents += "\\\"";
        else {
          t2 = H.Primitives_stringFromCharCode(codeUnit);
          t2 = buffer._contents += t2;
        }
      }
      t1 = t2 + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 18],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 19],
  List_List$filled: function($length, fill, $E) {
    var result, t1, i;
    result = J.JSArray_JSArray$fixed($length, $E);
    if ($length !== 0 && true)
      for (t1 = result.length, i = 0; i < t1; ++i)
        result[i] = fill;
    return result;
  },
  List_List$from: function(other, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = init;
    return list;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  String_String$fromCharCodes: function(charCodes) {
    return H.Primitives_stringFromCharCodes(typeof charCodes !== "object" || charCodes === null || charCodes.constructor !== Array ? P.List_List$from(charCodes, true, null) : charCodes);
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:111;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(P._symbolToString(key));
    }
  },
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDateTime)
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    add$1: function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
    },
    $isDateTime: true,
    static: {"^": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH", DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }}
  },
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
    },
    $mul: function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
    },
    $tdiv: function(_, quotient) {
      if (J.$eq(quotient, 0))
        throw H.wrapException(P.IntegerDivisionByZeroException$());
      if (typeof quotient !== "number")
        return H.iae(quotient);
      return P.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return this._duration > other.get$_duration();
    },
    $le: function(_, other) {
      return this._duration <= other.get$_duration();
    },
    $ge: function(_, other) {
      return this._duration >= other.get$_duration();
    },
    get$inMilliseconds: function() {
      return C.JSNumber_methods._tdivFast$1(this._duration, 1000);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + P.Duration$(0, 0, -t2, 0, 0, 0).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
      return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure:112;",
    call$1: function(n) {
      if (n >= 100000)
        return H.S(n);
      if (n >= 10000)
        return "0" + H.S(n);
      if (n >= 1000)
        return "00" + H.S(n);
      if (n >= 100)
        return "000" + H.S(n);
      if (n >= 10)
        return "0000" + H.S(n);
      return "00000" + H.S(n);
    }
  },
  Duration_toString_twoDigits: {
    "^": "Closure:112;",
    call$1: function(n) {
      if (n >= 10)
        return H.S(n);
      return "0" + H.S(n);
    }
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + H.S(start) + ".." + H.S(end));
      }}
  },
  UnsupportedError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message",
    toString$0: function(_) {
      return "FormatException: " + H.S(this.message);
    },
    static: {FormatException$: function(message) {
        return new P.FormatException(message);
      }}
  },
  IntegerDivisionByZeroException: {
    "^": "Object;",
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    },
    static: {IntegerDivisionByZeroException$: function() {
        return new P.IntegerDivisionByZeroException();
      }}
  },
  Expando: {
    "^": "Object;name>",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"^": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Function: {
    "^": "Object;"
  },
  Iterator: {
    "^": "Object;"
  },
  Map: {
    "^": "Object;",
    $isMap: true
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    }
  },
  Pattern: {
    "^": "Object;"
  },
  StackTrace: {
    "^": "Object;"
  },
  Stopwatch: {
    "^": "Object;frequency,_core$_start,_stop",
    start$0: [function(_) {
      var t1, t2, t3;
      t1 = this._core$_start == null;
      if (!t1 && this._stop == null)
        return;
      if (t1)
        this._core$_start = H.Primitives_numMicroseconds();
      else {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._stop;
        t3 = this._core$_start;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._core$_start = t1 - (t2 - t3);
        this._stop = null;
      }
    }, "call$0", "get$start", 0, 0, 11],
    stop$0: function(_) {
      if (!(this._core$_start != null && this._stop == null))
        return;
      this._stop = H.Primitives_numMicroseconds();
    },
    get$elapsedTicks: function() {
      var t1, t2;
      t1 = this._core$_start;
      if (t1 == null)
        return 0;
      t2 = this._stop;
      if (t2 == null) {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._core$_start;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 - t2;
        t1 = t2;
      } else {
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = t2 - t1;
      }
      return t1;
    }
  },
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._contents.length !== 0;
    },
    write$1: function(obj) {
      this._contents += typeof obj === "string" ? obj : H.S(obj);
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        }
      }
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "^": "Object;"
  },
  Uri: {
    "^": "Object;_host,_port,_path,scheme,userInfo,query,fragment,_pathSegments,_queryParameters",
    get$host: function(_) {
      var t1;
      if (C.JSString_methods.startsWith$1(this._host, "[")) {
        t1 = this._host;
        return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
      }
      return this._host;
    },
    get$port: function(_) {
      var t1;
      if (J.$eq(this._port, 0)) {
        t1 = this.scheme;
        if (t1 === "http")
          return 80;
        if (t1 === "https")
          return 443;
      }
      return this._port;
    },
    _makePath$2: function(path, pathSegments) {
      var t1, result;
      t1 = path == null;
      if (t1 && true)
        return "";
      t1 = !t1;
      if (t1)
        ;
      result = t1 ? P.Uri__normalize(path) : C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure()).join$1(0, "/");
      if ((this.get$host(this) !== "" || this.scheme === "file") && result.length !== 0 && !C.JSString_methods.startsWith$1(result, "/"))
        return "/" + result;
      return result;
    },
    toString$0: function(_) {
      var sb, t1;
      sb = P.StringBuffer$("");
      t1 = this.scheme;
      if ("" !== t1) {
        sb.write$1(t1);
        sb.write$1(":");
      }
      if (this.get$host(this) !== "" || t1 === "file") {
        sb.write$1("//");
        t1 = this.userInfo;
        if ("" !== t1) {
          sb.write$1(t1);
          sb.write$1("@");
        }
        sb.write$1(this._host);
        if (!J.$eq(this._port, 0)) {
          sb.write$1(":");
          sb.write$1(J.toString$0(this._port));
        }
      }
      sb.write$1(this._path);
      t1 = this.query;
      if ("" !== t1) {
        sb.write$1("?");
        sb.write$1(t1);
      }
      t1 = this.fragment;
      if ("" !== t1) {
        sb.write$1("#");
        sb.write$1(t1);
      }
      return sb._contents;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isUri)
        return false;
      if (this.scheme === other.scheme)
        if (this.userInfo === other.userInfo)
          if (this.get$host(this) === t1.get$host(other))
            if (J.$eq(this.get$port(this), t1.get$port(other))) {
              t1 = this._path;
              t2 = other._path;
              t1 = (t1 == null ? t2 == null : t1 === t2) && this.query === other.query && this.fragment === other.fragment;
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = new P.Uri_hashCode_combine();
      return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.get$host(this), t1.call$2(this.get$port(this), t1.call$2(this._path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
    },
    Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
      if (scheme === "http" && J.$eq(port, 80))
        this._port = 0;
      else if (scheme === "https" && J.$eq(port, 443))
        this._port = 0;
      else
        this._port = port;
      this._path = this._makePath$2(path, pathSegments);
    },
    $isUri: true,
    static: {"^": "Uri__SPACE,Uri__DOUBLE_QUOTE,Uri__NUMBER_SIGN,Uri__PERCENT,Uri__ASTERISK,Uri__PLUS,Uri__SLASH,Uri__ZERO,Uri__NINE,Uri__COLON,Uri__LESS,Uri__GREATER,Uri__QUESTION,Uri__AT_SIGN,Uri__UPPER_CASE_A,Uri__UPPER_CASE_F,Uri__UPPER_CASE_Z,Uri__LEFT_BRACKET,Uri__BACKSLASH,Uri__RIGHT_BRACKET,Uri__LOWER_CASE_A,Uri__LOWER_CASE_F,Uri__LOWER_CASE_Z,Uri__BAR,Uri__unreservedTable,Uri__unreserved2396Table,Uri__encodeFullTable,Uri__schemeTable,Uri__schemeLowerTable,Uri__subDelimitersTable,Uri__regNameTable,Uri__pathCharTable,Uri__queryCharTable", Uri_parse: function(uri) {
        var port, portStr, t1, t2, $length, index, schemeEndIndex, index0, codeUnit, t3, authorityEndIndex, portIndex, userInfoEndIndex, authorityEndIndex0, pathEndIndex, pathEndIndex0, queryEndIndex, queryEndIndex0, scheme, startIndex, userInfo, exception, host, path, query, fragment;
        t1 = new P.Uri_parse_isRegName();
        t2 = new P.Uri_parse_ipV6Address(uri);
        $length = uri.length;
        if ($length === 0)
          return P.Uri$("", "", null, null, 0, null, null, null, "");
        if (C.JSString_methods.codeUnitAt$1(uri, 0) !== 47)
          for (index = 0; schemeEndIndex = 0, index < $length; index = index0) {
            index0 = index + 1;
            if (index >= $length)
              H.throwExpression(P.RangeError$value(index));
            codeUnit = uri.charCodeAt(index);
            if (codeUnit < 128) {
              t3 = codeUnit >>> 4;
              if (t3 >= 8)
                return H.ioore(C.List_JYB, t3);
              t3 = J.$and$n(C.List_JYB[t3], C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t3 = false;
            if (!t3) {
              if (codeUnit === 58) {
                schemeEndIndex = index0;
                index = schemeEndIndex;
              } else {
                index = index0 - 1;
                schemeEndIndex = 0;
              }
              break;
            }
          }
        else {
          index = 0;
          schemeEndIndex = 0;
        }
        if (schemeEndIndex === index) {
          t3 = schemeEndIndex + 1;
          t3 = t3 < $length && C.JSString_methods.codeUnitAt$1(uri, schemeEndIndex) === 47 && C.JSString_methods.codeUnitAt$1(uri, t3) === 47;
        } else
          t3 = false;
        if (t3) {
          authorityEndIndex = schemeEndIndex + 2;
          for (portIndex = -1; t3 = J.getInterceptor$n(authorityEndIndex), userInfoEndIndex = -1, t3.$lt(authorityEndIndex, $length);) {
            authorityEndIndex0 = t3.$add(authorityEndIndex, 1);
            if (typeof authorityEndIndex !== "number" || Math.floor(authorityEndIndex) !== authorityEndIndex)
              H.throwExpression(P.ArgumentError$(authorityEndIndex));
            if (t3.$lt(authorityEndIndex, 0))
              H.throwExpression(P.RangeError$value(authorityEndIndex));
            if (t3.$ge(authorityEndIndex, $length))
              H.throwExpression(P.RangeError$value(authorityEndIndex));
            codeUnit = uri.charCodeAt(authorityEndIndex);
            if (t1.call$1(codeUnit) !== true)
              if (codeUnit === 91)
                authorityEndIndex = t2.call$1(authorityEndIndex0);
              else {
                if (J.$eq(portIndex, -1) && codeUnit === 58)
                  ;
                else {
                  t3 = codeUnit === 64 || codeUnit === 58;
                  authorityEndIndex = authorityEndIndex0 - 1;
                  if (t3) {
                    userInfoEndIndex = C.JSString_methods.indexOf$2(uri, "@", authorityEndIndex);
                    if (userInfoEndIndex === -1) {
                      authorityEndIndex = index;
                      break;
                    }
                    authorityEndIndex = userInfoEndIndex + 1;
                    for (portIndex = -1; t3 = J.getInterceptor$n(authorityEndIndex), t3.$lt(authorityEndIndex, $length);) {
                      authorityEndIndex0 = t3.$add(authorityEndIndex, 1);
                      if (typeof authorityEndIndex !== "number" || Math.floor(authorityEndIndex) !== authorityEndIndex)
                        H.throwExpression(P.ArgumentError$(authorityEndIndex));
                      if (t3.$lt(authorityEndIndex, 0))
                        H.throwExpression(P.RangeError$value(authorityEndIndex));
                      if (t3.$ge(authorityEndIndex, $length))
                        H.throwExpression(P.RangeError$value(authorityEndIndex));
                      codeUnit = uri.charCodeAt(authorityEndIndex);
                      if (t1.call$1(codeUnit) !== true)
                        if (codeUnit === 91)
                          authorityEndIndex = t2.call$1(authorityEndIndex0);
                        else {
                          if (codeUnit === 58) {
                            if (!J.$eq(portIndex, -1))
                              throw H.wrapException(P.FormatException$("Double port in host"));
                          } else {
                            authorityEndIndex = authorityEndIndex0 - 1;
                            break;
                          }
                          authorityEndIndex = authorityEndIndex0;
                          portIndex = authorityEndIndex;
                        }
                      else
                        authorityEndIndex = authorityEndIndex0;
                    }
                    break;
                  } else {
                    userInfoEndIndex = -1;
                    break;
                  }
                }
                authorityEndIndex = authorityEndIndex0;
                portIndex = authorityEndIndex;
              }
            else
              authorityEndIndex = authorityEndIndex0;
          }
        } else {
          authorityEndIndex = schemeEndIndex;
          userInfoEndIndex = -1;
          portIndex = -1;
        }
        for (pathEndIndex = authorityEndIndex; t1 = J.getInterceptor$n(pathEndIndex), t1.$lt(pathEndIndex, $length); pathEndIndex = pathEndIndex0) {
          pathEndIndex0 = t1.$add(pathEndIndex, 1);
          if (typeof pathEndIndex !== "number" || Math.floor(pathEndIndex) !== pathEndIndex)
            H.throwExpression(P.ArgumentError$(pathEndIndex));
          if (t1.$lt(pathEndIndex, 0))
            H.throwExpression(P.RangeError$value(pathEndIndex));
          if (t1.$ge(pathEndIndex, $length))
            H.throwExpression(P.RangeError$value(pathEndIndex));
          codeUnit = uri.charCodeAt(pathEndIndex);
          if (codeUnit === 63 || codeUnit === 35) {
            pathEndIndex = pathEndIndex0 - 1;
            break;
          }
        }
        t1 = J.getInterceptor$n(pathEndIndex);
        if (t1.$lt(pathEndIndex, $length) && C.JSString_methods.codeUnitAt$1(uri, pathEndIndex) === 63)
          for (queryEndIndex = pathEndIndex; t2 = J.getInterceptor$n(queryEndIndex), t2.$lt(queryEndIndex, $length); queryEndIndex = queryEndIndex0) {
            queryEndIndex0 = t2.$add(queryEndIndex, 1);
            if (typeof queryEndIndex !== "number" || Math.floor(queryEndIndex) !== queryEndIndex)
              H.throwExpression(P.ArgumentError$(queryEndIndex));
            if (t2.$lt(queryEndIndex, 0))
              H.throwExpression(P.RangeError$value(queryEndIndex));
            if (t2.$ge(queryEndIndex, $length))
              H.throwExpression(P.RangeError$value(queryEndIndex));
            if (uri.charCodeAt(queryEndIndex) === 35) {
              queryEndIndex = queryEndIndex0 - 1;
              break;
            }
          }
        else
          queryEndIndex = pathEndIndex;
        scheme = schemeEndIndex > 0 ? C.JSString_methods.substring$2(uri, 0, schemeEndIndex - 1) : null;
        port = 0;
        if (schemeEndIndex !== authorityEndIndex) {
          startIndex = schemeEndIndex + 2;
          if (userInfoEndIndex > 0) {
            userInfo = C.JSString_methods.substring$2(uri, startIndex, userInfoEndIndex);
            startIndex = userInfoEndIndex + 1;
          } else
            userInfo = "";
          t2 = J.getInterceptor$n(portIndex);
          if (t2.$gt(portIndex, 0)) {
            portStr = C.JSString_methods.substring$2(uri, portIndex, authorityEndIndex);
            try {
              port = H.Primitives_parseInt(portStr, null, null);
            } catch (exception) {
              H.unwrapException(exception);
              throw H.wrapException(P.FormatException$("Invalid port: '" + H.S(portStr) + "'"));
            }

            host = C.JSString_methods.substring$2(uri, startIndex, t2.$sub(portIndex, 1));
          } else
            host = C.JSString_methods.substring$2(uri, startIndex, authorityEndIndex);
        } else {
          host = "";
          userInfo = "";
        }
        path = C.JSString_methods.substring$2(uri, authorityEndIndex, pathEndIndex);
        query = t1.$lt(pathEndIndex, queryEndIndex) ? C.JSString_methods.substring$2(uri, t1.$add(pathEndIndex, 1), queryEndIndex) : "";
        t1 = J.getInterceptor$n(queryEndIndex);
        fragment = t1.$lt(queryEndIndex, $length) ? C.JSString_methods.substring$2(uri, t1.$add(queryEndIndex, 1), $length) : "";
        return P.Uri$(fragment, host, path, null, port, query, null, scheme, userInfo);
      }, Uri$: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
        var t1 = P.Uri__makeScheme(scheme);
        t1 = new P.Uri(P.Uri__makeHost(host), null, null, t1, userInfo, P.Uri__makeQuery(query, queryParameters), P.Uri__makeFragment(fragment), null, null);
        t1.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo);
        return t1;
      }, Uri__makeHost: function(host) {
        var t1, i;
        if (host.length === 0)
          return host;
        if (C.JSString_methods.codeUnitAt$1(host, 0) === 91) {
          t1 = host.length - 1;
          if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
            throw H.wrapException(P.FormatException$("Missing end `]` to match `[` in host"));
          P.Uri_parseIPv6Address(C.JSString_methods.substring$2(host, 1, t1));
          return host;
        }
        for (t1 = host.length, i = 0; i < t1; ++i) {
          if (i >= t1)
            H.throwExpression(P.RangeError$value(i));
          if (host.charCodeAt(i) === 58) {
            P.Uri_parseIPv6Address(host);
            return "[" + host + "]";
          }
        }
        return host;
      }, Uri__makeScheme: function(scheme) {
        var t1, $length, allLowercase, i, codeUnit, t2;
        t1 = new P.Uri__makeScheme_isSchemeLowerCharacter();
        if (scheme == null)
          return "";
        $length = scheme.length;
        for (allLowercase = true, i = 0; i < $length; ++i) {
          if (i >= $length)
            H.throwExpression(P.RangeError$value(i));
          codeUnit = scheme.charCodeAt(i);
          if (i === 0) {
            if (!(codeUnit >= 97 && codeUnit <= 122))
              t2 = codeUnit >= 65 && codeUnit <= 90;
            else
              t2 = true;
            t2 = !t2;
          } else
            t2 = false;
          if (t2)
            throw H.wrapException(P.ArgumentError$("Illegal scheme: " + scheme));
          if (t1.call$1(codeUnit) !== true) {
            if (codeUnit < 128) {
              t2 = codeUnit >>> 4;
              if (t2 >= 8)
                return H.ioore(C.List_JYB, t2);
              t2 = J.$and$n(C.List_JYB[t2], C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t2 = false;
            if (t2)
              ;
            else
              throw H.wrapException(P.ArgumentError$("Illegal scheme: " + scheme));
            allLowercase = false;
          }
        }
        return allLowercase ? scheme : scheme.toLowerCase();
      }, Uri__makeQuery: function(query, queryParameters) {
        var t1, t2, result;
        t1 = {};
        t2 = query == null;
        if (t2 && true)
          return "";
        t2 = !t2;
        if (t2)
          ;
        if (t2)
          return P.Uri__normalize(query);
        result = P.StringBuffer$("");
        t1.first_0 = true;
        C.JSNull_methods.forEach$1(queryParameters, new P.Uri__makeQuery_closure(t1, result));
        return result._contents;
      }, Uri__makeFragment: function(fragment) {
        return P.Uri__normalize(fragment);
      }, Uri__normalize: function(component) {
        var t1, index, t2, t3, t4, t5, $length, t6, t7, codeUnit1, codeUnit2, decodedCodeUnit, t8, next;
        t1 = {};
        index = J.getInterceptor$asx(component).indexOf$1(component, "%");
        t1.index_0 = index;
        if (index < 0)
          return component;
        t2 = new P.Uri__normalize_isNormalizedHexDigit();
        t3 = new P.Uri__normalize_isUnreserved();
        t4 = new P.Uri__normalize_normalizeHexDigit(component, t2, new P.Uri__normalize_isLowerCaseHexDigit());
        t5 = new P.Uri__normalize_decodeHexDigitPair(component);
        t1.result_1 = null;
        $length = component.length;
        t1.prevIndex_2 = 0;
        t6 = new P.Uri__normalize_fillResult(t1, component);
        for (t7 = index; t7 < $length;) {
          if ($length < t7 + 2)
            throw H.wrapException(P.ArgumentError$("Invalid percent-encoding in URI component: " + component));
          ++t7;
          if (t7 < 0)
            H.throwExpression(P.RangeError$value(t7));
          if (t7 >= $length)
            H.throwExpression(P.RangeError$value(t7));
          codeUnit1 = component.charCodeAt(t7);
          t7 = t1.index_0 + 2;
          if (t7 < 0)
            H.throwExpression(P.RangeError$value(t7));
          if (t7 >= $length)
            H.throwExpression(P.RangeError$value(t7));
          codeUnit2 = component.charCodeAt(t7);
          decodedCodeUnit = t5.call$1(t1.index_0 + 1);
          if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true)
            t7 = t1.index_0 += 3;
          else {
            t6.call$0();
            t7 = t3.call$1(decodedCodeUnit);
            t8 = t1.result_1;
            if (t7 === true) {
              t8.toString;
              t7 = H.Primitives_stringFromCharCode(decodedCodeUnit);
              t8._contents += t7;
            } else {
              t8.toString;
              t8._contents += "%";
              t7 = t4.call$1(t1.index_0 + 1);
              t8.toString;
              t7 = H.Primitives_stringFromCharCode(t7);
              t8._contents += t7;
              t7 = t1.result_1;
              t8 = t4.call$1(t1.index_0 + 2);
              t7.toString;
              t8 = H.Primitives_stringFromCharCode(t8);
              t7._contents += t8;
            }
            t7 = t1.index_0 += 3;
            t1.prevIndex_2 = t7;
          }
          next = C.JSString_methods.indexOf$2(component, "%", t7);
          if (next >= t1.index_0) {
            t1.index_0 = next;
            t7 = next;
          } else {
            t1.index_0 = $length;
            t7 = $length;
          }
        }
        if (t1.result_1 == null)
          return component;
        if (t1.prevIndex_2 !== t7)
          t6.call$0();
        return J.toString$0(t1.result_1);
      }, Uri_parseIPv4Address: function(host) {
        var t1, bytes;
        t1 = new P.Uri_parseIPv4Address_error();
        bytes = host.split(".");
        if (bytes.length !== 4)
          t1.call$1("IPv4 address should contain exactly 4 parts");
        return H.setRuntimeTypeInfo(new H.MappedListIterable(bytes, new P.Uri_parseIPv4Address_closure(t1)), [null, null]).toList$0(0);
      }, Uri_parseIPv6Address: function(host) {
        var error, parseHex, parts, partStart, last, wildcardSeen, i, t1, t2, atEnd, isLastWildcard, exception;
        error = new P.Uri_parseIPv6Address_error();
        parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
        if (J.get$length$asx(host) < 2)
          error.call$1("address is too short");
        parts = [];
        partStart = 0;
        wildcardSeen = false;
        i = 0;
        while (true) {
          t1 = J.get$length$asx(host);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = host;
          t2 = J.get$length$asx(t1);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (i >= t2)
            H.throwExpression(P.RangeError$value(i));
          if (t1.charCodeAt(i) === 58) {
            if (i === 0) {
              ++i;
              t1 = host;
              if (i >= J.get$length$asx(t1))
                H.throwExpression(P.RangeError$value(i));
              if (t1.charCodeAt(i) !== 58)
                error.call$1("invalid start colon.");
              partStart = i;
            }
            if (i === partStart) {
              if (wildcardSeen)
                error.call$1("only one wildcard `::` is allowed");
              J.add$1$ax(parts, -1);
              wildcardSeen = true;
            } else
              J.add$1$ax(parts, parseHex.call$2(partStart, i));
            partStart = i + 1;
          }
          ++i;
        }
        if (J.get$length$asx(parts) === 0)
          error.call$1("too few parts");
        atEnd = J.$eq(partStart, J.get$length$asx(host));
        isLastWildcard = J.$eq(J.get$last$ax(parts), -1);
        if (atEnd && !isLastWildcard)
          error.call$1("expected a part after last `:`");
        if (!atEnd)
          try {
            J.add$1$ax(parts, parseHex.call$2(partStart, J.get$length$asx(host)));
          } catch (exception) {
            H.unwrapException(exception);
            try {
              last = P.Uri_parseIPv4Address(J.substring$1$s(host, partStart));
              t1 = J.$index$asx(last, 0);
              if (typeof t1 !== "number")
                return t1.$shl();
              t2 = J.$index$asx(last, 1);
              if (typeof t2 !== "number")
                return H.iae(t2);
              J.add$1$ax(parts, (t1 << 8 | t2) >>> 0);
              t2 = J.$index$asx(last, 2);
              if (typeof t2 !== "number")
                return t2.$shl();
              t1 = J.$index$asx(last, 3);
              if (typeof t1 !== "number")
                return H.iae(t1);
              J.add$1$ax(parts, (t2 << 8 | t1) >>> 0);
            } catch (exception) {
              H.unwrapException(exception);
              error.call$1("invalid end of IPv6 address.");
            }

          }

        if (wildcardSeen) {
          if (J.get$length$asx(parts) > 7)
            error.call$1("an address with a wildcard must have less than 7 parts");
        } else if (J.get$length$asx(parts) !== 8)
          error.call$1("an address without a wildcard must contain exactly 8 parts");
        t1 = new H.ExpandIterable(parts, new P.Uri_parseIPv6Address_closure(parts));
        t1.$builtinTypeInfo = [null, null];
        return P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
      }, Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
        var t1, result, bytes, i, $byte, t2, t3;
        t1 = new P.Uri__uriEncode_byteToHex();
        result = P.StringBuffer$("");
        bytes = encoding.get$encoder().convert$1(text);
        for (i = 0; i < bytes.length; ++i) {
          $byte = bytes[i];
          t2 = J.getInterceptor$n($byte);
          if (t2.$lt($byte, 128)) {
            if (typeof $byte !== "number")
              return $byte.$shr();
            t3 = C.JSNumber_methods._shrOtherPositive$1($byte, 4);
            if (t3 >= 8)
              return H.ioore(canonicalTable, t3);
            t3 = J.$and$n(canonicalTable[t3], C.JSInt_methods._shlPositive$1(1, $byte & 15)) !== 0;
          } else
            t3 = false;
          if (t3) {
            t2 = H.Primitives_stringFromCharCode($byte);
            result._contents += t2;
          } else if (spaceToPlus && t2.$eq($byte, 32)) {
            t2 = H.Primitives_stringFromCharCode(43);
            result._contents += t2;
          } else {
            t2 = H.Primitives_stringFromCharCode(37);
            result._contents += t2;
            t1.call$2($byte, result);
          }
        }
        return result._contents;
      }}
  },
  Uri_parse_isRegName: {
    "^": "Closure:113;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = ch >>> 4;
        if (t1 >= 8)
          return H.ioore(C.List_qNA, t1);
        t1 = J.$and$n(C.List_qNA[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }
  },
  Uri_parse_ipV6Address: {
    "^": "Closure:114;uri_0",
    call$1: function(index) {
      index = C.JSString_methods.indexOf$2(this.uri_0, "]", index);
      if (index === -1)
        throw H.wrapException(P.FormatException$("Bad end of IPv6 host"));
      return index + 1;
    }
  },
  Uri__makeScheme_isSchemeLowerCharacter: {
    "^": "Closure:113;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = ch >>> 4;
        if (t1 >= 8)
          return H.ioore(C.List_6Pr, t1);
        t1 = J.$and$n(C.List_6Pr[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }
  },
  Uri__makePath_closure: {
    "^": "Closure:95;",
    call$1: function(s) {
      return P.Uri__uriEncode(C.List_qg4, s, C.Utf8Codec_false, false);
    }
  },
  Uri__makeQuery_closure: {
    "^": "Closure:96;box_0,result_1",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1("&");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(P.Uri__uriEncode(C.List_nxB, key, C.Utf8Codec_false, true));
      value.get$isEmpty(value);
      t1.write$1("=");
      t1.write$1(P.Uri__uriEncode(C.List_nxB, value, C.Utf8Codec_false, true));
    }
  },
  Uri__normalize_isNormalizedHexDigit: {
    "^": "Closure:113;",
    call$1: function(digit) {
      var t1;
      if (!(48 <= digit && digit <= 57))
        t1 = 65 <= digit && digit <= 70;
      else
        t1 = true;
      return t1;
    }
  },
  Uri__normalize_isLowerCaseHexDigit: {
    "^": "Closure:113;",
    call$1: function(digit) {
      return 97 <= digit && digit <= 102;
    }
  },
  Uri__normalize_isUnreserved: {
    "^": "Closure:113;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = C.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = J.$and$n(C.List_nxB[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }
  },
  Uri__normalize_normalizeHexDigit: {
    "^": "Closure:114;component_1,isNormalizedHexDigit_2,isLowerCaseHexDigit_3",
    call$1: function(index) {
      var t1, codeUnit;
      t1 = this.component_1;
      codeUnit = C.JSString_methods.codeUnitAt$1(t1, index);
      if (this.isLowerCaseHexDigit_3.call$1(codeUnit) === true)
        return codeUnit - 32;
      else if (this.isNormalizedHexDigit_2.call$1(codeUnit) !== true)
        throw H.wrapException(P.ArgumentError$("Invalid URI component: " + t1));
      else
        return codeUnit;
    }
  },
  Uri__normalize_decodeHexDigitPair: {
    "^": "Closure:114;component_4",
    call$1: function(index) {
      var t1, $byte, i, t2, codeUnit;
      for (t1 = this.component_4, $byte = 0, i = 0; i < 2; ++i) {
        t2 = index + i;
        if (t2 < 0)
          H.throwExpression(P.RangeError$value(t2));
        if (t2 >= t1.length)
          H.throwExpression(P.RangeError$value(t2));
        codeUnit = t1.charCodeAt(t2);
        if (48 <= codeUnit && codeUnit <= 57)
          $byte = $byte * 16 + codeUnit - 48;
        else {
          codeUnit |= 32;
          if (97 <= codeUnit && codeUnit <= 102)
            $byte = $byte * 16 + codeUnit - 97 + 10;
          else
            throw H.wrapException(P.ArgumentError$("Invalid percent-encoding in URI component: " + t1));
        }
      }
      return $byte;
    }
  },
  Uri__normalize_fillResult: {
    "^": "Closure:11;box_0,component_5",
    call$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.box_0;
      t2 = t1.result_1;
      t3 = t1.prevIndex_2;
      t4 = this.component_5;
      t5 = t1.index_0;
      if (t2 == null)
        t1.result_1 = P.StringBuffer$(C.JSString_methods.substring$2(t4, t3, t5));
      else
        t2.write$1(C.JSString_methods.substring$2(t4, t3, t5));
    }
  },
  Uri_hashCode_combine: {
    "^": "Closure:115;",
    call$2: function(part, current) {
      var t1 = J.get$hashCode$(part);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return current * 31 + t1 & 1073741823;
    }
  },
  Uri_parseIPv4Address_error: {
    "^": "Closure:116;",
    call$1: function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg));
    }
  },
  Uri_parseIPv4Address_closure: {
    "^": "Closure:95;error_0",
    call$1: function(byteString) {
      var $byte, t1;
      $byte = H.Primitives_parseInt(byteString, null, null);
      t1 = J.getInterceptor$n($byte);
      if (t1.$lt($byte, 0) || t1.$gt($byte, 255))
        this.error_0.call$1("each part must be in the range of `0..255`");
      return $byte;
    }
  },
  Uri_parseIPv6Address_error: {
    "^": "Closure:116;",
    call$1: function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg));
    }
  },
  Uri_parseIPv6Address_parseHex: {
    "^": "Closure:117;host_0,error_1",
    call$2: function(start, end) {
      var value, t1;
      if (end - start > 4)
        this.error_1.call$1("an IPv6 part can only contain a maximum of 4 hex digits");
      value = H.Primitives_parseInt(C.JSString_methods.substring$2(this.host_0, start, end), 16, null);
      t1 = J.getInterceptor$n(value);
      if (t1.$lt(value, 0) || t1.$gt(value, 65535))
        this.error_1.call$1("each part must be in the range of `0x0..0xFFFF`");
      return value;
    }
  },
  Uri_parseIPv6Address_closure: {
    "^": "Closure:95;parts_2",
    call$1: function(value) {
      if (J.getInterceptor(value).$eq(value, -1))
        return P.List_List$filled((9 - this.parts_2.length) * 2, 0, null);
      else {
        if (typeof value !== "number")
          return value.$shr();
        return [C.JSNumber_methods._shrOtherPositive$1(value, 8) & 255, value & 255];
      }
    }
  },
  Uri__uriEncode_byteToHex: {
    "^": "Closure:96;",
    call$2: function($byte, buffer) {
      if (typeof $byte !== "number")
        return $byte.$shr();
      buffer.write$1(H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", C.JSNumber_methods._shrOtherPositive$1($byte, 4))));
      buffer.write$1(H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte & 15)));
    }
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
    var t1, completer, xhr;
    t1 = W.HttpRequest;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
    xhr = new XMLHttpRequest();
    C.HttpRequest_methods.open$3$async(xhr, method, url, true);
    xhr.overrideMimeType(mimeType);
    t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, C.EventStreamProvider_load._eventType, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, C.EventStreamProvider_error._eventType, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(completer.get$completeError()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    xhr.send();
    return completer.future;
  },
  OptionElement_OptionElement$_: function(data, value, defaultSelected, selected) {
    return new Option(data, value, defaultSelected, selected);
  },
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _convertNativeToDart_XHR_Response: function(o) {
    if (!!J.getInterceptor(o).$isDocument)
      return o;
    return P.convertNativeToDart_AcceptStructuredClone(o, true);
  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    if (callback == null)
      return;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "^": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMeterElement|HTMLModElement|HTMLOptGroupElement|HTMLOptionElement|HTMLParagraphElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  AnchorElement: {
    "^": "HtmlElement;type=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "^": "HtmlElement;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAreaElement"
  },
  Blob: {
    "^": "Interceptor;size=,type=",
    "%": ";Blob"
  },
  ButtonElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLButtonElement"
  },
  CanvasElement: {
    "^": "HtmlElement;height=,width=",
    get$context2D: function(receiver) {
      return receiver.getContext("2d");
    },
    "%": "HTMLCanvasElement"
  },
  CanvasRenderingContext: {
    "^": "Interceptor;",
    "%": ";CanvasRenderingContext"
  },
  CanvasRenderingContext2D: {
    "^": "CanvasRenderingContext;",
    putImageData$7: function(receiver, imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
      receiver.putImageData(P.convertDartToNative_ImageData(imagedata), dx, dy);
      return;
    },
    putImageData$3: function($receiver, imagedata, dx, dy) {
      return this.putImageData$7($receiver, imagedata, dx, dy, null, null, null, null);
    },
    "%": "CanvasRenderingContext2D"
  },
  CharacterData: {
    "^": "Node;data=,length=",
    length$0: function($receiver) {
      return $receiver.length.call$0();
    },
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  CompositionEvent: {
    "^": "UIEvent;data=",
    "%": "CompositionEvent"
  },
  Document: {
    "^": "Node;",
    $isDocument: true,
    "%": "Document|HTMLDocument|XMLDocument"
  },
  DocumentFragment: {
    "^": "Node;",
    get$children: function(receiver) {
      if (receiver._docChildren == null)
        receiver._docChildren = H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [null]);
      return receiver._docChildren;
    },
    "%": "DocumentFragment|ShadowRoot"
  },
  DomError: {
    "^": "Interceptor;name=",
    "%": "DOMError|FileError"
  },
  DomException: {
    "^": "Interceptor;",
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMException"
  },
  Element: {
    "^": "Node;id=",
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    get$onChange: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_change._eventType, false), [null]);
    },
    $isElement: true,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;height=,name=,src},type=,width=",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "^": "Event;error=",
    "%": "ErrorEvent"
  },
  Event: {
    "^": "Interceptor;type=",
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|InstallPhaseEvent|MIDIConnectionEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;Event"
  },
  EventTarget: {
    "^": "Interceptor;",
    addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    "%": ";EventTarget"
  },
  FieldSetElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLFieldSetElement"
  },
  File: {
    "^": "Blob;name=",
    "%": "File"
  },
  FormElement: {
    "^": "HtmlElement;length=,name=",
    length$0: function($receiver) {
      return $receiver.length.call$0();
    },
    "%": "HTMLFormElement"
  },
  HtmlCollection: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;",
    get$response: function(receiver) {
      return W._convertNativeToDart_XHR_Response(receiver.response);
    },
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    "%": ";XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;height=,name=,src},width=",
    "%": "HTMLIFrameElement"
  },
  ImageData: {
    "^": "Interceptor;data=,height=,width=",
    $isImageData: true,
    "%": "ImageData"
  },
  ImageElement: {
    "^": "HtmlElement;height=,src},width=",
    "%": "HTMLImageElement"
  },
  InputElement: {
    "^": "HtmlElement;height=,name=,size=,src},type=,width=",
    $isElement: true,
    "%": "HTMLInputElement"
  },
  KeygenElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLKeygenElement"
  },
  LinkElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLLinkElement"
  },
  Location: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    get$origin: function(receiver) {
      if ("origin" in receiver)
        return receiver.origin;
      return H.S(receiver.protocol) + "//" + H.S(receiver.host);
    },
    "%": "Location"
  },
  MapElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "^": "HtmlElement;error=,src}",
    "%": "HTMLAudioElement;HTMLMediaElement"
  },
  MediaStream: {
    "^": "EventTarget;id=",
    "%": "MediaStream"
  },
  MessageEvent: {
    "^": "Event;",
    get$data: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
    },
    "%": "MessageEvent"
  },
  MetaElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLMetaElement"
  },
  MidiMessageEvent: {
    "^": "Event;data=",
    "%": "MIDIMessageEvent"
  },
  MidiOutput: {
    "^": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "^": "EventTarget;id=,name=,type=",
    "%": "MIDIInput;MIDIPort"
  },
  NavigatorUserMediaError: {
    "^": "Interceptor;name=",
    "%": "NavigatorUserMediaError"
  },
  Node: {
    "^": "EventTarget;text:textContent=",
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }

      return receiver;
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    _replaceChild$2: function(receiver, newChild, oldChild) {
      return receiver.replaceChild(newChild, oldChild);
    },
    "%": "DocumentType|Notation;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "NodeList|RadioNodeList"
  },
  OListElement: {
    "^": "HtmlElement;start%,type=",
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "^": "HtmlElement;data=,height=,name=,type=,width=",
    "%": "HTMLObjectElement"
  },
  OutputElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLParamElement"
  },
  ProgressEvent: {
    "^": "Event;",
    "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
  },
  ScriptElement: {
    "^": "HtmlElement;src},type=",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;length%,name=,selectedIndex=,size=,type=",
    length$0: function($receiver) {
      return $receiver.length.call$0();
    },
    "%": "HTMLSelectElement"
  },
  SourceElement: {
    "^": "HtmlElement;src},type=",
    "%": "HTMLSourceElement"
  },
  SpeechRecognitionError: {
    "^": "Event;error=",
    "%": "SpeechRecognitionError"
  },
  SpeechSynthesisEvent: {
    "^": "Event;name=",
    "%": "SpeechSynthesisEvent"
  },
  StyleElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLStyleElement"
  },
  TextAreaElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLTextAreaElement"
  },
  TextEvent: {
    "^": "UIEvent;data=",
    "%": "TextEvent"
  },
  TrackElement: {
    "^": "HtmlElement;src}",
    "%": "HTMLTrackElement"
  },
  UIEvent: {
    "^": "Event;",
    "%": "DragEvent|FocusEvent|KeyboardEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|SVGZoomEvent|TouchEvent|WheelEvent;UIEvent"
  },
  VideoElement: {
    "^": "MediaElement;height=,width=",
    "%": "HTMLVideoElement"
  },
  Window: {
    "^": "EventTarget;name=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMWindow|Window"
  },
  _Attr: {
    "^": "Node;name=",
    "%": "Attr"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4, hash;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      t4 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4);
      hash = 536870911 & t4 + ((67108863 & t4) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": "ClientRect|DOMRect"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  _ChildrenElementList: {
    "^": "ListBase;_html$_element,_childElements",
    get$isEmpty: function(_) {
      return this._html$_element.firstElementChild == null;
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, index) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      this._html$_element.replaceChild(value, t1[index]);
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      this._html$_element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return new H.ListIterator(t1, t1.length, 0, null);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort element lists"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    fillRange$3: function(_, start, end, fillValue) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    get$first: function(_) {
      var result = this._html$_element.firstElementChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._html$_element.lastElementChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    }
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  HttpRequest_request_closure0: {
    "^": "Closure:96;xhr_0",
    call$2: function(header, value) {
      this.xhr_0.setRequestHeader(header, value);
    }
  },
  HttpRequest_request_closure: {
    "^": "Closure:95;completer_1,xhr_2",
    call$1: function(e) {
      var t1, t2, t3;
      t1 = this.xhr_2;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
      t3 = this.completer_1;
      if (t2) {
        t2 = t3.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
      } else
        t3.completeError$1(e);
    }
  },
  _ChildNodeListLazy: {
    "^": "ListBase;_this",
    get$first: function(_) {
      var result = this._this.firstChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._this.lastChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    add$1: function(_, value) {
      this._this.appendChild(value);
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort Node list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
    },
    fillRange$3: function(_, start, end, fill) {
      throw H.wrapException(P.UnsupportedError$("Cannot fillRange on Node list"));
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $asListBase: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  EventStreamProvider: {
    "^": "Object;_eventType"
  },
  _EventStream: {
    "^": "Stream;_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  },
  _ElementEventStreamImpl: {
    "^": "_EventStream;_target,_eventType,_useCapture"
  },
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
    cancel$0: function() {
      if (this._target == null)
        return;
      this._unlisten$0();
      this._target = null;
      this._onData = null;
      return;
    },
    pause$1: function(_, resumeSignal) {
      if (this._target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      if (this._target == null || this._pauseCount <= 0)
        return;
      --this._pauseCount;
      this._tryResume$0();
    },
    _tryResume$0: function() {
      var t1 = this._onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    }
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    sort$1: function(receiver, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    },
    fillRange$3: function(receiver, start, end, fillValue) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an immutable List."));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_length,_position,_html$_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    }
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  FEBlendElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;type=,height=,width=,x=,y=",
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;type=,height=,width=,x=,y=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    "%": "SVGAElement|SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGImageElement"
  },
  MaskElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGPatternElement"
  },
  RectElement: {
    "^": "GeometryElement;height=,width=,x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement0: {
    "^": "SvgElement;type=",
    "%": "SVGScriptElement"
  },
  StyleElement0: {
    "^": "SvgElement;type=",
    "%": "SVGStyleElement"
  },
  SvgElement: {
    "^": "Element;",
    get$children: function(receiver) {
      return H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [W.Element]);
    },
    get$onChange: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_change._eventType, false), [null]);
    },
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  SvgSvgElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": "SVGTextPathElement;SVGTextContentElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;x=,y=",
    "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
  },
  UseElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGUseElement"
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  ReceivePort_ReceivePort: function() {
    var t1, t2, t3;
    t1 = $.RawReceivePortImpl__nextFreeId;
    $.RawReceivePortImpl__nextFreeId = t1 + 1;
    t2 = new H.RawReceivePortImpl(t1, null, false);
    t3 = init.globalState.currentContext;
    t3._addRegistration$2(t1, t2);
    t3._updateGlobalState$0();
    t3 = new H.ReceivePortImpl(t2, null);
    t3.ReceivePortImpl$fromRawReceivePort$1(t2);
    return t3;
  },
  Isolate_spawnUri_closure: {
    "^": "Closure:95;",
    call$1: function(msg) {
      return new P.Isolate(J.$index$asx(msg, 1), J.$index$asx(msg, 2), J.$index$asx(msg, 3));
    }
  },
  Capability: {
    "^": "Object;",
    $isCapability: true,
    static: {Capability_Capability: function() {
        return new H.CapabilityImpl((Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296);
      }}
  },
  Isolate: {
    "^": "Object;controlPort<,pauseCapability,terminateCapability",
    static: {"^": "Isolate_IMMEDIATE,Isolate_BEFORE_NEXT_EVENT,Isolate_AS_EVENT", Isolate_spawnUri: function(uri, args, message, paused) {
        var i, e, st, t1, t2, exception;
        try {
          t1 = args;
          t2 = H.checkSubtype(t1, "$isList", [J.JSString], "$asList");
          if (t2)
            for (i = 0; J.$lt$n(i, J.get$length$asx(args)); i = J.$add$ns(i, 1)) {
              t1 = J.$index$asx(args, i);
              if (typeof t1 !== "string") {
                t1 = P.ArgumentError$("Args must be a list of Strings " + H.S(args));
                throw H.wrapException(t1);
              }
            }
          else if (args != null) {
            t1 = P.ArgumentError$("Args must be a list of Strings " + H.S(args));
            throw H.wrapException(t1);
          }
          t1 = H.IsolateNatives_spawn(null, J.toString$0(uri), args, message, false, true, paused).then$1(new P.Isolate_spawnUri_closure());
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          st = new H._StackTrace(exception, null);
          return P._Future$immediateError(e, st, P.Isolate);
        }

      }}
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  min: function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0 && C.JSDouble_methods.get$isNegative(b) || C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    var t1;
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0)
      t1 = a === 0 ? 1 / a < 0 : a < 0;
    else
      t1 = false;
    if (t1)
      return b;
    return a;
  },
  _Random: {
    "^": "Object;_lo,_hi",
    _nextState$0: function() {
      var t1, tmpHi, tmpHiLo, tmpLo, tmpLoLo, newLo;
      t1 = this._lo;
      tmpHi = 4294901760 * t1;
      tmpHiLo = (tmpHi & 4294967295) >>> 0;
      tmpLo = 55905 * t1;
      tmpLoLo = (tmpLo & 4294967295) >>> 0;
      newLo = tmpLoLo + tmpHiLo + this._hi;
      t1 = (newLo & 4294967295) >>> 0;
      this._lo = t1;
      this._hi = (C.JSInt_methods._tdivFast$1(tmpLo - tmpLoLo + (tmpHi - tmpHiLo) + (newLo - t1), 4294967296) & 4294967295) >>> 0;
    },
    nextInt$1: function(max) {
      var t1, rnd32, result;
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      t1 = max - 1;
      if ((max & t1) >>> 0 === 0) {
        this._nextState$0();
        return (this._lo & t1) >>> 0;
      }
      do {
        this._nextState$0();
        rnd32 = this._lo;
        result = rnd32 % max;
      } while (rnd32 - result + max >= 4294967296);
      return result;
    },
    nextDouble$0: function() {
      this._nextState$0();
      var t1 = this._lo;
      this._nextState$0();
      return ((t1 & 67108863) * 134217728 + (this._lo & 134217727)) / 9007199254740992;
    },
    _Random$1: function(seed) {
      var empty_seed, low, high, tmplow, low0, t1, t2, t3;
      empty_seed = seed < 0 ? -1 : 0;
      do {
        low = (seed & 4294967295) >>> 0;
        seed = C.JSInt_methods._tdivFast$1(seed - low, 4294967296);
        high = (seed & 4294967295) >>> 0;
        seed = C.JSInt_methods._tdivFast$1(seed - high, 4294967296);
        tmplow = ((~low & 4294967295) >>> 0) + (low << 21 >>> 0);
        low0 = (tmplow & 4294967295) >>> 0;
        high = (~high >>> 0) + ((high << 21 | low >>> 11) >>> 0) + C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296) & 4294967295;
        tmplow = ((low0 ^ (low0 >>> 24 | high << 8)) >>> 0) * 265;
        low = (tmplow & 4294967295) >>> 0;
        high = ((high ^ high >>> 24) >>> 0) * 265 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
        tmplow = ((low ^ (low >>> 14 | high << 18)) >>> 0) * 21;
        low = (tmplow & 4294967295) >>> 0;
        high = ((high ^ high >>> 14) >>> 0) * 21 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
        low = (low ^ (low >>> 28 | high << 4)) >>> 0;
        high = (high ^ high >>> 28) >>> 0;
        tmplow = (low << 31 >>> 0) + low;
        low0 = (tmplow & 4294967295) >>> 0;
        t1 = C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296);
        tmplow = this._lo * 1037;
        t2 = (tmplow & 4294967295) >>> 0;
        this._lo = t2;
        t3 = (this._hi * 1037 + C.JSInt_methods._tdivFast$1(tmplow - t2, 4294967296) & 4294967295) >>> 0;
        this._hi = t3;
        t2 = (t2 ^ low0) >>> 0;
        this._lo = t2;
        t1 = (t3 ^ high + ((high << 31 | low >>> 1) >>> 0) + t1 & 4294967295) >>> 0;
        this._hi = t1;
      } while (seed !== empty_seed);
      if (t1 === 0 && t2 === 0)
        this._lo = 23063;
      this._nextState$0();
      this._nextState$0();
      this._nextState$0();
      this._nextState$0();
    },
    static: {"^": "_Random__POW2_53_D,_Random__POW2_27_D,_Random__MASK32", _Random$: function(seed) {
        var t1 = new P._Random(0, 0);
        t1._Random$1(seed);
        return t1;
      }}
  }
}],
["dart.typed_data", "dart:typed_data", , P, {
  "^": "",
  Uint64List_Uint64List: function($length) {
    throw H.wrapException(P.UnsupportedError$("Uint64List not supported by dart2js."));
  },
  Uint32List: {
    "^": "Object;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  Uint8List: {
    "^": "Object;",
    $isUint8List: true,
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  _checkViewArguments: function(buffer, offsetInBytes, $length) {
    if (!J.getInterceptor(buffer).$isNativeByteBuffer)
      throw H.wrapException(P.ArgumentError$("Invalid view buffer"));
    if (typeof offsetInBytes !== "number" || Math.floor(offsetInBytes) !== offsetInBytes)
      throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
    if ($length != null && (typeof $length !== "number" || Math.floor($length) !== $length))
      throw H.wrapException(P.ArgumentError$("Invalid view length " + H.S($length)));
  },
  _ensureNativeList: function(list) {
    var t1, t2, result, i, t3;
    t1 = J.getInterceptor(list);
    if (!!t1.$isJSIndexable)
      return list;
    t2 = t1.get$length(list);
    if (typeof t2 !== "number")
      return H.iae(t2);
    result = Array(t2);
    result.fixed$length = init;
    t2 = result.length;
    i = 0;
    while (true) {
      t3 = t1.get$length(list);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(i < t3))
        break;
      t3 = t1.$index(list, i);
      if (i >= t2)
        return H.ioore(result, i);
      result[i] = t3;
      ++i;
    }
    return result;
  },
  NativeFloat32List_NativeFloat32List$view: function(buffer, offsetInBytes, $length) {
    H._checkViewArguments(buffer, offsetInBytes, $length);
    return new Float32Array(buffer, offsetInBytes);
  },
  NativeUint32List_NativeUint32List$view: function(buffer, offsetInBytes, $length) {
    H._checkViewArguments(buffer, offsetInBytes, $length);
    return new Uint32Array(buffer, offsetInBytes);
  },
  NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
    H._checkViewArguments(buffer, offsetInBytes, $length);
    return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
  },
  NativeByteBuffer: {
    "^": "Interceptor;",
    $isNativeByteBuffer: true,
    $isByteBuffer: true,
    "%": "ArrayBuffer"
  },
  NativeTypedData: {
    "^": "Interceptor;buffer=,offsetInBytes:byteOffset=",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    _checkSublistArguments$3: function(receiver, start, end, $length) {
      var t1 = $length + 1;
      this._checkIndex$2(receiver, start, t1);
      if (end == null)
        return $length;
      this._checkIndex$2(receiver, end, t1);
      if (J.$gt$n(start, end))
        throw H.wrapException(P.RangeError$range(start, 0, end));
      return end;
    },
    "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeByteData: {
    "^": "NativeTypedData;",
    $isByteData: true,
    "%": "DataView"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    $isUint8List: true,
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": ";Uint8Array"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var t1, count, sourceLength;
      t1 = receiver.length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (J.$gt$n(start, end))
        throw H.wrapException(P.RangeError$range(start, 0, end));
      count = J.$sub$n(end, start);
      if (J.$lt$n(skipCount, 0))
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (typeof skipCount !== "number")
        return H.iae(skipCount);
      if (typeof count !== "number")
        return H.iae(count);
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isNativeTypedArrayOfDouble: true,
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isNativeTypedArrayOfInt: true,
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["dartray", "package:dartray/dartray/dartray.dart", , A, {
  "^": "",
  RenderManagerInterface_RegisterStandardPlugins: function() {
    if ($.get$Plugin__shapes().$index(0, "sphere") != null)
      return;
    $.get$Plugin__accelerators().$indexSet(0, "bvh", E.BVHAccel_Create$closure());
    $.get$Plugin__accelerators().$indexSet(0, "grid", E.GridAccel_Create$closure());
    $.get$Plugin__accelerators().$indexSet(0, "kdtree", E.KdTreeAccel_Create$closure());
    $.get$Plugin__accelerators().$indexSet(0, "bruteforce", E.BruteForceAccel_Create$closure());
    $.get$Plugin__cameras().$indexSet(0, "environment", K.EnvironmentCamera_Create$closure());
    $.get$Plugin__cameras().$indexSet(0, "orthographic", K.OrthographicCamera_Create$closure());
    $.get$Plugin__cameras().$indexSet(0, "perspective", K.PerspectiveCamera_Create$closure());
    $.get$Plugin__films().$indexSet(0, "image", R.ImageFilm_Create$closure());
    $.get$Plugin__filters().$indexSet(0, "box", S.BoxFilter_Create$closure());
    $.get$Plugin__filters().$indexSet(0, "gaussian", S.GaussianFilter_Create$closure());
    $.get$Plugin__filters().$indexSet(0, "sinc", S.LanczosSincFilter_Create$closure());
    $.get$Plugin__filters().$indexSet(0, "mitchell", S.MitchellFilter_Create$closure());
    $.get$Plugin__filters().$indexSet(0, "triangle", S.TriangleFilter_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "ambientocclusion", U.AmbientOcclusionIntegrator_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "diffuseprt", U.DiffusePRTIntegrator_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "directlighting", U.DirectLightingIntegrator_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "glossyprt", U.GlossyPRTIntegrator_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "igi", U.IGIIntegrator_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "irradiancecache", U.IrradianceCacheIntegrator_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "path", U.PathIntegrator_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "photonmap", U.PhotonMapIntegrator_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "exphotonmap", U.PhotonMapIntegrator_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "whitted", U.WhittedIntegrator_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "useprobes", U.UseProbesIntegrator_Create$closure());
    $.get$Plugin__surfaceIntegrators().$indexSet(0, "dipolesubsurface", U.DipoleSubsurfaceIntegrator_Create$closure());
    $.get$Plugin__lights().$indexSet(0, "distant", O.DistantLight_Create$closure());
    $.get$Plugin__lights().$indexSet(0, "point", O.PointLight_Create$closure());
    $.get$Plugin__lights().$indexSet(0, "spot", O.SpotLight_Create$closure());
    $.get$Plugin__lights().$indexSet(0, "infinite", O.InfiniteAreaLight_Create$closure());
    $.get$Plugin__lights().$indexSet(0, "goniometric", O.GoniometricLight_Create$closure());
    $.get$Plugin__lights().$indexSet(0, "projection", O.ProjectionLight_Create$closure());
    $.get$Plugin__areaLights().$indexSet(0, "diffuse", O.DiffuseAreaLight_Create$closure());
    $.get$Plugin__areaLights().$indexSet(0, "area", O.DiffuseAreaLight_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "glass", D.GlassMaterial_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "kdsubsurface", D.KdSubsurfaceMaterial_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "matte", D.MatteMaterial_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "measured", D.MeasuredMaterial_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "metal", D.MetalMaterial_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "mirror", D.MirrorMaterial_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "plastic", D.PlasticMaterial_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "shinymetal", D.ShinyMetalMaterial_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "substrate", D.SubstrateMaterial_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "subsurface", D.SubsurfaceMaterial_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "translucent", D.TranslucentMaterial_Create$closure());
    $.get$Plugin__materials().$indexSet(0, "uber", D.UberMaterial_Create$closure());
    $.get$Plugin__pixelSamplers().$indexSet(0, "linear", F.LinearPixelSampler_Create$closure());
    $.get$Plugin__pixelSamplers().$indexSet(0, "random", F.RandomPixelSampler_Create$closure());
    $.get$Plugin__pixelSamplers().$indexSet(0, "tile", F.TilePixelSampler_Create$closure());
    $.get$Plugin__samplers().$indexSet(0, "adaptive", U.AdaptiveSampler_Create$closure());
    $.get$Plugin__samplers().$indexSet(0, "bestcandidate", U.BestCandidateSampler_Create$closure());
    $.get$Plugin__samplers().$indexSet(0, "halton", U.HaltonSampler_Create$closure());
    $.get$Plugin__samplers().$indexSet(0, "lowdiscrepancy", U.LowDiscrepancySampler_Create$closure());
    $.get$Plugin__samplers().$indexSet(0, "random", U.RandomSampler_Create$closure());
    $.get$Plugin__samplers().$indexSet(0, "stratified", U.StratifiedSampler_Create$closure());
    $.get$Plugin__shapes().$indexSet(0, "cone", M.Cone_Create$closure());
    $.get$Plugin__shapes().$indexSet(0, "cylinder", M.Cylinder_Create$closure());
    $.get$Plugin__shapes().$indexSet(0, "disk", M.Disk_Create$closure());
    $.get$Plugin__shapes().$indexSet(0, "heightfield", M.Heightfield_Create$closure());
    $.get$Plugin__shapes().$indexSet(0, "hyperboloid", M.Hyperboloid_Create$closure());
    $.get$Plugin__shapes().$indexSet(0, "loopsubdiv", M.LoopSubdivision_Create$closure());
    $.get$Plugin__shapes().$indexSet(0, "nurbs", M.Nurbs_Create$closure());
    $.get$Plugin__shapes().$indexSet(0, "paraboloid", M.Paraboloid_Create$closure());
    $.get$Plugin__shapes().$indexSet(0, "sphere", M.Sphere_Create$closure());
    $.get$Plugin__shapes().$indexSet(0, "trianglemesh", M.TriangleMesh_Create$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "bilerp", G.BilerpTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "bilerp", G.BilerpTexture_CreateSpectrum$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "checkerboard", G.CheckerboardTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "checkerboard", G.CheckerboardTexture_CreateSpectrum$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "constant", G.ConstantTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "constant", G.ConstantTexture_CreateSpectrum$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "dots", G.DotsTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "dots", G.DotsTexture_CreateSpectrum$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "fbm", G.FBmTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "fbm", G.FBmTexture_CreateSpectrum$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "imagemap", G.ImageTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "imagemap", G.ImageTexture_CreateSpectrum$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "marble", G.MarbleTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "marble", G.MarbleTexture_CreateSpectrum$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "mix", G.MixTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "mix", G.MixTexture_CreateSpectrum$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "scale", G.ScaleTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "scale", G.ScaleTexture_CreateSpectrum$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "uv", G.UVTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "uv", G.UVTexture_CreateSpectrum$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "windy", G.WindyTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "windy", G.WindyTexture_CreateSpectrum$closure());
    $.get$Plugin__floatTextures().$indexSet(0, "wrinkled", G.WrinkledTexture_CreateFloat$closure());
    $.get$Plugin__spectrumTextures().$indexSet(0, "wrinkled", G.WrinkledTexture_CreateSpectrum$closure());
    $.get$Plugin__volumeIntegrators().$indexSet(0, "emission", S.EmissionIntegrator_Create$closure());
    $.get$Plugin__volumeIntegrators().$indexSet(0, "single", S.SingleScatteringIntegrator_Create$closure());
    $.get$Plugin__volumeRegions().$indexSet(0, "exponential", B.ExponentialDensityRegion_Create$closure());
    $.get$Plugin__volumeRegions().$indexSet(0, "homogeneous", B.HomogeneousVolumeRegion_Create$closure());
    $.get$Plugin__volumeRegions().$indexSet(0, "volumegrid", B.VolumeGridDensity_Create$closure());
  },
  DartRay: {
    "^": "Object;resourceManager,overrides,outputImage,_currentApiState,_curTransform,_activeTransformBits,_namedCoordinateSystems,_renderOptions,_graphicsState,_pushedGraphicsStates,_pushedTransforms,_pushedActiveTransformBits,_renders",
    static: {"^": "DartRay_MAX_TRANSFORMS,DartRay_START_TRANSFORM_BITS,DartRay_END_TRANSFORM_BITS,DartRay_ALL_TRANSFORMS_BITS,DartRay_STATE_UNINITIALIZED,DartRay_STATE_OPTIONS_BLOCK,DartRay_STATE_WORLD_BLOCK"}
  },
  GraphicsState: {
    "^": "Object;doubleTextures,spectrumTextures,materialParams,material,namedMaterials,currentNamedMaterial,areaLightParams,areaLight,reverseOrientation"
  },
  RenderManagerInterface: {
    "^": "ResourceManager;",
    render$6$isolate$log$numThreads$overrides$preview: function(path, isolate, log, numThreads, overrides, preview) {
      var t1, i, t2, completer, box_0, box_00, t3, t4, result;
      t1 = {};
      $.Log = log;
      if (C.JSString_methods.contains$1(path, "/")) {
        i = C.JSString_methods.lastIndexOf$1(path, "/");
        this.scenePath = C.JSString_methods.substring$2(path, 0, i);
        path = C.JSString_methods.substring$1(path, i + 1);
      }
      t2 = G.OutputImage;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
      t1.tasksRemaining_1 = numThreads;
      this.isolates = H.setRuntimeTypeInfo(Array(numThreads), [A.RenderTask]);
      box_0 = {};
      for (box_0.i_0 = 0; t2 = box_0.i_0, t2 < numThreads; box_00 = {}, t2 = box_0.i_0, box_00.i_0 = t2, box_00.i_0 = t2 + 1, box_0 = box_00) {
        t3 = this.isolates;
        t4 = P.ReceivePort_ReceivePort();
        if (t2 >= t3.length)
          return H.ioore(t3, t2);
        t3[t2] = new A.RenderTask(1, t4, null, preview, null, t2, numThreads);
        t2 = this.isolates;
        t4 = box_0.i_0;
        if (t4 >= t2.length)
          return H.ioore(t2, t4);
        t4 = t2[t4].render$3$overrides(path, isolate, overrides);
        t2 = $.Zone__current;
        t2.toString;
        result = new P._Future(0, t2, null, null, new A.RenderManagerInterface_render_closure(t1, this, numThreads, completer), null, P._registerErrorHandler(new A.RenderManagerInterface_render_closure0(box_0, t1), t2), null);
        result.$builtinTypeInfo = [null];
        t4._addListener$1(result);
      }
      return completer.future;
    },
    render$5$isolate$log$overrides$preview: function(path, isolate, log, overrides, preview) {
      return this.render$6$isolate$log$numThreads$overrides$preview(path, isolate, log, 1, overrides, preview);
    }
  },
  RenderManagerInterface_render_closure1: {
    "^": "Closure:95;completer_2",
    call$1: function(output) {
      var t1 = this.completer_2.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(output);
    }
  },
  RenderManagerInterface_render_closure: {
    "^": "Closure:95;box_1,this_3,numThreads_4,completer_5",
    call$1: function(output) {
      var t1, t2, y, t3, pi, x, t4, t5, t6, t7;
      if (this.numThreads_4 > 1) {
        t1 = this.this_3;
        t2 = t1.renderOutput;
        if (t2 == null || !J.$eq(t2.get$imageWidth(), output.get$imageWidth()) || !J.$eq(t1.renderOutput.get$imageHeight(), output.imageHeight))
          t1.renderOutput = G.OutputImage$(0, 0, output.get$imageWidth(), output.imageHeight, null, null, null);
        t2 = J.getInterceptor$x(output);
        y = 0;
        while (true) {
          t3 = t2.get$height(output);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(y < t3))
            break;
          pi = J.$add$ns(J.$mul$ns(J.$mul$ns(J.$add$ns(output.get$yOffset(), y), t1.renderOutput.get$imageWidth()), 3), J.$mul$ns(output.get$xOffset(), 3));
          x = 0;
          while (true) {
            t3 = t2.get$width(output);
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(x < t3))
              break;
            J.$indexSet$ax(t1.renderOutput.get$rgb(), pi, J.$index$asx(output.get$rgb(), pi));
            t3 = t1.renderOutput.get$rgb();
            t4 = J.getInterceptor$ns(pi);
            t5 = t4.$add(pi, 1);
            t6 = output.rgb;
            t7 = J.getInterceptor$asx(t6);
            J.$indexSet$ax(t3, t5, t7.$index(t6, t4.$add(pi, 1)));
            J.$indexSet$ax(t1.renderOutput.get$rgb(), t4.$add(pi, 2), t7.$index(t6, t4.$add(pi, 2)));
            ++x;
            pi = t4.$add(pi, 3);
          }
          ++y;
        }
      } else
        this.this_3.renderOutput = output;
      if (--this.box_1.tasksRemaining_1 === 0) {
        t1 = this.this_3.renderOutput;
        t2 = this.completer_5.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
      }
    }
  },
  RenderManagerInterface_render_closure0: {
    "^": "Closure:95;box_0,box_1",
    call$1: function(msg) {
      var t1 = "ERROR Thread " + this.box_0.i_0 + ": " + H.S(msg);
      $.Log.call$2(2, t1);
      --this.box_1.tasksRemaining_1;
    }
  },
  RenderOptions: {
    "^": "Object;transformStartTime,transformEndTime,filterName,filterParams,filmName,filmParams,previewCallback,pixelSamplerName,pixelSamplerParams,samplerName,samplerParams,acceleratorName,acceleratorParams,rendererName,rendererParams,surfaceIntegratorName,surfaceIntegratorParams,volumeIntegratorName,volumeIntegratorParams,cameraName,cameraParams,cameraToWorld,lights,primitives,volumeRegions,instances,currentInstance,taskNum,taskCount",
    RenderOptions$0: function() {
      this.transformStartTime = 0;
      this.transformEndTime = 1;
      this.filterName = "box";
      this.filmName = "image";
      this.pixelSamplerName = "tile";
      this.samplerName = "lowdiscrepancy";
      this.acceleratorName = "bvh";
      this.rendererName = "sampler";
      this.surfaceIntegratorName = "directlighting";
      this.volumeIntegratorName = "emission";
      this.cameraName = "perspective";
      this.currentInstance = null;
      this.taskNum = 0;
      this.taskCount = 1;
    },
    static: {RenderOptions$: function() {
        var t1 = new A.RenderOptions(null, null, null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, new G.ParamSet([], [], [], [], [], [], [], [], []), null, [], [], [], P.LinkedHashMap_LinkedHashMap$_empty(null, null), [], null, null);
        t1.RenderOptions$0();
        return t1;
      }}
  },
  RenderTask: {
    "^": "Object;status,receivePort,sendPort,previewCallback,overrides,taskNum,taskCount",
    previewCallback$1: function(arg0) {
      return this.previewCallback.call$1(arg0);
    },
    render$3$overrides: function(scene, isolateUri, overrides) {
      var t1, completer;
      t1 = G.OutputImage;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
      this.overrides = overrides;
      t1 = this.receivePort;
      P.Isolate_spawnUri(P.Uri_parse(isolateUri), ["_"], new H._NativeJsSendPort(t1._rawPort, init.globalState.currentContext.id), false).then$1(new A.RenderTask_render_closure());
      t1 = t1._controller;
      t1.toString;
      H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null]).listen$4$cancelOnError$onDone$onError(new A.RenderTask_render_closure0(this, scene, completer), null, null, null);
      return completer.future;
    },
    _updatePreviewImage$2: function(extents, bytes) {
      var t1, src, dst, w, dsti, y, t2, t3;
      t1 = J.getInterceptor(bytes);
      if (!!t1.$isUint8List)
        src = H.NativeUint32List_NativeUint32List$view(t1.get$buffer(bytes), 0, null);
      else {
        t1 = H.checkSubtype(bytes, "$isList", [J.JSInt], "$asList");
        if (t1)
          src = H.NativeUint32List_NativeUint32List$view(new Uint8Array(H._ensureNativeList(bytes)).buffer, 0, null);
        else
          return;
      }
      dst = $.RenderTask_previewImage.data;
      t1 = J.getInterceptor$asx(extents);
      w = J.$sub$n(t1.$index(extents, 1), t1.$index(extents, 0));
      dsti = J.$add$ns(J.$mul$ns(t1.$index(extents, 2), $.RenderTask_previewImage.width), t1.$index(extents, 0));
      for (y = t1.$index(extents, 2); t2 = J.getInterceptor$n(y), t2.$lt(y, t1.$index(extents, 3)); y = t2.$add(y, 1), dsti = t3.$add(dsti, $.RenderTask_previewImage.width)) {
        t3 = J.getInterceptor$ns(dsti);
        C.NativeUint32List_methods.setRange$4(dst, dsti, t3.$add(dsti, w), src, dsti);
      }
    },
    static: {"^": "RenderTask_CONNECTING,RenderTask_CONNECTED,RenderTask_STOPPED,RenderTask_previewImage"}
  },
  RenderTask_render_closure: {
    "^": "Closure:95;",
    call$1: function(isolate) {
    }
  },
  RenderTask_render_closure0: {
    "^": "Closure:95;this_0,scene_1,completer_2",
    call$1: function(msg) {
      var t1, t2, t3, cmd, id, subMsg, path, bytes, extents, res, rgb, w, h, output;
      t1 = this.this_0;
      t2 = t1.status;
      if (t2 === 1) {
        if (!!J.getInterceptor(msg).$isSendPort) {
          t1.sendPort = msg;
          t1.status = 2;
          t2 = t1.taskNum;
          t3 = t1.taskCount;
          cmd = P.LinkedHashMap_LinkedHashMap$_literal(["cmd", "render", "scene", this.scene_1, "taskNum", t2, "taskCount", t3, "preview", true], null, null);
          t2 = t1.overrides;
          if (t2 != null)
            cmd.$indexSet(0, "overrides", t2.toJson$0());
          t1.sendPort.send$1(0, cmd);
        }
      } else if (t2 === 2) {
        t2 = J.getInterceptor(msg);
        if (!!t2.$isMap && msg.containsKey$1("cmd") === true) {
          cmd = t2.$index(msg, "cmd");
          t3 = J.getInterceptor(cmd);
          if (t3.$eq(cmd, "request")) {
            id = t2.$index(msg, "id");
            subMsg = t2.$index(msg, "msg");
            t2 = J.getInterceptor(subMsg);
            if (!!t2.$isMap && subMsg.containsKey$1("cmd") === true)
              if (J.$eq(t2.$index(subMsg, "cmd"), "file")) {
                path = t2.$index(subMsg, "path");
                $.ResourceManager_global.requestFile$2(path, null).then$1(new A.RenderTask_render__closure(t1, id));
              }
            return;
          } else if (t3.$eq(cmd, "preview") && msg.containsKey$1("image") === true) {
            bytes = t2.$index(msg, "image");
            extents = t2.$index(msg, "extents");
            res = t2.$index(msg, "res");
            if (res == null)
              return;
            t2 = $.RenderTask_previewImage;
            if (t2 != null) {
              t3 = J.getInterceptor$asx(res);
              t2 = !J.$eq(t2.width, t3.$index(res, 0)) || !J.$eq($.RenderTask_previewImage.height, t3.$index(res, 1));
            } else
              t2 = true;
            if (t2) {
              t2 = J.getInterceptor$asx(res);
              t2 = U.Image$(t2.$index(res, 0), t2.$index(res, 1), 4);
              $.RenderTask_previewImage = t2;
              t2 = t2.data;
              C.NativeUint32List_methods.fillRange$3(t2, 0, t2.length, U.getColor(128, 128, 128, 255));
            }
            if (t1.taskCount > 1)
              t1._updatePreviewImage$2(extents, bytes);
            else
              C.NativeUint8List_methods.setRange$3(H.NativeUint8List_NativeUint8List$view($.RenderTask_previewImage.data.buffer, 0, null), 0, J.get$length$asx(bytes), bytes);
            t1.previewCallback$1($.RenderTask_previewImage);
            return;
          } else if (t3.$eq(cmd, "error")) {
            t1 = "ERROR: " + H.S(t2.$index(msg, "msg"));
            $.Log.call$2(0, t1);
            this.completer_2.completeError$1(t2.$index(msg, "msg"));
            return;
          } else if (t3.$eq(cmd, "final") && msg.containsKey$1("output") === true) {
            rgb = t2.$index(msg, "output");
            extents = t2.$index(msg, "extents");
            res = t2.$index(msg, "res");
            t1 = J.getInterceptor$asx(extents);
            w = J.$sub$n(t1.$index(extents, 1), t1.$index(extents, 0));
            h = J.$sub$n(t1.$index(extents, 3), t1.$index(extents, 2));
            t2 = J.getInterceptor$asx(res);
            output = G.OutputImage$(t1.$index(extents, 0), t1.$index(extents, 2), w, h, t2.$index(res, 0), t2.$index(res, 1), rgb);
            t1 = this.completer_2.future;
            if (t1._state !== 0)
              H.throwExpression(P.StateError$("Future already completed"));
            t1._asyncComplete$1(output);
            return;
          }
        }
        t1 = t2.toString$0(msg);
        $.Log.call$2(0, t1);
      }
    }
  },
  RenderTask_render__closure: {
    "^": "Closure:95;this_3,id_4",
    call$1: function(bytes) {
      var data = P.LinkedHashMap_LinkedHashMap$_literal(["cmd", "request", "id", this.id_4, "data", bytes], null, null);
      this.this_3.sendPort.send$1(0, data);
    }
  },
  TransformSet: {
    "^": "Object;t<",
    $index: function(_, i) {
      var t1 = this.t;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, transform) {
      var t1 = this.t;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      t1[i] = transform;
    },
    TransformSet$0: function() {
      for (var i = 0; i < 2; ++i)
        this.t[i] = G.Transform$(null, null);
    },
    static: {TransformSet$: function() {
        var t1 = Array(2);
        t1.fixed$length = init;
        t1 = new A.TransformSet(H.setRuntimeTypeInfo(t1, [G.Transform]));
        t1.TransformSet$0();
        return t1;
      }}
  }
}],
["dartray_web", "package:dartray/dartray_web.dart", , T, {
  "^": "",
  RenderManager: {
    "^": "RenderManagerInterface;dartray,isolate,scenePath,renderOutput,isolates,includePaths,futures,resources,textures",
    loadFile$2: function(path, future) {
      var t1, c;
      t1 = [J.JSArray, J.JSInt];
      c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
      this._loadFile$1(path).then$1(new T.RenderManager_loadFile_closure(c)).catchError$1(new T.RenderManager_loadFile_closure0(c));
      return c.future;
    },
    loadFile$1: function(path) {
      return this.loadFile$2(path, null);
    },
    _loadFile$1: function(path) {
      var t1, t2, c;
      t1 = {};
      t1.path_0 = path;
      t2 = [J.JSArray, J.JSInt];
      c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
      path = C.JSString_methods.$add(this.scenePath + "/", t1.path_0);
      t1.path_0 = path;
      W.HttpRequest_request(path, "GET", "text/plain; charset=x-user-defined", null, null, null, null, null).then$1(new T.RenderManager__loadFile_closure(c)).catchError$1(new T.RenderManager__loadFile_closure0(t1));
      return c.future;
    }
  },
  RenderManager_loadFile_closure: {
    "^": "Closure:95;c_0",
    call$1: function(bytes) {
      var t1 = this.c_0.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(bytes);
    }
  },
  RenderManager_loadFile_closure0: {
    "^": "Closure:95;c_1",
    call$1: function(e) {
      var t1 = J.toString$0(e);
      $.Log.call$2(2, t1);
      t1 = this.c_1.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  RenderManager__loadFile_closure1: {
    "^": "Closure:95;c_1",
    call$1: function(bytes) {
      var t1, t2;
      t1 = bytes.get$codeUnits(bytes);
      t2 = this.c_1.future;
      if (t2._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1);
      return;
    }
  },
  RenderManager__loadFile_closure: {
    "^": "Closure:95;c_2",
    call$1: function(resp) {
      var t1, bytes, t2;
      t1 = J.get$response$x(resp);
      if (typeof t1 === "string") {
        bytes = new Uint8Array(H._ensureNativeList(J.get$codeUnits$s(W._convertNativeToDart_XHR_Response(resp.response))));
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(bytes);
        return;
      } else if (!!J.getInterceptor(W._convertNativeToDart_XHR_Response(resp.response)).$isByteBuffer) {
        t1 = H.NativeUint8List_NativeUint8List$view(W._convertNativeToDart_XHR_Response(resp.response), 0, null);
        t2 = this.c_2.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
        return;
      } else {
        t1 = W._convertNativeToDart_XHR_Response(resp.response);
        t2 = H.checkSubtype(t1, "$isList", [J.JSInt], "$asList");
        if (t2) {
          t1 = W._convertNativeToDart_XHR_Response(resp.response);
          t2 = this.c_2.future;
          if (t2._state !== 0)
            H.throwExpression(P.StateError$("Future already completed"));
          t2._asyncComplete$1(t1);
          return;
        } else
          $.Log.call$2(2, "Unknown HttpRequest response type");
      }
    }
  },
  RenderManager__loadFile_closure0: {
    "^": "Closure:95;box_0",
    call$1: function(e) {
      var t1 = "Error Loading Resource " + H.S(this.box_0.path_0);
      $.Log.call$2(2, t1);
    }
  }
}],
["film", "package:dartray/film/film.dart", , R, {
  "^": "",
  ImageFilm: {
    "^": "Film;cropWindow,filename,previewCallback,output,samplesProcessed,previewCount,filter,left,top,width>,height>,image,_Lxyz,_splatXYZ,_weightSum,_filterTable,_gamma,xResolution,yResolution,splatScale",
    previewCallback$1: function(arg0) {
      return this.previewCallback.call$1(arg0);
    },
    ImageFilm$6: function(xres, yres, filter, cropWindow, filename, previewCallback) {
      var t1, i, t2, t3, t4, fi, y, fy, x, fi0;
      for (t1 = this._gamma, i = 0; i < 256; ++i)
        t1[i] = C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(Math.floor(Math.pow(i / 255, 0.45454545454545453) * 255)), 0, 255);
      t1 = this.xResolution;
      t2 = this.cropWindow;
      t3 = J.getInterceptor$asx(t2);
      t4 = t3.$index(t2, 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      this.left = C.JSNumber_methods.toInt$0(Math.ceil(t1 * t4));
      t4 = t3.$index(t2, 1);
      if (typeof t4 !== "number")
        return H.iae(t4);
      this.width = P.max(1, C.JSNumber_methods.toInt$0(Math.ceil(t1 * t4)) - this.left);
      t4 = this.yResolution;
      t1 = t3.$index(t2, 2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.top = C.JSNumber_methods.toInt$0(Math.ceil(t4 * t1));
      t2 = t3.$index(t2, 3);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = P.max(1, C.JSNumber_methods.toInt$0(Math.ceil(t4 * t2)) - this.top);
      this.height = t2;
      t4 = this.width;
      this.previewCount = t4 * 12;
      t2 = t4 * t2 * 3;
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      this._Lxyz = new Float32Array(t2);
      t1 = this.width * this.height * 3;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this._splatXYZ = new Float32Array(t1);
      t1 = this.width * this.height;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      this._weightSum = new Float32Array(t1);
      this._filterTable = new Float32Array(256);
      for (fi = 0, y = 0; y < 16; ++y) {
        t1 = this.filter.get$yWidth();
        if (typeof t1 !== "number")
          return H.iae(t1);
        fy = (y + 0.5) * t1 / 16;
        for (x = 0; x < 16; ++x, fi = fi0) {
          t1 = this.filter;
          t2 = t1.get$xWidth();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = this._filterTable;
          fi0 = fi + 1;
          t2 = t1.evaluate$2((x + 0.5) * t2 / 16, fy);
          if (fi < 0 || fi >= t3.length)
            return H.ioore(t3, fi);
          t3[fi] = t2;
        }
      }
      t1 = U.Image$(this.width, this.height, 4);
      this.image = t1;
      t1 = t1.data;
      C.NativeUint32List_methods.fillRange$3(t1, 0, t1.length, 4287137928);
      t1 = "FILM " + this.left + " " + this.top + " " + H.S(this.width) + " " + H.S(this.height);
      $.Log.call$2(0, t1);
      t1 = this.left;
      t2 = this.top;
      t3 = this.width;
      t4 = this.height;
      this.output = G.OutputImage$(t1, t2, t3, t4, t3, t4, null);
      if (this.previewCallback != null)
        this.previewCallback$1(this.image);
    },
    static: {"^": "ImageFilm_FILTER_TABLE_SIZE", ImageFilm$: function(xres, yres, filter, cropWindow, filename, previewCallback) {
        var t1 = new R.ImageFilm(cropWindow, filename, previewCallback, null, 0, null, filter, null, null, null, null, null, null, null, null, null, new Uint8Array(256), xres, yres, 1);
        t1.ImageFilm$6(xres, yres, filter, cropWindow, filename, previewCallback);
        return t1;
      }, ImageFilm_Create: [function(params, filter, previewCallback) {
        var xres, yres, filename, crop;
        xres = params.findOneInt$2("xresolution", 640);
        yres = params.findOneInt$2("yresolution", 480);
        filename = params.findOneString$2("filename", "");
        crop = params.findFloat$1("cropWindow");
        if (crop == null)
          crop = [0, 1, 0, 1];
        return R.ImageFilm$(J.toInt$0$n(J.$mul$ns(xres, G.RenderOverrides_ResolutionScale())), J.toInt$0$n(J.$mul$ns(yres, G.RenderOverrides_ResolutionScale())), filter, crop, filename, previewCallback);
      }, function(params, filter) {
        return R.ImageFilm_Create(params, filter, null);
      }, null, "call$3", "call$2", "ImageFilm_Create$closure", 4, 2, 20, 14]}
  }
}],
["filters", "package:dartray/filters/filters.dart", , S, {
  "^": "",
  BoxFilter: {
    "^": "Filter;xWidth,yWidth,invXWidth,invYWidth",
    evaluate$2: function(x, y) {
      return 1;
    },
    static: {BoxFilter_Create: [function(ps) {
        var xw, yw;
        xw = ps.findOneFloat$2("xwidth", 0.5);
        yw = ps.findOneFloat$2("ywidth", 0.5);
        if (typeof xw !== "number")
          return H.iae(xw);
        if (typeof yw !== "number")
          return H.iae(yw);
        return new S.BoxFilter(xw, yw, 1 / xw, 1 / yw);
      }, "call$1", "BoxFilter_Create$closure", 2, 0, 21]}
  },
  GaussianFilter: {
    "^": "Filter;alpha,expX,expY,xWidth,yWidth,invXWidth,invYWidth",
    evaluate$2: function(x, y) {
      return this._gaussian$2(x, this.expX) * this._gaussian$2(y, this.expY);
    },
    _gaussian$2: function(d, expv) {
      var t1 = J.$mul$ns(J.$mul$ns(J.$negate$n(this.alpha), d), d);
      if (typeof t1 !== "number")
        H.throwExpression(P.ArgumentError$(t1));
      return P.max(0, Math.exp(t1) - expv);
    },
    static: {GaussianFilter_Create: [function(ps) {
        var xw, yw, alpha, t1, t2;
        xw = ps.findOneFloat$2("xwidth", 2);
        yw = ps.findOneFloat$2("ywidth", 2);
        alpha = ps.findOneFloat$2("alpha", 2);
        if (typeof xw !== "number")
          return H.iae(xw);
        if (typeof yw !== "number")
          return H.iae(yw);
        t1 = J.getInterceptor$n(alpha);
        t2 = J.$mul$ns(J.$mul$ns(t1.$negate(alpha), xw), xw);
        if (typeof t2 !== "number")
          H.throwExpression(P.ArgumentError$(t2));
        t2 = Math.exp(t2);
        t1 = J.$mul$ns(J.$mul$ns(t1.$negate(alpha), yw), yw);
        if (typeof t1 !== "number")
          H.throwExpression(P.ArgumentError$(t1));
        return new S.GaussianFilter(alpha, t2, Math.exp(t1), xw, yw, 1 / xw, 1 / yw);
      }, "call$1", "GaussianFilter_Create$closure", 2, 0, 22]}
  },
  LanczosSincFilter: {
    "^": "Filter;tau,xWidth,yWidth,invXWidth,invYWidth",
    evaluate$2: function(x, y) {
      return this._sinc1D$1(x * this.invXWidth) * this._sinc1D$1(y * this.invYWidth);
    },
    _sinc1D$1: function(x) {
      var t1, t2;
      x = Math.abs(x);
      if (x < 0.00001)
        return 1;
      if (x > 1)
        return 0;
      x *= 3.141592653589793;
      t1 = Math.sin(x);
      t2 = this.tau;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = x * t2;
      return t1 / x * (Math.sin(t2) / t2);
    },
    static: {LanczosSincFilter_Create: [function(ps) {
        var xw, yw, tau;
        xw = ps.findOneFloat$2("xwidth", 4);
        yw = ps.findOneFloat$2("ywidth", 4);
        tau = ps.findOneFloat$2("tau", 3);
        if (typeof xw !== "number")
          return H.iae(xw);
        if (typeof yw !== "number")
          return H.iae(yw);
        return new S.LanczosSincFilter(tau, xw, yw, 1 / xw, 1 / yw);
      }, "call$1", "LanczosSincFilter_Create$closure", 2, 0, 23]}
  },
  MitchellFilter: {
    "^": "Filter;b,c<,xWidth,yWidth,invXWidth,invYWidth",
    evaluate$2: function(x, y) {
      return J.$mul$ns(this._mitchell1D$1(x * this.invXWidth), this._mitchell1D$1(y * this.invYWidth));
    },
    _mitchell1D$1: function(x) {
      var t1, t2, t3;
      x = Math.abs(2 * x);
      t1 = this.b;
      if (x > 1) {
        t1 = J.$negate$n(t1);
        t2 = this.c;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$sub$n(t1, 6 * t2), x), x), x);
        t1 = this.b;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t3 = this.c;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = J.$add$ns(t2, (6 * t1 + 30 * t3) * x * x);
        t1 = this.b;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.c;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = J.$add$ns(t3, (-12 * t1 - 48 * t2) * x);
        t1 = this.b;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t3 = this.c;
        if (typeof t3 !== "number")
          return H.iae(t3);
        return J.$mul$ns(J.$add$ns(t2, 8 * t1 + 24 * t3), 0.16666666666666666);
      } else {
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.c;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = 6 * t2;
        return ((12 - 9 * t1 - t2) * x * x * x + (-18 + 12 * t1 + t2) * x * x + (6 - 2 * t1)) * 0.16666666666666666;
      }
    },
    static: {MitchellFilter_Create: [function(ps) {
        var xw, yw, $B, $C;
        xw = ps.findOneFloat$2("xwidth", 2);
        yw = ps.findOneFloat$2("ywidth", 2);
        $B = ps.findOneFloat$2("B", 0.3333333333333333);
        $C = ps.findOneFloat$2("C", 0.3333333333333333);
        if (typeof xw !== "number")
          return H.iae(xw);
        if (typeof yw !== "number")
          return H.iae(yw);
        return new S.MitchellFilter($B, $C, xw, yw, 1 / xw, 1 / yw);
      }, "call$1", "MitchellFilter_Create$closure", 2, 0, 24]}
  },
  TriangleFilter: {
    "^": "Filter;xWidth,yWidth,invXWidth,invYWidth",
    evaluate$2: function(x, y) {
      return P.max(0, J.$sub$n(this.xWidth, Math.abs(x))) * P.max(0, J.$sub$n(this.yWidth, Math.abs(y)));
    },
    static: {TriangleFilter_Create: [function(ps) {
        var xw, yw;
        xw = ps.findOneFloat$2("xwidth", 2);
        yw = ps.findOneFloat$2("ywidth", 2);
        if (typeof xw !== "number")
          return H.iae(xw);
        if (typeof yw !== "number")
          return H.iae(yw);
        return new S.TriangleFilter(xw, yw, 1 / xw, 1 / yw);
      }, "call$1", "TriangleFilter_Create$closure", 2, 0, 25]}
  }
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
    var copies = [];
    return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
  },
  convertNativeToDart_ImageData: function(nativeImageData) {
    var t1, data;
    t1 = J.getInterceptor(nativeImageData);
    if (!!t1.$isImageData) {
      data = t1.get$data(nativeImageData);
      if (data.constructor === Array)
        if (typeof CanvasPixelArray !== "undefined") {
          data.constructor = CanvasPixelArray;
          data.BYTES_PER_ELEMENT = 1;
        }
      return nativeImageData;
    }
    return new P._TypedImageData(nativeImageData.data, nativeImageData.height, nativeImageData.width);
  },
  convertDartToNative_ImageData: function(imageData) {
    if (!!J.getInterceptor(imageData).$is_TypedImageData)
      return {data: imageData.data, height: imageData.height, width: imageData.width};
    return imageData;
  },
  Device_isWebKit: function() {
    var t1 = $.Device__isWebKit;
    if (t1 == null) {
      t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      t1 = t1 !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      $.Device__isWebKit = t1;
    }
    return t1;
  },
  convertNativeToDart_AcceptStructuredClone_findSlot: {
    "^": "Closure:16;values_0,copies_1",
    call$1: function(value) {
      var t1, $length, i, t2;
      t1 = this.values_0;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this.copies_1.push(null);
      return $length;
    }
  },
  convertNativeToDart_AcceptStructuredClone_readSlot: {
    "^": "Closure:118;copies_2",
    call$1: function(i) {
      var t1 = this.copies_2;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    }
  },
  convertNativeToDart_AcceptStructuredClone_writeSlot: {
    "^": "Closure:119;copies_3",
    call$2: function(i, x) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    }
  },
  convertNativeToDart_AcceptStructuredClone_walk: {
    "^": "Closure:95;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var slot, copy, t1, key, $length, t2, i;
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (Object.getPrototypeOf(e) === Object.prototype) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.writeSlot_7.call$2(slot, copy);
        for (t1 = Object.keys(e), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          key = t1._current;
          copy.$indexSet(0, key, this.call$1(e[key]));
        }
        return copy;
      }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = this.mustCopy_4 ? new Array($length) : e;
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
        return copy;
      }
      return e;
    }
  },
  _TypedImageData: {
    "^": "Object;data>,height>,width>",
    $is_TypedImageData: true,
    $isImageData: true
  },
  FilteredElementList: {
    "^": "ListBase;_node,_childNodes",
    get$_filtered: function() {
      var t1 = this._childNodes;
      return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
    },
    forEach$1: function(_, f) {
      H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
    },
    $indexSet: function(_, index, value) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      J.replaceWith$1$x(t1[index], value);
    },
    set$length: function(_, newLength) {
      var len, t1;
      len = this.get$_filtered().length;
      t1 = J.getInterceptor$n(newLength);
      if (t1.$ge(newLength, len))
        return;
      else if (t1.$lt(newLength, 0))
        throw H.wrapException(P.ArgumentError$("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(value);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort filtered list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
    },
    fillRange$3: function(_, start, end, fillValue) {
      throw H.wrapException(P.UnsupportedError$("Cannot fillRange on filtered list"));
    },
    removeRange$2: function(_, start, end) {
      H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
    },
    get$length: function(_) {
      return this.get$_filtered().length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, index) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$iterator: function(_) {
      var t1 = this.get$_filtered();
      return new H.ListIterator(t1, t1.length, 0, null);
    }
  },
  FilteredElementList__filtered_closure: {
    "^": "Closure:95;",
    call$1: function(n) {
      return !!J.getInterceptor(n).$isElement;
    }
  },
  FilteredElementList_removeRange_closure: {
    "^": "Closure:95;",
    call$1: function(el) {
      return J.remove$0$ax(el);
    }
  }
}],
["image", "package:image/image.dart", , U, {
  "^": "",
  getColor: function(r, g, b, a) {
    var t1, t2, t3, t4;
    t1 = J.clamp$2$n(a, 0, 255);
    if (typeof t1 !== "number")
      return t1.$shl();
    t2 = J.clamp$2$n(b, 0, 255);
    if (typeof t2 !== "number")
      return t2.$shl();
    t3 = J.clamp$2$n(g, 0, 255);
    if (typeof t3 !== "number")
      return t3.$shl();
    t4 = J.clamp$2$n(r, 0, 255);
    if (typeof t4 !== "number")
      return H.iae(t4);
    return (t1 << 24 | t2 << 16 | t3 << 8 | t4) >>> 0;
  },
  adjustColor: function(src, amount, blacks, brightness, contrast, exposure, gamma, hue, mids, saturation, whites) {
    var pixels, len, i, or, t1, og, t2, ob, b, g, r;
    pixels = H.NativeUint8List_NativeUint8List$view(src.data.buffer, 0, null);
    for (len = pixels.length, i = 0; i < len; i += 4) {
      or = pixels[i] / 255;
      t1 = i + 1;
      if (t1 >= len)
        return H.ioore(pixels, t1);
      og = pixels[t1] / 255;
      t2 = i + 2;
      if (t2 >= len)
        return H.ioore(pixels, t2);
      ob = pixels[t2] / 255;
      b = ob;
      g = og;
      r = or;
      r = Math.pow(r, gamma);
      g = Math.pow(g, gamma);
      b = Math.pow(b, gamma);
      pixels[i] = C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(r * 255), 0, 255);
      pixels[t1] = C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(g * 255), 0, 255);
      pixels[t2] = C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(b * 255), 0, 255);
    }
    return src;
  },
  ExrCompressor_ExrCompressor: function(type, hdr, maxScanLineSize, numScanLines) {
    var t1;
    switch (type) {
      case 1:
        return new U.ExrRleCompressor(null, maxScanLineSize, 0, 0, hdr);
      case 2:
        t1 = numScanLines == null ? 1 : numScanLines;
        return new U.ExrZipCompressor(new T.ZLibDecoder(), maxScanLineSize, t1, null, 0, 0, hdr);
      case 3:
        t1 = numScanLines == null ? 16 : numScanLines;
        return new U.ExrZipCompressor(new T.ZLibDecoder(), maxScanLineSize, t1, null, 0, 0, hdr);
      case 4:
        return U.ExrPizCompressor$(hdr, maxScanLineSize, numScanLines == null ? 32 : numScanLines);
      case 5:
        t1 = numScanLines == null ? 16 : numScanLines;
        return new U.ExrPxr24Compressor(new T.ZLibDecoder(), maxScanLineSize, t1, null, 0, 0, hdr);
      case 6:
        t1 = numScanLines == null ? 32 : numScanLines;
        return new U.ExrB44Compressor(maxScanLineSize, t1, false, 0, 0, hdr);
      case 7:
        t1 = numScanLines == null ? 32 : numScanLines;
        return new U.ExrB44Compressor(maxScanLineSize, t1, true, 0, 0, hdr);
      default:
        throw H.wrapException(U.ImageException$("Invalid compression type: " + H.S(type)));
    }
  },
  ExrHuffman_uncompress: function(compressed, nCompressed, raw, nRaw) {
    var start, im, iM, nBits, t1, freq, hdec, i;
    if (nCompressed === 0) {
      if (nRaw !== 0)
        throw H.wrapException(U.ImageException$("Incomplete huffman data"));
      return;
    }
    start = compressed.offset;
    im = compressed.readUint32$0();
    iM = compressed.readUint32$0();
    compressed.offset = J.$add$ns(compressed.offset, 4);
    nBits = compressed.readUint32$0();
    if (im < 65537)
      t1 = iM >= 65537;
    else
      t1 = true;
    if (t1)
      throw H.wrapException(U.ImageException$("Invalid huffman table size"));
    compressed.offset = J.$add$ns(compressed.offset, 4);
    t1 = Array(65537);
    t1.fixed$length = init;
    freq = H.setRuntimeTypeInfo(t1, [J.JSInt]);
    H.IterableMixinWorkaround_fillRangeList(freq, 0, 65537, 0);
    hdec = H.setRuntimeTypeInfo(Array(16384), [U.ExrHufDec]);
    for (i = 0; i < 16384; ++i)
      hdec[i] = new U.ExrHufDec(0, 0, null);
    U.ExrHuffman_unpackEncTable(compressed, nCompressed - 20, im, iM, freq);
    t1 = J.$sub$n(compressed.offset, start);
    if (typeof t1 !== "number")
      return H.iae(t1);
    if (nBits > 8 * (nCompressed - t1))
      throw H.wrapException(U.ImageException$("Error in header for Huffman-encoded data (invalid number of bits)."));
    U.ExrHuffman_buildDecTable(freq, im, iM, hdec);
    U.ExrHuffman_decode(freq, hdec, compressed, nBits, iM, nRaw, raw);
  },
  ExrHuffman_decode: function(hcode, hdecod, input, ni, rlc, no, out) {
    var c_lc, ie, oi, t1, t2, pl, j, l, t3, oi0, i;
    c_lc = [0, 0];
    ie = J.$add$ns(input.offset, C.JSInt_methods._tdivFast$1(ni + 7, 8));
    for (oi = 0; J.$lt$n(input.offset, ie);) {
      U.ExrHuffman_getChar(c_lc, input);
      for (; J.$ge$n(c_lc[1], 14);) {
        t1 = c_lc[0];
        t2 = J.$sub$n(c_lc[1], 14);
        if (typeof t1 !== "number")
          return t1.$shr();
        if (typeof t2 !== "number")
          return H.iae(t2);
        pl = hdecod[C.JSNumber_methods.$shr(t1, t2) & 16383];
        if (pl.get$len() !== 0) {
          c_lc[1] = J.$sub$n(c_lc[1], pl.len);
          oi = U.ExrHuffman_getCode(pl.lit, rlc, c_lc, input, out, oi, no);
        } else {
          if (pl.p == null)
            throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code)."));
          for (j = 0; j < pl.lit; ++j) {
            t1 = pl.p;
            if (j >= t1.length)
              return H.ioore(t1, j);
            t1 = t1[j];
            if (t1 >>> 0 !== t1 || t1 >= 65537)
              return H.ioore(hcode, t1);
            l = J.$and$n(hcode[t1], 63);
            while (true) {
              if (!(J.$lt$n(c_lc[1], l) && J.$lt$n(input.offset, ie)))
                break;
              U.ExrHuffman_getChar(c_lc, input);
            }
            if (J.$ge$n(c_lc[1], l)) {
              t1 = pl.p;
              if (j >= t1.length)
                return H.ioore(t1, j);
              t1 = t1[j];
              if (t1 >>> 0 !== t1 || t1 >= 65537)
                return H.ioore(hcode, t1);
              t1 = hcode[t1];
              if (typeof t1 !== "number")
                return t1.$shr();
              t1 = C.JSNumber_methods._shrOtherPositive$1(t1, 6);
              t2 = c_lc[0];
              t3 = J.$sub$n(c_lc[1], l);
              if (typeof t2 !== "number")
                return t2.$shr();
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (t1 === (C.JSNumber_methods.$shr(t2, t3) & C.JSInt_methods._shlPositive$1(1, l) - 1) >>> 0) {
                c_lc[1] = J.$sub$n(c_lc[1], l);
                t1 = pl.p;
                if (j >= t1.length)
                  return H.ioore(t1, j);
                oi0 = U.ExrHuffman_getCode(t1[j], rlc, c_lc, input, out, oi, no);
                oi = oi0;
                break;
              }
            }
          }
          if (j === pl.lit)
            throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code)."));
        }
      }
    }
    i = 8 - ni & 7;
    t1 = c_lc[0];
    if (typeof t1 !== "number")
      return t1.$shr();
    c_lc[0] = C.JSNumber_methods._shrOtherPositive$1(t1, i);
    c_lc[1] = J.$sub$n(c_lc[1], i);
    for (; J.$gt$n(c_lc[1], 0);) {
      t1 = c_lc[0];
      t2 = c_lc[1];
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t1 !== "number")
        return t1.$shl();
      pl = hdecod[C.JSNumber_methods.$shl(t1, 14 - t2) & 16383];
      if (pl.get$len() !== 0) {
        c_lc[1] = t2 - pl.len;
        oi = U.ExrHuffman_getCode(pl.lit, rlc, c_lc, input, out, oi, no);
      } else
        throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code)."));
    }
    if (oi !== no)
      throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (decoded data are shorter than expected)."));
  },
  ExrHuffman_getCode: function(po, rlc, c_lc, input, out, oi, oe) {
    var t1, t2, cs, s, cs0, oi0;
    if (J.$eq(po, rlc)) {
      if (J.$lt$n(c_lc[1], 8))
        U.ExrHuffman_getChar(c_lc, input);
      t1 = J.$sub$n(c_lc[1], 8);
      c_lc[1] = t1;
      t2 = c_lc[0];
      if (typeof t2 !== "number")
        return t2.$shr();
      if (typeof t1 !== "number")
        return H.iae(t1);
      cs = C.JSNumber_methods.$shr(t2, t1) & 255;
      if (oi + cs > oe)
        throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (decoded data are longer than expected)."));
      t1 = oi - 1;
      t2 = out.length;
      if (t1 < 0 || t1 >= t2)
        return H.ioore(out, t1);
      s = out[t1];
      for (; cs0 = cs - 1, cs > 0; cs = cs0, oi = oi0) {
        oi0 = oi + 1;
        if (oi >= t2)
          return H.ioore(out, oi);
        out[oi] = s;
      }
    } else {
      if (oi < oe) {
        oi0 = oi + 1;
        if (oi >= out.length)
          return H.ioore(out, oi);
        out[oi] = po;
      } else
        throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (decoded data are longer than expected)."));
      oi = oi0;
    }
    return oi;
  },
  ExrHuffman_buildDecTable: function(hcode, im, iM, hdecod) {
    var t1, t2, l, pl, t3, t4, i, t5, pi;
    for (; im <= iM; ++im) {
      if (im >= 65537)
        return H.ioore(hcode, im);
      t1 = hcode[im];
      if (typeof t1 !== "number")
        return t1.$shr();
      t2 = C.JSNumber_methods._shrOtherPositive$1(t1, 6);
      l = t1 & 63;
      if (C.JSInt_methods._shrBothPositive$1(t2, l) !== 0)
        throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code table entry)."));
      if (l > 14) {
        t1 = C.JSInt_methods._shrReceiverPositive$1(t2, l - 14);
        if (t1 >= 16384)
          return H.ioore(hdecod, t1);
        pl = hdecod[t1];
        if (pl.get$len() !== 0)
          throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code table entry)."));
        t1 = ++pl.lit;
        t2 = pl.p;
        if (t2 != null) {
          t3 = Array(t1);
          t3.fixed$length = init;
          t3.$builtinTypeInfo = [J.JSInt];
          pl.p = t3;
          for (t4 = pl.lit - 1, i = 0; i < t4; ++i) {
            if (i >= t2.length)
              return H.ioore(t2, i);
            t5 = t2[i];
            if (i >= t1)
              return H.ioore(t3, i);
            t3[i] = t5;
          }
        } else
          pl.p = [0];
        t1 = pl.p;
        t2 = pl.lit - 1;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2] = im;
      } else if (l !== 0) {
        t1 = 14 - l;
        pi = C.JSInt_methods.$shl(t2, t1);
        if (pi >= 16384)
          return H.ioore(hdecod, pi);
        for (i = C.JSInt_methods.$shl(1, t1); i > 0; --i, ++pi) {
          if (pi >= 16384)
            return H.ioore(hdecod, pi);
          pl = hdecod[pi];
          if (pl.get$len() !== 0 || pl.p != null)
            throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (invalid code table entry)."));
          pl.len = l;
          pl.lit = im;
        }
      }
    }
  },
  ExrHuffman_unpackEncTable: function(p, ni, im, iM, hcode) {
    var pcode, c_lc, t1, l, zerun, zerun0, im0;
    pcode = p.offset;
    c_lc = [0, 0];
    for (t1 = iM + 1; im <= iM; ++im) {
      if (J.$gt$n(J.$sub$n(p.offset, pcode), ni))
        throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (unexpected end of code table data)."));
      l = U.ExrHuffman_getBits(6, c_lc, p);
      if (im < 0 || im >= 65537)
        return H.ioore(hcode, im);
      hcode[im] = l;
      if (l === 63) {
        if (J.$gt$n(J.$sub$n(p.offset, pcode), ni))
          throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (unexpected end of code table data)."));
        zerun = U.ExrHuffman_getBits(8, c_lc, p) + 6;
        if (im + zerun > t1)
          throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (code table is longer than expected)."));
        for (; zerun0 = zerun - 1, zerun !== 0; zerun = zerun0, im = im0) {
          im0 = im + 1;
          if (im >= 65537)
            return H.ioore(hcode, im);
          hcode[im] = 0;
        }
        --im;
      } else if (l >= 59) {
        zerun = l - 59 + 2;
        if (im + zerun > t1)
          throw H.wrapException(U.ImageException$("Error in Huffman-encoded data (code table is longer than expected)."));
        for (; zerun0 = zerun - 1, zerun !== 0; zerun = zerun0, im = im0) {
          im0 = im + 1;
          if (im >= 65537)
            return H.ioore(hcode, im);
          hcode[im] = 0;
        }
        --im;
      }
    }
    U.ExrHuffman_canonicalCodeTable(hcode);
  },
  ExrHuffman_canonicalCodeTable: function(hcode) {
    var t1, n, i, c, nc, l;
    t1 = Array(59);
    t1.fixed$length = init;
    n = H.setRuntimeTypeInfo(t1, [J.JSInt]);
    H.IterableMixinWorkaround_fillRangeList(n, 0, 59, 0);
    for (i = 0; i < 65537; ++i) {
      t1 = hcode[i];
      if (t1 >>> 0 !== t1 || t1 >= 59)
        return H.ioore(n, t1);
      n[t1] = J.$add$ns(n[t1], 1);
    }
    for (c = 0, i = 58; i > 0; --i, c = nc) {
      t1 = n[i];
      if (typeof t1 !== "number")
        return H.iae(t1);
      nc = C.JSNumber_methods._shrOtherPositive$1(c + t1, 1);
      n[i] = c;
    }
    for (i = 0; i < 65537; ++i) {
      l = hcode[i];
      if (J.$gt$n(l, 0)) {
        if (l >>> 0 !== l || l >= 59)
          return H.ioore(n, l);
        t1 = n[l];
        n[l] = J.$add$ns(t1, 1);
        if (typeof t1 !== "number")
          return t1.$shl();
        hcode[i] = (l | t1 << 6) >>> 0;
      }
    }
  },
  ExrHuffman_getChar: function(c_lc, input) {
    var t1, t2, t3;
    t1 = c_lc[0];
    if (typeof t1 !== "number")
      return t1.$shl();
    t2 = input.buffer;
    t3 = input.offset;
    input.offset = J.$add$ns(t3, 1);
    t3 = J.$index$asx(t2, t3);
    if (typeof t3 !== "number")
      return H.iae(t3);
    c_lc[0] = ((t1 << 8 | t3) & -1) >>> 0;
    c_lc[1] = J.$and$n(J.$add$ns(c_lc[1], 8), -1);
  },
  ExrHuffman_getBits: function(nBits, c_lc, input) {
    var t1, t2, t3;
    for (; J.$lt$n(c_lc[1], nBits);) {
      t1 = c_lc[0];
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = input.buffer;
      t3 = input.offset;
      input.offset = J.$add$ns(t3, 1);
      t3 = J.$index$asx(t2, t3);
      if (typeof t3 !== "number")
        return H.iae(t3);
      c_lc[0] = ((t1 << 8 | t3) & -1) >>> 0;
      c_lc[1] = J.$and$n(J.$add$ns(c_lc[1], 8), -1);
    }
    t1 = J.$sub$n(c_lc[1], nBits);
    c_lc[1] = t1;
    t2 = c_lc[0];
    if (typeof t2 !== "number")
      return t2.$shr();
    if (typeof t1 !== "number")
      return H.iae(t1);
    return (C.JSNumber_methods.$shr(t2, t1) & C.JSInt_methods._shlPositive$1(1, nBits) - 1) >>> 0;
  },
  ExrWavelet_decode: function(input, si, nx, ox, ny, oy, mx) {
    var w14, t1, n, p, p0, a_b, t2, t3, t4, p2, ey, oy1, oy2, ox1, ox2, py, i00, i01, i10, i11, t5, t6, ex, px, p01, p10, p11, t7, t8;
    w14 = mx < 16384;
    t1 = J.getInterceptor$n(nx);
    n = t1.$gt(nx, ny) ? ny : nx;
    if (typeof n !== "number")
      return H.iae(n);
    p = 1;
    for (; p <= n;)
      p = p << 1 >>> 0;
    p = p >>> 1;
    p0 = p >>> 1;
    a_b = [0, 0];
    for (t2 = J.getInterceptor$n(ny), t3 = J.getInterceptor$ns(oy), t4 = J.getInterceptor$ns(si), p2 = p, p = p0; p >= 1; p2 = p, p = p0) {
      ey = t4.$add(si, t3.$mul(oy, t2.$sub(ny, p2)));
      oy1 = t3.$mul(oy, p);
      oy2 = t3.$mul(oy, p2);
      if (typeof ox !== "number")
        return ox.$mul();
      ox1 = ox * p;
      ox2 = ox * p2;
      for (py = si, i00 = null, i01 = null, i10 = null, i11 = null; t5 = J.getInterceptor$n(py), t5.$le(py, ey); py = t5.$add(py, oy2)) {
        t6 = t1.$sub(nx, p2);
        if (typeof t6 !== "number")
          return H.iae(t6);
        ex = t5.$add(py, ox * t6);
        for (px = py; t6 = J.getInterceptor$n(px), t6.$le(px, ex); px = t6.$add(px, ox2)) {
          p01 = t6.$add(px, ox1);
          p10 = t6.$add(px, oy1);
          p11 = J.$add$ns(p10, ox1);
          if (w14) {
            t7 = input.length;
            if (px >>> 0 !== px || px >= t7)
              return H.ioore(input, px);
            t8 = input[px];
            if (p10 >>> 0 !== p10 || p10 >= t7)
              return H.ioore(input, p10);
            U.ExrWavelet_wdec14(t8, input[p10], a_b);
            i00 = a_b[0];
            i10 = a_b[1];
            if (p01 >>> 0 !== p01 || p01 >= t7)
              return H.ioore(input, p01);
            t8 = input[p01];
            if (p11 >>> 0 !== p11 || p11 >= t7)
              return H.ioore(input, p11);
            U.ExrWavelet_wdec14(t8, input[p11], a_b);
            i01 = a_b[0];
            i11 = a_b[1];
            U.ExrWavelet_wdec14(i00, i01, a_b);
            input[px] = a_b[0];
            input[p01] = a_b[1];
            U.ExrWavelet_wdec14(i10, i11, a_b);
            input[p10] = a_b[0];
            input[p11] = a_b[1];
          } else {
            t7 = input.length;
            if (px >>> 0 !== px || px >= t7)
              return H.ioore(input, px);
            t8 = input[px];
            if (p10 >>> 0 !== p10 || p10 >= t7)
              return H.ioore(input, p10);
            U.ExrWavelet_wdec16(t8, input[p10], a_b);
            i00 = a_b[0];
            i10 = a_b[1];
            if (p01 >>> 0 !== p01 || p01 >= t7)
              return H.ioore(input, p01);
            t8 = input[p01];
            if (p11 >>> 0 !== p11 || p11 >= t7)
              return H.ioore(input, p11);
            U.ExrWavelet_wdec16(t8, input[p11], a_b);
            i01 = a_b[0];
            i11 = a_b[1];
            U.ExrWavelet_wdec16(i00, i01, a_b);
            input[px] = a_b[0];
            input[p01] = a_b[1];
            U.ExrWavelet_wdec16(i10, i11, a_b);
            input[p10] = a_b[0];
            input[p11] = a_b[1];
          }
        }
        if (typeof nx !== "number")
          return nx.$and();
        if ((nx & p) >>> 0 !== 0) {
          p10 = t6.$add(px, oy1);
          if (w14) {
            t6 = input.length;
            if (px >>> 0 !== px || px >= t6)
              return H.ioore(input, px);
            t7 = input[px];
            if (p10 >>> 0 !== p10 || p10 >= t6)
              return H.ioore(input, p10);
            U.ExrWavelet_wdec14(t7, input[p10], a_b);
            i00 = a_b[0];
            input[p10] = a_b[1];
          } else {
            t6 = input.length;
            if (px >>> 0 !== px || px >= t6)
              return H.ioore(input, px);
            t7 = input[px];
            if (p10 >>> 0 !== p10 || p10 >= t6)
              return H.ioore(input, p10);
            U.ExrWavelet_wdec16(t7, input[p10], a_b);
            i00 = a_b[0];
            input[p10] = a_b[1];
          }
          if (px >>> 0 !== px || px >= input.length)
            return H.ioore(input, px);
          input[px] = i00;
        }
      }
      if (t2.$and(ny, p) !== 0) {
        t6 = t1.$sub(nx, p2);
        if (typeof t6 !== "number")
          return H.iae(t6);
        ex = t5.$add(py, ox * t6);
        for (px = py; t5 = J.getInterceptor$n(px), t5.$le(px, ex); px += ox2) {
          p01 = t5.$add(px, ox1);
          t5 = input.length;
          if (px >>> 0 !== px || px >= t5)
            return H.ioore(input, px);
          t6 = input[px];
          if (p01 >>> 0 !== p01 || p01 >= t5)
            return H.ioore(input, p01);
          U.ExrWavelet_wdec14(t6, input[p01], a_b);
          i00 = a_b[0];
          input[p01] = a_b[1];
          if (px >>> 0 !== px || px >= input.length)
            return H.ioore(input, px);
          input[px] = i00;
        }
      }
      p0 = p >>> 1;
    }
  },
  ExrWavelet_wdec14: function(l, h, a_b) {
    var t1, t2, t3, ls, hs, ai;
    t1 = $.get$__uint16();
    t1[0] = l;
    t2 = $.get$__uint16ToInt16();
    t3 = t2.length;
    if (0 >= t3)
      return H.ioore(t2, 0);
    ls = t2[0];
    t1[0] = h;
    if (0 >= t3)
      return H.ioore(t2, 0);
    hs = t2[0];
    ai = ls + (hs & 1) + C.JSInt_methods._shrOtherPositive$1(hs, 1);
    a_b[0] = ai;
    a_b[1] = ai - hs;
  },
  ExrWavelet_wdec16: function(l, h, a_b) {
    var bb;
    if (typeof h !== "number")
      return h.$shr();
    bb = J.$and$n(J.$sub$n(l, C.JSNumber_methods._shrOtherPositive$1(h, 1)), 65535);
    a_b[1] = bb;
    a_b[0] = h + bb - 32768 & 65535;
  },
  findDecoderForData: function(data) {
    var bytes, png, gif, webp, tiff;
    bytes = new Uint8Array(H._ensureNativeList(data));
    U.InputBuffer$(bytes, true, null, 0);
    if (new U.JpegData(null, null, null, null, null, null, Array(4), [], [], [], [], 0, 0).validate$1(bytes))
      return new U.JpegDecoder(null, null, null);
    png = new U.PngDecoder(null, 0, 0, null, null, 0, 1, null);
    if (png.isValidFile$1(bytes))
      return png;
    gif = new U.GifDecoder(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    gif._input = U.InputBuffer$(bytes, false, null, 0);
    gif.info = new U.GifInfo(0, null, false, [], 0, 0, 4294967295);
    if (gif._getInfo$0())
      return gif;
    webp = new U.WebPDecoder(null, null, null);
    if (webp.isValidFile$1(bytes))
      return webp;
    tiff = new U.TiffDecoder(null, null, null);
    if (tiff._readHeader$1(U.InputBuffer$(bytes, false, null, 0)) != null)
      return tiff;
    if (U.PsdImage$(bytes).signature === 943870035)
      return new U.PsdDecoder(null, null);
    if (U.ExrImage_isValidFile(bytes))
      return new U.ExrDecoder(null, 1, null, null, null, null, null);
    return;
  },
  WebPFilters_horizontalUnfilter: [function(width, height, stride, row, numRows, data) {
    U.WebPFilters__doHorizontalFilter(data, width, height, stride, row, numRows, true, data);
  }, "call$6", "WebPFilters_horizontalUnfilter$closure", 12, 0, 28],
  WebPFilters_verticalUnfilter: [function(width, height, stride, row, num_rows, data) {
    U.WebPFilters__doVerticalFilter(data, width, height, stride, row, num_rows, true, data);
  }, "call$6", "WebPFilters_verticalUnfilter$closure", 12, 0, 28],
  WebPFilters_gradientUnfilter: [function(width, height, stride, row, num_rows, data) {
    U.WebPFilters__doGradientFilter(data, width, height, stride, row, num_rows, true, data);
  }, "call$6", "WebPFilters_gradientUnfilter$closure", 12, 0, 28],
  WebPFilters__predictLine: function(src, pred, dst, $length, inverse) {
    var i, t1;
    if (inverse) {
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        t1 = J.$add$ns(J.$index$asx(src.buffer, J.$add$ns(src.offset, i)), J.$index$asx(pred.buffer, J.$add$ns(pred.offset, i)));
        J.$indexSet$ax(dst.buffer, J.$add$ns(dst.offset, i), t1);
      }
    } else {
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        t1 = J.$sub$n(J.$index$asx(src.buffer, J.$add$ns(src.offset, i)), J.$index$asx(pred.buffer, J.$add$ns(pred.offset, i)));
        J.$indexSet$ax(dst.buffer, J.$add$ns(dst.offset, i), t1);
      }
    }
  },
  WebPFilters__doHorizontalFilter: function(src, width, height, stride, row, numRows, inverse, out) {
    var t1, startOffset, lastRow, s, o, preds, t2, t3;
    t1 = J.getInterceptor$ns(row);
    startOffset = t1.$mul(row, stride);
    lastRow = t1.$add(row, numRows);
    s = U.InputBuffer$(src, false, null, startOffset);
    o = U.InputBuffer$(src, false, null, startOffset);
    preds = U.InputBuffer$from(inverse ? o : s, null, 0);
    if (t1.$eq(row, 0)) {
      t1 = J.$index$asx(s.buffer, J.$add$ns(s.offset, 0));
      J.$indexSet$ax(o.buffer, J.$add$ns(o.offset, 0), t1);
      U.WebPFilters__predictLine(U.InputBuffer$from(s, null, 1), preds, U.InputBuffer$from(o, null, 1), J.$sub$n(width, 1), inverse);
      preds.offset = J.$add$ns(preds.offset, stride);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
      row = 1;
    }
    for (t1 = J.getInterceptor$n(stride), t2 = J.getInterceptor$n(width); t3 = J.getInterceptor$n(row), t3.$lt(row, lastRow);) {
      U.WebPFilters__predictLine(s, U.InputBuffer$from(preds, null, t1.$negate(stride)), o, 1, inverse);
      U.WebPFilters__predictLine(U.InputBuffer$from(s, null, 1), preds, U.InputBuffer$from(o, null, 1), t2.$sub(width, 1), inverse);
      row = t3.$add(row, 1);
      preds.offset = J.$add$ns(preds.offset, stride);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
    }
  },
  WebPFilters__doVerticalFilter: function(src, width, height, stride, row, numRows, inverse, out) {
    var t1, startOffset, last_row, s, o, preds;
    t1 = J.getInterceptor$ns(row);
    startOffset = t1.$mul(row, stride);
    last_row = t1.$add(row, numRows);
    s = U.InputBuffer$(src, false, null, startOffset);
    o = U.InputBuffer$(out, false, null, startOffset);
    preds = U.InputBuffer$from(inverse ? o : s, null, 0);
    if (t1.$eq(row, 0)) {
      t1 = J.$index$asx(s.buffer, J.$add$ns(s.offset, 0));
      J.$indexSet$ax(o.buffer, J.$add$ns(o.offset, 0), t1);
      U.WebPFilters__predictLine(U.InputBuffer$from(s, null, 1), preds, U.InputBuffer$from(o, null, 1), J.$sub$n(width, 1), inverse);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
      row = 1;
    } else
      preds.offset = J.$sub$n(preds.offset, stride);
    for (; t1 = J.getInterceptor$n(row), t1.$lt(row, last_row);) {
      U.WebPFilters__predictLine(s, preds, o, width, inverse);
      row = t1.$add(row, 1);
      preds.offset = J.$add$ns(preds.offset, stride);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
    }
  },
  WebPFilters__doGradientFilter: function(src, width, height, stride, row, numRows, inverse, out) {
    var t1, startOffset, lastRow, s, o, preds, t2, w, t3, t4, t5, g, pred;
    t1 = J.getInterceptor$ns(row);
    startOffset = t1.$mul(row, stride);
    lastRow = t1.$add(row, numRows);
    s = U.InputBuffer$(src, false, null, startOffset);
    o = U.InputBuffer$(out, false, null, startOffset);
    preds = U.InputBuffer$from(inverse ? o : s, null, 0);
    if (t1.$eq(row, 0)) {
      t1 = J.$index$asx(s.buffer, J.$add$ns(s.offset, 0));
      J.$indexSet$ax(o.buffer, J.$add$ns(o.offset, 0), t1);
      U.WebPFilters__predictLine(U.InputBuffer$from(s, null, 1), preds, U.InputBuffer$from(o, null, 1), J.$sub$n(width, 1), inverse);
      preds.offset = J.$add$ns(preds.offset, stride);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
      row = 1;
    }
    for (t1 = J.getInterceptor$n(stride); t2 = J.getInterceptor$n(row), t2.$lt(row, lastRow);) {
      U.WebPFilters__predictLine(s, U.InputBuffer$from(preds, null, t1.$negate(stride)), o, 1, inverse);
      if (typeof width !== "number")
        return H.iae(width);
      w = 1;
      for (; w < width; ++w) {
        t3 = J.$index$asx(preds.buffer, J.$add$ns(preds.offset, w - 1));
        if (typeof stride !== "number")
          return H.iae(stride);
        t4 = w - stride;
        t5 = J.$index$asx(preds.buffer, J.$add$ns(preds.offset, t4));
        t4 = J.$index$asx(preds.buffer, J.$add$ns(preds.offset, t4 - 1));
        g = J.$sub$n(J.$add$ns(t3, t5), t4);
        if (J.$and$n(g, 4294967040) === 0)
          pred = g;
        else {
          if (typeof g !== "number")
            return g.$lt();
          pred = g < 0 ? 0 : 255;
        }
        t3 = J.$index$asx(s.buffer, J.$add$ns(s.offset, w));
        if (inverse)
          t4 = pred;
        else {
          if (typeof pred !== "number")
            return pred.$negate();
          t4 = -pred;
        }
        t4 = J.$add$ns(t3, t4);
        J.$indexSet$ax(o.buffer, J.$add$ns(o.offset, w), t4);
      }
      row = t2.$add(row, 1);
      preds.offset = J.$add$ns(preds.offset, stride);
      s.offset = J.$add$ns(s.offset, stride);
      o.offset = J.$add$ns(o.offset, stride);
    }
  },
  Half_DoubleToHalf: function(f) {
    var t1, x_i, e, m;
    if ($.Half__toFloatFloat32 == null)
      U.Half__initialize();
    $.get$__float32()[0] = f;
    t1 = $.get$__float32ToUint32();
    if (0 >= t1.length)
      return H.ioore(t1, 0);
    x_i = t1[0];
    if (f === 0)
      return x_i >>> 16;
    e = x_i >>> 23 & 511;
    t1 = $.Half__eLut;
    if (e >= t1.length)
      return H.ioore(t1, e);
    e = t1[e];
    if (e !== 0) {
      m = x_i & 8388607;
      return e + (m + 4095 + (m >>> 13 & 1) >>> 13);
    }
    return U.Half__convert(x_i);
  },
  Half__convert: function(i) {
    var s, e, m, t, t1, t2;
    s = i >>> 16 & 32768;
    e = (i >>> 23 & 255) - 112;
    m = i & 8388607;
    if (e <= 0) {
      if (e < -10)
        return s;
      m |= 8388608;
      t = 14 - e;
      return (s | C.JSInt_methods.$shr(m + (C.JSInt_methods.$shl(1, t - 1) - 1) + (C.JSInt_methods._shrReceiverPositive$1(m, t) & 1), t)) >>> 0;
    } else if (e === 143) {
      t1 = s | 31744;
      if (m === 0)
        return t1;
      else {
        m = m >>> 13;
        t2 = m === 0 ? 1 : 0;
        return t1 | m | t2;
      }
    } else {
      m = m + 4095 + (m >>> 13 & 1);
      if ((m & 8388608) !== 0) {
        ++e;
        m = 0;
      }
      if (e > 30)
        return s | 31744;
      return (s | e << 10 | m >>> 13) >>> 0;
    }
  },
  Half__initialize: function() {
    var t1, i, e, t2, t3;
    if ($.Half__toFloatUint32 != null)
      return;
    t1 = new Uint32Array(65536);
    $.Half__toFloatUint32 = t1;
    $.Half__toFloatFloat32 = H.NativeFloat32List_NativeFloat32List$view(t1.buffer, 0, null);
    t1 = new Uint16Array(512);
    $.Half__eLut = t1;
    for (i = 0; i < 256; ++i) {
      e = (i & 255) - 112;
      t2 = e <= 0 || e >= 30;
      t3 = (i | 256) >>> 0;
      if (t2) {
        if (i >= 512)
          return H.ioore(t1, i);
        t1[i] = 0;
        if (t3 >= 512)
          return H.ioore(t1, t3);
        t1[t3] = 0;
      } else {
        t2 = e << 10 >>> 0;
        if (i >= 512)
          return H.ioore(t1, i);
        t1[i] = t2;
        if (t3 >= 512)
          return H.ioore(t1, t3);
        t1[t3] = (t2 | 32768) >>> 0;
      }
    }
    for (i = 0; i < 65536; ++i) {
      t1 = $.Half__toFloatUint32;
      t2 = U.Half__halfToFloat(i);
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = t2;
    }
  },
  Half__halfToFloat: function(y) {
    var s, e, m, t1;
    s = y >>> 15 & 1;
    e = y >>> 10 & 31;
    m = y & 1023;
    if (e === 0)
      if (m === 0)
        return s << 31 >>> 0;
      else {
        for (; (m & 1024) === 0;) {
          m = m << 1;
          --e;
        }
        ++e;
        m &= 4294966271;
      }
    else if (e === 31) {
      t1 = s << 31;
      if (m === 0)
        return (t1 | 2139095040) >>> 0;
      else
        return (t1 | 2139095040 | m << 13) >>> 0;
    }
    return (s << 31 | e + 112 << 23 | m << 13) >>> 0;
  },
  hdrToImage: function(hdr, exposure) {
    var t1, t2, t3, t4, image, pixels, m, y, di, x, r, g, b, ri, gi, bi, mi, di0, a;
    t1 = new U.hdrToImage__gamma(new U.hdrToImage__knee());
    t2 = hdr.slices;
    if (t2.get$isEmpty(t2))
      t3 = 0;
    else {
      t3 = t2.get$values(t2);
      t3 = J.get$width$x(t3._f$1(J.get$first$ax(t3._iterable)));
    }
    if (t2.get$isEmpty(t2))
      t4 = 0;
    else {
      t4 = t2.get$values(t2);
      t4 = J.get$height$x(t4._f$1(J.get$first$ax(t4._iterable)));
    }
    image = U.Image$(t3, t4, 4);
    pixels = H.NativeUint8List_NativeUint8List$view(image.data.buffer, 0, null);
    if (!(hdr.red != null || hdr.green != null || hdr.blue != null))
      throw H.wrapException(U.ImageException$("Only RGB[A] images are currently supported."));
    t3 = C.JSNumber_methods.clamp$2(exposure + 2.47393, -20, 20);
    m = Math.pow(2, t3);
    t3 = pixels.length;
    y = 0;
    di = 0;
    while (true) {
      if (t2.get$isEmpty(t2))
        t4 = 0;
      else {
        t4 = t2.get$values(t2);
        t4 = J.get$height$x(t4._f$1(J.get$first$ax(t4._iterable)));
      }
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (!(y < t4))
        break;
      x = 0;
      while (true) {
        if (t2.get$isEmpty(t2))
          t4 = 0;
        else {
          t4 = t2.get$values(t2);
          t4 = J.get$width$x(t4._f$1(J.get$first$ax(t4._iterable)));
        }
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(x < t4))
          break;
        t4 = hdr.red;
        r = t4 != null ? t4.getFloat$2(x, y) : 0;
        t4 = hdr.green;
        g = t4 != null ? t4.getFloat$2(x, y) : 0;
        t4 = hdr.blue;
        b = t4 != null ? t4.getFloat$2(x, y) : 0;
        if (r == Infinity || r == -Infinity || isNaN(r))
          r = 0;
        if (g == Infinity || g == -Infinity || isNaN(g))
          g = 0;
        if (b == Infinity || b == -Infinity || isNaN(b))
          b = 0;
        ri = t1.call$2(r, m);
        gi = t1.call$2(g, m);
        bi = t1.call$2(b, m);
        mi = P.max(ri, P.max(gi, bi));
        if (mi > 255) {
          ri = 255 * J.$div$n(ri, mi);
          gi = 255 * J.$div$n(gi, mi);
          bi = 255 * J.$div$n(bi, mi);
        }
        di0 = di + 1;
        t4 = C.JSInt_methods.clamp$2(J.toInt$0$n(ri), 0, 255);
        if (di < 0 || di >= t3)
          return H.ioore(pixels, di);
        pixels[di] = t4;
        di = di0 + 1;
        t4 = C.JSInt_methods.clamp$2(J.toInt$0$n(gi), 0, 255);
        if (di0 < 0 || di0 >= t3)
          return H.ioore(pixels, di0);
        pixels[di0] = t4;
        di0 = di + 1;
        t4 = C.JSInt_methods.clamp$2(J.toInt$0$n(bi), 0, 255);
        if (di < 0 || di >= t3)
          return H.ioore(pixels, di);
        pixels[di] = t4;
        t4 = hdr.alpha;
        if (t4 != null) {
          a = t4.getFloat$2(x, y);
          if (a == Infinity || a == -Infinity || isNaN(a))
            a = 1;
          di = di0 + 1;
          t4 = C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(a * 255), 0, 255);
          if (di0 < 0 || di0 >= t3)
            return H.ioore(pixels, di0);
          pixels[di0] = t4;
        } else {
          di = di0 + 1;
          if (di0 < 0 || di0 >= t3)
            return H.ioore(pixels, di0);
          pixels[di0] = 255;
        }
        ++x;
      }
      ++y;
    }
    return image;
  },
  DecodeInfo: {
    "^": "Object;width>,height>"
  },
  Decoder: {
    "^": "Object;",
    decodeHdrImage$2$frame: function(bytes, frame) {
      var img = this.decodeImage$2$frame(bytes, frame);
      if (img == null)
        return;
      return U.HdrImage$fromImage(img);
    },
    decodeHdrImage$1: function(bytes) {
      return this.decodeHdrImage$2$frame(bytes, 0);
    }
  },
  Encoder: {
    "^": "Object;"
  },
  ExrAttribute: {
    "^": "Object;name>,type>,size>,data>"
  },
  ExrB44Compressor: {
    "^": "ExrCompressor;_maxScanLineSize,_numScanLines,_optFlatFields,decodedWidth,decodedHeight,_header",
    numScanLines$0: function() {
      return this._numScanLines;
    },
    uncompress$5: function(inPtr, x, y, width, height) {
      throw H.wrapException(U.ImageException$("B44 compression not yet supported."));
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    }
  },
  ExrChannel: {
    "^": "Object;name>,type>,size>,pLinear,xSampling<,ySampling<",
    ExrChannel$1: function(input) {
      var t1, t2;
      t1 = input.readString$0();
      this.name = t1;
      if (t1.length === 0) {
        this.name = null;
        return;
      }
      this.type = input.readUint32$0();
      t1 = input.buffer;
      t2 = input.offset;
      input.offset = J.$add$ns(t2, 1);
      this.pLinear = J.$eq(J.$index$asx(t1, t2), 1);
      input.offset = J.$add$ns(input.offset, 3);
      this.xSampling = input.readUint32$0();
      this.ySampling = input.readUint32$0();
      t1 = this.type;
      switch (t1) {
        case 0:
          this.size = 4;
          break;
        case 1:
          this.size = 2;
          break;
        case 2:
          this.size = 4;
          break;
        default:
          throw H.wrapException(U.ImageException$("EXR Invalid pixel type: " + H.S(t1)));
      }
    },
    static: {"^": "ExrChannel_TYPE_UINT,ExrChannel_TYPE_HALF,ExrChannel_TYPE_FLOAT,ExrChannel_Y,ExrChannel_RY,ExrChannel_BY,ExrChannel_AR,ExrChannel_AG,ExrChannel_AB,ExrChannel_Z,ExrChannel_ZBack,ExrChannel_A,ExrChannel_R,ExrChannel_G,ExrChannel_B,ExrChannel_ID", ExrChannel$: function(input) {
        var t1 = new U.ExrChannel(null, null, null, null, null, null);
        t1.ExrChannel$1(input);
        return t1;
      }}
  },
  ExrCompressor: {
    "^": "Object;",
    uncompress$5: function(inPtr, x, y, width, height) {
      throw H.wrapException(U.ImageException$("Unsupported compression type"));
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    },
    _numSamples$3: function(s, a, b) {
      var a1, t1;
      a1 = C.JSNumber_methods.$tdiv(a, s);
      t1 = J.$sub$n(J.$tdiv$n(b, s), a1);
      return J.$add$ns(t1, a1 * s < a ? 0 : 1);
    }
  },
  ExrHufDec: {
    "^": "Object;len<,lit,p>"
  },
  ExrImage: {
    "^": "DecodeInfo;parts,version,flags,width,height,backgroundColor",
    _readImage$1: function(input) {
      var t1, pi, part, framebuffer, t2, ci, t3, ch;
      J.$and$n(this.flags, 16);
      for (t1 = this.parts, pi = 0; pi < t1.length; ++pi) {
        part = t1[pi];
        framebuffer = part.get$framebuffer();
        for (t2 = framebuffer.slices, ci = 0; t3 = part.channels, ci < t3.length; ++ci) {
          ch = t3[ci];
          t3 = J.getInterceptor$x(ch);
          if (!t2.containsKey$1(t3.get$name(ch))) {
            this.width = part.width;
            this.height = part.height;
            framebuffer.addSlice$1(U.HdrSlice$(t3.get$name(ch), part.width, part.height, t3.get$type(ch)));
          }
        }
        if (part._tiled)
          this._readTiledPart$2(pi, input);
        else
          this._readScanlinePart$2(pi, input);
      }
    },
    _readTiledPart$2: function(pi, input) {
      var t1, part, multiPart, framebuffer, compressor, offsets, imgData, ly, l, t2, lx, ty, oi, t3, tx, tileX, tileY, dataSize, pos, t4, t5, t6, ty0, tx0, tileWidth, tileHeight, uncompressedData, len, numChannels, si, yi, ci, ch, slice, xx, bi, si0, di;
      t1 = this.parts;
      if (pi >= t1.length)
        return H.ioore(t1, pi);
      part = t1[pi];
      multiPart = J.$and$n(this.flags, 16) !== 0;
      framebuffer = part.get$framebuffer();
      compressor = part._compressor;
      offsets = part._offsets;
      t1 = part.channels.length;
      new Uint32Array(t1);
      imgData = U.InputBuffer$from(input, null, 0);
      t1 = framebuffer.slices;
      ly = 0;
      l = 0;
      while (true) {
        t2 = part._numYLevels;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(ly < t2))
          break;
        lx = 0;
        while (true) {
          t2 = part._numXLevels;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(lx < t2))
            break;
          t2 = l !== 0;
          ty = 0;
          oi = 0;
          while (true) {
            t3 = part._numYTiles;
            if (ly >= t3.length)
              return H.ioore(t3, ly);
            t3 = t3[ly];
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(ty < t3))
              break;
            tx = 0;
            while (true) {
              t3 = part._numXTiles;
              if (lx >= t3.length)
                return H.ioore(t3, lx);
              t3 = t3[lx];
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (!(tx < t3))
                break;
              if (t2)
                break;
              if (l < 0 || l >= offsets.length)
                return H.ioore(offsets, l);
              imgData.offset = J.$index$asx(offsets[l], oi);
              if (multiPart)
                if (imgData.readUint32$0() !== pi)
                  throw H.wrapException(U.ImageException$("Invalid Image Data"));
              tileX = imgData.readUint32$0();
              tileY = imgData.readUint32$0();
              imgData.readUint32$0();
              imgData.readUint32$0();
              dataSize = imgData.readUint32$0();
              pos = J.$add$ns(imgData.offset, 0);
              t3 = imgData.buffer;
              t4 = imgData.bigEndian;
              t5 = J.$add$ns(pos, dataSize);
              imgData.offset = J.$add$ns(imgData.offset, J.$sub$n(t5, pos));
              t6 = part._tileHeight;
              if (typeof t6 !== "number")
                return H.iae(t6);
              ty0 = tileY * t6;
              t6 = part._tileWidth;
              if (typeof t6 !== "number")
                return H.iae(t6);
              tx0 = tileX * t6;
              tileWidth = compressor.decodedWidth;
              tileHeight = compressor.decodedHeight;
              if (typeof tileWidth !== "number")
                return H.iae(tileWidth);
              t6 = this.width;
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (tx0 + tileWidth > t6)
                ;
              if (typeof tileHeight !== "number")
                return H.iae(tileHeight);
              t6 = this.height;
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (ty0 + tileHeight > t6)
                ;
              uncompressedData = compressor.uncompress$5(new U.InputBuffer(t3, pos, t5, pos, t4), tx0, ty0, part._tileWidth, part._tileHeight);
              tileWidth = compressor.decodedWidth;
              tileHeight = compressor.decodedHeight;
              len = uncompressedData.length;
              numChannels = part.channels.length;
              if (typeof tileHeight !== "number")
                return H.iae(tileHeight);
              si = 0;
              yi = 0;
              while (true) {
                if (yi < tileHeight) {
                  t3 = this.height;
                  if (typeof t3 !== "number")
                    return H.iae(t3);
                  t3 = ty0 < t3;
                } else
                  t3 = false;
                if (!t3)
                  break;
                for (ci = 0; ci < numChannels; ++ci) {
                  t3 = part.channels;
                  if (ci >= t3.length)
                    return H.ioore(t3, ci);
                  ch = t3[ci];
                  t3 = J.getInterceptor$x(ch);
                  t4 = t1.$index(0, t3.get$name(ch)).data.buffer;
                  H._checkViewArguments(t4, 0, null);
                  slice = new Uint8Array(t4, 0);
                  if (si >= len)
                    break;
                  t4 = part._tileWidth;
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  tx0 = tileX * t4;
                  if (typeof tileWidth !== "number")
                    return H.iae(tileWidth);
                  t4 = slice.length;
                  xx = 0;
                  for (; xx < tileWidth; ++xx, ++tx0) {
                    bi = 0;
                    while (true) {
                      t5 = t3.get$size(ch);
                      if (typeof t5 !== "number")
                        return H.iae(t5);
                      if (!(bi < t5))
                        break;
                      t5 = part.width;
                      if (typeof t5 !== "number")
                        return H.iae(t5);
                      if (tx0 < t5) {
                        t6 = part.height;
                        if (typeof t6 !== "number")
                          return H.iae(t6);
                        t6 = ty0 < t6;
                      } else
                        t6 = false;
                      si0 = si + 1;
                      if (t6) {
                        t6 = t3.get$size(ch);
                        if (typeof t6 !== "number")
                          return H.iae(t6);
                        di = (ty0 * t5 + tx0) * t6 + bi;
                        if (si < 0 || si >= len)
                          return H.ioore(uncompressedData, si);
                        t6 = uncompressedData[si];
                        if (di >>> 0 !== di || di >= t4)
                          return H.ioore(slice, di);
                        slice[di] = t6;
                        si = si0;
                      } else
                        si = si0;
                      ++bi;
                    }
                  }
                }
                ++yi;
                ++ty0;
              }
              ++tx;
              ++oi;
            }
            ++ty;
          }
          ++lx;
          ++l;
        }
        ++ly;
      }
    },
    _readScanlinePart$2: function(pi, input) {
      var t1, part, multiPart, framebuffer, compressor, offsets, scanLineMin, linesInBuffer, fbi, imgData, t2, t3, t4, yy, t5, t6, dataSize, pos, t7, bytes, uncompressedData, len, numChannels, yi, si, ci, ch, slice, xx, bi, si0, t8;
      t1 = this.parts;
      if (pi >= t1.length)
        return H.ioore(t1, pi);
      part = t1[pi];
      multiPart = J.$and$n(this.flags, 16) !== 0;
      framebuffer = part.get$framebuffer();
      compressor = part._compressor;
      t1 = part._offsets;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      offsets = t1[0];
      t1 = part.dataWindow;
      scanLineMin = t1[1];
      t1[3];
      linesInBuffer = part._linesInBuffer;
      J.$sub$n(J.$add$ns(scanLineMin, linesInBuffer), 1);
      t1 = part.channels.length;
      fbi = new Uint32Array(t1);
      imgData = U.InputBuffer$from(input, null, 0);
      for (t2 = J.get$iterator$ax(offsets), t3 = framebuffer.slices, t4 = compressor != null, yy = 0; t2.moveNext$0();) {
        imgData.offset = t2.get$current();
        if (multiPart)
          if (imgData.readUint32$0() !== pi)
            throw H.wrapException(U.ImageException$("Invalid Image Data"));
        t5 = imgData.readUint32$0();
        t6 = $.get$__uint32();
        t6[0] = t5;
        t5 = $.get$__uint32ToInt32();
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5[0];
        t6[0] = imgData.readUint32$0();
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        dataSize = t5[0];
        pos = J.$add$ns(imgData.offset, 0);
        t5 = imgData.buffer;
        t6 = imgData.bigEndian;
        t7 = J.$add$ns(pos, dataSize);
        bytes = new U.InputBuffer(t5, pos, t7, pos, t6);
        imgData.offset = J.$add$ns(imgData.offset, J.$sub$n(t7, pos));
        uncompressedData = t4 ? compressor.uncompress$3(bytes, 0, yy) : bytes.toUint8List$0();
        len = uncompressedData.length;
        numChannels = part.channels.length;
        if (typeof linesInBuffer !== "number")
          return H.iae(linesInBuffer);
        yi = 0;
        while (true) {
          if (yi < linesInBuffer) {
            t5 = this.height;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = yy < t5;
          } else
            t5 = false;
          if (!t5)
            break;
          t5 = part._offsetInLineBuffer;
          if (yy < 0 || yy >= t5.length)
            return H.ioore(t5, yy);
          si = t5[yy];
          if (si >= len)
            break;
          for (ci = 0; ci < numChannels; ++ci) {
            t5 = part.channels;
            if (ci >= t5.length)
              return H.ioore(t5, ci);
            ch = t5[ci];
            t5 = J.getInterceptor$x(ch);
            t6 = t3.$index(0, t5.get$name(ch)).data.buffer;
            H._checkViewArguments(t6, 0, null);
            slice = new Uint8Array(t6, 0);
            if (si >= len)
              break;
            t6 = slice.length;
            xx = 0;
            while (true) {
              t7 = part.width;
              if (typeof t7 !== "number")
                return H.iae(t7);
              if (!(xx < t7))
                break;
              bi = 0;
              while (true) {
                t7 = t5.get$size(ch);
                if (typeof t7 !== "number")
                  return H.iae(t7);
                if (!(bi < t7))
                  break;
                if (ci >= t1)
                  return H.ioore(fbi, ci);
                t7 = fbi[ci];
                fbi[ci] = t7 + 1;
                si0 = si + 1;
                if (si < 0 || si >= len)
                  return H.ioore(uncompressedData, si);
                t8 = uncompressedData[si];
                if (t7 >= t6)
                  return H.ioore(slice, t7);
                slice[t7] = t8;
                ++bi;
                si = si0;
              }
              ++xx;
            }
          }
          ++yi;
          ++yy;
        }
      }
    },
    ExrImage$1: function(bytes) {
      var input, t1, t2, part;
      input = U.InputBuffer$(bytes, false, null, 0);
      if (input.readUint32$0() !== 20000630)
        throw H.wrapException(U.ImageException$("File is not an OpenEXR image file."));
      t1 = input.buffer;
      t2 = input.offset;
      input.offset = J.$add$ns(t2, 1);
      t2 = J.$index$asx(t1, t2);
      this.version = t2;
      if (!J.$eq(t2, 2))
        throw H.wrapException(U.ImageException$("Cannot read version " + H.S(this.version) + " image files."));
      t1 = input.readUint24$0();
      this.flags = t1;
      if (J.$and$n(t1, 4294967289) !== 0)
        throw H.wrapException(U.ImageException$("The file format version number's flag field contains unrecognized flags."));
      if (J.$and$n(this.flags, 16) === 0) {
        part = U.ExrPart$(J.$and$n(this.flags, 2) !== 0, input);
        if (part.width != null)
          this.parts.push(part);
      } else
        for (t1 = this.parts; true;) {
          part = U.ExrPart$(J.$and$n(this.flags, 2) !== 0, input);
          if (part.width == null)
            break;
          t1.push(part);
        }
      t1 = this.parts;
      t2 = t1.length;
      if (t2 === 0)
        throw H.wrapException(U.ImageException$("Error reading image header"));
      for (t1 = new H.ListIterator(t1, t2, 0, null); t1.moveNext$0();)
        t1._current._readOffsets$1(input);
      this._readImage$1(input);
    },
    static: {"^": "ExrImage_MAGIC,ExrImage_EXR_VERSION,ExrImage_TILED_FLAG,ExrImage_LONG_NAMES_FLAG,ExrImage_NON_IMAGE_FLAG,ExrImage_MULTI_PART_FILE_FLAG,ExrImage_ALL_FLAGS", ExrImage$: function(bytes) {
        var t1 = new U.ExrImage([], null, null, 0, 0, 4294967295);
        t1.ExrImage$1(bytes);
        return t1;
      }, ExrImage_isValidFile: function(bytes) {
        var input, t1, t2;
        input = U.InputBuffer$(bytes, false, null, 0);
        if (input.readUint32$0() !== 20000630)
          return false;
        t1 = input.buffer;
        t2 = input.offset;
        input.offset = J.$add$ns(t2, 1);
        if (!J.$eq(J.$index$asx(t1, t2), 2))
          return false;
        if (J.$and$n(input.readUint24$0(), 4294967289) !== 0)
          return false;
        return true;
      }}
  },
  ExrPart: {
    "^": "Object;framebuffer<,channels,attributes,displayWindow,dataWindow,width>,height>,pixelAspectRatio,screenWindowCenterX,screenWindowCenterY,screenWindowWidth,chromaticities,_type,_lineOrder,_compressionType,_offsets,_bytesPerLine,_compressor,_linesInBuffer,_lineBufferSize,_offsetInLineBuffer,_tiled,_tileWidth,_tileHeight,_tileLevelMode,_tileRoundingMode,_numXTiles,_numYTiles,_numXLevels,_numYLevels,_bytesPerPixel,_maxBytesPerTileLine,_tileBufferSize",
    _floorLog2$1: function(x) {
      var y;
      for (y = 0; J.getInterceptor$n(x).$gt(x, 1);) {
        ++y;
        if (typeof x !== "number")
          return x.$shr();
        x = C.JSNumber_methods._shrOtherPositive$1(x, 1);
      }
      return y;
    },
    _ceilLog2$1: function(x) {
      var y, r;
      for (y = 0, r = 0; J.getInterceptor$n(x).$gt(x, 1);) {
        if (typeof x !== "number")
          return x.$and();
        if ((x & 1) !== 0)
          r = 1;
        ++y;
        x = C.JSNumber_methods._shrOtherPositive$1(x, 1);
      }
      return y + r;
    },
    _readOffsets$1: function(input) {
      var i, j, t1, numOffsets;
      if (this._tiled)
        for (i = 0; i < this._offsets.length; ++i) {
          j = 0;
          while (true) {
            t1 = this._offsets;
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1 = J.get$length$asx(t1[i]);
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(j < t1))
              break;
            t1 = this._offsets;
            if (i >= t1.length)
              return H.ioore(t1, i);
            J.$indexSet$ax(t1[i], j, input.readUint64$0());
            ++j;
          }
        }
      else {
        t1 = this._offsets;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        numOffsets = J.get$length$asx(t1[0]);
        if (typeof numOffsets !== "number")
          return H.iae(numOffsets);
        i = 0;
        for (; i < numOffsets; ++i) {
          t1 = this._offsets;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          J.$indexSet$ax(t1[0], i, input.readUint64$0());
        }
      }
    },
    _calculateBytesPerPixel$0: function() {
      var t1, bytesPerPixel, t2;
      for (t1 = this.channels, t1 = new H.ListIterator(t1, t1.length, 0, null), bytesPerPixel = 0; t1.moveNext$0();) {
        t2 = J.get$size$x(t1._current);
        if (typeof t2 !== "number")
          return H.iae(t2);
        bytesPerPixel += t2;
      }
      return bytesPerPixel;
    },
    _calculateNumTiles$6: function(numTiles, numLevels, min, max, size, rmode) {
      var t1, t2, i, a, b, size0, t3;
      if (typeof numLevels !== "number")
        return H.iae(numLevels);
      t1 = rmode === 1;
      t2 = J.getInterceptor$n(max);
      i = 0;
      for (; i < numLevels; ++i) {
        a = J.$add$ns(t2.$sub(max, min), 1);
        b = C.JSInt_methods._shlPositive$1(1, i);
        size0 = J.$tdiv$n(a, b);
        t3 = P.max(t1 && J.$lt$n(J.$mul$ns(size0, b), a) ? J.$add$ns(size0, 1) : size0, 1);
        if (typeof size !== "number")
          return H.iae(size);
        t3 = C.JSNumber_methods.$tdiv(t3 + size - 1, size);
        if (i >= numTiles.length)
          return H.ioore(numTiles, i);
        numTiles[i] = t3;
      }
    },
    ExrPart$2: function(_tiled, input) {
      var t1, t2, $name, type, size, pos, t3, t4, t5, bytes, channel, t6, t7, mode, s, num, w, h, ly, l, lx, ch, nBytes, y, maxBytesPerLine, offset, i, numOffsets;
      t1 = this._tiled;
      this._type = t1 ? 1 : 0;
      for (t2 = this.attributes; true;) {
        $name = input.readString$0();
        if ($name.length === 0)
          break;
        type = input.readString$0();
        size = input.readUint32$0();
        pos = J.$add$ns(input.offset, 0);
        t3 = input.buffer;
        t4 = input.bigEndian;
        t5 = J.$add$ns(pos, size);
        bytes = new U.InputBuffer(t3, pos, t5, pos, t4);
        input.offset = J.$add$ns(input.offset, J.$sub$n(t5, pos));
        t2.$indexSet(0, $name, new U.ExrAttribute($name, type, size, bytes));
        switch ($name) {
          case "channels":
            for (; true;) {
              channel = U.ExrChannel$(bytes);
              if (channel.name == null)
                break;
              this.channels.push(channel);
            }
            break;
          case "chromaticities":
            t3 = new Float32Array(8);
            this.chromaticities = t3;
            t4 = bytes.readUint32$0();
            t5 = $.get$__uint32();
            t5[0] = t4;
            t4 = $.get$__uint32ToFloat32();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[0] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[1] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[2] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[3] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[4] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[5] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[6] = t4[0];
            t3 = this.chromaticities;
            t5[0] = bytes.readUint32$0();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t3[7] = t4[0];
            break;
          case "compression":
            t3 = bytes.buffer;
            t4 = bytes.offset;
            bytes.offset = J.$add$ns(t4, 1);
            t4 = J.$index$asx(t3, t4);
            this._compressionType = t4;
            if (J.$gt$n(t4, 7))
              throw H.wrapException(U.ImageException$("EXR Invalid compression type"));
            break;
          case "dataWindow":
            t3 = bytes.readUint32$0();
            t4 = $.get$__uint32();
            t4[0] = t3;
            t3 = $.get$__uint32ToInt32();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t5 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t6 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t7 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t3 = [t5, t6, t7, t3[0]];
            this.dataWindow = t3;
            this.width = J.$add$ns(J.$sub$n(t3[2], t3[0]), 1);
            t3 = this.dataWindow;
            this.height = J.$add$ns(J.$sub$n(t3[3], t3[1]), 1);
            break;
          case "displayWindow":
            t3 = bytes.readUint32$0();
            t4 = $.get$__uint32();
            t4[0] = t3;
            t3 = $.get$__uint32ToInt32();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t5 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t6 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t7 = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            this.displayWindow = [t5, t6, t7, t3[0]];
            break;
          case "lineOrder":
            t3 = bytes.buffer;
            t4 = bytes.offset;
            bytes.offset = J.$add$ns(t4, 1);
            this._lineOrder = J.$index$asx(t3, t4);
            break;
          case "pixelAspectRatio":
            t3 = bytes.readUint32$0();
            $.get$__uint32()[0] = t3;
            t3 = $.get$__uint32ToFloat32();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            this.pixelAspectRatio = t3[0];
            break;
          case "screenWindowCenter":
            t3 = bytes.readUint32$0();
            t4 = $.get$__uint32();
            t4[0] = t3;
            t3 = $.get$__uint32ToFloat32();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            this.screenWindowCenterX = t3[0];
            t4[0] = bytes.readUint32$0();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            this.screenWindowCenterY = t3[0];
            break;
          case "screenWindowWidth":
            t3 = bytes.readUint32$0();
            $.get$__uint32()[0] = t3;
            t3 = $.get$__uint32ToFloat32();
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            this.screenWindowWidth = t3[0];
            break;
          case "tiles":
            this._tileWidth = bytes.readUint32$0();
            this._tileHeight = bytes.readUint32$0();
            t3 = bytes.buffer;
            t4 = bytes.offset;
            bytes.offset = J.$add$ns(t4, 1);
            mode = J.$index$asx(t3, t4);
            this._tileLevelMode = J.getInterceptor$n(mode).$and(mode, 15);
            if (typeof mode !== "number")
              return mode.$shr();
            this._tileRoundingMode = C.JSNumber_methods._shrOtherPositive$1(mode, 4) & 15;
            break;
          case "type":
            s = bytes.readString$0();
            if (s === "deepscanline")
              this._type = 2;
            else if (s === "deeptile")
              this._type = 3;
            else
              throw H.wrapException(U.ImageException$("EXR Invalid type: " + s));
            break;
          default:
            break;
        }
      }
      if (t1) {
        t1 = this.dataWindow;
        t2 = t1[0];
        t3 = t1[2];
        t4 = t1[1];
        t1 = t1[3];
        switch (this._tileLevelMode) {
          case 0:
            num = 1;
            break;
          case 1:
            t1 = P.max(J.$add$ns(J.$sub$n(t3, t2), 1), J.$add$ns(J.$sub$n(t1, t4), 1));
            num = (this._tileRoundingMode === 0 ? this._floorLog2$1(t1) : this._ceilLog2$1(t1)) + 1;
            break;
          case 2:
            w = J.$add$ns(J.$sub$n(t3, t2), 1);
            num = (this._tileRoundingMode === 0 ? this._floorLog2$1(w) : this._ceilLog2$1(w)) + 1;
            break;
          default:
            H.throwExpression(U.ImageException$("Unknown LevelMode format."));
            num = 0;
        }
        this._numXLevels = num;
        t1 = this.dataWindow;
        t2 = t1[0];
        t3 = t1[2];
        t4 = t1[1];
        t1 = t1[3];
        switch (this._tileLevelMode) {
          case 0:
            num = 1;
            break;
          case 1:
            t1 = P.max(J.$add$ns(J.$sub$n(t3, t2), 1), J.$add$ns(J.$sub$n(t1, t4), 1));
            num = (this._tileRoundingMode === 0 ? this._floorLog2$1(t1) : this._ceilLog2$1(t1)) + 1;
            break;
          case 2:
            h = J.$add$ns(J.$sub$n(t1, t4), 1);
            num = (this._tileRoundingMode === 0 ? this._floorLog2$1(h) : this._ceilLog2$1(h)) + 1;
            break;
          default:
            H.throwExpression(U.ImageException$("Unknown LevelMode format."));
            num = 0;
        }
        this._numYLevels = num;
        if (this._tileLevelMode !== 2)
          this._numYLevels = 1;
        t1 = this._numXLevels;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._numXTiles = H.setRuntimeTypeInfo(Array(t1), [J.JSInt]);
        t1 = this._numYLevels;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._numYTiles = H.setRuntimeTypeInfo(Array(t1), [J.JSInt]);
        t1 = this._numXTiles;
        t2 = this._numXLevels;
        t3 = this.dataWindow;
        this._calculateNumTiles$6(t1, t2, t3[0], t3[2], this._tileWidth, this._tileRoundingMode);
        t3 = this._numYTiles;
        t2 = this._numYLevels;
        t1 = this.dataWindow;
        this._calculateNumTiles$6(t3, t2, t1[1], t1[3], this._tileHeight, this._tileRoundingMode);
        t1 = this._calculateBytesPerPixel$0();
        this._bytesPerPixel = t1;
        t2 = this._tileWidth;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 * t2;
        this._maxBytesPerTileLine = t2;
        t1 = this._tileHeight;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._tileBufferSize = t2 * t1;
        this._compressor = U.ExrCompressor_ExrCompressor(this._compressionType, this, t2, t1);
        t1 = this._numXLevels;
        t2 = this._numYLevels;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        this._offsets = H.setRuntimeTypeInfo(Array(t1 * t2), [P.Uint32List]);
        ly = 0;
        l = 0;
        while (true) {
          t1 = this._numYLevels;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(ly < t1))
            break;
          lx = 0;
          while (true) {
            t1 = this._numXLevels;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(lx < t1))
              break;
            t1 = this._offsets;
            t2 = this._numXTiles;
            if (lx >= t2.length)
              return H.ioore(t2, lx);
            t2 = t2[lx];
            t3 = this._numYTiles;
            if (ly >= t3.length)
              return H.ioore(t3, ly);
            t3 = J.$mul$ns(t2, t3[ly]);
            if (typeof t3 !== "number" || Math.floor(t3) !== t3)
              H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t3)));
            t2 = new Uint32Array(t3);
            if (l < 0 || l >= t1.length)
              return H.ioore(t1, l);
            t1[l] = t2;
            ++lx;
            ++l;
          }
          ++ly;
        }
      } else {
        t1 = J.$add$ns(this.height, 1);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        this._bytesPerLine = new Uint32Array(t1);
        for (t1 = this.channels, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          ch = t1._current;
          t2 = J.get$size$x(ch);
          t3 = this.width;
          if (typeof t2 !== "number")
            return t2.$mul();
          if (typeof t3 !== "number")
            return H.iae(t3);
          nBytes = C.JSNumber_methods.$tdiv(t2 * t3, ch.get$xSampling());
          t2 = this.height;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = this.dataWindow;
          t4 = ch.ySampling;
          t5 = this._bytesPerLine;
          y = 0;
          for (; y < t2; ++y) {
            t6 = t3[1];
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (C.JSNumber_methods.$mod(y + t6, t4) === 0) {
              if (y >= t5.length)
                return H.ioore(t5, y);
              t5[y] = t5[y] + nBytes;
            }
          }
        }
        maxBytesPerLine = 0;
        y = 0;
        while (true) {
          t1 = this.height;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(y < t1))
            break;
          t1 = this._bytesPerLine;
          if (y >= t1.length)
            return H.ioore(t1, y);
          maxBytesPerLine = P.max(maxBytesPerLine, t1[y]);
          ++y;
        }
        t1 = U.ExrCompressor_ExrCompressor(this._compressionType, this, maxBytesPerLine, null);
        this._compressor = t1;
        t1 = t1.numScanLines$0();
        this._linesInBuffer = t1;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._lineBufferSize = maxBytesPerLine * t1;
        t1 = this._bytesPerLine.length;
        t2 = new Uint32Array(t1);
        this._offsetInLineBuffer = t2;
        for (t3 = this._bytesPerLine, t4 = t3.length - 1, t5 = this._linesInBuffer, offset = 0, i = 0; i <= t4; ++i) {
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (C.JSInt_methods.$mod(i, t5) === 0)
            offset = 0;
          if (i >= t1)
            return H.ioore(t2, i);
          t2[i] = offset;
          offset += t3[i];
        }
        numOffsets = J.$sub$n(J.$tdiv$n(J.$add$ns(this.height, t5), this._linesInBuffer), 1);
        if (typeof numOffsets !== "number" || Math.floor(numOffsets) !== numOffsets)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(numOffsets)));
        this._offsets = [new Uint32Array(numOffsets)];
      }
    },
    static: {"^": "ExrPart_TYPE_SCANLINE,ExrPart_TYPE_TILE,ExrPart_TYPE_DEEP_SCANLINE,ExrPart_TYPE_DEEP_TILE,ExrPart_INCREASING_Y,ExrPart_DECREASING_Y,ExrPart_RANDOM_Y,ExrPart_ONE_LEVEL,ExrPart_MIPMAP_LEVELS,ExrPart_RIPMAP_LEVELS,ExrPart_ROUND_DOWN,ExrPart_ROUND_UP", ExrPart$: function(_tiled, input) {
        var t1 = new U.ExrPart(new U.HdrImage(P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, null, null, null, null), [], P.LinkedHashMap_LinkedHashMap$_empty(null, null), null, null, null, null, 1, 0, 0, 1, null, null, 0, 0, null, null, null, null, null, null, _tiled, null, null, null, null, null, null, null, null, null, null, null);
        t1.ExrPart$2(_tiled, input);
        return t1;
      