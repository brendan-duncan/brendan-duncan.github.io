// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
(function(reflectionData) {
  "use strict";
  function map(x) {
    x = {x: x};
    delete x.x;
    return x;
  }
  function processStatics(descriptor) {
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property))
        continue;
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods) {
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        }
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array) {
        addStubs(globalObject, element, property, true, descriptor, functions);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop))
            continue;
          firstChar = prop.substring(0, 1);
          if (prop === "static") {
            processStatics(init.statics[property] = element[prop]);
          } else if (firstChar === "+") {
            mangledNames[previousProp] = prop.substring(1);
            var flag = element[prop];
            if (flag > 0)
              element[previousProp].$reflectable = flag;
          } else if (firstChar === "@" && prop !== "@") {
            newDesc[prop.substring(1)]["@"] = element[prop];
          } else if (firstChar === "*") {
            newDesc[previousProp].$defaultValues = element[prop];
            var optionalMethods = newDesc.$methodsWithOptionalArguments;
            if (!optionalMethods) {
              newDesc.$methodsWithOptionalArguments = optionalMethods = {};
            }
            optionalMethods[prop] = previousProp;
          } else {
            var elem = element[prop];
            if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
              addStubs(newDesc, elem, prop, false, element, []);
            } else {
              newDesc[previousProp = prop] = elem;
            }
          }
        }
        $$[property] = [globalObject, newDesc];
        classes.push(property);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted)
        init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName)
        mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount)
        descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted ? function(x) {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
      return new cache(this, funcs[0], x, name);
    } : function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
      return new cache(this, funcs[0], null, name);
    };
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = typeof dart_precompiled == "function" ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  if (!init.interceptedNames)
    init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    "%": "MediaError|MediaKeyError|Navigator|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|SVGAnimatedTransformList|SVGPointList"
  },
  JSBool: {
    "^": "bool/Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Null/Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  JSArray: {
    "^": "List/Interceptor;",
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      throw H.wrapException(P.ArgumentError$(index));
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = C.NativeUint8List_methods.get$iterator(collection); t1.moveNext$0();)
        this.add$1(receiver, t1._current);
    },
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, null);
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start == null)
        H.throwExpression(P.ArgumentError$(null));
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(P.ArgumentError$(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end == null)
        end = receiver.length;
      else {
        if (typeof end !== "number" || Math.floor(end) !== end)
          throw H.wrapException(P.ArgumentError$(end));
        if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      }
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
    },
    fillRange$3: function(receiver, start, end, fillValue) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("fill range"));
      H.IterableMixinWorkaround_fillRangeList(receiver, start, end, fillValue);
    },
    sort$1: function(receiver, compare) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.IterableMixinWorkaround_sortList(receiver, compare);
    },
    lastIndexOf$2: function(receiver, element, start) {
      return H.Lists_lastIndexOf(receiver, element, receiver.length - 1);
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = init;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    set$length: function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$(newLength));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isList: true,
    $isJSIndexable: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    static: {JSArray_JSArray$fixed: function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
        t1 = H.setRuntimeTypeInfo(new Array($length), [$E]);
        t1.fixed$length = init;
        return t1;
      }}
  },
  JSNumber: {
    "^": "num/Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    ceil$0: function(receiver) {
      return this.toInt$0(Math.ceil(receiver));
    },
    floor$0: function(receiver) {
      return this.toInt$0(Math.floor(receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (typeof lowerLimit !== "number")
        throw H.wrapException(P.ArgumentError$(lowerLimit));
      if (typeof upperLimit !== "number")
        throw H.wrapException(P.ArgumentError$(upperLimit));
      if (this.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(P.ArgumentError$(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toDouble$0: function(receiver) {
      return receiver;
    },
    toRadixString$1: function(receiver, radix) {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result;
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else {
        if (typeof other !== "number")
          H.throwExpression(P.ArgumentError$(other));
        return this.toInt$0(receiver / other);
      }
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    $shl: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver >>> other;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver & other) >>> 0;
    },
    $or: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver | other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "int/JSNumber;",
    $isdouble: true,
    $isnum: true,
    $isint: true
  },
  JSDouble: {
    "^": "double/JSNumber;",
    $isdouble: true,
    $isnum: true
  },
  JSString: {
    "^": "String/Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    split$1: function(receiver, pattern) {
      return receiver.split(pattern);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    get$codeUnits: function(receiver) {
      return new J._CodeUnits(receiver);
    },
    indexOf$2: function(receiver, pattern, start) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      return receiver.indexOf(pattern, start);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2;
      start = receiver.length;
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    length$0: function($receiver) {
      return this.get$length($receiver).call$0();
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isJSIndexable: true,
    $isString: true,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          if (index >= t1)
            H.throwExpression(P.RangeError$value(index));
          codeUnit = string.charCodeAt(index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, JSString__skipTrailingWhitespace: function(string, index) {
        var t1, index0, codeUnit;
        for (t1 = string.length; index > 0; index = index0) {
          index0 = index - 1;
          if (index0 >= t1)
            H.throwExpression(P.RangeError$value(index0));
          codeUnit = string.charCodeAt(index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }}
  },
  _CodeUnits: {
    "^": "UnmodifiableListBase;_string",
    get$length: function(_) {
      return this._string.length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, i) {
      var t1, t2;
      t1 = this._string;
      if (typeof i !== "number" || Math.floor(i) !== i)
        H.throwExpression(P.ArgumentError$(i));
      t2 = J.getInterceptor$n(i);
      if (t2.$lt(i, 0))
        H.throwExpression(P.RangeError$value(i));
      if (t2.$ge(i, t1.length))
        H.throwExpression(P.RangeError$value(i));
      return t1.charCodeAt(i);
    },
    $asUnmodifiableListBase: function() {
      return [J.JSInt];
    },
    $asListBase: function() {
      return [J.JSInt];
    },
    $asList: function() {
      return [J.JSInt];
    }
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, new Isolate(), t5, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, false);
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }

      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, new Isolate(), t4, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, false);
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "startPaused"), t1.$index(msg, "replyPort"));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  },
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort.get$sendPort();
    t2 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", t1, t2, context.terminateCapability]);
    t1 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri);
    if (startPaused === true) {
      context.addPause$2(t2, t2);
      init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t1, "start isolate"));
    } else
      t1.call$0();
  },
  IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, startPaused, replyPort) {
    var worker, t1;
    if (uri == null)
      uri = $.get$IsolateNatives_thisScript();
    worker = new Worker(uri);
    worker.onmessage = function(f, a) {
      return function(e) {
        f(a, e);
      };
    }(H.IsolateNatives__processWorkerMessage, worker);
    t1 = init.globalState.nextManagerId++;
    $.get$IsolateNatives_workerIds().$indexSet(0, worker, t1);
    init.globalState.managers.$indexSet(0, t1, worker);
    worker.postMessage(H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "start", "id", t1, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "startPaused", startPaused, "functionName", functionName], null, null)));
  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "^": "Closure:95;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    }
  },
  startRootIsolate_closure0: {
    "^": "Closure:95;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    }
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t1);
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function(object) {
        };
      }
    }
  },
  _IsolateContext: {
    "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,isPaused<,delayedEvents,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._collection$_table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(this.get$kill());
    },
    eval$1: function(code) {
      var old, result, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } finally {
        this._isExecutingEvent = false;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    handleControlMessage$1: function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "kill":
          this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
      }
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      for (t1 = this.ports, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2._current.__isolate_helper$_close$0();
      t1.clear$0(0);
      t1 = this.weakPorts;
      if (t1._collection$_length > 0) {
        t1._last = null;
        t1._first = null;
        t1._rest = null;
        t1._nums = null;
        t1._strings = null;
        t1._collection$_length = 0;
        t1._modifications = t1._modifications + 1 & 67108863;
      }
      init.globalState.isolates.remove$1(0, this.id);
      t1 = this.doneHandlers;
      if (t1 != null) {
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          J.send$1$x(t1._current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 12]
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure:12;responsePort_0",
    call$0: function() {
      J.send$1$x(this.responsePort_0, null);
    }
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:12;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.get$isPaused()) {
        t1.delayedEvents.push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:95;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:12;topLevel_0,args_1,message_2,isSpawnUri_3",
    call$0: function() {
      var t1, t2, t3;
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (J.$eq(isolate.get$controlPort(), t3)) {
        isolate.handleControlMessage$1(t1.msg_0);
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:95;box_0,this_1,shouldSerialize_2",
    call$0: function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    }
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = this._workerId;
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = this._isolateId;
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    __isolate_helper$_close$0: function() {
      this._isClosed = true;
      this._handler = null;
    },
    close$0: function(_) {
      var t1, t2;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = this._id;
      t1.ports.remove$1(0, t2);
      t1.weakPorts.remove$1(0, t2);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    get$sendPort: function() {
      return new H._NativeJsSendPort(this, init.globalState.currentContext.id);
    },
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  ReceivePortImpl: {
    "^": "Stream;_rawPort,_controller",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    close$0: [function(_) {
      this._rawPort.close$0(0);
      this._controller.close$0(0);
    }, "call$0", "get$close", 0, 0, 12],
    ReceivePortImpl$fromRawReceivePort$1: function(_rawPort) {
      var t1 = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
      this._controller = t1;
      this._rawPort._handler = t1.get$add(t1);
    },
    $asStream: function() {
      return [null];
    }
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x._id];
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x._id);
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, i;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure:96;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, t1;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, list, t1);
      return ["list", t1, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, t1;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, map, t1);
      return ["map", t1, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:12;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:12;this_2,callback_3",
    call$0: function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash = this._id;
      if (typeof hash !== "number")
        return hash.$shr();
      hash = C.JSNumber_methods._shrOtherPositive$1(hash, 0) ^ C.JSNumber_methods._tdivFast$1(hash, 4294967296);
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this._id;
        t2 = other._id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 0],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1, maxCharCode, digitsPart, i, t2;
    handleError = H.Primitives__throwFormatException$closure();
    if (typeof source !== "string")
      H.throwExpression(P.ArgumentError$(source));
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (radix == null) {
      if (match != null) {
        t1 = match.length;
        if (2 >= t1)
          return H.ioore(match, 2);
        if (match[2] != null)
          return parseInt(source, 16);
        if (3 >= t1)
          return H.ioore(match, 3);
        if (match[3] != null)
          return parseInt(source, 10);
        return handleError.call$1(source);
      }
      radix = 10;
    } else {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
      if (match != null) {
        if (radix === 10) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] != null;
        } else
          t1 = false;
        if (t1)
          return parseInt(source, 10);
        if (!(radix < 10)) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] == null;
        } else
          t1 = true;
        if (t1) {
          maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
          if (1 >= match.length)
            return H.ioore(match, 1);
          digitsPart = match[1];
          t1 = J.getInterceptor$asx(digitsPart);
          i = 0;
          while (true) {
            t2 = t1.get$length(digitsPart);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            t1.codeUnitAt$1(digitsPart, 0);
            if (i >= digitsPart.length)
              H.throwExpression(P.RangeError$value(i));
            if (digitsPart.charCodeAt(i) > maxCharCode)
              return handleError.call$1(source);
            ++i;
          }
        }
      }
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, radix);
  },
  Primitives_parseDouble: function(source, handleError) {
    var result, trimmed;
    if (typeof source !== "string")
      H.throwExpression(P.ArgumentError$(source));
    handleError = H.Primitives__throwFormatException$closure();
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
      return handleError.call$1(source);
    result = parseFloat(source);
    if (isNaN(result)) {
      trimmed = J.trim$0$s(source);
      if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
        return result;
      return handleError.call$1(source);
    }
    return result;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_IX5(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_numMicroseconds: function() {
    if (typeof window != "undefined" && window !== null) {
      var performance = window.performance;
      if (performance != null && typeof performance.webkitNow == "function")
        return C.JSNumber_methods.toInt$0(Math.floor(1000 * performance.webkitNow()));
    }
    return 1000 * Date.now();
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [J.JSInt];
    for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(P.ArgumentError$(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i < 0)
        throw H.wrapException(P.ArgumentError$(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_stringFromCharCode: function(charCode) {
    var bits;
    if (typeof charCode !== "number")
      return H.iae(charCode);
    if (0 <= charCode) {
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSNumber_methods._shrOtherPositive$1(bits, 10)) >>> 0, (56320 | bits & 1023) >>> 0);
      }
    }
    throw H.wrapException(P.RangeError$range(charCode, 0, 1114111));
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else if (typeof dart_precompiled == "function") {
      t1 = function(a, b, c, d) {
        this.$initialize(a, b, c, d);
      };
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents += ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      buffer._contents += typeof str === "string" ? str : H.S(str);
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  checkSubtype: function(object, isField, checks, asField) {
    var $arguments, interceptor;
    if (object == null)
      return false;
    $arguments = H.getRuntimeTypeInfo(object);
    interceptor = J.getInterceptor(object);
    if (interceptor[isField] == null)
      return false;
    return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_IX5), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  },
  ConstantMap: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !J.$eq(this.get$length(this), 0);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _throwUnmodifiable$0: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    $indexSet: function(_, key, val) {
      return this._throwUnmodifiable$0();
    },
    $isMap: true
  },
  ConstantStringMap: {
    "^": "ConstantMap;length>,_jsObject,__js_helper$_keys",
    length$0: function($receiver) {
      return this.length.call$0();
    },
    containsKey$1: function(key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[key];
    },
    forEach$1: function(_, f) {
      var keys, i, key;
      keys = this.__js_helper$_keys;
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        f.call$2(key, this._fetch$1(key));
      }
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new H._ConstantMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(this.__js_helper$_keys, new H.ConstantStringMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $isEfficientLength: true
  },
  ConstantStringMap_values_closure: {
    "^": "Closure:97;this_0",
    call$1: function(key) {
      return this.this_0._fetch$1(key);
    }
  },
  _ConstantMapKeyIterable: {
    "^": "IterableBase;__js_helper$_map",
    get$iterator: function(_) {
      return J.get$iterator$ax(this.__js_helper$_map.__js_helper$_keys);
    }
  },
  GeneralConstantMap: {
    "^": "ConstantMap;_jsData",
    _getMap$0: function() {
      if (!this.$map)
        this.$map = H.fillLiteralMap(this._jsData, P.LinkedHashMap_LinkedHashMap(null, null, null, H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)));
      return this.$map;
    },
    containsKey$1: function(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index: function(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1: function(_, f) {
      this._getMap$0().forEach$1(0, f);
    },
    get$keys: function() {
      return this._getMap$0().get$keys();
    },
    get$values: function(_) {
      var t1 = this._getMap$0();
      return t1.get$values(t1);
    },
    get$length: function(_) {
      var t1 = this._getMap$0();
      return t1.get$length(t1);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    }
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data>,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, requiredParameterCount, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        requiredParameterCount = requiredParametersInfo >> 1;
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParameterCount, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }

        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }

        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:97;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:95;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "^": "Closure:95;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "^": "Closure:95;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "^": "Closure:95;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "^": "Closure:95;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      t1 = H.Primitives_objectHashCode(this._target);
      if (typeof receiverHashCode !== "number")
        return receiverHashCode.$xor();
      return (receiverHashCode ^ t1) >>> 0;
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  TypeImpl: {
    "^": "Object;_typeName,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName, unmangledName0;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName;
      unmangledName0 = init.mangledGlobalNames[unmangledName];
      unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true
  },
  initHooks_closure: {
    "^": "Closure:97;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "^": "Closure:98;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "^": "Closure:0;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  }
}],
["accelerators", "package:dartray/accelerators/accelerators.dart", , E, {
  "^": "",
  BruteForceAccel: {
    "^": "Aggregate;primitives,bounds@,primitiveId",
    worldBound$0: function() {
      return this.bounds;
    },
    canIntersect$0: function() {
      return true;
    },
    intersect$2: function(ray, isect) {
      var rayT, hitSomething, i, t1;
      rayT = [0];
      if (this.bounds.inside$1(ray.pointAt$1(ray.get$minDistance())))
        rayT[0] = ray.minDistance;
      else if (!this.bounds.intersectP$2(ray, rayT))
        return false;
      for (hitSomething = false, i = 0; t1 = this.primitives, i < t1.length; ++i)
        if (t1[i].intersect$2(ray, isect))
          hitSomething = true;
      return hitSomething;
    },
    intersectP$1: function(ray) {
      var i, t1;
      for (i = 0; t1 = this.primitives, i < t1.length; ++i)
        if (t1[i].intersectP$1(ray))
          return true;
      return false;
    },
    BruteForceAccel$1: function(p) {
      var t1, i, t2;
      $.Log.call$2(0, "Building Brute Force Acceleration Structures.");
      t1 = J.getInterceptor$asx(p);
      i = 0;
      while (true) {
        t2 = t1.get$length(p);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$index(p, i).fullyRefine$1(this.primitives);
        ++i;
      }
      for (i = 0; t1 = this.primitives, i < t1.length; ++i) {
        t2 = this.bounds;
        t1 = t1[i].worldBound$0();
        this.bounds = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t2.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(t2.pMax.data)))).union$1(t1);
      }
    },
    static: {BruteForceAccel_Create: [function(prims, ps) {
        return E.BruteForceAccel$(prims);
      }, "call$2", "BruteForceAccel_Create$closure", 4, 0, 1], BruteForceAccel$: function(p) {
        var t1, t2;
        t1 = G.BBox$(null, null);
        t2 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t2 + 1;
        t2 = new E.BruteForceAccel([], t1, t2);
        t2.BruteForceAccel$1(p);
        return t2;
      }}
  },
  BVHAccel: {
    "^": "Aggregate;maxPrimsInNode,splitMethod,primitives,nodes,primitiveId",
    worldBound$0: function() {
      var t1 = this.nodes;
      if (t1 != null) {
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = t1[0].get$bounds();
      } else
        t1 = G.BBox$(null, null);
      return t1;
    },
    canIntersect$0: function() {
      return true;
    },
    intersect$2: function(ray, isect) {
      var t1, t2, t3, invDir, t4, dirIsNeg, todo, hit, todoOffset, nodeNum, node, i, todoOffset0, nodeNum0;
      if (this.nodes == null)
        return false;
      t1 = J.get$x$x(ray.get$direction());
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = J.get$y$x(ray.direction);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = J.get$z$x(ray.direction);
      if (typeof t3 !== "number")
        return H.iae(t3);
      invDir = G.Vector$(1 / t1, 1 / t2, 1 / t3);
      t1 = invDir.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0] < 0 ? 1 : 0;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1] < 0 ? 1 : 0;
      if (2 >= t2)
        return H.ioore(t1, 2);
      dirIsNeg = [t3, t4, t1[2] < 0 ? 1 : 0];
      todo = new Uint32Array(64);
      for (hit = false, todoOffset = 0, nodeNum = 0; true;) {
        t1 = this.nodes;
        if (nodeNum >>> 0 !== nodeNum || nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        node = t1[nodeNum];
        if (E.BVHAccel__intersectP(node.get$bounds(), ray, invDir, dirIsNeg)) {
          t1 = node.get$nPrimitives();
          if (typeof t1 !== "number")
            return t1.$gt();
          if (t1 > 0) {
            i = 0;
            while (true) {
              t1 = node.get$nPrimitives();
              if (typeof t1 !== "number")
                return H.iae(t1);
              if (!(i < t1))
                break;
              t1 = this.primitives;
              t2 = J.$add$ns(node.get$offset(node), i);
              if (t2 >>> 0 !== t2 || t2 >= t1.length)
                return H.ioore(t1, t2);
              t1 = this.primitives;
              t2 = J.$add$ns(node.offset, i);
              if (t2 >>> 0 !== t2 || t2 >= t1.length)
                return H.ioore(t1, t2);
              t2 = t1[t2].intersect$2(ray, isect);
              t1 = node.offset;
              t3 = this.primitives;
              if (t2) {
                t1 = J.$add$ns(t1, i);
                if (t1 >>> 0 !== t1 || t1 >= t3.length)
                  return H.ioore(t3, t1);
                hit = true;
              } else {
                t1 = J.$add$ns(t1, i);
                if (t1 >>> 0 !== t1 || t1 >= t3.length)
                  return H.ioore(t3, t1);
              }
              ++i;
            }
            if (todoOffset === 0)
              break;
            --todoOffset;
            if (todoOffset < 0 || todoOffset >= 64)
              return H.ioore(todo, todoOffset);
            nodeNum = todo[todoOffset];
          } else {
            t1 = node.get$axis();
            if (t1 >>> 0 !== t1 || t1 >= 3)
              return H.ioore(dirIsNeg, t1);
            t1 = J.$eq(dirIsNeg[t1], 0);
            ++nodeNum;
            todoOffset0 = todoOffset + 1;
            nodeNum0 = node.offset;
            if (!t1) {
              if (todoOffset < 0 || todoOffset >= 64)
                return H.ioore(todo, todoOffset);
              todo[todoOffset] = nodeNum;
              nodeNum = nodeNum0;
              todoOffset = todoOffset0;
            } else {
              if (todoOffset < 0 || todoOffset >= 64)
                return H.ioore(todo, todoOffset);
              todo[todoOffset] = nodeNum0;
              todoOffset = todoOffset0;
            }
          }
        } else {
          if (todoOffset === 0)
            break;
          --todoOffset;
          if (todoOffset < 0 || todoOffset >= 64)
            return H.ioore(todo, todoOffset);
          nodeNum = todo[todoOffset];
        }
      }
      return hit;
    },
    intersectP$1: function(ray) {
      var t1, t2, t3, invDir, t4, dirIsNeg, todo, todoOffset, nodeNum, node, i, nodeNum0, todoOffset0;
      if (this.nodes == null)
        return false;
      t1 = J.get$x$x(ray.direction);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = J.get$y$x(ray.direction);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = J.get$z$x(ray.direction);
      if (typeof t3 !== "number")
        return H.iae(t3);
      invDir = G.Vector$(1 / t1, 1 / t2, 1 / t3);
      t1 = invDir.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0] < 0 ? 1 : 0;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1] < 0 ? 1 : 0;
      if (2 >= t2)
        return H.ioore(t1, 2);
      dirIsNeg = [t3, t4, t1[2] < 0 ? 1 : 0];
      todo = new Uint32Array(64);
      for (todoOffset = 0, nodeNum = 0; true;) {
        t1 = this.nodes;
        if (nodeNum >>> 0 !== nodeNum || nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        node = t1[nodeNum];
        if (E.BVHAccel__intersectP(node.get$bounds(), ray, invDir, dirIsNeg)) {
          t1 = node.get$nPrimitives();
          if (typeof t1 !== "number")
            return t1.$gt();
          if (t1 > 0) {
            i = 0;
            while (true) {
              t1 = node.get$nPrimitives();
              if (typeof t1 !== "number")
                return H.iae(t1);
              if (!(i < t1))
                break;
              t1 = this.primitives;
              t2 = J.$add$ns(node.get$offset(node), i);
              if (t2 >>> 0 !== t2 || t2 >= t1.length)
                return H.ioore(t1, t2);
              t1 = this.primitives;
              t2 = J.$add$ns(node.offset, i);
              if (t2 >>> 0 !== t2 || t2 >= t1.length)
                return H.ioore(t1, t2);
              t2 = t1[t2].intersectP$1(ray);
              t1 = node.offset;
              t3 = this.primitives;
              if (t2) {
                t1 = J.$add$ns(t1, i);
                if (t1 >>> 0 !== t1 || t1 >= t3.length)
                  return H.ioore(t3, t1);
                return true;
              } else {
                t1 = J.$add$ns(t1, i);
                if (t1 >>> 0 !== t1 || t1 >= t3.length)
                  return H.ioore(t3, t1);
              }
              ++i;
            }
            if (todoOffset === 0)
              break;
            --todoOffset;
            if (todoOffset < 0 || todoOffset >= 64)
              return H.ioore(todo, todoOffset);
            nodeNum = todo[todoOffset];
          } else {
            t1 = node.get$axis();
            if (t1 >>> 0 !== t1 || t1 >= 3)
              return H.ioore(dirIsNeg, t1);
            t1 = J.$eq(dirIsNeg[t1], 0);
            ++nodeNum;
            nodeNum0 = node.offset;
            todoOffset0 = todoOffset + 1;
            if (!t1) {
              if (todoOffset < 0 || todoOffset >= 64)
                return H.ioore(todo, todoOffset);
              todo[todoOffset] = nodeNum;
              nodeNum = nodeNum0;
              todoOffset = todoOffset0;
            } else {
              if (todoOffset < 0 || todoOffset >= 64)
                return H.ioore(todo, todoOffset);
              todo[todoOffset] = nodeNum0;
              todoOffset = todoOffset0;
            }
          }
        } else {
          if (todoOffset === 0)
            break;
          --todoOffset;
          if (todoOffset < 0 || todoOffset >= 64)
            return H.ioore(todo, todoOffset);
          nodeNum = todo[todoOffset];
        }
      }
      return false;
    },
    _recursiveBuild$5: function(buildData, start, end, totalNodes, orderedPrims) {
      var t1, node, bbox, t2, i, t3, nPrimitives, firstPrimOffset, primNum, centroidBounds, t4, dim, mid, t5, mid0, buckets, t6, b, b0, b1, cost, count0, j, j0, count1, minCost, minCost0, c2;
      t1 = {};
      totalNodes[0] = J.$add$ns(totalNodes[0], 1);
      node = new E._BVHBuildNode(G.BBox$(null, null), [null, null], null, null, null);
      bbox = G.BBox$(null, null);
      for (t2 = buildData.length, i = start; i < end; ++i) {
        if (i >= t2)
          return H.ioore(buildData, i);
        t3 = buildData[i].get$bounds();
        bbox = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(bbox.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(bbox.pMax.data)))).union$1(t3);
      }
      nPrimitives = end - start;
      if (nPrimitives === 1) {
        firstPrimOffset = orderedPrims.length;
        for (i = start; i < end; ++i) {
          if (i >= t2)
            return H.ioore(buildData, i);
          primNum = buildData[i].get$primitiveNumber();
          t1 = this.primitives;
          if (primNum >= t1.length)
            return H.ioore(t1, primNum);
          orderedPrims.push(t1[primNum]);
        }
        node.firstPrimOffset = firstPrimOffset;
        node.nPrimitives = nPrimitives;
        node.bounds.copy$1(bbox);
      } else {
        centroidBounds = G.BBox$(null, null);
        t1.centroidBounds_0 = centroidBounds;
        for (t3 = centroidBounds, i = start; i < end; ++i, t3 = centroidBounds) {
          if (i >= t2)
            return H.ioore(buildData, i);
          t4 = buildData[i].get$centroid();
          centroidBounds = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t3.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(t3.pMax.data)))).unionPoint$1(t4);
          t1.centroidBounds_0 = centroidBounds;
        }
        dim = t3.maximumExtent$0();
        mid = C.JSInt_methods._tdivFast$1(start + end, 2);
        t3 = t1.centroidBounds_0;
        t4 = t3.pMax.data;
        if (dim >= t4.length)
          return H.ioore(t4, dim);
        t4 = t4[dim];
        t3 = t3.pMin.data;
        if (dim >= t3.length)
          return H.ioore(t3, dim);
        t3 = t3[dim];
        if (t4 === t3) {
          firstPrimOffset = orderedPrims.length;
          for (i = start; i < end; ++i) {
            if (i >= t2)
              return H.ioore(buildData, i);
            primNum = buildData[i].get$primitiveNumber();
            t1 = this.primitives;
            if (primNum >= t1.length)
              return H.ioore(t1, primNum);
            orderedPrims.push(t1[primNum]);
          }
          node.firstPrimOffset = firstPrimOffset;
          node.nPrimitives = nPrimitives;
          node.bounds.copy$1(bbox);
          return node;
        }
        t5 = new E.BVHAccel__recursiveBuild_ComparePoints(dim);
        switch (this.splitMethod) {
          case 0:
            mid0 = G.partition(buildData, new E.BVHAccel__recursiveBuild_CompareToMid(dim, 0.5 * (t3 + t4)), start, end);
            if (mid0 !== start && mid0 !== end) {
              mid = mid0;
              break;
            }
            G.nth_element(buildData, start, mid, end, t5);
            break;
          case 1:
            G.nth_element(buildData, start, mid, end, t5);
            break;
          case 2:
            if (nPrimitives <= 4)
              G.nth_element(buildData, start, mid, end, t5);
            else {
              buckets = H.setRuntimeTypeInfo(Array(12), [E._BVHBucketInfo]);
              for (t3 = buckets.length, i = 0; i < 12; ++i) {
                t4 = G.BBox$(null, null);
                if (i >= t3)
                  return H.ioore(buckets, i);
                buckets[i] = new E._BVHBucketInfo(0, t4);
              }
              for (i = start; i < end; ++i) {
                if (i >= t2)
                  return H.ioore(buildData, i);
                t4 = buildData[i].get$centroid().data;
                if (dim >= t4.length)
                  return H.ioore(t4, dim);
                t4 = t4[dim];
                t5 = t1.centroidBounds_0;
                t6 = t5.pMin.data;
                if (dim >= t6.length)
                  return H.ioore(t6, dim);
                t6 = t6[dim];
                t5 = t5.pMax.data;
                if (dim >= t5.length)
                  return H.ioore(t5, dim);
                b = C.JSNumber_methods.toInt$0(12 * ((t4 - t6) / (t5[dim] - t6)));
                if (b === 12)
                  b = 11;
                if (b < 0 || b >= t3)
                  return H.ioore(buckets, b);
                t4 = buckets[b];
                t4.set$count(J.$add$ns(t4.get$count(), 1));
                t4 = buckets[b];
                t5 = t4.get$bounds();
                t6 = buildData[i].get$bounds();
                t4.set$bounds(new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t5.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(t5.pMax.data)))).union$1(t6));
              }
              b0 = G.BBox$(null, null);
              b1 = G.BBox$(null, null);
              cost = new Float32Array(11);
              for (i = 0; i < 11; i = j) {
                b0.reset$0(0);
                b1.reset$0(0);
                for (count0 = 0, j = 0; j <= i; ++j) {
                  if (j >= t3)
                    return H.ioore(buckets, j);
                  t4 = buckets[j].get$bounds();
                  b0 = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(b0.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(b0.pMax.data)))).union$1(t4);
                  t4 = buckets[j].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count0 += t4;
                }
                for (j = i + 1, j0 = j, count1 = 0; j0 < 12; ++j0) {
                  if (j0 >= t3)
                    return H.ioore(buckets, j0);
                  t4 = buckets[j0].get$bounds();
                  b1 = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(b1.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(b1.pMax.data)))).union$1(t4);
                  t4 = buckets[j0].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count1 += t4;
                }
                cost[i] = 0.125 + (count0 * b0.surfaceArea$0() + count1 * b1.surfaceArea$0()) / bbox.surfaceArea$0();
              }
              minCost = cost[0];
              t1.minCostSplit_1 = 0;
              for (i = 1; i < 11; ++i) {
                minCost0 = cost[i];
                if (minCost0 < minCost) {
                  t1.minCostSplit_1 = i;
                  minCost = minCost0;
                }
              }
              if (nPrimitives > this.maxPrimsInNode || minCost < nPrimitives)
                mid = G.partition(buildData, new E.BVHAccel__recursiveBuild_CompareToBucket(t1, dim, 12), start, end);
              else {
                firstPrimOffset = orderedPrims.length;
                for (i = start; i < end; ++i) {
                  if (i >= t2)
                    return H.ioore(buildData, i);
                  primNum = buildData[i].get$primitiveNumber();
                  t1 = this.primitives;
                  if (primNum >= t1.length)
                    return H.ioore(t1, primNum);
                  orderedPrims.push(t1[primNum]);
                }
                node.firstPrimOffset = firstPrimOffset;
                node.nPrimitives = nPrimitives;
                node.bounds.copy$1(bbox);
                return node;
              }
            }
            break;
          default:
            if (nPrimitives <= 4)
              G.nth_element(buildData, start, mid, end, t5);
            else {
              buckets = H.setRuntimeTypeInfo(Array(12), [E._BVHBucketInfo]);
              for (t3 = buckets.length, i = 0; i < 12; ++i) {
                t4 = G.BBox$(null, null);
                if (i >= t3)
                  return H.ioore(buckets, i);
                buckets[i] = new E._BVHBucketInfo(0, t4);
              }
              for (i = start; i < end; ++i) {
                if (i >= t2)
                  return H.ioore(buildData, i);
                t4 = buildData[i].get$centroid().data;
                if (dim >= t4.length)
                  return H.ioore(t4, dim);
                t4 = t4[dim];
                t5 = t1.centroidBounds_0;
                t6 = t5.pMin.data;
                if (dim >= t6.length)
                  return H.ioore(t6, dim);
                t6 = t6[dim];
                t5 = t5.pMax.data;
                if (dim >= t5.length)
                  return H.ioore(t5, dim);
                b = C.JSNumber_methods.toInt$0(12 * ((t4 - t6) / (t5[dim] - t6)));
                if (b === 12)
                  b = 11;
                if (b < 0 || b >= t3)
                  return H.ioore(buckets, b);
                t4 = buckets[b];
                t4.set$count(J.$add$ns(t4.get$count(), 1));
                t4 = buckets[b];
                t5 = t4.get$bounds();
                t6 = buildData[i].get$bounds();
                t4.set$bounds(new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t5.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(t5.pMax.data)))).union$1(t6));
              }
              b0 = G.BBox$(null, null);
              b1 = G.BBox$(null, null);
              cost = new Float32Array(11);
              for (i = 0; i < 11; i = j) {
                b0.reset$0(0);
                b1.reset$0(0);
                for (count0 = 0, j = 0; j <= i; ++j) {
                  if (j >= t3)
                    return H.ioore(buckets, j);
                  t4 = buckets[j].get$bounds();
                  b0 = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(b0.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(b0.pMax.data)))).union$1(t4);
                  t4 = buckets[j].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count0 += t4;
                }
                for (j = i + 1, j0 = j, count1 = 0; j0 < 12; ++j0) {
                  if (j0 >= t3)
                    return H.ioore(buckets, j0);
                  t4 = buckets[j0].get$bounds();
                  b1 = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(b1.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(b1.pMax.data)))).union$1(t4);
                  t4 = buckets[j0].get$count();
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  count1 += t4;
                }
                cost[i] = 0.125 + (count0 * b0.surfaceArea$0() + count1 * b1.surfaceArea$0()) / bbox.surfaceArea$0();
              }
              minCost = cost[0];
              t1.minCostSplit_1 = 0;
              for (i = 1; i < 11; ++i) {
                minCost0 = cost[i];
                if (minCost0 < minCost) {
                  t1.minCostSplit_1 = i;
                  minCost = minCost0;
                }
              }
              if (nPrimitives > this.maxPrimsInNode || minCost < nPrimitives)
                mid = G.partition(buildData, new E.BVHAccel__recursiveBuild_CompareToBucket(t1, dim, 12), start, end);
              else {
                firstPrimOffset = orderedPrims.length;
                for (i = start; i < end; ++i) {
                  if (i >= t2)
                    return H.ioore(buildData, i);
                  primNum = buildData[i].get$primitiveNumber();
                  t1 = this.primitives;
                  if (primNum >= t1.length)
                    return H.ioore(t1, primNum);
                  orderedPrims.push(t1[primNum]);
                }
                node.firstPrimOffset = firstPrimOffset;
                node.nPrimitives = nPrimitives;
                node.bounds.copy$1(bbox);
                return node;
              }
            }
            break;
        }
        c2 = this._recursiveBuild$5(buildData, mid, end, totalNodes, orderedPrims);
        node.initInterior$3(dim, this._recursiveBuild$5(buildData, start, mid, totalNodes, orderedPrims), c2);
      }
      return node;
    },
    _flattenBVHTree$2: function(node, offset) {
      var t1, t2, linearNode;
      t1 = this.nodes;
      t2 = offset[0];
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      linearNode = t1[t2];
      linearNode.set$bounds(node.get$bounds());
      offset[0] = t2 + 1;
      t1 = node.get$nPrimitives();
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        J.set$offset$x(linearNode, node.get$firstPrimOffset());
        linearNode.set$nPrimitives(node.nPrimitives);
      } else {
        linearNode.set$axis(node.get$splitAxis());
        linearNode.set$nPrimitives(0);
        this._flattenBVHTree$2(node.get$children(node)[0], offset);
        linearNode.offset = this._flattenBVHTree$2(node.children[1], offset);
      }
      return t2;
    },
    BVHAccel$3: function(p, maxPrims, splitMethod) {
      var t1, i, t2, buildData, t3, bbox, totalNodes, orderedPrims, root, len;
      $.Log.call$2(0, "Building BVH Acceleration Structures.");
      this.maxPrimsInNode = P.min(255, maxPrims);
      t1 = J.getInterceptor$asx(p);
      i = 0;
      while (true) {
        t2 = t1.get$length(p);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$index(p, i).fullyRefine$1(this.primitives);
        ++i;
      }
      t1 = "BVH: " + this.primitives.length + " Primitives";
      $.Log.call$2(0, t1);
      t1 = this.primitives.length;
      if (t1 === 0) {
        this.nodes = null;
        return;
      }
      buildData = H.setRuntimeTypeInfo(Array(t1), [E._BVHPrimitiveInfo]);
      for (t1 = buildData.length, i = 0; t2 = this.primitives, t3 = t2.length, i < t3; ++i) {
        bbox = t2[i].worldBound$0();
        t2 = new E._BVHPrimitiveInfo(i, null, bbox);
        if (bbox == null) {
          t3 = G.BBox$(null, null);
          t2.bounds = t3;
        } else
          t3 = bbox;
        t2.centroid = t3.get$center();
        if (i >= t1)
          return H.ioore(buildData, i);
        buildData[i] = t2;
      }
      totalNodes = [0];
      orderedPrims = [];
      root = this._recursiveBuild$5(buildData, 0, t3, totalNodes, orderedPrims);
      this.primitives = orderedPrims;
      t1 = "BVH created with " + H.S(totalNodes[0]) + " nodes for " + this.primitives.length + " primitives";
      $.Log.call$2(0, t1);
      t1 = totalNodes[0];
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = H.setRuntimeTypeInfo(Array(t1), [E._LinearBVHNode]);
      this.nodes = t1;
      len = totalNodes[0];
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = new E._LinearBVHNode(null, null, null, null);
      }
      this._flattenBVHTree$2(root, [0]);
    },
    static: {"^": "BVHAccel_SPLIT_MIDDLE,BVHAccel_SPLIT_EQUAL_COUNTS,BVHAccel_SPLIT_SAH", BVHAccel$: function(p, maxPrims, splitMethod) {
        var t1 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t1 + 1;
        t1 = new E.BVHAccel(null, splitMethod, [], null, t1);
        t1.BVHAccel$3(p, maxPrims, splitMethod);
        return t1;
      }, BVHAccel__intersectP: function(bounds, ray, invDir, dirIsNeg) {
        var t1, t2, t3, t4, tmin, tmax, tymin, tymax, tzmin, tzmax;
        t1 = J.getInterceptor$asx(bounds);
        t2 = J.$sub$n(J.get$x$x(t1.$index(bounds, dirIsNeg[0])), J.get$x$x(ray.origin));
        t3 = invDir.data;
        t4 = t3.length;
        if (0 >= t4)
          return H.ioore(t3, 0);
        tmin = J.$mul$ns(t2, t3[0]);
        t2 = dirIsNeg[0];
        if (typeof t2 !== "number")
          return H.iae(t2);
        tmax = J.$mul$ns(J.$sub$n(J.get$x$x(t1.$index(bounds, 1 - t2)), J.get$x$x(ray.origin)), t3[0]);
        t2 = J.$sub$n(J.get$y$x(t1.$index(bounds, dirIsNeg[1])), J.get$y$x(ray.origin));
        if (1 >= t4)
          return H.ioore(t3, 1);
        tymin = J.$mul$ns(t2, t3[1]);
        t2 = dirIsNeg[1];
        if (typeof t2 !== "number")
          return H.iae(t2);
        tymax = J.$mul$ns(J.$sub$n(J.get$y$x(t1.$index(bounds, 1 - t2)), J.get$y$x(ray.origin)), t3[1]);
        if (J.$gt$n(tmin, tymax) || J.$gt$n(tymin, tmax))
          return false;
        if (J.$gt$n(tymin, tmin))
          tmin = tymin;
        if (J.$lt$n(tymax, tmax))
          tmax = tymax;
        t2 = J.$sub$n(J.get$z$x(t1.$index(bounds, dirIsNeg[2])), J.get$z$x(ray.origin));
        if (2 >= t4)
          return H.ioore(t3, 2);
        tzmin = J.$mul$ns(t2, t3[2]);
        t2 = dirIsNeg[2];
        if (typeof t2 !== "number")
          return H.iae(t2);
        tzmax = J.$mul$ns(J.$sub$n(J.get$z$x(t1.$index(bounds, 1 - t2)), J.get$z$x(ray.origin)), t3[2]);
        if (J.$gt$n(tmin, tzmax) || J.$gt$n(tzmin, tmax))
          return false;
        if (J.$gt$n(tzmin, tmin))
          tmin = tzmin;
        if (J.$lt$n(tzmax, tmax))
          tmax = tzmax;
        return J.$lt$n(tmin, ray.maxDistance) && J.$gt$n(tmax, ray.minDistance);
      }, BVHAccel_Create: [function(prims, ps) {
        var splitMethod, maxPrimsInNode, t1, sm;
        splitMethod = ps.findOneString$2("splitmethod", "sah");
        maxPrimsInNode = ps.findOneInt$2("maxnodeprims", 4);
        t1 = J.getInterceptor(splitMethod);
        if (t1.$eq(splitMethod, "sah"))
          sm = 2;
        else if (t1.$eq(splitMethod, "middle"))
          sm = 0;
        else {
          t1 = t1.$eq(splitMethod, "equal") ? 1 : 2;
          sm = t1;
        }
        return E.BVHAccel$(prims, maxPrimsInNode, sm);
      }, "call$2", "BVHAccel_Create$closure", 4, 0, 2]}
  },
  BVHAccel__recursiveBuild_ComparePoints: {
    "^": "Closure:99;dim_1",
    call$2: function(a, b) {
      var t1, t2, t3;
      t1 = this.dim_1;
      t2 = a.get$centroid().data;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      t2 = t2[t1];
      t3 = b.get$centroid().data;
      if (t1 >= t3.length)
        return H.ioore(t3, t1);
      return t2 < t3[t1];
    }
  },
  BVHAccel__recursiveBuild_CompareToMid: {
    "^": "Closure:100;dim_2,pmid_3",
    call$1: function(a) {
      var t1, t2;
      t1 = this.dim_2;
      t2 = a.get$centroid().data;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1] < this.pmid_3;
    }
  },
  BVHAccel__recursiveBuild_CompareToBucket: {
    "^": "Closure:100;box_0,dim_4,nBuckets_5",
    call$1: function(p) {
      var t1, t2, t3, t4, t5, t6, b;
      t1 = this.nBuckets_5;
      t2 = this.dim_4;
      t3 = p.get$centroid().data;
      if (t2 >= t3.length)
        return H.ioore(t3, t2);
      t3 = t3[t2];
      t4 = this.box_0;
      t5 = t4.centroidBounds_0;
      t6 = t5.pMin.data;
      if (t2 >= t6.length)
        return H.ioore(t6, t2);
      t6 = t6[t2];
      t5 = t5.pMax.data;
      if (t2 >= t5.length)
        return H.ioore(t5, t2);
      b = C.JSNumber_methods.toInt$0(Math.floor(t1 * ((t3 - t6) / (t5[t2] - t6))));
      if (b === t1)
        b = t1 - 1;
      return b <= t4.minCostSplit_1;
    }
  },
  _BVHPrimitiveInfo: {
    "^": "Object;primitiveNumber<,centroid<,bounds@"
  },
  _BVHBucketInfo: {
    "^": "Object;count@,bounds@"
  },
  _BVHBuildNode: {
    "^": "Object;bounds@,children>,splitAxis<,firstPrimOffset<,nPrimitives<",
    initInterior$3: function(axis, c0, c1) {
      var t1, t2;
      t1 = this.children;
      t1[0] = c0;
      t1[1] = c1;
      t1 = c0.get$bounds();
      t2 = c1.get$bounds();
      this.bounds = G.BBox$from(t1).union$1(t2);
      this.splitAxis = axis;
      this.nPrimitives = 0;
    }
  },
  _LinearBVHNode: {
    "^": "Object;bounds@,offset*,nPrimitives@,axis@"
  },
  GridAccel: {
    "^": "Aggregate;primitives,nVoxels,bounds@,width>,invWidth,voxels,primitiveId",
    worldBound$0: function() {
      return G.BBox$from(this.bounds);
    },
    canIntersect$0: function() {
      return true;
    },
    intersect$2: function(ray, isect) {
      var rayT, t1, gridIntersect, nextCrossingT, deltaT, step, out, pos, t2, axis, t3, t4, t5, t6, t7, hitSomething, voxel, stepAxis;
      rayT = [0];
      if (this.bounds.inside$1(ray.pointAt$1(ray.get$minDistance())))
        rayT[0] = ray.minDistance;
      else if (!this.bounds.intersectP$2(ray, rayT))
        return false;
      t1 = rayT[0];
      t1 = new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(ray.origin, J.$mul$ns(ray.direction, t1)))));
      gridIntersect = new G.Point(t1);
      nextCrossingT = [0, 0, 0];
      deltaT = [0, 0, 0];
      step = [0, 0, 0];
      out = [0, 0, 0];
      pos = [0, 0, 0];
      for (t2 = t1.length, axis = 0; axis < 3; ++axis) {
        pos[axis] = this.posToVoxel$2(gridIntersect, axis);
        t3 = J.$ge$n(J.$index$asx(ray.direction, axis), 0);
        t4 = rayT[0];
        t5 = pos[axis];
        if (t3) {
          t3 = J.$add$ns(t5, 1);
          t5 = this.bounds.get$pMin().data;
          if (axis >= t5.length)
            return H.ioore(t5, axis);
          t5 = t5[axis];
          t6 = this.width.data;
          if (axis >= t6.length)
            return H.ioore(t6, axis);
          t6 = J.$mul$ns(t3, t6[axis]);
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (axis >= t2)
            return H.ioore(t1, axis);
          t3 = t1[axis];
          t7 = J.$index$asx(ray.direction, axis);
          if (typeof t7 !== "number")
            return H.iae(t7);
          nextCrossingT[axis] = J.$add$ns(t4, (t5 + t6 - t3) / t7);
          t7 = this.width.data;
          if (axis >= t7.length)
            return H.ioore(t7, axis);
          t7 = t7[axis];
          t3 = J.$index$asx(ray.direction, axis);
          if (typeof t3 !== "number")
            return H.iae(t3);
          deltaT[axis] = t7 / t3;
          step[axis] = 1;
          out[axis] = this.nVoxels[axis];
        } else {
          t3 = this.bounds.get$pMin().data;
          if (axis >= t3.length)
            return H.ioore(t3, axis);
          t3 = t3[axis];
          t6 = this.width.data;
          if (axis >= t6.length)
            return H.ioore(t6, axis);
          t6 = J.$mul$ns(t5, t6[axis]);
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (axis >= t2)
            return H.ioore(t1, axis);
          t5 = t1[axis];
          t7 = J.$index$asx(ray.direction, axis);
          if (typeof t7 !== "number")
            return H.iae(t7);
          nextCrossingT[axis] = J.$add$ns(t4, (t3 + t6 - t5) / t7);
          t7 = this.width.data;
          if (axis >= t7.length)
            return H.ioore(t7, axis);
          t7 = t7[axis];
          t5 = J.$index$asx(ray.direction, axis);
          if (typeof t5 !== "number")
            return H.iae(t5);
          deltaT[axis] = -t7 / t5;
          step[axis] = -1;
          out[axis] = -1;
        }
      }
      for (t1 = this.nVoxels, hitSomething = false; true;) {
        t2 = this.voxels;
        t3 = pos[0];
        t4 = pos[1];
        t3 = J.$add$ns(J.$add$ns(J.$mul$ns(J.$mul$ns(pos[2], t1[0]), t1[1]), J.$mul$ns(t4, t1[0])), t3);
        if (t3 >>> 0 !== t3 || t3 >= t2.length)
          return H.ioore(t2, t3);
        voxel = t2[t3];
        t2 = voxel != null;
        if (t2)
          J.size$0$x(voxel);
        if (t2)
          hitSomething = voxel.intersect$2(ray, isect) ? true : hitSomething;
        t2 = J.$lt$n(nextCrossingT[0], nextCrossingT[1]) ? 4 : 0;
        t3 = J.$lt$n(nextCrossingT[0], nextCrossingT[2]) ? 2 : 0;
        t4 = J.$lt$n(nextCrossingT[1], nextCrossingT[2]) ? 1 : 0;
        stepAxis = C.List_2Vk0[t2 + t3 + t4];
        t2 = ray.maxDistance;
        if (stepAxis >>> 0 !== stepAxis || stepAxis >= 3)
          return H.ioore(nextCrossingT, stepAxis);
        if (J.$lt$n(t2, nextCrossingT[stepAxis]))
          break;
        t2 = J.$add$ns(pos[stepAxis], step[stepAxis]);
        pos[stepAxis] = t2;
        if (J.$eq(t2, out[stepAxis]))
          break;
        nextCrossingT[stepAxis] = J.$add$ns(nextCrossingT[stepAxis], deltaT[stepAxis]);
      }
      return hitSomething;
    },
    intersectP$1: function(ray) {
      var rayT, t1, t2, gridIntersect, nextCrossingT, deltaT, step, out, pos, axis, t3, t4, t5, t6, t7, o, voxel, stepAxis;
      rayT = [0];
      t1 = this.bounds;
      t2 = ray.minDistance;
      if (t1.inside$1(new G.Point(new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(ray.origin, J.$mul$ns(ray.direction, t2))))))))
        rayT[0] = ray.minDistance;
      else if (!this.bounds.intersectP$2(ray, rayT))
        return false;
      t1 = rayT[0];
      t1 = new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(ray.origin, J.$mul$ns(ray.direction, t1)))));
      gridIntersect = new G.Point(t1);
      nextCrossingT = [0, 0, 0];
      deltaT = [0, 0, 0];
      step = [0, 0, 0];
      out = [0, 0, 0];
      pos = [0, 0, 0];
      for (t2 = t1.length, axis = 0; axis < 3; ++axis) {
        pos[axis] = this.posToVoxel$2(gridIntersect, axis);
        t3 = J.$ge$n(J.$index$asx(ray.direction, axis), 0);
        t4 = pos[axis];
        t5 = rayT[0];
        if (t3) {
          t3 = J.$add$ns(t4, 1);
          t4 = this.bounds.get$pMin().data;
          if (axis >= t4.length)
            return H.ioore(t4, axis);
          t4 = t4[axis];
          t6 = this.width.data;
          if (axis >= t6.length)
            return H.ioore(t6, axis);
          t6 = J.$mul$ns(t3, t6[axis]);
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (axis >= t2)
            return H.ioore(t1, axis);
          t3 = t1[axis];
          t7 = J.$index$asx(ray.direction, axis);
          if (typeof t7 !== "number")
            return H.iae(t7);
          nextCrossingT[axis] = J.$add$ns(t5, (t4 + t6 - t3) / t7);
          t7 = this.width.data;
          if (axis >= t7.length)
            return H.ioore(t7, axis);
          t7 = t7[axis];
          t3 = J.$index$asx(ray.direction, axis);
          if (typeof t3 !== "number")
            return H.iae(t3);
          deltaT[axis] = t7 / t3;
          step[axis] = 1;
          out[axis] = this.nVoxels[axis];
        } else {
          t3 = this.bounds.get$pMin().data;
          if (axis >= t3.length)
            return H.ioore(t3, axis);
          t3 = t3[axis];
          t6 = this.width.data;
          if (axis >= t6.length)
            return H.ioore(t6, axis);
          t6 = J.$mul$ns(t4, t6[axis]);
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (axis >= t2)
            return H.ioore(t1, axis);
          t4 = t1[axis];
          t7 = J.$index$asx(ray.direction, axis);
          if (typeof t7 !== "number")
            return H.iae(t7);
          nextCrossingT[axis] = J.$add$ns(t5, (t3 + t6 - t4) / t7);
          t7 = this.width.data;
          if (axis >= t7.length)
            return H.ioore(t7, axis);
          t7 = t7[axis];
          t4 = J.$index$asx(ray.direction, axis);
          if (typeof t4 !== "number")
            return H.iae(t4);
          deltaT[axis] = -t7 / t4;
          step[axis] = -1;
          out[axis] = -1;
        }
      }
      for (t1 = this.nVoxels; true;) {
        t2 = pos[0];
        t3 = pos[1];
        o = J.$add$ns(J.$add$ns(J.$mul$ns(J.$mul$ns(pos[2], t1[0]), t1[1]), J.$mul$ns(t3, t1[0])), t2);
        t2 = this.voxels;
        if (o >>> 0 !== o || o >= t2.length)
          return H.ioore(t2, o);
        voxel = t2[o];
        t2 = voxel != null;
        if (t2)
          J.size$0$x(voxel);
        if (t2 && voxel.intersectP$1(ray))
          return true;
        t2 = J.$lt$n(nextCrossingT[0], nextCrossingT[1]) ? 4 : 0;
        t3 = J.$lt$n(nextCrossingT[0], nextCrossingT[2]) ? 2 : 0;
        t4 = J.$lt$n(nextCrossingT[1], nextCrossingT[2]) ? 1 : 0;
        stepAxis = C.List_2Vk0[t2 + t3 + t4];
        t2 = ray.maxDistance;
        if (stepAxis >>> 0 !== stepAxis || stepAxis >= 3)
          return H.ioore(nextCrossingT, stepAxis);
        if (J.$lt$n(t2, nextCrossingT[stepAxis]))
          break;
        t2 = J.$add$ns(pos[stepAxis], step[stepAxis]);
        pos[stepAxis] = t2;
        if (J.$eq(t2, out[stepAxis]))
          break;
        nextCrossingT[stepAxis] = J.$add$ns(nextCrossingT[stepAxis], deltaT[stepAxis]);
      }
      return false;
    },
    posToVoxel$2: function($P, axis) {
      var t1, t2, t3, v;
      t1 = $P.data;
      if (axis >= t1.length)
        return H.ioore(t1, axis);
      t1 = t1[axis];
      t2 = this.bounds.get$pMin().data;
      if (axis >= t2.length)
        return H.ioore(t2, axis);
      t2 = t2[axis];
      t3 = this.invWidth.data;
      if (axis >= t3.length)
        return H.ioore(t3, axis);
      v = C.JSNumber_methods.toInt$0((t1 - t2) * t3[axis]);
      t3 = this.nVoxels;
      if (axis >= 3)
        return H.ioore(t3, axis);
      return C.JSInt_methods.clamp$2(v, 0, J.$sub$n(t3[axis], 1));
    },
    GridAccel$2: function(p, refineImmediately) {
      var t1, i, t2, delta, maxAxis, t3, t4, voxelsPerUnitDist, axis, t5, t6, t7, t8, nv, vmin, vmax, prim, pb, z, y, x, o;
      $.Log.call$2(0, "Building Hierarchical Grid Acceleration Structures.");
      t1 = J.getInterceptor$asx(p);
      t1.get$length(p);
      if (refineImmediately === true) {
        i = 0;
        while (true) {
          t2 = t1.get$length(p);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          t1.$index(p, i).fullyRefine$1(this.primitives);
          ++i;
        }
      } else
        this.primitives = p;
      i = 0;
      while (true) {
        t1 = J.get$length$asx(this.primitives);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.bounds;
        if (!(i < t1))
          break;
        t1 = J.$index$asx(this.primitives, i).worldBound$0();
        this.bounds = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t2.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(t2.pMax.data)))).union$1(t1);
        ++i;
      }
      delta = t2.get$pMax().$sub(0, t2.pMin);
      maxAxis = this.bounds.maximumExtent$0();
      t1 = delta.data;
      t2 = t1.length;
      if (maxAxis >= t2)
        return H.ioore(t1, maxAxis);
      t3 = t1[maxAxis];
      t4 = J.get$length$asx(this.primitives);
      if (typeof t4 !== "number")
        H.throwExpression(P.ArgumentError$(t4));
      voxelsPerUnitDist = 3 * Math.pow(t4, 0.3333333333333333) * (1 / t3);
      for (t3 = this.nVoxels, axis = 0; axis < 3; ++axis) {
        if (axis >= t2)
          return H.ioore(t1, axis);
        t4 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1[axis] * voxelsPerUnitDist));
        t3[axis] = t4;
        t3[axis] = C.JSInt_methods.clamp$2(t4, 1, 64);
      }
      for (t4 = this.width.data, t5 = t4.length, t6 = this.invWidth, axis = 0; axis < 3; ++axis) {
        if (axis >= t2)
          return H.ioore(t1, axis);
        t7 = t1[axis];
        t8 = t3[axis];
        if (typeof t8 !== "number")
          return H.iae(t8);
        if (axis >= t5)
          return H.ioore(t4, axis);
        t4[axis] = t7 / t8;
        t7 = t4[axis];
        t7 = t7 === 0 ? 0 : 1 / t7;
        t8 = t6.data;
        if (axis >= t8.length)
          return H.ioore(t8, axis);
        t8[axis] = t7;
      }
      nv = J.$mul$ns(J.$mul$ns(t3[0], t3[1]), t3[2]);
      if (typeof nv !== "number")
        return H.iae(nv);
      this.voxels = H.setRuntimeTypeInfo(Array(nv), [E._Voxel]);
      vmin = [0, 0, 0];
      vmax = [0, 0, 0];
      i = 0;
      while (true) {
        t1 = J.get$length$asx(this.primitives);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        prim = J.$index$asx(this.primitives, i);
        pb = prim.worldBound$0();
        for (axis = 0; axis < 3; ++axis) {
          vmin[axis] = this.posToVoxel$2(pb.get$pMin(), axis);
          vmax[axis] = this.posToVoxel$2(pb.pMax, axis);
        }
        for (z = vmin[2]; t1 = J.getInterceptor$n(z), t1.$le(z, vmax[2]); z = t1.$add(z, 1))
          for (y = vmin[1]; t2 = J.getInterceptor$n(y), t2.$le(y, vmax[1]); y = t2.$add(y, 1))
            for (x = vmin[0]; t4 = J.getInterceptor$n(x), t4.$le(x, vmax[0]); x = t4.$add(x, 1)) {
              o = J.$add$ns(J.$add$ns(J.$mul$ns(t1.$mul(z, t3[0]), t3[1]), t2.$mul(y, t3[0])), x);
              t5 = this.voxels;
              if (o >>> 0 !== o || o >= t5.length)
                return H.ioore(t5, o);
              t6 = t5[o];
              if (t6 == null) {
                t6 = [];
                t7 = new E._Voxel(t6, null);
                t7.allCanIntersect = false;
                t6.push(prim);
                t5[o] = t7;
              } else
                t6.addPrimitive$1(prim);
            }
        ++i;
      }
    },
    static: {GridAccel_Create: [function(prims, ps) {
        return E.GridAccel$(prims, ps.findOneBool$2("refineimmediately", true));
      }, "call$2", "GridAccel_Create$closure", 4, 0, 3], GridAccel$: function(p, refineImmediately) {
        var t1, t2, t3, t4;
        t1 = G.BBox$(null, null);
        t2 = G.Vector$(0, 0, 0);
        t3 = G.Vector$(0, 0, 0);
        t4 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t4 + 1;
        t4 = new E.GridAccel([], [0, 0, 0], t1, t2, t3, null, t4);
        t4.GridAccel$2(p, refineImmediately);
        return t4;
      }}
  },
  _Voxel: {
    "^": "Object;primitives,allCanIntersect",
    size$0: [function(_) {
      return this.primitives.length;
    }, "call$0", "get$size", 0, 0, 101],
    addPrimitive$1: function(prim) {
      this.primitives.push(prim);
    },
    intersect$2: function(ray, isect) {
      var ei, i, t1, prim, p, t2, hitSomething;
      ei = this.primitives.length;
      if (!this.allCanIntersect) {
        for (i = 0; i < ei; ++i) {
          t1 = this.primitives;
          if (i >= t1.length)
            return H.ioore(t1, i);
          prim = t1[i];
          if (!prim.canIntersect$0()) {
            p = [];
            prim.fullyRefine$1(p);
            t1 = p.length;
            t2 = this.primitives;
            if (t1 === 1) {
              if (0 >= t1)
                return H.ioore(p, 0);
              t1 = p[0];
              if (i >= t2.length)
                return H.ioore(t2, i);
              t2[i] = t1;
            } else {
              t1 = E.GridAccel$(p, false);
              if (i >= t2.length)
                return H.ioore(t2, i);
              t2[i] = t1;
            }
          }
        }
        this.allCanIntersect = true;
      }
      for (hitSomething = false, i = 0; i < ei; ++i) {
        t1 = this.primitives;
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (t1[i].intersect$2(ray, isect))
          hitSomething = true;
      }
      return hitSomething;
    },
    intersectP$1: function(ray) {
      var i, t1, prim, p, t2;
      if (!this.allCanIntersect) {
        for (i = 0; t1 = this.primitives, i < t1.length; ++i) {
          prim = t1[i];
          if (!prim.canIntersect$0()) {
            p = [];
            prim.fullyRefine$1(p);
            t1 = p.length;
            t2 = this.primitives;
            if (t1 === 1) {
              if (0 >= t1)
                return H.ioore(p, 0);
              t1 = p[0];
              if (i >= t2.length)
                return H.ioore(t2, i);
              t2[i] = t1;
            } else {
              t1 = E.GridAccel$(p, false);
              if (i >= t2.length)
                return H.ioore(t2, i);
              t2[i] = t1;
            }
          }
        }
        this.allCanIntersect = true;
      }
      for (i = 0; t1 = this.primitives, i < t1.length; ++i)
        if (t1[i].intersectP$1(ray))
          return true;
      return false;
    }
  },
  KdTreeAccel: {
    "^": "Aggregate;isectCost,traversalCost,maxPrims,maxDepth,emptyBonus,primitives,nodes,nAllocedNodes,nextFreeNode,bounds@,primitiveId",
    worldBound$0: function() {
      return this.bounds;
    },
    canIntersect$0: function() {
      return true;
    },
    intersect$2: function(ray, isect) {
      var tmin, tmax, t1, t2, t3, invDir, todo, node, todoPos, hit, nodeIndex, firstChildIndex, secondChildIndex, axis, t4, t5, tplane, belowFirst, t6, firstChild, secondChild, nPrimitives, prims, i;
      tmin = [0];
      tmax = [0];
      if (!this.bounds.intersectP$3(ray, tmin, tmax))
        return false;
      t1 = J.get$x$x(ray.get$direction());
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = J.get$y$x(ray.direction);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = J.get$z$x(ray.direction);
      if (typeof t3 !== "number")
        return H.iae(t3);
      invDir = G.Vector$(1 / t1, 1 / t2, 1 / t3);
      todo = H.setRuntimeTypeInfo(Array(64), [E._KdToDo]);
      t3 = this.nodes;
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      node = t3[0];
      for (t1 = todo.length, t2 = invDir.data, t3 = t2.length, todoPos = 0, hit = false, nodeIndex = 0, firstChildIndex = 0, secondChildIndex = 0; node != null;) {
        if (J.$lt$n(ray.maxDistance, tmin[0]))
          break;
        if (node.isLeaf$0() !== true) {
          axis = node.splitAxis$0();
          t4 = node.split;
          t5 = J.$index$asx(ray.origin, axis);
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (axis >= t3)
            return H.ioore(t2, axis);
          tplane = (t4 - t5) * t2[axis];
          if (!J.$lt$n(J.$index$asx(ray.origin, axis), node.split))
            belowFirst = J.$eq(J.$index$asx(ray.origin, axis), node.split) && J.$le$n(J.$index$asx(ray.direction, axis), 0);
          else
            belowFirst = true;
          t4 = node.flags;
          t5 = this.nodes;
          if (belowFirst) {
            if (typeof nodeIndex !== "number")
              return nodeIndex.$add();
            firstChildIndex = nodeIndex + 1;
            t6 = t5.length;
            if (firstChildIndex >= t6)
              return H.ioore(t5, firstChildIndex);
            firstChild = t5[firstChildIndex];
            if (typeof t4 !== "number")
              return t4.$shr();
            secondChildIndex = C.JSInt_methods._shrOtherPositive$1(t4, 2);
            if (secondChildIndex >= t6)
              return H.ioore(t5, secondChildIndex);
            secondChild = t5[secondChildIndex];
          } else {
            if (typeof t4 !== "number")
              return t4.$shr();
            firstChildIndex = C.JSInt_methods._shrOtherPositive$1(t4, 2);
            t4 = t5.length;
            if (firstChildIndex >= t4)
              return H.ioore(t5, firstChildIndex);
            firstChild = t5[firstChildIndex];
            if (typeof nodeIndex !== "number")
              return nodeIndex.$add();
            secondChildIndex = nodeIndex + 1;
            if (secondChildIndex >= t4)
              return H.ioore(t5, secondChildIndex);
            secondChild = t5[secondChildIndex];
          }
          t4 = tmax[0];
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (tplane > t4 || tplane <= 0) {
            node = firstChild;
            nodeIndex = firstChildIndex;
          } else {
            t5 = tmin[0];
            if (typeof t5 !== "number")
              return H.iae(t5);
            if (tplane < t5) {
              node = secondChild;
              nodeIndex = secondChildIndex;
            } else {
              if (todoPos < 0 || todoPos >= t1)
                return H.ioore(todo, todoPos);
              t5 = todo[todoPos];
              if (t5 == null) {
                t5 = new E._KdToDo(null, null, null, null);
                todo[todoPos] = t5;
              }
              t5.set$node(secondChild);
              t5.nodeIndex = secondChildIndex;
              t5.tmin = tplane;
              t5.tmax = t4;
              ++todoPos;
              tmax[0] = tplane;
              node = firstChild;
              nodeIndex = firstChildIndex;
            }
          }
        } else {
          nPrimitives = node.nPrimitives$0();
          if (nPrimitives === 1) {
            t4 = this.primitives;
            t5 = node.onePrimitive;
            if (t5 >>> 0 !== t5 || t5 >= t4.length)
              return H.ioore(t4, t5);
            if (t4[t5].intersect$2(ray, isect))
              hit = true;
          } else {
            prims = node.primitives;
            for (i = 0; i < nPrimitives; ++i) {
              t4 = this.primitives;
              if (i >= prims.length)
                return H.ioore(prims, i);
              t5 = prims[i];
              if (t5 >= t4.length)
                return H.ioore(t4, t5);
              if (t4[t5].intersect$2(ray, isect))
                hit = true;
            }
          }
          if (todoPos > 0) {
            --todoPos;
            if (todoPos >= t1)
              return H.ioore(todo, todoPos);
            t4 = todo[todoPos];
            node = t4.get$node();
            nodeIndex = t4.nodeIndex;
            tmin[0] = t4.tmin;
            tmax[0] = t4.tmax;
          } else
            break;
        }
      }
      return hit;
    },
    intersectP$1: function(ray) {
      var tmin, tmax, t1, t2, t3, invDir, todo, node, todoPos, nodeIndex, firstChildIndex, secondChildIndex, axis, t4, t5, tplane, belowFirst, t6, firstChild, secondChild, nPrimitives, prims, i;
      tmin = [0];
      tmax = [0];
      if (!this.bounds.intersectP$3(ray, tmin, tmax))
        return false;
      t1 = J.get$x$x(ray.direction);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = J.get$y$x(ray.direction);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = J.get$z$x(ray.direction);
      if (typeof t3 !== "number")
        return H.iae(t3);
      invDir = G.Vector$(1 / t1, 1 / t2, 1 / t3);
      todo = H.setRuntimeTypeInfo(Array(64), [E._KdToDo]);
      t3 = this.nodes;
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      node = t3[0];
      for (t1 = todo.length, t2 = invDir.data, t3 = t2.length, todoPos = 0, nodeIndex = 0, firstChildIndex = 0, secondChildIndex = 0; node != null;) {
        if (J.$lt$n(ray.maxDistance, tmin[0]))
          break;
        if (node.isLeaf$0() !== true) {
          axis = node.splitAxis$0();
          t4 = node.split;
          t5 = J.$index$asx(ray.origin, axis);
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (axis >= t3)
            return H.ioore(t2, axis);
          tplane = (t4 - t5) * t2[axis];
          if (!J.$lt$n(J.$index$asx(ray.origin, axis), node.split))
            belowFirst = J.$eq(J.$index$asx(ray.origin, axis), node.split) && J.$le$n(J.$index$asx(ray.direction, axis), 0);
          else
            belowFirst = true;
          t4 = node.flags;
          t5 = this.nodes;
          if (belowFirst) {
            if (typeof nodeIndex !== "number")
              return nodeIndex.$add();
            firstChildIndex = nodeIndex + 1;
            t6 = t5.length;
            if (firstChildIndex >= t6)
              return H.ioore(t5, firstChildIndex);
            firstChild = t5[firstChildIndex];
            if (typeof t4 !== "number")
              return t4.$shr();
            secondChildIndex = C.JSInt_methods._shrOtherPositive$1(t4, 2);
            if (secondChildIndex >= t6)
              return H.ioore(t5, secondChildIndex);
            secondChild = t5[secondChildIndex];
          } else {
            if (typeof t4 !== "number")
              return t4.$shr();
            firstChildIndex = C.JSInt_methods._shrOtherPositive$1(t4, 2);
            t4 = t5.length;
            if (firstChildIndex >= t4)
              return H.ioore(t5, firstChildIndex);
            firstChild = t5[firstChildIndex];
            if (typeof nodeIndex !== "number")
              return nodeIndex.$add();
            secondChildIndex = nodeIndex + 1;
            if (secondChildIndex >= t4)
              return H.ioore(t5, secondChildIndex);
            secondChild = t5[secondChildIndex];
          }
          t4 = tmax[0];
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (tplane > t4 || tplane <= 0) {
            node = firstChild;
            nodeIndex = firstChildIndex;
          } else {
            t5 = tmin[0];
            if (typeof t5 !== "number")
              return H.iae(t5);
            if (tplane < t5) {
              node = secondChild;
              nodeIndex = secondChildIndex;
            } else {
              if (todoPos < 0 || todoPos >= t1)
                return H.ioore(todo, todoPos);
              t5 = todo[todoPos];
              if (t5 == null) {
                t5 = new E._KdToDo(null, null, null, null);
                todo[todoPos] = t5;
              }
              t5.set$node(secondChild);
              t5.nodeIndex = secondChildIndex;
              t5.tmin = tplane;
              t5.tmax = t4;
              ++todoPos;
              tmax[0] = tplane;
              node = firstChild;
              nodeIndex = firstChildIndex;
            }
          }
        } else {
          nPrimitives = node.nPrimitives$0();
          if (nPrimitives === 1) {
            t4 = this.primitives;
            t5 = node.onePrimitive;
            if (t5 >>> 0 !== t5 || t5 >= t4.length)
              return H.ioore(t4, t5);
            if (t4[t5].intersectP$1(ray))
              return true;
          } else {
            prims = node.primitives;
            for (i = 0; i < nPrimitives; ++i) {
              t4 = this.primitives;
              if (i >= prims.length)
                return H.ioore(prims, i);
              t5 = prims[i];
              if (t5 >= t4.length)
                return H.ioore(t4, t5);
              if (t4[t5].intersectP$1(ray))
                return true;
            }
          }
          if (todoPos > 0) {
            --todoPos;
            if (todoPos >= t1)
              return H.ioore(todo, todoPos);
            t4 = todo[todoPos];
            node = t4.get$node();
            nodeIndex = t4.nodeIndex;
            tmin[0] = t4.tmin;
            tmax[0] = t4.tmax;
          } else
            break;
        }
      }
      return false;
    },
    _buildTree$11: function(nodeNum, nodeBounds, allPrimBounds, primNums, nPrimitives, depth, edges, prims0, prims1, prims1Offset, badRefines) {
      var t1, t2, nAlloc, n, i, t3, i0, t4, oldCost, invTotalSA, d, axis, t5, t6, t7, eb, t8, t9, bestAxis, bestOffset, bestCost, retries, t10, pn, bbox, t11, t12, t13, nAbove, nBelow, edget, otherAxis0, otherAxis1, t14, t15, eb0, cost, n0, n00, n1, n10, tsplit, aboveChild;
      t1 = this.nextFreeNode;
      t2 = this.nAllocedNodes;
      if (t1 === t2) {
        nAlloc = P.max(2 * t2, 512);
        n = H.setRuntimeTypeInfo(Array(nAlloc), [E._KdAccelNode]);
        i = this.nAllocedNodes;
        if (i > 0) {
          for (t1 = this.nodes, t2 = t1.length, t3 = n.length, i0 = 0; i0 < i; ++i0) {
            if (i0 >= t2)
              return H.ioore(t1, i0);
            t4 = t1[i0];
            if (i0 >= t3)
              return H.ioore(n, i0);
            n[i0] = t4;
          }
          for (; i < t3; ++i) {
            if (i >>> 0 !== i || i >= t3)
              return H.ioore(n, i);
            n[i] = new E._KdAccelNode(null, null, null, null);
          }
        } else
          for (t1 = n.length, i = 0; i < t1; ++i)
            n[i] = new E._KdAccelNode(null, null, null, null);
        this.nodes = n;
        this.nAllocedNodes = nAlloc;
      }
      ++this.nextFreeNode;
      t1 = this.maxPrims;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (nPrimitives <= t1 || J.$eq(depth, 0)) {
        t1 = this.nodes;
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum].initLeaf$2(primNums, nPrimitives);
        return;
      }
      t1 = this.isectCost;
      t2 = J.getInterceptor$ns(t1);
      oldCost = t2.$mul(t1, nPrimitives);
      invTotalSA = 1 / nodeBounds.surfaceArea$0();
      d = nodeBounds.pMax.$sub(0, nodeBounds.pMin);
      axis = nodeBounds.maximumExtent$0();
      for (t3 = 2 * nPrimitives, t4 = this.traversalCost, t5 = J.getInterceptor$ns(t4), t6 = d.data, t7 = t6.length, eb = this.emptyBonus, t8 = primNums.length, t9 = allPrimBounds.length, bestAxis = -1, bestOffset = -1, bestCost = 1 / 0, retries = 0; true;) {
        for (i = 0; t10 = edges[axis], i < nPrimitives; ++i) {
          if (i >= t8)
            return H.ioore(primNums, i);
          pn = primNums[i];
          if (pn >= t9)
            return H.ioore(allPrimBounds, pn);
          bbox = allPrimBounds[pn];
          if (axis < 0 || axis >= 3)
            return H.ioore(edges, axis);
          t11 = 2 * i;
          t12 = bbox.get$pMin().data;
          if (axis >= t12.length)
            return H.ioore(t12, axis);
          t13 = new E._BoundEdge(null, null, null);
          t13.t = t12[axis];
          t13.primNum = pn;
          t13.type = 1;
          J.$indexSet$ax(t10, t11, t13);
          t10 = edges[axis];
          t12 = bbox.pMax.data;
          if (axis >= t12.length)
            return H.ioore(t12, axis);
          t13 = new E._BoundEdge(null, null, null);
          t13.t = t12[axis];
          t13.primNum = pn;
          t13.type = 0;
          J.$indexSet$ax(t10, t11 + 1, t13);
        }
        if (axis < 0 || axis >= 3)
          return H.ioore(edges, axis);
        J.sort$1$ax(t10, new E.KdTreeAccel__buildTree_closure());
        for (t10 = axis + 1, t11 = axis + 2, nAbove = nPrimitives, nBelow = 0, i = 0; i < t3; ++i) {
          if (J.$eq(J.get$type$x(J.$index$asx(edges[axis], i)), 0))
            --nAbove;
          edget = J.$index$asx(edges[axis], i).get$t();
          t12 = nodeBounds.pMin.data;
          if (axis >= t12.length)
            return H.ioore(t12, axis);
          t12 = t12[axis];
          if (typeof edget !== "number")
            return edget.$gt();
          if (edget > t12) {
            t13 = nodeBounds.pMax.data;
            if (axis >= t13.length)
              return H.ioore(t13, axis);
            t13 = edget < t13[axis];
          } else
            t13 = false;
          if (t13) {
            otherAxis0 = C.JSInt_methods.$mod(t10, 3);
            otherAxis1 = C.JSInt_methods.$mod(t11, 3);
            if (otherAxis0 >= t7)
              return H.ioore(t6, otherAxis0);
            t13 = t6[otherAxis0];
            if (otherAxis1 >= t7)
              return H.ioore(t6, otherAxis1);
            t14 = t6[otherAxis1];
            t15 = t13 * t14;
            t14 = t13 + t14;
            t13 = nodeBounds.pMax.data;
            if (axis >= t13.length)
              return H.ioore(t13, axis);
            t13 = t13[axis];
            eb0 = nAbove === 0 || nBelow === 0 ? eb : 0;
            if (typeof eb0 !== "number")
              return H.iae(eb0);
            cost = t5.$add(t4, J.$mul$ns(t2.$mul(t1, 1 - eb0), 2 * (t15 + (edget - t12) * t14) * invTotalSA * nBelow + 2 * (t15 + (t13 - edget) * t14) * invTotalSA * nAbove));
            if (J.$lt$n(cost, bestCost)) {
              bestCost = cost;
              bestOffset = i;
              bestAxis = axis;
            }
          }
          if (J.$eq(J.get$type$x(J.$index$asx(edges[axis], i)), 1))
            ++nBelow;
        }
        if (bestAxis === -1 && retries < 2) {
          ++retries;
          axis = C.JSInt_methods.$mod(t10, 3);
          continue;
        }
        break;
      }
      t1 = J.getInterceptor$n(bestCost);
      if (t1.$gt(bestCost, oldCost))
        ++badRefines;
      if (typeof oldCost !== "number")
        return H.iae(oldCost);
      if (t1.$gt(bestCost, 4 * oldCost) && nPrimitives < 16 || bestAxis === -1 || badRefines === 3) {
        t1 = this.nodes;
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum].initLeaf$2(primNums, nPrimitives);
        return;
      }
      for (t1 = prims0.length, n0 = 0, i = 0; i < bestOffset; ++i) {
        if (bestAxis < 0 || bestAxis >= 3)
          return H.ioore(edges, bestAxis);
        if (J.$eq(J.get$type$x(J.$index$asx(edges[bestAxis], i)), 1)) {
          n00 = n0 + 1;
          t2 = J.$index$asx(edges[bestAxis], i).get$primNum();
          if (n0 >= t1)
            return H.ioore(prims0, n0);
          prims0[n0] = t2;
          n0 = n00;
        }
      }
      for (i = bestOffset + 1, t1 = prims1.length, n1 = 0; i < t3; ++i) {
        if (bestAxis < 0 || bestAxis >= 3)
          return H.ioore(edges, bestAxis);
        if (J.$eq(J.get$type$x(J.$index$asx(edges[bestAxis], i)), 0)) {
          n10 = n1 + 1;
          t2 = prims1Offset + n1;
          t4 = J.$index$asx(edges[bestAxis], i).get$primNum();
          if (t2 >= t1)
            return H.ioore(prims1, t2);
          prims1[t2] = t4;
          n1 = n10;
        }
      }
      if (bestAxis < 0 || bestAxis >= 3)
        return H.ioore(edges, bestAxis);
      tsplit = J.$index$asx(edges[bestAxis], bestOffset).get$t();
      t1 = nodeBounds.pMax;
      t2 = nodeBounds.pMin.data;
      if (bestAxis >= t2.length)
        return H.ioore(t2, bestAxis);
      t2[bestAxis] = tsplit;
      t1 = t1.data;
      if (bestAxis >= t1.length)
        return H.ioore(t1, bestAxis);
      t1[bestAxis] = tsplit;
      t1 = J.getInterceptor$n(depth);
      this._buildTree$11(nodeNum + 1, nodeBounds, allPrimBounds, prims0, n0, t1.$sub(depth, 1), edges, prims0, prims1, nPrimitives, badRefines);
      aboveChild = this.nextFreeNode;
      t2 = this.nodes;
      if (nodeNum >= t2.length)
        return H.ioore(t2, nodeNum);
      t2[nodeNum].initInterior$3(bestAxis, aboveChild, tsplit);
      this._buildTree$11(aboveChild, nodeBounds, allPrimBounds, prims1, n1, t1.$sub(depth, 1), edges, prims0, prims1, nPrimitives, badRefines);
    },
    _buildTree$10: function(nodeNum, nodeBounds, allPrimBounds, primNums, nPrimitives, depth, edges, prims0, prims1, prims1Offset) {
      return this._buildTree$11(nodeNum, nodeBounds, allPrimBounds, primNums, nPrimitives, depth, edges, prims0, prims1, prims1Offset, 0);
    },
    KdTreeAccel$6: function(p, isectCost, traversalCost, emptyBonus, maxPrims, maxDepth) {
      var t1, i, t2, primBounds, b, edges, len, j, prims0, prims1, primNums;
      $.Log.call$2(0, "Building Kd-Tree Acceleration Structures.");
      t1 = J.getInterceptor$asx(p);
      i = 0;
      while (true) {
        t2 = t1.get$length(p);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$index(p, i).fullyRefine$1(this.primitives);
        ++i;
      }
      this.nextFreeNode = 0;
      this.nAllocedNodes = 0;
      if (J.$le$n(this.maxDepth, 0)) {
        t1 = this.primitives.length;
        t1 = Math.log(t1);
        t2 = $.get$_invLog2();
        if (typeof t2 !== "number")
          return H.iae(t2);
        this.maxDepth = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(8 + 1.3 * C.JSDouble_methods.toInt$0(t1 * t2)));
      }
      this.bounds = G.BBox$(null, null);
      primBounds = H.setRuntimeTypeInfo(Array(this.primitives.length), [G.BBox]);
      for (t1 = primBounds.length, i = 0; t2 = this.primitives, i < t2.length; ++i) {
        b = t2[i].worldBound$0();
        t2 = this.bounds;
        this.bounds = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t2.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(t2.pMax.data)))).union$1(b);
        if (i >= t1)
          return H.ioore(primBounds, i);
        primBounds[i] = b;
      }
      edges = H.setRuntimeTypeInfo(Array(3), [[J.JSArray, E._BoundEdge]]);
      for (i = 0; t1 = this.primitives, i < 3; ++i) {
        len = 2 * t1.length;
        t1 = Array(len);
        t1.fixed$length = init;
        t1.$builtinTypeInfo = [E._BoundEdge];
        edges[i] = t1;
        for (j = 0; j < len; ++j) {
          t1 = edges[i];
          t2 = new E._BoundEdge(null, null, null);
          t2.t = 0;
          t2.primNum = 0;
          t2.type = 0;
          J.$indexSet$ax(t1, j, t2);
        }
      }
      t1 = t1.length;
      prims0 = new Uint32Array(t1);
      t1 = J.$mul$ns(J.$add$ns(this.maxDepth, 1), this.primitives.length);
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      prims1 = new Uint32Array(t1);
      t1 = this.primitives.length;
      primNums = new Uint32Array(t1);
      for (t2 = this.primitives.length, i = 0; i < t2; ++i) {
        if (i >= t1)
          return H.ioore(primNums, i);
        primNums[i] = i;
      }
      this._buildTree$10(0, this.bounds, primBounds, primNums, t2, this.maxDepth, edges, prims0, prims1, 0);
    },
    static: {KdTreeAccel_Create: [function(prims, ps) {
        return E.KdTreeAccel$(prims, ps.findOneInt$2("intersectcost", 80), ps.findOneInt$2("traversalcost", 1), ps.findOneFloat$2("emptybonus", 0.5), ps.findOneInt$2("maxprims", 1), ps.findOneInt$2("maxdepth", -1));
      }, "call$2", "KdTreeAccel_Create$closure", 4, 0, 4], KdTreeAccel$: function(p, isectCost, traversalCost, emptyBonus, maxPrims, maxDepth) {
        var t1 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t1 + 1;
        t1 = new E.KdTreeAccel(isectCost, traversalCost, maxPrims, maxDepth, emptyBonus, [], [], null, null, null, t1);
        t1.KdTreeAccel$6(p, isectCost, traversalCost, emptyBonus, maxPrims, maxDepth);
        return t1;
      }}
  },
  KdTreeAccel__buildTree_closure: {
    "^": "Closure:96;",
    call$2: function(a, b) {
      return J.$lt$n(a, b) ? -1 : 1;
    }
  },
  _KdToDo: {
    "^": "Object;node@,nodeIndex,tmin,tmax"
  },
  _KdAccelNode: {
    "^": "Object;split,onePrimitive,primitives,flags",
    initLeaf$2: function(primNums, np) {
      var t1, t2, i, t3;
      this.flags = 3;
      this.flags = (3 | np << 2) >>> 0;
      if (np === 0)
        this.onePrimitive = 0;
      else if (np === 1) {
        if (0 >= primNums.length)
          return H.ioore(primNums, 0);
        this.onePrimitive = primNums[0];
      } else {
        t1 = new Uint32Array(np);
        this.primitives = t1;
        for (t2 = primNums.length, i = 0; i < np; ++i) {
          if (i >= t2)
            return H.ioore(primNums, i);
          t3 = primNums[i];
          if (i >= np)
            return H.ioore(t1, i);
          t1[i] = t3;
        }
      }
    },
    initInterior$3: function(axis, ac, s) {
      this.split = s;
      this.flags = axis;
      this.flags = (axis | ac << 2) >>> 0;
    },
    splitPos$0: [function() {
      return this.split;
    }, "call$0", "get$splitPos", 0, 0, 102],
    nPrimitives$0: [function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$shr();
      return C.JSInt_methods._shrOtherPositive$1(t1, 2);
    }, "call$0", "get$nPrimitives", 0, 0, 101],
    splitAxis$0: [function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return t1 & 3;
    }, "call$0", "get$splitAxis", 0, 0, 101],
    isLeaf$0: function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 3) === 3;
    },
    split$1: function($receiver, arg0) {
      return this.split.call$1(arg0);
    }
  },
  _BoundEdge: {
    "^": "Object;t<,primNum<,type>",
    $lt: function(_, e) {
      var t1, t2;
      t1 = this.t;
      t2 = e.get$t();
      if (t1 === t2)
        return this.type < e.get$type(e);
      else {
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 < t2;
      }
    },
    static: {"^": "_BoundEdge_START,_BoundEdge_END"}
  }
}],
["archive", "package:archive/archive.dart", , T, {
  "^": "",
  getAdler32: function(array, adler) {
    var s1, s2, len, len0, i, n, i0;
    s1 = adler & 65535;
    s2 = adler >>> 16;
    len = array.length;
    for (len0 = len, i = 0; len0 > 0;) {
      n = 3800 > len0 ? len0 : 3800;
      len0 -= n;
      for (; --n, n >= 0; i = i0) {
        i0 = i + 1;
        if (i < 0 || i >= len)
          return H.ioore(array, i);
        s1 += array[i] & 255;
        s2 += s1;
      }
      s1 = C.JSInt_methods.$mod(s1, 65521);
      s2 = C.JSInt_methods.$mod(s2, 65521);
    }
    return (s2 << 16 | s1) >>> 0;
  },
  getCrc32: function(array, crc) {
    var t1, len, ip, ip0, t2;
    t1 = J.getInterceptor$asx(array);
    len = t1.get$length(array);
    crc ^= 4294967295;
    for (ip = 0; len >= 8;) {
      ip0 = ip + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip0 = ip + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip0 = ip + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip0 = ip + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      ip = ip0 + 1;
      t2 = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255];
      if (typeof t2 !== "number")
        return t2.$xor();
      crc = t2 ^ crc >>> 8;
      len -= 8;
    }
    if (len > 0)
      do {
        ip0 = ip + 1;
        t2 = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255];
        if (typeof t2 !== "number")
          return t2.$xor();
        crc = t2 ^ crc >>> 8;
        if (--len, len > 0) {
          ip = ip0;
          continue;
        } else
          break;
      } while (true);
    return (crc ^ 4294967295) >>> 0;
  },
  GZipDecoder: {
    "^": "Object;",
    decodeBuffer$2$verify: function(input, verify) {
      var t1, t2, t3, flags, buffer;
      if (input.readUint16$0() !== 35615)
        throw H.wrapException(T.ArchiveException$("Invalid GZip Signature"));
      t1 = input.buffer;
      t2 = input.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      input.offset = t2 + 1;
      t3 = J.getInterceptor$asx(t1);
      if (!J.$eq(t3.$index(t1, t2), 8))
        throw H.wrapException(T.ArchiveException$("Invalid GZip Compression Methos"));
      t2 = input.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      input.offset = t2 + 1;
      flags = t3.$index(t1, t2);
      input.readUint32$0();
      t2 = input.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      input.offset = t2 + 1;
      t3.$index(t1, t2);
      t2 = input.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      input.offset = t2 + 1;
      t3.$index(t1, t2);
      t1 = J.getInterceptor$n(flags);
      if (t1.$and(flags, 4) !== 0)
        input.readBytes$1(input.readUint16$0());
      if (t1.$and(flags, 8) !== 0)
        input.readString$0();
      if (t1.$and(flags, 16) !== 0)
        input.readString$0();
      if (t1.$and(flags, 2) !== 0)
        input.readUint16$0();
      t1 = T.HuffmanTable$(C.List_2Bc);
      t2 = T.HuffmanTable$(C.List_X3d);
      t3 = T.OutputStream$(0, null);
      new T.Inflate(input, t3, 0, 0, 0, t1, t2)._inflate$0();
      buffer = H.NativeUint8List_NativeUint8List$view(t3._buffer.buffer, 0, t3.length);
      if (verify) {
        if (input.readUint32$0() !== T.getCrc32(buffer, 0))
          throw H.wrapException(T.ArchiveException$("Invalid CRC checksum"));
        if (input.readUint32$0() !== buffer.length)
          throw H.wrapException(T.ArchiveException$("Size of decompressed file not correct"));
      }
      return buffer;
    },
    static: {"^": "GZipDecoder_SIGNATURE,GZipDecoder_DEFLATE,GZipDecoder_FLAG_TEXT,GZipDecoder_FLAG_HCRC,GZipDecoder_FLAG_EXTRA,GZipDecoder_FLAG_NAME,GZipDecoder_FLAG_COMMENT"}
  },
  ArchiveException: {
    "^": "Object;message",
    toString$0: function(_) {
      return "ArchiveException: " + this.message;
    },
    static: {ArchiveException$: function(message) {
        return new T.ArchiveException(message);
      }}
  },
  InputStream: {
    "^": "Object;buffer>,offset*,start>,byteOrder,_archive$_length",
    get$length: function(_) {
      var t1, t2, t3;
      t1 = this._archive$_length;
      t2 = this.offset;
      t3 = this.start;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      return J.$sub$n(t1, t2 - t3);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $index: function(_, index) {
      var t1 = this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof index !== "number")
        return H.iae(index);
      return J.$index$asx(this.buffer, t1 + index);
    },
    subset$2: function(position, $length) {
      var t1, t2;
      t1 = this.start;
      if (typeof t1 !== "number")
        return H.iae(t1);
      position += t1;
      if ($length == null || false) {
        t1 = this._archive$_length;
        t2 = this.start;
        if (typeof t2 !== "number")
          return H.iae(t2);
        $length = J.$sub$n(t1, position - t2);
      }
      return T.InputStream$(this.buffer, this.byteOrder, $length, position);
    },
    skip$1: function(_, count) {
      var t1 = this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof count !== "number")
        return H.iae(count);
      this.offset = t1 + count;
    },
    readBytes$1: function(count) {
      var t1, t2, bytes, t3, t4;
      t1 = this.offset;
      t2 = this.start;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      bytes = this.subset$2(t1 - t2, count);
      t2 = this.offset;
      t1 = bytes._archive$_length;
      t3 = bytes.offset;
      t4 = bytes.start;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t4 = J.$sub$n(t1, t3 - t4);
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      this.offset = t2 + t4;
      return bytes;
    },
    readString$1: function(len) {
      var codes, t1, t2, t3, t4, t5, c;
      codes = [];
      t1 = this.start;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = this.buffer;
      t3 = J.getInterceptor$asx(t2);
      while (true) {
        t4 = this.offset;
        t5 = this._archive$_length;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t4 !== "number")
          return t4.$ge();
        if (!!(t4 >= t1 + t5))
          break;
        this.offset = t4 + 1;
        c = t3.$index(t2, t4);
        if (J.$eq(c, 0))
          return H.Primitives_stringFromCharCodes(codes);
        codes.push(c);
      }
      throw H.wrapException(T.ArchiveException$("EOF reached without finding string terminator"));
    },
    readString$0: function() {
      return this.readString$1(null);
    },
    readUint16$0: function() {
      var t1, t2, t3, b1, b2;
      t1 = this.buffer;
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      t3 = J.getInterceptor$asx(t1);
      b1 = J.$and$n(t3.$index(t1, t2), 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      b2 = J.$and$n(t3.$index(t1, t2), 255);
      if (this.byteOrder === 1)
        return (b1 << 8 | b2) >>> 0;
      return (b2 << 8 | b1) >>> 0;
    },
    readUint32$0: function() {
      var t1, t2, t3, b1, b2, b3, b4;
      t1 = this.buffer;
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      t3 = J.getInterceptor$asx(t1);
      b1 = J.$and$n(t3.$index(t1, t2), 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      b2 = J.$and$n(t3.$index(t1, t2), 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      b3 = J.$and$n(t3.$index(t1, t2), 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      b4 = J.$and$n(t3.$index(t1, t2), 255);
      if (this.byteOrder === 1)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    InputStream$4$byteOrder$length$start: function(buffer, byteOrder, $length, start) {
      this._archive$_length = $length == null ? J.get$length$asx(buffer) : $length;
      this.offset = start;
    },
    static: {InputStream$: function(buffer, byteOrder, $length, start) {
        var t1 = !!J.getInterceptor(buffer).$isByteData ? H.NativeUint8List_NativeUint8List$view(buffer, 0, null) : buffer;
        t1 = new T.InputStream(t1, null, start, byteOrder, null);
        t1.InputStream$4$byteOrder$length$start(buffer, byteOrder, $length, start);
        return t1;
      }}
  },
  OutputStream: {
    "^": "Object;length*,byteOrder,_buffer",
    length$0: function($receiver) {
      return this.length.call$0();
    },
    getBytes$0: function() {
      return H.NativeUint8List_NativeUint8List$view(this._buffer.buffer, 0, this.length);
    },
    writeBytes$2: function(bytes, len) {
      var t1, t2;
      len = bytes.length;
      for (; t1 = J.$gt$n(J.$add$ns(this.length, len), this._buffer.length), t2 = this.length, t1;)
        this._expandBuffer$1(J.$sub$n(J.$add$ns(t2, len), this._buffer.length));
      C.NativeUint8List_methods.setRange$3(this._buffer, t2, J.$add$ns(t2, len), bytes);
      this.length = J.$add$ns(this.length, len);
    },
    writeBytes$1: function(bytes) {
      return this.writeBytes$2(bytes, null);
    },
    writeInputStream$1: function(bytes) {
      var t1, t2, t3, t4, t5;
      t1 = bytes.start;
      while (true) {
        t2 = this.length;
        t3 = bytes._archive$_length;
        t4 = bytes.offset;
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4 = J.$gt$n(J.$add$ns(t2, J.$sub$n(t3, t4 - t1)), this._buffer.length);
        t3 = bytes._archive$_length;
        t2 = this.length;
        t5 = bytes.offset;
        if (!t4)
          break;
        if (typeof t5 !== "number")
          return t5.$sub();
        this._expandBuffer$1(J.$sub$n(J.$add$ns(t2, J.$sub$n(t3, t5 - t1)), this._buffer.length));
      }
      t4 = this._buffer;
      if (typeof t5 !== "number")
        return t5.$sub();
      C.NativeUint8List_methods.setRange$4(t4, t2, J.$add$ns(t2, J.$sub$n(t3, t5 - t1)), bytes.buffer, bytes.offset);
      t5 = this.length;
      t3 = bytes._archive$_length;
      t2 = bytes.offset;
      if (typeof t2 !== "number")
        return t2.$sub();
      this.length = J.$add$ns(t5, J.$sub$n(t3, t2 - t1));
    },
    subset$2: function(start, end) {
      if (J.$lt$n(start, 0))
        start = J.$add$ns(this.length, start);
      if (end == null)
        end = this.length;
      else if (J.$lt$n(end, 0))
        end = J.$add$ns(this.length, end);
      return H.NativeUint8List_NativeUint8List$view(this._buffer.buffer, start, J.$sub$n(end, start));
    },
    subset$1: function(start) {
      return this.subset$2(start, null);
    },
    _expandBuffer$1: function(required) {
      var blockSize, t1, newBuffer;
      blockSize = required != null ? J.$gt$n(required, 32768) ? required : 32768 : 32768;
      t1 = this._buffer;
      if (typeof blockSize !== "number")
        return H.iae(blockSize);
      t1 = t1.length + blockSize;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      newBuffer = new Uint8Array(t1);
      t1 = this._buffer;
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, t1.length, t1);
      this._buffer = newBuffer;
    },
    _expandBuffer$0: function() {
      return this._expandBuffer$1(null);
    },
    static: {"^": "OutputStream__BLOCK_SIZE", OutputStream$: function(byteOrder, size) {
        return new T.OutputStream(0, byteOrder, new Uint8Array(32768));
      }}
  },
  HuffmanTable: {
    "^": "Object;table,maxCodeLength,minCodeLength",
    HuffmanTable$1: function(lengths) {
      var listSize, i, t1, size, bitLength, code, skip, rtemp, reversed, j, t2, t3;
      listSize = lengths.length;
      for (i = 0; i < listSize; ++i) {
        if (i >= lengths.length)
          return H.ioore(lengths, i);
        if (J.$gt$n(lengths[i], this.maxCodeLength)) {
          if (i >= lengths.length)
            return H.ioore(lengths, i);
          this.maxCodeLength = lengths[i];
        }
        if (i >= lengths.length)
          return H.ioore(lengths, i);
        if (J.$lt$n(lengths[i], this.minCodeLength)) {
          if (i >= lengths.length)
            return H.ioore(lengths, i);
          this.minCodeLength = lengths[i];
        }
      }
      t1 = this.maxCodeLength;
      if (typeof t1 !== "number")
        return H.iae(t1);
      size = C.JSInt_methods.$shl(1, t1);
      this.table = new Uint32Array(size);
      bitLength = 1;
      code = 0;
      skip = 2;
      while (true) {
        t1 = this.maxCodeLength;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(bitLength <= t1))
          break;
        for (t1 = bitLength << 16, i = 0; i < listSize; ++i) {
          if (i >= lengths.length)
            return H.ioore(lengths, i);
          if (J.$eq(lengths[i], bitLength)) {
            for (rtemp = code, reversed = 0, j = 0; j < bitLength; ++j) {
              reversed = (reversed << 1 | rtemp & 1) >>> 0;
              rtemp = rtemp >>> 1;
            }
            for (t2 = this.table, t3 = (t1 | i) >>> 0, j = reversed; j < size; j += skip) {
              if (j < 0 || j >= t2.length)
                return H.ioore(t2, j);
              t2[j] = t3;
            }
            ++code;
          }
        }
        ++bitLength;
        code = code << 1 >>> 0;
        skip = skip << 1 >>> 0;
      }
    },
    static: {HuffmanTable$: function(lengths) {
        var t1 = new T.HuffmanTable(null, 0, 2147483647);
        t1.HuffmanTable$1(lengths);
        return t1;
      }}
  },
  Inflate: {
    "^": "Object;input,output,_bitBuffer,_bitBufferLen,_blockPos,_fixedLiteralLengthTable,_fixedDistanceTable",
    getBytes$0: function() {
      var t1 = this.output;
      return H.NativeUint8List_NativeUint8List$view(t1._buffer.buffer, 0, t1.length);
    },
    _inflate$0: function() {
      this._bitBuffer = 0;
      this._bitBufferLen = 0;
      var t1 = this.output;
      t1._buffer = new Uint8Array(32768);
      t1.length = 0;
      for (; this._parseBlock$0();)
        ;
    },
    _parseBlock$0: function() {
      var t1, t2, t3, hdr, btype, len, bytes, t4, t5;
      t1 = this.input;
      t2 = t1.offset;
      t3 = t1.start;
      t1 = t1._archive$_length;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= t3 + t1)
        return false;
      hdr = this._readBits$1(3);
      btype = hdr >>> 1;
      switch (btype) {
        case 0:
          this._bitBuffer = 0;
          this._bitBufferLen = 0;
          len = this._readBits$1(16);
          if (len === ~this._readBits$1(16) >>> 0)
            H.throwExpression(T.ArchiveException$("Invalid uncompressed block header"));
          t1 = this.input;
          t2 = t1._archive$_length;
          t3 = t1.offset;
          t1 = t1.start;
          if (typeof t3 !== "number")
            return t3.$sub();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = J.$sub$n(t2, t3 - t1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (len > t1)
            H.throwExpression(T.ArchiveException$("Input buffer is broken"));
          t1 = this.input;
          t2 = t1.offset;
          t3 = t1.start;
          if (typeof t2 !== "number")
            return t2.$sub();
          if (typeof t3 !== "number")
            return H.iae(t3);
          bytes = t1.subset$2(t2 - t3, len);
          t3 = t1.offset;
          t2 = bytes._archive$_length;
          t4 = bytes.offset;
          t5 = bytes.start;
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = J.$sub$n(t2, t4 - t5);
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t1.offset = t3 + t5;
          this.output.writeInputStream$1(bytes);
          break;
        case 1:
          this._decodeHuffman$2(this._fixedLiteralLengthTable, this._fixedDistanceTable);
          break;
        case 2:
          this._parseDynamicHuffmanBlock$0();
          break;
        default:
          throw H.wrapException(T.ArchiveException$("unknown BTYPE: " + btype));
      }
      return (hdr & 1) === 0;
    },
    _readBits$1: function($length) {
      var t1, t2, t3, t4, octet;
      if (J.$eq($length, 0))
        return 0;
      if (typeof $length !== "number")
        return H.iae($length);
      for (; t1 = this._bitBufferLen, t1 < $length;) {
        t1 = this.input;
        t2 = t1.offset;
        t3 = t1.start;
        t4 = t1._archive$_length;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof t2 !== "number")
          return t2.$ge();
        if (t2 >= t3 + t4)
          throw H.wrapException(T.ArchiveException$("input buffer is broken"));
        t1.offset = t2 + 1;
        octet = J.$index$asx(t1.buffer, t2);
        t1 = this._bitBuffer;
        t2 = this._bitBufferLen;
        if (typeof octet !== "number")
          return octet.$shl();
        this._bitBuffer = (t1 | C.JSNumber_methods.$shl(octet, t2)) >>> 0;
        this._bitBufferLen = t2 + 8;
      }
      t2 = this._bitBuffer;
      t3 = C.JSInt_methods.$shl(1, $length);
      this._bitBuffer = C.JSInt_methods._shrReceiverPositive$1(t2, $length);
      this._bitBufferLen = t1 - $length;
      return (t2 & t3 - 1) >>> 0;
    },
    _readCodeByTable$1: function(table) {
      var codeTable, maxCodeLength, t1, t2, t3, t4, t5, octet, codeWithLength, codeLength;
      codeTable = table.table;
      maxCodeLength = table.maxCodeLength;
      if (typeof maxCodeLength !== "number")
        return H.iae(maxCodeLength);
      for (; t1 = this._bitBufferLen, t1 < maxCodeLength;) {
        t2 = this.input;
        t3 = t2.offset;
        t4 = t2.start;
        t5 = t2._archive$_length;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t3 !== "number")
          return t3.$ge();
        if (t3 >= t4 + t5)
          break;
        t2.offset = t3 + 1;
        octet = J.$index$asx(t2.buffer, t3);
        t1 = this._bitBuffer;
        t2 = this._bitBufferLen;
        if (typeof octet !== "number")
          return octet.$shl();
        this._bitBuffer = (t1 | C.JSNumber_methods.$shl(octet, t2)) >>> 0;
        this._bitBufferLen = t2 + 8;
      }
      t2 = this._bitBuffer;
      t3 = (t2 & C.JSInt_methods.$shl(1, maxCodeLength) - 1) >>> 0;
      if (t3 >= codeTable.length)
        return H.ioore(codeTable, t3);
      codeWithLength = codeTable[t3];
      codeLength = codeWithLength >>> 16;
      this._bitBuffer = C.JSInt_methods._shrBothPositive$1(t2, codeLength);
      this._bitBufferLen = t1 - codeLength;
      return codeWithLength & 65535;
    },
    _parseDynamicHuffmanBlock$0: function() {
      var numLitLengthCodes, numDistanceCodes, numCodeLengths, codeLengths, i, t1, t2, codeLengthsTable, litlenLengths, distLengths, litlen, dist;
      numLitLengthCodes = this._readBits$1(5) + 257;
      numDistanceCodes = this._readBits$1(5) + 1;
      numCodeLengths = this._readBits$1(4) + 4;
      codeLengths = new Uint8Array(19);
      for (i = 0; i < numCodeLengths; ++i) {
        if (i >= 19)
          return H.ioore(C.List_uSC, i);
        t1 = C.List_uSC[i];
        t2 = this._readBits$1(3);
        if (t1 >>> 0 !== t1 || t1 >= 19)
          return H.ioore(codeLengths, t1);
        codeLengths[t1] = t2;
      }
      codeLengthsTable = T.HuffmanTable$(codeLengths);
      litlenLengths = new Uint8Array(numLitLengthCodes);
      distLengths = new Uint8Array(numDistanceCodes);
      litlen = this._decode$3(numLitLengthCodes, codeLengthsTable, litlenLengths);
      dist = this._decode$3(numDistanceCodes, codeLengthsTable, distLengths);
      this._decodeHuffman$2(T.HuffmanTable$(litlen), T.HuffmanTable$(dist));
    },
    _decodeHuffman$2: function(litlen, dist) {
      var code, t1, t2, t3, ti, codeLength, distCode, distance;
      for (; true;) {
        code = this._readCodeByTable$1(litlen);
        if (code > 285)
          throw H.wrapException(T.ArchiveException$("Invalid Huffman Code " + code));
        if (code === 256)
          break;
        if (code < 256) {
          t1 = this.output;
          if (J.$eq(t1.length, t1._buffer.length))
            t1._expandBuffer$0();
          t2 = t1._buffer;
          t3 = t1.length;
          t1.length = J.$add$ns(t3, 1);
          if (t3 >>> 0 !== t3 || t3 >= t2.length)
            return H.ioore(t2, t3);
          t2[t3] = code & 255 & 255;
          continue;
        }
        ti = code - 257;
        if (ti < 0 || ti >= 29)
          return H.ioore(C.List_qQn, ti);
        codeLength = J.$add$ns(C.List_qQn[ti], this._readBits$1(C.List_eea[ti]));
        distCode = this._readCodeByTable$1(dist);
        if (distCode <= 29) {
          if (distCode >= 30)
            return H.ioore(C.List_i3t, distCode);
          distance = J.$add$ns(C.List_i3t[distCode], this._readBits$1(C.List_X3d0[distCode]));
          for (t1 = this.output, t2 = J.getInterceptor$n(distance); t3 = J.getInterceptor$n(codeLength), t3.$gt(codeLength, distance);) {
            t1.writeBytes$1(t1.subset$1(t2.$negate(distance)));
            codeLength = t3.$sub(codeLength, distance);
          }
          if (t3.$eq(codeLength, distance))
            t1.writeBytes$1(t1.subset$1(t2.$negate(distance)));
          else
            t1.writeBytes$1(t1.subset$2(t2.$negate(distance), t3.$sub(codeLength, distance)));
        } else
          throw H.wrapException(T.ArchiveException$("Illegal unused distance symbol"));
      }
      for (; t1 = this._bitBufferLen, t1 >= 8;) {
        this._bitBufferLen = t1 - 8;
        t1 = this.input;
        t2 = t1.offset;
        if (typeof t2 !== "number")
          return t2.$sub();
        t1.offset = t2 - 1;
      }
    },
    _decode$3: function(num, table, lengths) {
      var t1, prev, i, code, repeat, repeat0, i0;
      for (t1 = lengths.length, prev = 0, i = 0; i < num;) {
        code = this._readCodeByTable$1(table);
        switch (code) {
          case 16:
            repeat = 3 + this._readBits$1(2);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = prev;
            }
            break;
          case 17:
            repeat = 3 + this._readBits$1(3);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          case 18:
            repeat = 11 + this._readBits$1(7);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          default:
            if (code > 15)
              throw H.wrapException(T.ArchiveException$("Invalid Huffman Code: " + code));
            i0 = i + 1;
            if (i < 0 || i >= t1)
              return H.ioore(lengths, i);
            lengths[i] = code;
            i = i0;
            prev = code;
            break;
        }
      }
      return lengths;
    },
    Inflate$2: function(bytes, uncompressedSize) {
      this._inflate$0();
    },
    static: {"^": "Inflate__BLOCK_UNCOMPRESSED,Inflate__BLOCK_FIXED_HUFFMAN,Inflate__BLOCK_DYNAMIC_HUFFMAN,Inflate__FIXED_LITERAL_LENGTHS,Inflate__FIXED_DISTANCE_TABLE,Inflate__MAX_BACKWARD_LENGTH,Inflate__MAX_COPY_LENGTH,Inflate__ORDER,Inflate__LENGTH_CODE_TABLE,Inflate__LENGTH_EXTRA_TABLE,Inflate__DIST_CODE_TABLE,Inflate__DIST_EXTRA_TABLE", Inflate$: function(bytes, uncompressedSize) {
        var t1, t2;
        t1 = T.HuffmanTable$(C.List_2Bc);
        t2 = T.HuffmanTable$(C.List_X3d);
        t2 = new T.Inflate(T.InputStream$(bytes, 0, null, 0), T.OutputStream$(0, uncompressedSize), 0, 0, 0, t1, t2);
        t2.Inflate$2(bytes, uncompressedSize);
        return t2;
      }}
  },
  ZLibDecoder: {
    "^": "Object;",
    decodeBuffer$2$verify: function(input, verify) {
      var t1, t2, t3, cmf, flg, method, buffer, adler32;
      t1 = input.buffer;
      t2 = input.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      input.offset = t2 + 1;
      t3 = J.getInterceptor$asx(t1);
      cmf = t3.$index(t1, t2);
      t2 = input.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      input.offset = t2 + 1;
      flg = t3.$index(t1, t2);
      method = J.getInterceptor$n(cmf).$and(cmf, 8);
      if (typeof cmf !== "number")
        return cmf.$shr();
      C.JSNumber_methods._shrOtherPositive$1(cmf, 3);
      if (method !== 8)
        throw H.wrapException(T.ArchiveException$("Only DEFLATE compression supported: " + method));
      t1 = J.getInterceptor$n(flg);
      t1.$and(flg, 16);
      t2 = t1.$and(flg, 32);
      t1.$and(flg, 64);
      if (typeof flg !== "number")
        return H.iae(flg);
      if (C.JSNumber_methods.$mod((cmf << 8 >>> 0) + flg, 31) !== 0)
        throw H.wrapException(T.ArchiveException$("Invalid FCHECK"));
      if (t2 >>> 5 !== 0) {
        input.readUint32$0();
        throw H.wrapException(T.ArchiveException$("FDICT Encoding not currently supported"));
      }
      t1 = T.HuffmanTable$(C.List_2Bc);
      t2 = T.HuffmanTable$(C.List_X3d);
      t3 = T.OutputStream$(0, null);
      new T.Inflate(input, t3, 0, 0, 0, t1, t2)._inflate$0();
      buffer = H.NativeUint8List_NativeUint8List$view(t3._buffer.buffer, 0, t3.length);
      adler32 = input.readUint32$0();
      if (verify)
        if (adler32 !== T.getAdler32(buffer, 1))
          throw H.wrapException(T.ArchiveException$("Invalid adler-32 checksum"));
      return buffer;
    },
    static: {"^": "ZLibDecoder_DEFLATE"}
  }
}],
["cameras", "package:dartray/cameras/cameras.dart", , K, {
  "^": "",
  EnvironmentCamera: {
    "^": "Camera;cameraToWorld,shutterOpen,shutterClose,film",
    generateRay$2: function(sample, ray) {
      var t1, t2, theta, phi, t3, t4, dir;
      t1 = sample.get$imageY();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.film;
      theta = 3.141592653589793 * t1 / t2.yResolution;
      t1 = sample.imageX;
      if (typeof t1 !== "number")
        return H.iae(t1);
      phi = 6.283185307179586 * t1 / t2.xResolution;
      t1 = Math.sin(theta);
      t2 = Math.cos(phi);
      t3 = Math.cos(theta);
      t4 = Math.sin(theta);
      dir = G.Vector$(t1 * t2, t3, t4 * Math.sin(phi));
      t1 = new G.Point(new Float32Array(3));
      t1.Vector$3(0, 0, 0);
      ray.set$5(t1, dir, 0, 1 / 0, sample.time);
      this.cameraToWorld.transformRay$2(ray, ray);
      return 1;
    },
    static: {EnvironmentCamera_Create: [function(params, cam2world, film) {
        var shutteropen, shutterclose, t1, t0, frame, sw, $screen;
        shutteropen = params.findOneFloat$2("shutteropen", 0);
        shutterclose = params.findOneFloat$2("shutterclose", 1);
        if (J.$lt$n(shutterclose, shutteropen)) {
          t1 = "Shutter close time [" + H.S(shutterclose) + "] < shutter open [" + H.S(shutteropen) + "]. Swapping them.";
          $.Log.call$2(1, t1);
          t0 = shutterclose;
          shutterclose = shutteropen;
          shutteropen = t0;
        }
        frame = params.findOneFloat$2("frameaspectratio", film.get$xResolution() / film.yResolution);
        sw = params.findFloat$1("screenwindow");
        if (sw != null && J.$eq(J.get$length$asx(sw), 4))
          ;
        else {
          $screen = [0, 0, 0, 0];
          if (J.$gt$n(frame, 1)) {
            if (typeof frame !== "number")
              return frame.$negate();
            $screen[0] = -frame;
            $screen[1] = frame;
            $screen[2] = -1;
            $screen[3] = 1;
          } else {
            $screen[0] = -1;
            $screen[1] = 1;
            if (typeof frame !== "number")
              return H.iae(frame);
            $screen[2] = -1 / frame;
            $screen[3] = 1 / frame;
          }
        }
        return new K.EnvironmentCamera(cam2world, shutteropen, shutterclose, film);
      }, "call$3", "EnvironmentCamera_Create$closure", 6, 0, 5]}
  },
  OrthographicCamera: {
    "^": "ProjectiveCamera;dxCamera,dyCamera,cameraToScreen,rasterToCamera,screenToRaster,rasterToScreen,lensRadius,focalDistance,cameraToWorld,shutterOpen,shutterClose,film",
    generateRay$2: function(sample, ray) {
      var t1, t2, Pras, Pcamera, lensU, lensV, ft, t3, t4;
      t1 = sample.get$imageX();
      t2 = sample.imageY;
      Pras = new G.Point(new Float32Array(3));
      Pras.Vector$3(t1, t2, 0);
      Pcamera = new G.Point(new Float32Array(3));
      Pcamera.Vector$3(0, 0, 0);
      this.rasterToCamera.transformPoint$2(Pras, Pcamera);
      ray.set$5(Pcamera, G.Vector$(0, 0, 1), 0, 1 / 0, sample.time);
      t1 = this.lensRadius;
      if (J.$gt$n(t1, 0)) {
        lensU = [0];
        lensV = [0];
        G.ConcentricSampleDisk(sample.lensU, sample.lensV, lensU, lensV);
        lensU[0] = J.$mul$ns(lensU[0], t1);
        lensV[0] = J.$mul$ns(lensV[0], t1);
        ft = J.$div$n(this.focalDistance, J.get$z$x(ray.direction));
        t1 = new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(ray.origin, J.$mul$ns(ray.direction, ft)))));
        t2 = lensU[0];
        t3 = lensV[0];
        t4 = new G.Point(new Float32Array(3));
        t4.Vector$3(t2, t3, 0);
        ray.origin = t4;
        t4 = new G.Point(t1).$sub(0, t4);
        ray.direction = t4.$div(0, t4.length$0(0));
      }
      this.cameraToWorld.transformRay$2(ray, ray);
      return 1;
    },
    generateRayDifferential$2: function(sample, ray) {
      var t1, t2, Pras, Pcamera, lensU, lensV, ft, t3, t4;
      t1 = sample.get$imageX();
      t2 = sample.imageY;
      Pras = new G.Point(new Float32Array(3));
      Pras.Vector$3(t1, t2, 0);
      Pcamera = new G.Point(new Float32Array(3));
      Pcamera.Vector$3(0, 0, 0);
      this.rasterToCamera.transformPoint$2(Pras, Pcamera);
      ray.set$5(Pcamera, G.Vector$(0, 0, 1), 0, 1 / 0, sample.time);
      t1 = this.lensRadius;
      if (J.$gt$n(t1, 0)) {
        lensU = [0];
        lensV = [0];
        G.ConcentricSampleDisk(sample.lensU, sample.lensV, lensU, lensV);
        lensU[0] = J.$mul$ns(lensU[0], t1);
        lensV[0] = J.$mul$ns(lensV[0], t1);
        ft = J.$div$n(this.focalDistance, J.get$z$x(ray.direction));
        t1 = new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(ray.origin, J.$mul$ns(ray.direction, ft)))));
        t2 = lensU[0];
        t3 = lensV[0];
        t4 = new G.Point(new Float32Array(3));
        t4.Vector$3(t2, t3, 0);
        ray.origin = t4;
        t4 = new G.Point(t1).$sub(0, t4);
        ray.direction = t4.$div(0, t4.length$0(0));
      }
      ray.set$rxOrigin(J.$add$ns(ray.origin, this.dxCamera));
      ray.ryOrigin = J.$add$ns(ray.origin, this.dyCamera);
      t1 = ray.direction;
      ray.ryDirection = t1;
      ray.rxDirection = t1;
      ray.hasDifferentials = true;
      this.cameraToWorld.transformRay$2(ray, ray);
      return 1;
    },
    OrthographicCamera$7: function(cam2world, screenWindow, sopen, sclose, lensr, focald, film) {
      this.dxCamera = this.rasterToCamera.transformVector$1(G.Vector$(1, 0, 0));
      this.dyCamera = this.rasterToCamera.transformVector$1(G.Vector$(0, 1, 0));
    },
    static: {OrthographicCamera_Create: [function(params, cam2world, film) {
        var shutteropen, shutterclose, t1, t0, lensradius, focaldistance, frame, sw, $screen, t2;
        shutteropen = params.findOneFloat$2("shutteropen", 0);
        shutterclose = params.findOneFloat$2("shutterclose", 1);
        if (J.$lt$n(shutterclose, shutteropen)) {
          t1 = "Shutter close time [" + H.S(shutterclose) + "] < shutter open [" + H.S(shutteropen) + "].  Swapping them.";
          $.Log.call$2(1, t1);
          t0 = shutterclose;
          shutterclose = shutteropen;
          shutteropen = t0;
        }
        lensradius = params.findOneFloat$2("lensradius", 0);
        focaldistance = params.findOneFloat$2("focaldistance", 1000000000000000019884624838656);
        frame = params.findOneFloat$2("frameaspectratio", film.get$xResolution() / film.yResolution);
        sw = params.findFloat$1("screenwindow");
        if (sw != null && J.$eq(J.get$length$asx(sw), 4))
          $screen = sw;
        else {
          $screen = [0, 0, 0, 0];
          if (J.$gt$n(frame, 1)) {
            if (typeof frame !== "number")
              return frame.$negate();
            $screen[0] = -frame;
            $screen[1] = frame;
            $screen[2] = -1;
            $screen[3] = 1;
          } else {
            $screen[0] = -1;
            $screen[1] = 1;
            if (typeof frame !== "number")
              return H.iae(frame);
            $screen[2] = -1 / frame;
            $screen[3] = 1 / frame;
          }
        }
        t1 = G.Transform_Scale(1, 1, 1).$mul(0, G.Transform_Translate(G.Vector$(0, 0, -0.0)));
        t2 = new K.OrthographicCamera(null, null, t1, null, null, null, lensradius, focaldistance, cam2world, shutteropen, shutterclose, film);
        t2.ProjectiveCamera$8(cam2world, t1, $screen, shutteropen, shutterclose, lensradius, focaldistance, film);
        t2.OrthographicCamera$7(cam2world, $screen, shutteropen, shutterclose, lensradius, focaldistance, film);
        return t2;
      }, "call$3", "OrthographicCamera_Create$closure", 6, 0, 6]}
  },
  PerspectiveCamera: {
    "^": "ProjectiveCamera;dxCamera,dyCamera,cameraToScreen,rasterToCamera,screenToRaster,rasterToScreen,lensRadius,focalDistance,cameraToWorld,shutterOpen,shutterClose,film",
    generateRay$2: function(sample, ray) {
      var t1, t2, Pras, Pcamera, lensU, lensV, ft, t3, t4;
      t1 = sample.get$imageX();
      t2 = sample.imageY;
      Pras = new G.Point(new Float32Array(3));
      Pras.Vector$3(t1, t2, 0);
      Pcamera = new G.Point(new Float32Array(3));
      Pcamera.Vector$3(0, 0, 0);
      this.rasterToCamera.transformPoint$2(Pras, Pcamera);
      t1 = new G.Point(new Float32Array(3));
      t1.Vector$3(0, 0, 0);
      J.set$origin$x(ray, t1);
      ray.set$direction(Pcamera.$div(0, Pcamera.length$0(0)));
      ray.minDistance = 0;
      ray.maxDistance = 1 / 0;
      t1 = this.lensRadius;
      if (J.$gt$n(t1, 0)) {
        lensU = [0];
        lensV = [0];
        G.ConcentricSampleDisk(sample.lensU, sample.lensV, lensU, lensV);
        lensU[0] = J.$mul$ns(lensU[0], t1);
        lensV[0] = J.$mul$ns(lensV[0], t1);
        ft = J.$div$n(this.focalDistance, J.get$z$x(ray.direction));
        t1 = new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(ray.origin, J.$mul$ns(ray.direction, ft)))));
        t2 = lensU[0];
        t3 = lensV[0];
        t4 = new G.Point(new Float32Array(3));
        t4.Vector$3(t2, t3, 0);
        ray.origin = t4;
        t4 = new G.Point(t1).$sub(0, t4);
        ray.direction = t4.$div(0, t4.length$0(0));
      }
      ray.time = sample.time;
      this.cameraToWorld.transformRay$2(ray, ray);
      return 1;
    },
    generateRayDifferential$2: function(sample, ray) {
      var t1, t2, Pras, Pcamera, dir, lensU, lensV, ft, t3, t4;
      t1 = sample.get$imageX();
      t2 = sample.imageY;
      Pras = new G.Point(new Float32Array(3));
      Pras.Vector$3(t1, t2, 0);
      Pcamera = new G.Point(new Float32Array(3));
      Pcamera.Vector$3(0, 0, 0);
      this.rasterToCamera.transformPoint$2(Pras, Pcamera);
      dir = Pcamera.$div(0, Pcamera.length$0(0));
      t1 = new G.Point(new Float32Array(3));
      t1.Vector$3(0, 0, 0);
      J.set$origin$x(ray, t1);
      ray.set$direction(dir);
      ray.minDistance = 0;
      ray.maxDistance = 1 / 0;
      t1 = this.lensRadius;
      if (J.$gt$n(t1, 0)) {
        lensU = [0];
        lensV = [0];
        G.ConcentricSampleDisk(sample.lensU, sample.lensV, lensU, lensV);
        lensU[0] = J.$mul$ns(lensU[0], t1);
        lensV[0] = J.$mul$ns(lensV[0], t1);
        ft = J.$div$n(this.focalDistance, J.get$z$x(ray.direction));
        t1 = new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(ray.origin, J.$mul$ns(ray.direction, ft)))));
        t2 = lensU[0];
        t3 = lensV[0];
        t4 = new G.Point(new Float32Array(3));
        t4.Vector$3(t2, t3, 0);
        ray.origin = t4;
        t4 = new G.Point(t1).$sub(0, t4);
        ray.direction = t4.$div(0, t4.length$0(0));
      }
      ray.set$rxOrigin(new G.Point(new Float32Array(H._ensureNativeList(J.get$data$x(ray.origin)))));
      ray.ryOrigin = new G.Point(new Float32Array(H._ensureNativeList(J.get$data$x(ray.origin))));
      t1 = Pcamera.$add(0, this.dxCamera);
      ray.rxDirection = t1.$div(0, t1.length$0(0));
      t1 = Pcamera.$add(0, this.dyCamera);
      ray.ryDirection = t1.$div(0, t1.length$0(0));
      ray.time = sample.time;
      this.cameraToWorld.transformRayDifferential$2(ray, ray);
      ray.hasDifferentials = true;
      return 1;
    },
    PerspectiveCamera$8: function(cam2world, screenWindow, sopen, sclose, lensr, focald, fov, film) {
      var t1, t2, t3;
      t1 = this.rasterToCamera;
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(1, 0, 0);
      t2 = t1.transformPoint$1(t2);
      t1 = this.rasterToCamera;
      t3 = new G.Point(new Float32Array(3));
      t3.Vector$3(0, 0, 0);
      this.dxCamera = t2.$sub(0, t1.transformPoint$1(t3));
      t3 = this.rasterToCamera;
      t1 = new G.Point(new Float32Array(3));
      t1.Vector$3(0, 1, 0);
      t1 = t3.transformPoint$1(t1);
      t3 = this.rasterToCamera;
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(0, 0, 0);
      this.dyCamera = t1.$sub(0, t3.transformPoint$1(t2));
    },
    static: {PerspectiveCamera_Create: [function(params, cam2world, film) {
        var shutteropen, shutterclose, t0, lensradius, focaldistance, frame, sw, $screen, fov, halffov, t1, t2;
        shutteropen = params.findOneFloat$2("shutteropen", 0);
        shutterclose = params.findOneFloat$2("shutterclose", 1);
        if (J.$lt$n(shutterclose, shutteropen)) {
          t0 = shutterclose;
          shutterclose = shutteropen;
          shutteropen = t0;
        }
        lensradius = params.findOneFloat$2("lensradius", 0);
        focaldistance = params.findOneFloat$2("focaldistance", 1000000000000000019884624838656);
        frame = params.findOneFloat$2("frameaspectratio", film.get$xResolution() / film.yResolution);
        sw = params.findFloat$1("screenwindow");
        if (sw != null && J.$eq(J.get$length$asx(sw), 4))
          $screen = sw;
        else {
          $screen = [0, 0, 0, 0];
          if (J.$gt$n(frame, 1)) {
            if (typeof frame !== "number")
              return frame.$negate();
            $screen[0] = -frame;
            $screen[1] = frame;
            $screen[2] = -1;
            $screen[3] = 1;
          } else {
            $screen[0] = -1;
            $screen[1] = 1;
            if (typeof frame !== "number")
              return H.iae(frame);
            $screen[2] = -1 / frame;
            $screen[3] = 1 / frame;
          }
        }
        fov = params.findOneFloat$2("fov", 60);
        halffov = params.findOneFloat$2("halffov", -1);
        if (J.$gt$n(halffov, 0)) {
          if (typeof halffov !== "number")
            return H.iae(halffov);
          fov = 2 * halffov;
        }
        t1 = G.Transform_Perspective(fov, 0.01, 1000);
        t2 = new K.PerspectiveCamera(null, null, t1, null, null, null, lensradius, focaldistance, cam2world, shutteropen, shutterclose, film);
        t2.ProjectiveCamera$8(cam2world, t1, $screen, shutteropen, shutterclose, lensradius, focaldistance, film);
        t2.PerspectiveCamera$8(cam2world, $screen, shutteropen, shutterclose, lensradius, focaldistance, fov, film);
        return t2;
      }, "call$3", "PerspectiveCamera_Create$closure", 6, 0, 7]}
  }
}],
["core", "package:dartray/core/core.dart", , G, {
  "^": "",
  FutureWhileLoop: function(f) {
    var doneSignal = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
    new G.FutureWhileLoop_nextElement(f, doneSignal).call$1(null);
    return doneSignal.future;
  },
  GetSubWindow: function(w, h, num, count, extents) {
    var t1, nx, ny, t2, xo, yo, tx0, tx1, ty0, ty1, t3;
    t1 = J.getInterceptor$ns(h);
    nx = count;
    ny = 1;
    while (true) {
      if (J.getInterceptor$n(nx).$and(nx, 1) === 0) {
        if (typeof w !== "number")
          return H.iae(w);
        t2 = t1.$mul(h, nx);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = 2 * w * ny < t2;
      } else
        t2 = false;
      if (!t2)
        break;
      if (typeof nx !== "number")
        return nx.$shr();
      nx = C.JSNumber_methods._shrOtherPositive$1(nx, 1);
      ny = ny << 1 >>> 0;
    }
    xo = J.getInterceptor$n(num).$mod(num, nx);
    if (typeof num !== "number")
      return num.$tdiv();
    if (typeof nx !== "number")
      return H.iae(nx);
    yo = C.JSNumber_methods.$tdiv(num, nx);
    if (typeof xo !== "number")
      return xo.$div();
    tx0 = xo / nx;
    tx1 = (xo + 1) / nx;
    ty0 = yo / ny;
    ty1 = (yo + 1) / ny;
    t2 = J.getInterceptor$ns(w);
    t3 = t2.$mul(w, tx0);
    if (typeof t3 !== "number")
      return H.iae(t3);
    t3 = C.JSNumber_methods.floor$0(0 * (1 - tx0) + t3);
    if (0 >= extents.length)
      return H.ioore(extents, 0);
    extents[0] = t3;
    t2 = t2.$mul(w, tx1);
    if (typeof t2 !== "number")
      return H.iae(t2);
    t2 = P.min(C.JSNumber_methods.floor$0(0 * (1 - tx1) + t2), w);
    if (1 >= extents.length)
      return H.ioore(extents, 1);
    extents[1] = t2;
    t2 = t1.$mul(h, ty0);
    if (typeof t2 !== "number")
      return H.iae(t2);
    t2 = C.JSNumber_methods.floor$0(0 * (1 - ty0) + t2);
    if (2 >= extents.length)
      return H.ioore(extents, 2);
    extents[2] = t2;
    t1 = t1.$mul(h, ty1);
    if (typeof t1 !== "number")
      return H.iae(t1);
    t1 = P.min(C.JSNumber_methods.floor$0(0 * (1 - ty1) + t1), h);
    if (3 >= extents.length)
      return H.ioore(extents, 3);
    extents[3] = t1;
  },
  RoundUpPow2: function(v) {
    v = J.$sub$n(v, 1);
    if (typeof v !== "number")
      return v.$shr();
    v |= C.JSNumber_methods._shrOtherPositive$1(v, 1);
    v |= v >>> 2;
    v |= v >>> 4;
    v |= v >>> 8;
    return ((v | v >>> 16) >>> 0) + 1;
  },
  SmoothStep: function(min, max, value) {
    var v = C.JSNumber_methods.clamp$2((value - min) / (max - min), 0, 1);
    return v * v * (-2 * v + 3);
  },
  Quadratic: function($A, $B, $C, t00, t1) {
    var discrim, rootDiscrim, q, t2, t;
    if (typeof $A !== "number")
      return H.iae($A);
    if (typeof $C !== "number")
      return H.iae($C);
    discrim = $B * $B - 4 * $A * $C;
    if (discrim < 0)
      return false;
    rootDiscrim = Math.sqrt(discrim);
    q = $B < 0 ? -0.5 * ($B - rootDiscrim) : -0.5 * ($B + rootDiscrim);
    t00[0] = q / $A;
    t2 = $C / q;
    if (0 >= t1.length)
      return H.ioore(t1, 0);
    t1[0] = t2;
    if (J.$gt$n(t00[0], t2)) {
      t = t00[0];
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t00[0] = t1[0];
      t1[0] = t;
    }
    return true;
  },
  SolveLinearSystem2x2: function($A, $B, x0, x1) {
    var det = J.$sub$n(J.$mul$ns($A[0], $A[3]), J.$mul$ns($A[1], $A[2]));
    if (J.abs$0$n(det) < 1e-10)
      return false;
    x0[0] = J.$div$n(J.$sub$n(J.$mul$ns($A[3], $B[0]), J.$mul$ns($A[1], $B[1])), det);
    x1[0] = J.$div$n(J.$sub$n(J.$mul$ns($A[0], $B[1]), J.$mul$ns($A[2], $B[0])), det);
    if (J.get$isNaN$n(x0[0]) || J.get$isNaN$n(x1[0]))
      return false;
    return true;
  },
  ReadFloatFile: function(bytes, path) {
    var text, len, ZERO, t1, t2, values, ci, inNumber, curNumber, lineNumber, ci0, c, t3;
    text = H.Primitives_stringFromCharCodes(typeof bytes !== "object" || bytes === null || bytes.constructor !== Array ? P.List_List$from(bytes, true, null) : bytes);
    len = text.length;
    ZERO = "0".charCodeAt(0);
    t1 = new G.ReadFloatFile__isdigit(ZERO, "9".charCodeAt(0));
    t2 = new G.ReadFloatFile__isspace();
    values = [];
    for (ci = 0, inNumber = false, curNumber = "", lineNumber = 0; ci < len;) {
      ci0 = ci + 1;
      if (ci < 0)
        return H.ioore(text, ci);
      c = text[ci];
      if (c === "\n")
        ++lineNumber;
      if (inNumber) {
        if (t1.call$1(c) === true || c === "." || c === "e" || c === "-" || c === "+") {
          curNumber += c;
          inNumber = true;
        } else {
          values.push(H.Primitives_parseDouble(curNumber, null));
          inNumber = false;
          curNumber = "";
        }
        ci = ci0;
      } else if (t1.call$1(c) === true || c === "." || c === "-" || c === "+") {
        curNumber += c;
        ci = ci0;
        inNumber = true;
      } else {
        if (c === "#") {
          ci = ci0;
          while (true) {
            ci0 = ci + 1;
            if (ci < 0 || ci >= len)
              return H.ioore(text, ci);
            if (!(text[ci] !== "\n" && ci0 < len))
              break;
            ci = ci0;
          }
          ++lineNumber;
          ci = ci0;
        } else {
          if (t2.call$1(c) !== true) {
            t3 = "Unexpected text found at line " + lineNumber + " of float file " + H.S(path) + ": " + c;
            $.Log.call$2(1, t3);
          }
          ci = ci0;
        }
        inNumber = false;
      }
    }
    return values;
  },
  less_than: [function(a, b) {
    return J.compareTo$1$ns(a, b) < 0;
  }, "call$2", "less_than$closure", 4, 0, 8],
  partition: function(list, pred, first, last) {
    var t1, t;
    for (t1 = list.length; first < last;) {
      while (true) {
        if (first < 0 || first >= t1)
          return H.ioore(list, first);
        if (!(pred.call$1(list[first]) === true))
          break;
        ++first;
        if (first === last)
          return first;
      }
      do {
        --last;
        if (first === last)
          return first;
        if (last < 0 || last >= t1)
          return H.ioore(list, last);
      } while (pred.call$1(list[last]) !== true);
      t = list[first];
      list[first] = list[last];
      list[last] = t;
      ++first;
    }
    return first;
  },
  nth_element: function(list, first, nth, last, pred) {
    var l, t1, i, j, t2;
    l = C.JSArray_methods.sublist$2(list, first, last);
    H.IterableMixinWorkaround_sortList(l, new G.nth_element_closure(pred));
    for (t1 = list.length, i = first, j = 0; J.$lt$n(i, last); ++i, ++j) {
      if (j >= l.length)
        return H.ioore(l, j);
      t2 = l[j];
      if (i >>> 0 !== i || i >= t1)
        return H.ioore(list, i);
      list[i] = t2;
    }
  },
  upper_bound: function(list, value, compare, first, last) {
    var last0, count, step, index;
    if (J.get$isEmpty$asx(list))
      return -1;
    last0 = list.length;
    if (last0 === 1)
      return 0;
    if (last == null)
      last = last0;
    for (count = last; J.getInterceptor$n(count).$gt(count, 0);) {
      if (typeof count !== "number")
        return count.$shr();
      step = C.JSNumber_methods._shrOtherPositive$1(count, 1);
      index = first + step;
      if (index < 0 || index >= last0)
        return H.ioore(list, index);
      if (compare.call$2(value, list[index]) !== true) {
        ++index;
        count -= step + 1;
        first = index;
      } else
        count = step;
    }
    return first;
  },
  make_heap: function(list, first, last) {
    var t1, len, $parent, t2;
    t1 = J.getInterceptor$n(last);
    if (J.$lt$n(t1.$sub(last, first), 2))
      return;
    len = t1.$sub(last, first);
    $parent = J.$tdiv$n(J.$sub$n(len, 2), 2);
    for (t1 = list.length; true;) {
      if (typeof $parent !== "number")
        return H.iae($parent);
      t2 = first + $parent;
      if (t2 >>> 0 !== t2 || t2 >= t1)
        return H.ioore(list, t2);
      G._adjust_heap(list, first, $parent, len, list[t2]);
      if ($parent === 0)
        return;
      --$parent;
    }
  },
  _adjust_heap: function(list, first, holeIndex, len, value) {
    var secondChild, t1, holeIndex0, t2, secondChild0, t3;
    if (typeof holeIndex !== "number")
      return H.iae(holeIndex);
    secondChild = 2 * holeIndex + 2;
    if (typeof len !== "number")
      return H.iae(len);
    t1 = list.length;
    holeIndex0 = holeIndex;
    for (; secondChild < len; holeIndex0 = secondChild, secondChild = secondChild0) {
      t2 = first + secondChild;
      if (t2 >>> 0 !== t2 || t2 >= t1)
        return H.ioore(list, t2);
      t2 = list[t2];
      secondChild0 = secondChild - 1;
      t3 = first + secondChild0;
      if (t3 >>> 0 !== t3 || t3 >= t1)
        return H.ioore(list, t3);
      if (J.$lt$n(t2, list[t3]))
        secondChild = secondChild0;
      t2 = first + holeIndex0;
      t3 = first + secondChild;
      if (t3 >>> 0 !== t3 || t3 >= t1)
        return H.ioore(list, t3);
      t3 = list[t3];
      if (t2 >>> 0 !== t2 || t2 >= t1)
        return H.ioore(list, t2);
      list[t2] = t3;
      secondChild0 = 2 * (secondChild + 1);
    }
    if (secondChild === len) {
      t2 = first + holeIndex0;
      holeIndex0 = secondChild - 1;
      t3 = first + holeIndex0;
      if (t3 >>> 0 !== t3 || t3 >= t1)
        return H.ioore(list, t3);
      t3 = list[t3];
      if (t2 >>> 0 !== t2 || t2 >= t1)
        return H.ioore(list, t2);
      list[t2] = t3;
    }
    G._push_heap(list, first, holeIndex0, holeIndex, value);
  },
  _push_heap: function(list, first, holeIndex, topIndex, value) {
    var $parent, t1, t2, t3, parent0;
    $parent = J.$tdiv$n(J.$sub$n(holeIndex, 1), 2);
    t1 = list.length;
    while (true) {
      if (J.$gt$n(holeIndex, topIndex)) {
        if (typeof $parent !== "number")
          return H.iae($parent);
        t2 = first + $parent;
        if (t2 >>> 0 !== t2 || t2 >= t1)
          return H.ioore(list, t2);
        t2 = J.$lt$n(list[t2], value);
      } else
        t2 = false;
      if (!t2)
        break;
      if (typeof holeIndex !== "number")
        return H.iae(holeIndex);
      t2 = first + holeIndex;
      if (typeof $parent !== "number")
        return H.iae($parent);
      t3 = first + $parent;
      if (t3 >>> 0 !== t3 || t3 >= t1)
        return H.ioore(list, t3);
      t3 = list[t3];
      if (t2 >>> 0 !== t2 || t2 >= t1)
        return H.ioore(list, t2);
      list[t2] = t3;
      parent0 = C.JSNumber_methods._tdivFast$1($parent - 1, 2);
      holeIndex = $parent;
      $parent = parent0;
    }
    if (typeof holeIndex !== "number")
      return H.iae(holeIndex);
    t2 = first + holeIndex;
    if (t2 >>> 0 !== t2 || t2 >= t1)
      return H.ioore(list, t2);
    list[t2] = value;
  },
  Integrator_UniformSampleAllLights: function(scene, renderer, p, n, wo, rayEpsilon, time, bsdf, sample, rng, lightSampleOffsets, bsdfSampleOffsets) {
    var $L, t1, t2, t3, i, light, nSamples, Ld, j, lightSample, bsdfSample;
    $L = G.Spectrum_Spectrum(0);
    for (t1 = scene.lights, t2 = lightSampleOffsets != null, t3 = bsdfSampleOffsets != null, i = 0; i < t1.length; ++i) {
      light = t1[i];
      if (t2) {
        if (i >= lightSampleOffsets.length)
          return H.ioore(lightSampleOffsets, i);
        nSamples = lightSampleOffsets[i].get$nSamples();
      } else
        nSamples = 1;
      Ld = G.Spectrum_Spectrum(0);
      if (typeof nSamples !== "number")
        return H.iae(nSamples);
      j = 0;
      for (; j < nSamples; ++j) {
        if (t2 && t3) {
          if (i >= lightSampleOffsets.length)
            return H.ioore(lightSampleOffsets, i);
          lightSample = G.LightSample$sample(sample, lightSampleOffsets[i], j);
          if (i >= bsdfSampleOffsets.length)
            return H.ioore(bsdfSampleOffsets, i);
          bsdfSample = G.BSDFSample$sample(sample, bsdfSampleOffsets[i], j);
        } else {
          lightSample = G.LightSample$random(rng);
          bsdfSample = G.BSDFSample$random(rng);
        }
        Ld = Ld.$add(0, G.Integrator_EstimateDirect(scene, renderer, light, p, n, wo, rayEpsilon, time, bsdf, rng, lightSample, bsdfSample, 15));
      }
      $L = $L.$add(0, Ld.$div(0, C.JSNumber_methods.toDouble$0(nSamples)));
    }
    return $L;
  },
  Integrator_UniformSampleOneLight: function(scene, renderer, p, n, wo, rayEpsilon, time, bsdf, sample, rng, lightNumOffset, lightSampleOffset, bsdfSampleOffset) {
    var t1, nLights, lightNum, light, lightSample, bsdfSample;
    t1 = scene.lights;
    nLights = t1.length;
    if (nLights === 0)
      return G.Spectrum_Spectrum(0);
    lightNum = !J.$eq(lightNumOffset, -1) ? J.floor$0$n(J.$mul$ns(J.$index$asx(J.$index$asx(sample.get$oneD(), lightNumOffset), 0), nLights)) : C.JSNumber_methods.toInt$0(Math.floor(rng.randomFloat$0() * nLights));
    lightNum = P.min(lightNum, nLights - 1);
    if (lightNum >>> 0 !== lightNum || lightNum >= t1.length)
      return H.ioore(t1, lightNum);
    light = t1[lightNum];
    if (lightSampleOffset != null && bsdfSampleOffset != null) {
      lightSample = G.LightSample$sample(sample, lightSampleOffset, 0);
      bsdfSample = G.BSDFSample$sample(sample, bsdfSampleOffset, 0);
    } else {
      lightSample = G.LightSample$random(rng);
      bsdfSample = G.BSDFSample$random(rng);
    }
    return G.Integrator_EstimateDirect(scene, renderer, light, p, n, wo, rayEpsilon, time, bsdf, rng, lightSample, bsdfSample, 15).$mul(0, nLights);
  },
  Integrator_EstimateDirect: function(scene, renderer, light, p, n, wo, rayEpsilon, time, bsdf, rng, lightSample, bsdfSample, flags) {
    var Ld, t1, wi, lightPdf, bsdfPdf, visibility, Li, f, hit, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, weight, sampledType, lightIsect, ray, area;
    Ld = G.Spectrum_Spectrum(0);
    t1 = new Float32Array(3);
    wi = new G.Vector(t1);
    if (0 >= 3)
      return H.ioore(t1, 0);
    t1[0] = 0;
    if (1 >= 3)
      return H.ioore(t1, 1);
    t1[1] = 0;
    if (2 >= 3)
      return H.ioore(t1, 2);
    t1[2] = 0;
    lightPdf = [0];
    bsdfPdf = [0];
    visibility = new G.VisibilityTester(null);
    Li = light.sampleLAtPoint$7(p, rayEpsilon, lightSample, time, wi, lightPdf, visibility);
    if (J.$gt$n(lightPdf[0], 0) && !Li.isBlack$0()) {
      f = bsdf.f$3(wo, wi, flags);
      if (!f.isBlack$0()) {
        hit = scene.aggregate.intersectP$1(visibility.r);
        t2 = $.get$Stats_shadowRays();
        t2.count = J.$add$ns(t2.count, 1);
        $.Stats_shadowRays = t2;
        t2 = !hit;
      } else
        t2 = false;
      if (t2) {
        t2 = visibility.r;
        t3 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t3, 0);
        t3[0] = 0;
        if (1 >= 3)
          return H.ioore(t3, 1);
        t3[1] = 0;
        if (2 >= 3)
          return H.ioore(t3, 2);
        t3[2] = 0;
        t4 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t4, 0);
        t4[0] = 0;
        if (1 >= 3)
          return H.ioore(t4, 1);
        t4[1] = 0;
        if (2 >= 3)
          return H.ioore(t4, 2);
        t4[2] = 0;
        t5 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t5, 0);
        t5[0] = 0;
        if (1 >= 3)
          return H.ioore(t5, 1);
        t5[1] = 0;
        if (2 >= 3)
          return H.ioore(t5, 2);
        t5[2] = 0;
        t6 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t6, 0);
        t6[0] = 0;
        if (1 >= 3)
          return H.ioore(t6, 1);
        t6[1] = 0;
        if (2 >= 3)
          return H.ioore(t6, 2);
        t6[2] = 0;
        t7 = new Float32Array(H._ensureNativeList(J.get$data$x(t2.origin)));
        t8 = new Float32Array(H._ensureNativeList(J.get$data$x(t2.direction)));
        t9 = t2.minDistance;
        t10 = t2.maxDistance;
        t11 = t2.time;
        t2 = t2.depth;
        t7 = new G.Point(new Float32Array(H._ensureNativeList(t7)));
        t8 = new G.Vector(new Float32Array(H._ensureNativeList(t8)));
        Li = J.$mul$ns(Li, renderer.transmittance$4(scene, new G.RayDifferential(false, new G.Point(t3), new G.Point(t4), new G.Vector(t5), new G.Vector(t6), t7, t8, t9, t10, t11, t2), null, rng));
        if (light.isDeltaLight$0()) {
          t2 = f.$mul(0, Li);
          t3 = G.Vector_AbsDot(wi, n);
          t4 = lightPdf[0];
          if (typeof t4 !== "number")
            return H.iae(t4);
          Ld = Ld.$add(0, t2.$mul(0, t3 / t4));
        } else {
          t2 = bsdf.pdf$3(wo, wi, flags);
          if (0 >= bsdfPdf.length)
            return H.ioore(bsdfPdf, 0);
          bsdfPdf[0] = t2;
          weight = G.PowerHeuristic(1, lightPdf[0], 1, t2);
          t2 = f.$mul(0, Li);
          t3 = G.Vector_AbsDot(wi, n);
          if (typeof weight !== "number")
            return H.iae(weight);
          t4 = lightPdf[0];
          if (typeof t4 !== "number")
            return H.iae(t4);
          Ld = Ld.$add(0, t2.$mul(0, t3 * weight / t4));
        }
      }
    }
    if (!light.isDeltaLight$0()) {
      sampledType = [0];
      f = bsdf.sample_f$6(wo, wi, bsdfSample, bsdfPdf, flags, sampledType);
      if (!f.isBlack$0()) {
        if (0 >= bsdfPdf.length)
          return H.ioore(bsdfPdf, 0);
        t2 = J.$gt$n(bsdfPdf[0], 0);
      } else
        t2 = false;
      if (t2) {
        if (J.$and$n(sampledType[0], 16) === 0) {
          t2 = light.pdf$2(p, wi);
          lightPdf[0] = t2;
          if (t2 === 0)
            return Ld;
          if (0 >= bsdfPdf.length)
            return H.ioore(bsdfPdf, 0);
          weight = G.PowerHeuristic(1, bsdfPdf[0], 1, lightPdf[0]);
        } else
          weight = 1;
        lightIsect = new G.Intersection(G.DifferentialGeometry$(), null, null, null, null, null, null);
        lightIsect.primitive = null;
        lightIsect.shapeId = 0;
        lightIsect.primitiveId = 0;
        lightIsect.rayEpsilon = 0;
        Li = G.Spectrum_Spectrum(0);
        t2 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t2, 0);
        t2[0] = 0;
        if (1 >= 3)
          return H.ioore(t2, 1);
        t2[1] = 0;
        if (2 >= 3)
          return H.ioore(t2, 2);
        t2[2] = 0;
        t3 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t3, 0);
        t3[0] = 0;
        if (1 >= 3)
          return H.ioore(t3, 1);
        t3[1] = 0;
        if (2 >= 3)
          return H.ioore(t3, 2);
        t3[2] = 0;
        t4 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t4, 0);
        t4[0] = 0;
        if (1 >= 3)
          return H.ioore(t4, 1);
        t4[1] = 0;
        if (2 >= 3)
          return H.ioore(t4, 2);
        t4[2] = 0;
        t5 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t5, 0);
        t5[0] = 0;
        if (1 >= 3)
          return H.ioore(t5, 1);
        t5[1] = 0;
        if (2 >= 3)
          return H.ioore(t5, 2);
        t5[2] = 0;
        t6 = new G.Point(new Float32Array(H._ensureNativeList(p.get$data(p))));
        t7 = new G.Vector(new Float32Array(H._ensureNativeList(t1)));
        ray = new G.RayDifferential(false, new G.Point(t2), new G.Point(t3), new G.Vector(t4), new G.Vector(t5), t6, t7, rayEpsilon, 1 / 0, time, 0);
        hit = scene.aggregate.intersect$2(ray, lightIsect);
        t2 = $.get$Stats_nonShadowRays();
        t2.count = J.$add$ns(t2.count, 1);
        $.Stats_nonShadowRays = t2;
        if (hit) {
          if (J.$eq(lightIsect.primitive.areaLight, light)) {
            t2 = t1[0];
            t3 = t1[1];
            t1 = t1[2];
            t4 = new Float32Array(3);
            if (0 >= 3)
              return H.ioore(t4, 0);
            t4[0] = -t2;
            if (1 >= 3)
              return H.ioore(t4, 1);
            t4[1] = -t3;
            if (2 >= 3)
              return H.ioore(t4, 2);
            t4[2] = -t1;
            area = lightIsect.primitive.areaLight;
            if (area != null) {
              t1 = lightIsect.dg;
              Li = area.L$3(t1.p, t1.nn, new G.Vector(t4));
            } else
              Li = G.Spectrum_Spectrum(0);
          }
        } else
          Li = light.Le$1(ray);
        if (!Li.isBlack$0()) {
          t1 = f.$mul(0, Li.$mul(0, renderer.transmittance$4(scene, ray, null, rng)));
          t2 = G.Vector_AbsDot(wi, n);
          if (typeof weight !== "number")
            return H.iae(weight);
          if (0 >= bsdfPdf.length)
            return H.ioore(bsdfPdf, 0);
          t3 = bsdfPdf[0];
          if (typeof t3 !== "number")
            return H.iae(t3);
          Ld = Ld.$add(0, t1.$mul(0, t2 * weight / t3));
        }
      }
    }
    return Ld;
  },
  Integrator_SpecularReflect: function(ray, bsdf, rng, isect, renderer, scene, sample) {
    var wo, wi, pdf, t1, p, n, f, $L, t2, t3, t4, rd, dndx, dndy, dwodx, dwody, dDNdx, dDNdy;
    wo = J.$negate$n(ray.direction);
    wi = G.Vector$(0, 0, 0);
    pdf = [0];
    t1 = bsdf.dgShading;
    p = t1.p;
    n = t1.nn;
    f = bsdf.sample_f$5(wo, wi, G.BSDFSample$random(rng), pdf, 17);
    $L = G.Spectrum_Spectrum(0);
    if (0 >= pdf.length)
      return H.ioore(pdf, 0);
    if (J.$gt$n(pdf[0], 0) && !f.isBlack$0() && G.Vector_AbsDot(wi, n) !== 0) {
      t2 = isect.rayEpsilon;
      t3 = new G.Point(new Float32Array(3));
      t3.Vector$3(0, 0, 0);
      t4 = new G.Point(new Float32Array(3));
      t4.Vector$3(0, 0, 0);
      rd = new G.RayDifferential(false, t3, t4, G.Vector$(0, 0, 0), G.Vector$(0, 0, 0), new G.Point(new Float32Array(H._ensureNativeList(p.get$data(p)))), new G.Vector(new Float32Array(H._ensureNativeList(wi.data))), t2, 1 / 0, ray.time, ray.depth + 1);
      if (ray.get$hasDifferentials()) {
        rd.hasDifferentials = true;
        rd.rxOrigin = p.$add(p, isect.dg.dpdx);
        rd.ryOrigin = p.$add(p, isect.dg.dpdy);
        dndx = t1.dndu.$mul(0, t1.dudx).$add(0, t1.dndv.$mul(0, t1.dvdx));
        dndy = t1.dndu.$mul(0, t1.dudy).$add(0, t1.dndv.$mul(0, t1.dvdy));
        dwodx = J.$sub$n(J.$negate$n(ray.rxDirection), wo);
        dwody = J.$sub$n(J.$negate$n(ray.ryDirection), wo);
        dDNdx = J.$add$ns(G.Vector_Dot(dwodx, n), G.Vector_Dot(wo, dndx));
        dDNdy = J.$add$ns(G.Vector_Dot(dwody, n), G.Vector_Dot(wo, dndy));
        t1 = J.getInterceptor$ns(n);
        rd.rxDirection = wi.$sub(0, dwodx).$add(0, new G.Vector(new Float32Array(H._ensureNativeList(dndx.$mul(0, G.Vector_Dot(wo, n)).$add(0, t1.$mul(n, dDNdx)).data))).$mul(0, 2));
        rd.ryDirection = wi.$sub(0, dwody).$add(0, new G.Vector(new Float32Array(H._ensureNativeList(dndy.$mul(0, G.Vector_Dot(wo, n)).$add(0, t1.$mul(n, dDNdy)).data))).$mul(0, 2));
      }
      t1 = $.get$Stats_specularReflectionRays();
      t1.count = J.$add$ns(t1.count, 1);
      $.Stats_specularReflectionRays = t1;
      t1 = J.$mul$ns(f, renderer.Li$4(scene, rd, sample, rng));
      t2 = G.Vector_AbsDot(wi, n);
      if (0 >= pdf.length)
        return H.ioore(pdf, 0);
      t3 = pdf[0];
      if (typeof t3 !== "number")
        return H.iae(t3);
      $L = J.$mul$ns(t1, t2 / t3);
    }
    return $L;
  },
  Integrator_SpecularTransmit: function(ray, bsdf, rng, isect, renderer, scene, sample) {
    var wo, wi, pdf, t1, p, n, f, $L, t2, t3, t4, rd, eta, w, dndx, dndy, dwodx, dwody, dDNdx, dDNdy, mu, dmudx, dmudy;
    wo = J.$negate$n(ray.direction);
    wi = G.Vector$(0, 0, 0);
    pdf = [0];
    t1 = bsdf.dgShading;
    p = t1.p;
    n = t1.nn;
    f = bsdf.sample_f$5(wo, wi, G.BSDFSample$random(rng), pdf, 18);
    $L = G.Spectrum_Spectrum(0);
    if (0 >= pdf.length)
      return H.ioore(pdf, 0);
    if (J.$gt$n(pdf[0], 0) && !f.isBlack$0() && G.Vector_AbsDot(wi, n) !== 0) {
      t2 = isect.rayEpsilon;
      t3 = new G.Point(new Float32Array(3));
      t3.Vector$3(0, 0, 0);
      t4 = new G.Point(new Float32Array(3));
      t4.Vector$3(0, 0, 0);
      rd = new G.RayDifferential(false, t3, t4, G.Vector$(0, 0, 0), G.Vector$(0, 0, 0), new G.Point(new Float32Array(H._ensureNativeList(p.get$data(p)))), new G.Vector(new Float32Array(H._ensureNativeList(wi.data))), t2, 1 / 0, ray.time, ray.depth + 1);
      if (ray.get$hasDifferentials()) {
        rd.hasDifferentials = true;
        rd.rxOrigin = p.$add(p, isect.dg.dpdx);
        rd.ryOrigin = p.$add(p, isect.dg.dpdy);
        eta = bsdf.eta;
        w = J.$negate$n(wo);
        if (J.$lt$n(G.Vector_Dot(wo, n), 0)) {
          if (typeof eta !== "number")
            return H.iae(eta);
          eta = 1 / eta;
        }
        dndx = t1.dndu.$mul(0, t1.dudx).$add(0, t1.dndv.$mul(0, t1.dvdx));
        dndy = t1.dndu.$mul(0, t1.dudy).$add(0, t1.dndv.$mul(0, t1.dvdy));
        dwodx = J.$sub$n(J.$negate$n(ray.rxDirection), wo);
        dwody = J.$sub$n(J.$negate$n(ray.ryDirection), wo);
        dDNdx = J.$add$ns(G.Vector_Dot(dwodx, n), G.Vector_Dot(wo, dndx));
        dDNdy = J.$add$ns(G.Vector_Dot(dwody, n), G.Vector_Dot(wo, dndy));
        t1 = J.getInterceptor$ns(eta);
        mu = J.$sub$n(t1.$mul(eta, G.Vector_Dot(w, n)), G.Vector_Dot(wi, n));
        dmudx = J.$mul$ns(t1.$sub(eta, J.$div$n(J.$mul$ns(t1.$mul(eta, eta), G.Vector_Dot(w, n)), G.Vector_Dot(wi, n))), dDNdx);
        dmudy = J.$mul$ns(t1.$sub(eta, J.$div$n(J.$mul$ns(t1.$mul(eta, eta), G.Vector_Dot(w, n)), G.Vector_Dot(wi, n))), dDNdy);
        t1 = J.getInterceptor$ns(n);
        rd.rxDirection = wi.$add(0, J.$mul$ns(dwodx, eta)).$sub(0, new G.Vector(new Float32Array(H._ensureNativeList(dndx.$mul(0, mu).$add(0, t1.$mul(n, dmudx)).data))));
        rd.ryDirection = wi.$add(0, J.$mul$ns(dwody, eta)).$sub(0, new G.Vector(new Float32Array(H._ensureNativeList(dndy.$mul(0, mu).$add(0, t1.$mul(n, dmudy)).data))));
      }
      t1 = $.get$Stats_specularRefractionRays();
      t1.count = J.$add$ns(t1.count, 1);
      $.Stats_specularRefractionRays = t1;
      t1 = J.$mul$ns(f, renderer.Li$4(scene, rd, sample, rng));
      t2 = G.Vector_AbsDot(wi, n);
      if (0 >= pdf.length)
        return H.ioore(pdf, 0);
      t3 = pdf[0];
      if (typeof t3 !== "number")
        return H.iae(t3);
      $L = J.$mul$ns(t1, t2 / t3);
    }
    return $L;
  },
  Integrator_ComputeLightSamplingCDF: function(scene) {
    var t1, nLights, lightPower, i;
    t1 = scene.lights;
    nLights = t1.length;
    lightPower = new Float32Array(nLights);
    for (i = 0; i < nLights; ++i) {
      if (i >= t1.length)
        return H.ioore(t1, i);
      lightPower[i] = t1[i].power$1(scene).luminance$0();
    }
    return G.Distribution1D$(lightPower, nLights);
  },
  PrintLogger: [function(type, msg) {
    if (type >= 5)
      return H.ioore(C.List_UgT, type);
    P.print(H.S(C.List_UgT[type]) + ": " + H.S(msg));
    if (type === 3)
      throw H.wrapException(P.Exception_Exception(msg));
  }, "call$2", "PrintLogger$closure", 4, 0, 9],
  Material_Bump: function(d, dgGeom, dgs, dgBump) {
    var dgEval, du, t1, t2, uDisplace, dv, vDisplace, displace;
    dgEval = new G.DifferentialGeometry(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    dgEval.DifferentialGeometry$from$1(dgs);
    du = 0.5 * (J.abs$0$n(dgs.dudx) + J.abs$0$n(dgs.dudy));
    if (du === 0)
      du = 0.01;
    dgEval.p = dgs.p.$add(0, J.$mul$ns(dgs.dpdu, du));
    dgEval.u = dgs.u + du;
    t1 = new G.Normal(new Float32Array(H._ensureNativeList(G.Vector_Cross(dgs.dpdu, dgs.dpdv).$add(0, dgs.dndu.$mul(0, du)).data)));
    t2 = t1.lengthSquared$0();
    t1.invScale$1(Math.sqrt(t2));
    dgEval.nn = t1;
    uDisplace = d.evaluate$1(dgEval);
    dv = 0.5 * (J.abs$0$n(dgs.dvdx) + J.abs$0$n(dgs.dvdy));
    if (dv === 0)
      dv = 0.01;
    dgEval.p = dgs.p.$add(0, J.$mul$ns(dgs.dpdv, dv));
    dgEval.u = dgs.u;
    dgEval.v = dgs.v + dv;
    t1 = new G.Normal(new Float32Array(H._ensureNativeList(G.Vector_Cross(dgs.dpdu, dgs.dpdv).$add(0, dgs.dndv.$mul(0, dv)).data)));
    t2 = t1.lengthSquared$0();
    t1.invScale$1(Math.sqrt(t2));
    dgEval.nn = t1;
    vDisplace = d.evaluate$1(dgEval);
    displace = d.evaluate$1(dgs);
    dgBump.copy$1(dgs);
    dgBump.dpdu = J.$add$ns(J.$add$ns(dgs.dpdu, new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(dgs.nn)))).$mul(0, J.$sub$n(uDisplace, displace)).$div(0, du)), new G.Vector(new Float32Array(H._ensureNativeList(dgs.dndu.data))).$mul(0, displace));
    t1 = J.$add$ns(J.$add$ns(dgs.dpdv, new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(dgs.nn)))).$mul(0, J.$sub$n(vDisplace, displace)).$div(0, dv)), new G.Vector(new Float32Array(H._ensureNativeList(dgs.dndv.data))).$mul(0, displace));
    dgBump.dpdv = t1;
    t1 = G.Vector_Cross(dgBump.dpdu, t1);
    dgBump.nn = new G.Normal(new Float32Array(H._ensureNativeList(t1.$div(0, t1.length$0(0)).data)));
    t1 = dgs.shape;
    t2 = t1.reverseOrientation;
    if ((t2 === true || t1.transformSwapsHandedness) && !J.$eq(t2, t1.transformSwapsHandedness))
      dgBump.nn = J.$mul$ns(dgBump.nn, -1);
    dgBump.nn = G.Normal_FaceForward(dgBump.nn, dgGeom.nn);
  },
  UniformSampleSphere: function(u1, u2) {
    var z, t1, r, phi, t2, t3;
    if (typeof u1 !== "number")
      return H.iae(u1);
    z = 1 - 2 * u1;
    t1 = P.max(0, 1 - z * z);
    r = Math.sqrt(t1);
    if (typeof u2 !== "number")
      return H.iae(u2);
    phi = 6.283185307179586 * u2;
    t1 = Math.cos(phi);
    t2 = Math.sin(phi);
    t3 = new Float32Array(3);
    if (0 >= 3)
      return H.ioore(t3, 0);
    t3[0] = r * t1;
    if (1 >= 3)
      return H.ioore(t3, 1);
    t3[1] = r * t2;
    if (2 >= 3)
      return H.ioore(t3, 2);
    t3[2] = z;
    return new G.Vector(t3);
  },
  UniformSampleCone: function(u1, u2, costhetamax) {
    var costheta, sintheta, phi, t1;
    costheta = 1 - u1 + u1 * costhetamax;
    sintheta = Math.sqrt(1 - costheta * costheta);
    phi = u2 * 2 * 3.141592653589793;
    t1 = Math.cos(phi);
    return G.Vector$(t1 * sintheta, Math.sin(phi) * sintheta, costheta);
  },
  UniformSampleCone2: function(u1, u2, costhetamax, x, y, z) {
    var costheta, sintheta, phi, t1, t2, t3, t4, t5, t6;
    costheta = costhetamax * (1 - u1) + u1;
    sintheta = Math.sqrt(1 - costheta * costheta);
    phi = u2 * 2 * 3.141592653589793;
    t1 = Math.cos(phi) * sintheta;
    t2 = x.data;
    t3 = t2.length;
    if (0 >= t3)
      return H.ioore(t2, 0);
    t4 = t2[0];
    if (1 >= t3)
      return H.ioore(t2, 1);
    t5 = t2[1];
    if (2 >= t3)
      return H.ioore(t2, 2);
    t2 = t2[2];
    t3 = new Float32Array(3);
    if (0 >= 3)
      return H.ioore(t3, 0);
    t3[0] = t4 * t1;
    if (1 >= 3)
      return H.ioore(t3, 1);
    t3[1] = t5 * t1;
    if (2 >= 3)
      return H.ioore(t3, 2);
    t3[2] = t2 * t1;
    t1 = Math.sin(phi) * sintheta;
    t2 = y.data;
    t4 = t2.length;
    if (0 >= t4)
      return H.ioore(t2, 0);
    t5 = t2[0];
    if (1 >= t4)
      return H.ioore(t2, 1);
    t6 = t2[1];
    if (2 >= t4)
      return H.ioore(t2, 2);
    t2 = t2[2];
    t4 = new Float32Array(3);
    if (0 >= 3)
      return H.ioore(t4, 0);
    t4[0] = t5 * t1;
    if (1 >= 3)
      return H.ioore(t4, 1);
    t4[1] = t6 * t1;
    if (2 >= 3)
      return H.ioore(t4, 2);
    t4[2] = t2 * t1;
    return new G.Vector(t3).$add(0, new G.Vector(t4)).$add(0, J.$mul$ns(z, costheta));
  },
  UniformConePdf: function(cosThetaMax) {
    return 1 / (6.283185307179586 * (1 - cosThetaMax));
  },
  ConcentricSampleDisk: function(u1, u2, dx, dy) {
    var sx, sy, r, theta;
    if (typeof u1 !== "number")
      return H.iae(u1);
    sx = 2 * u1 - 1;
    if (typeof u2 !== "number")
      return H.iae(u2);
    sy = 2 * u2 - 1;
    if (sx === 0 && sy === 0) {
      dx[0] = 0;
      dy[0] = 0;
      return;
    }
    r = -sy;
    if (sx >= r)
      if (sx > sy) {
        theta = sy / sx;
        theta = sy > 0 ? theta : 8 + theta;
        r = sx;
      } else {
        theta = 2 - sx / sy;
        r = sy;
      }
    else if (sx <= sy) {
      r = -sx;
      theta = 4 - sy / r;
    } else
      theta = 6 + sx / r;
    theta *= 0.7853981633974483;
    dx[0] = r * Math.cos(theta);
    dy[0] = r * Math.sin(theta);
  },
  CosineSampleHemisphere: function(u1, u2) {
    var dx, dy, t1, t2, z, t3;
    dx = [0];
    dy = [0];
    G.ConcentricSampleDisk(u1, u2, dx, dy);
    t1 = dx[0];
    t1 = J.$mul$ns(t1, t1);
    if (typeof t1 !== "number")
      return H.iae(t1);
    t2 = dy[0];
    t2 = J.$mul$ns(t2, t2);
    if (typeof t2 !== "number")
      return H.iae(t2);
    t2 = P.max(0, 1 - t1 - t2);
    z = Math.sqrt(t2);
    t1 = dx[0];
    t2 = dy[0];
    t3 = new Float32Array(3);
    if (0 >= 3)
      return H.ioore(t3, 0);
    t3[0] = t1;
    if (1 >= 3)
      return H.ioore(t3, 1);
    t3[1] = t2;
    if (2 >= 3)
      return H.ioore(t3, 2);
    t3[2] = z;
    return new G.Vector(t3);
  },
  StratifiedSample1D: function(samples, nSamples, rng, jitter) {
    var invTot, t1, t2, i, si, delta, si0, t3;
    if (typeof nSamples !== "number")
      return H.iae(nSamples);
    invTot = 1 / nSamples;
    for (t1 = samples.length, t2 = jitter === true, i = 0, si = 0; i < nSamples; ++i, si = si0) {
      delta = t2 ? rng.random.nextDouble$0() : 0.5;
      si0 = si + 1;
      t3 = P.min((i + delta) * invTot, 0.9999999403953552);
      if (si >= t1)
        return H.ioore(samples, si);
      samples[si] = t3;
    }
  },
  StratifiedSample2D: function(samples, nx, ny, rng, jitter) {
    var dx, dy, t1, si, y, x, jx, jy, si0, t2;
    if (typeof nx !== "number")
      return H.iae(nx);
    dx = 1 / nx;
    if (typeof ny !== "number")
      return H.iae(ny);
    dy = 1 / ny;
    for (t1 = jitter === true, si = 0, y = 0; y < ny; ++y)
      for (x = 0; x < nx; ++x) {
        jx = t1 ? rng.randomFloat$0() : 0.5;
        jy = t1 ? rng.randomFloat$0() : 0.5;
        si0 = si + 1;
        t2 = P.min((x + jx) * dx, 0.9999999403953552);
        if (si < 0 || si >= samples.length)
          return H.ioore(samples, si);
        samples[si] = t2;
        si = si0 + 1;
        t2 = P.min((y + jy) * dy, 0.9999999403953552);
        if (si0 < 0 || si0 >= samples.length)
          return H.ioore(samples, si0);
        samples[si0] = t2;
      }
  },
  Shuffle: function(samples, offset, count, dims, rng) {
    var t1, i, t2, t3, j, t4, s, t5;
    if (typeof count !== "number")
      return H.iae(count);
    t1 = J.getInterceptor$asx(samples);
    i = 0;
    for (; i < count; ++i) {
      t2 = C.JSInt_methods.$mod(rng.random.nextInt$1(4294967295), count - i);
      if (typeof dims !== "number")
        return H.iae(dims);
      t3 = offset + dims * i;
      t2 = offset + dims * (i + t2);
      j = 0;
      for (; j < dims; ++j) {
        t4 = t3 + j;
        s = t1.$index(samples, t4);
        t5 = t2 + j;
        t1.$indexSet(samples, t4, t1.$index(samples, t5));
        t1.$indexSet(samples, t5, s);
      }
    }
  },
  LatinHypercube: function(samples, nSamples, nDim, rng) {
    var delta, t1, i, t2, j, t3, t;
    if (typeof nSamples !== "number")
      return H.iae(nSamples);
    delta = 1 / nSamples;
    for (t1 = J.getInterceptor$asx(samples), i = 0; i < nSamples; ++i)
      for (t2 = nDim * i, j = 0; j < nDim; ++j)
        t1.$indexSet(samples, t2 + j, P.min((i + rng.random.nextDouble$0()) * delta, 0.9999999403953552));
    for (i = 0; i < nDim; ++i)
      for (j = 0; j < nSamples; ++j) {
        t2 = C.JSInt_methods.$mod(rng.random.nextInt$1(4294967295), nSamples - j);
        t3 = nDim * j + i;
        t = t1.$index(samples, t3);
        t2 = nDim * (j + t2) + i;
        t1.$indexSet(samples, t3, t1.$index(samples, t2));
        t1.$indexSet(samples, t2, t);
      }
  },
  RadicalInverse: function(n, base) {
    var invBase, invBi, val;
    invBase = 1 / base;
    for (invBi = invBase, val = 0; n > 0;) {
      val += C.JSInt_methods.$mod(n, base) * invBi;
      n = C.JSInt_methods.toInt$0(n * invBase);
      invBi *= invBase;
    }
    return val;
  },
  GeneratePermutation: function(p, pi, b, rng) {
    var i, t1;
    for (i = 0; i < b; ++i) {
      t1 = pi + i;
      if (t1 >= p.length)
        return H.ioore(p, t1);
      p[t1] = i;
    }
    G.Shuffle(p, pi, b, 1, rng);
  },
  PermutedRadicalInverse: function(n, base, p, pi) {
    var invBase, invBi, val, t1;
    invBase = 1 / base;
    for (invBi = invBase, val = 0; n > 0;) {
      t1 = pi + C.JSInt_methods.$mod(n, base);
      if (t1 >= p.length)
        return H.ioore(p, t1);
      val += p[t1] * invBi;
      n = C.JSInt_methods.toInt$0(n * invBase);
      invBi *= invBase;
    }
    return val;
  },
  LDPixelSampleFloatsNeeded: function(sample, nPixelSamples) {
    var t1, t2, t3, n, i, t4;
    for (t1 = sample.get$n1D().length, t2 = sample.n1D, t3 = t2.length, n = 5, i = 0; i < t1; ++i) {
      if (i >= t3)
        return H.ioore(t2, i);
      t4 = t2[i];
      if (typeof t4 !== "number")
        return H.iae(t4);
      n += t4;
    }
    for (t1 = sample.n2D, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (typeof t3 !== "number")
        return H.iae(t3);
      n += 2 * t3;
    }
    return J.$mul$ns(nPixelSamples, n);
  },
  LDPixelSample: function(xPos, yPos, shutterOpen, shutterClose, nPixelSamples, samples, buffer, rng) {
    var imageSamples, t1, buf, lensSamples, timeSamples, t2, n1D, count1D, n2D, count2D, oneDSamples, twoDSamples, i, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, j, startSamp, k;
    imageSamples = H.NativeFloat32List_NativeFloat32List$view(buffer.buffer, 0, null);
    if (typeof nPixelSamples !== "number")
      return H.iae(nPixelSamples);
    t1 = 2 * nPixelSamples * 4;
    buf = 0 + t1;
    lensSamples = H.NativeFloat32List_NativeFloat32List$view(buffer.buffer, buf, null);
    buf += t1;
    timeSamples = H.NativeFloat32List_NativeFloat32List$view(buffer.buffer, buf, null);
    buf += nPixelSamples * 4;
    t1 = samples.length;
    if (0 >= t1)
      return H.ioore(samples, 0);
    t2 = samples[0];
    n1D = t2.get$n1D();
    count1D = n1D.length;
    n2D = t2.n2D;
    count2D = n2D.length;
    n1D = count1D > 0 ? n1D : null;
    n2D = count2D > 0 ? n2D : null;
    oneDSamples = H.setRuntimeTypeInfo(Array(count1D), [P.Float32List]);
    twoDSamples = H.setRuntimeTypeInfo(Array(count2D), [P.Float32List]);
    for (t2 = oneDSamples.length, i = 0; i < count1D; ++i) {
      t3 = buffer.buffer;
      H._checkViewArguments(t3, buf, null);
      t3 = new Float32Array(t3, buf);
      if (i >= t2)
        return H.ioore(oneDSamples, i);
      oneDSamples[i] = t3;
      if (i >= n1D.length)
        return H.ioore(n1D, i);
      t3 = J.$mul$ns(J.$mul$ns(n1D[i], nPixelSamples), 4);
      if (typeof t3 !== "number")
        return H.iae(t3);
      buf += t3;
    }
    for (t3 = twoDSamples.length, i = 0; i < count2D; ++i) {
      t4 = buffer.buffer;
      H._checkViewArguments(t4, buf, null);
      t4 = new Float32Array(t4, buf);
      if (i >= t3)
        return H.ioore(twoDSamples, i);
      twoDSamples[i] = t4;
      if (i >= n2D.length)
        return H.ioore(n2D, i);
      t4 = n2D[i];
      if (typeof t4 !== "number")
        return H.iae(t4);
      buf += 2 * t4 * nPixelSamples * 4;
    }
    G.LDShuffleScrambled2D(1, nPixelSamples, imageSamples, rng);
    G.LDShuffleScrambled2D(1, nPixelSamples, lensSamples, rng);
    G.LDShuffleScrambled1D(1, nPixelSamples, timeSamples, rng);
    for (i = 0; i < count1D; ++i) {
      if (i >= n1D.length)
        return H.ioore(n1D, i);
      t4 = n1D[i];
      if (i >= t2)
        return H.ioore(oneDSamples, i);
      G.LDShuffleScrambled1D(t4, nPixelSamples, oneDSamples[i], rng);
    }
    for (i = 0; i < count2D; ++i) {
      if (i >= n2D.length)
        return H.ioore(n2D, i);
      t4 = n2D[i];
      if (i >= t3)
        return H.ioore(twoDSamples, i);
      G.LDShuffleScrambled2D(t4, nPixelSamples, twoDSamples[i], rng);
    }
    for (t4 = imageSamples.length, t5 = timeSamples.length, t6 = J.getInterceptor$ns(shutterOpen), t7 = J.getInterceptor$ns(shutterClose), t8 = lensSamples.length, i = 0; i < nPixelSamples; ++i) {
      if (i >= t1)
        return H.ioore(samples, i);
      t9 = samples[i];
      t10 = 2 * i;
      if (t10 >= t4)
        return H.ioore(imageSamples, t10);
      t9.set$imageX(xPos + imageSamples[t10]);
      t11 = t10 + 1;
      if (t11 >= t4)
        return H.ioore(imageSamples, t11);
      t9.imageY = yPos + imageSamples[t11];
      if (i >= t5)
        return H.ioore(timeSamples, i);
      t12 = timeSamples[i];
      t9.time = J.$add$ns(t6.$mul(shutterOpen, 1 - t12), t7.$mul(shutterClose, t12));
      t12 = samples[i];
      if (t10 >= t8)
        return H.ioore(lensSamples, t10);
      t12.set$lensU(lensSamples[t10]);
      if (t11 >= t8)
        return H.ioore(lensSamples, t11);
      t12.lensV = lensSamples[t11];
      for (j = 0; j < count1D; ++j) {
        if (j >= n1D.length)
          return H.ioore(n1D, j);
        startSamp = J.$mul$ns(n1D[j], i);
        t9 = J.getInterceptor$ns(startSamp);
        k = 0;
        while (true) {
          if (j >= n1D.length)
            return H.ioore(n1D, j);
          t10 = n1D[j];
          if (typeof t10 !== "number")
            return H.iae(t10);
          if (!(k < t10))
            break;
          t10 = J.$index$asx(samples[i].get$oneD(), j);
          if (j >= t2)
            return H.ioore(oneDSamples, j);
          J.$indexSet$ax(t10, k, J.$index$asx(oneDSamples[j], t9.$add(startSamp, k)));
          ++k;
        }
      }
      for (j = 0; j < count2D; ++j) {
        if (j >= n2D.length)
          return H.ioore(n2D, j);
        t9 = n2D[j];
        if (typeof t9 !== "number")
          return H.iae(t9);
        startSamp = 2 * t9 * i;
        k = 0;
        while (true) {
          if (j >= n2D.length)
            return H.ioore(n2D, j);
          t9 = n2D[j];
          if (typeof t9 !== "number")
            return H.iae(t9);
          if (!(k < 2 * t9))
            break;
          t9 = samples[i].get$twoD();
          if (j >= t9.length)
            return H.ioore(t9, j);
          t9 = t9[j];
          if (j >= t3)
            return H.ioore(twoDSamples, j);
          J.$indexSet$ax(t9, k, J.$index$asx(twoDSamples[j], startSamp + k));
          ++k;
        }
      }
    }
  },
  PowerHeuristic: function(nf, fPdf, ng, gPdf) {
    var f, g, t1;
    f = J.$mul$ns(nf, fPdf);
    g = J.$mul$ns(ng, gPdf);
    t1 = J.getInterceptor$ns(f);
    return J.$div$n(t1.$mul(f, f), J.$add$ns(t1.$mul(f, f), J.$mul$ns(g, g)));
  },
  Sobol2: function(n, scramble) {
    var v;
    for (v = 2147483648; n !== 0; n = n >>> 1, v ^= v >>> 1)
      if ((n & 1) !== 0) {
        if (typeof scramble !== "number")
          return scramble.$xor();
        scramble = (scramble ^ v) >>> 0;
      }
    if (typeof scramble !== "number")
      return scramble.$shr();
    return P.min((C.JSNumber_methods._shrOtherPositive$1(scramble, 8) & 16777215) / 16777216, 0.9999999403953552);
  },
  VanDerCorput: function(n, scramble) {
    n = n << 16 | n >>> 16;
    n = (n & 16711935) << 8 | (n & 4278255360) >>> 8;
    n = (n & 252645135) << 4 | (n & 4042322160) >>> 4;
    n = (n & 858993459) << 2 | (n & 3435973836) >>> 2;
    if (typeof scramble !== "number")
      return H.iae(scramble);
    return P.min(((((n & 1431655765) << 1 | (n & 2863311530) >>> 1) ^ scramble) >>> 8 & 16777215) / 16777216, 0.9999999403953552);
  },
  LDShuffleScrambled1D: function(nSamples, nPixel, samples, rng) {
    var scramble, t1, t2, i, t3;
    scramble = rng.randomUint$0();
    t1 = J.getInterceptor$ns(nSamples);
    t2 = J.getInterceptor$ax(samples);
    i = 0;
    while (true) {
      t3 = t1.$mul(nSamples, nPixel);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(i < t3))
        break;
      t2.$indexSet(samples, i, G.VanDerCorput(i, scramble));
      ++i;
    }
    if (typeof nPixel !== "number")
      return H.iae(nPixel);
    i = 0;
    for (; i < nPixel; ++i) {
      if (typeof nSamples !== "number")
        return H.iae(nSamples);
      G.Shuffle(samples, i * nSamples, nSamples, 1, rng);
    }
    G.Shuffle(samples, 0, nPixel, nSamples, rng);
  },
  LDShuffleScrambled2D: function(nSamples, nPixel, samples, rng) {
    var scramble, t1, t2, i, t3;
    scramble = [rng.randomUint$0(), rng.random.nextInt$1(4294967295)];
    t1 = J.getInterceptor$ns(nSamples);
    t2 = J.getInterceptor$ax(samples);
    i = 0;
    while (true) {
      t3 = t1.$mul(nSamples, nPixel);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(i < t3))
        break;
      t3 = 2 * i;
      t2.$indexSet(samples, t3, G.VanDerCorput(i, scramble[0]));
      t2.$indexSet(samples, t3 + 1, G.Sobol2(i, scramble[1]));
      ++i;
    }
    if (typeof nPixel !== "number")
      return H.iae(nPixel);
    i = 0;
    for (; i < nPixel; ++i) {
      if (typeof nSamples !== "number")
        return H.iae(nSamples);
      G.Shuffle(samples, 2 * i * nSamples, nSamples, 2, rng);
    }
    if (typeof nSamples !== "number")
      return H.iae(nSamples);
    G.Shuffle(samples, 0, nPixel, 2 * nSamples, rng);
  },
  BRDFRemap: function(wo, wi) {
    var t1, cosi, t2, coso, t3, sini, sino, p, phii, dphi;
    t1 = J.getInterceptor$x(wi);
    cosi = J.$index$asx(t1.get$data(wi), 2);
    t2 = J.getInterceptor$x(wo);
    coso = J.$index$asx(t2.get$data(wo), 2);
    t3 = J.$mul$ns(J.$index$asx(t1.get$data(wi), 2), J.$index$asx(t1.get$data(wi), 2));
    if (typeof t3 !== "number")
      return H.iae(t3);
    t3 = P.max(0, 1 - t3);
    sini = Math.sqrt(t3);
    t3 = J.$mul$ns(J.$index$asx(t2.get$data(wo), 2), J.$index$asx(t2.get$data(wo), 2));
    if (typeof t3 !== "number")
      return H.iae(t3);
    t3 = P.max(0, 1 - t3);
    sino = Math.sqrt(t3);
    t3 = t1.get$y(wi);
    t1 = t1.get$x(wi);
    if (typeof t3 !== "number")
      H.throwExpression(P.ArgumentError$(t3));
    if (typeof t1 !== "number")
      H.throwExpression(P.ArgumentError$(t1));
    p = Math.atan2(t3, t1);
    phii = p < 0 ? p + 6.283185307179586 : p;
    t1 = t2.get$y(wo);
    t2 = t2.get$x(wo);
    if (typeof t1 !== "number")
      H.throwExpression(P.ArgumentError$(t1));
    if (typeof t2 !== "number")
      H.throwExpression(P.ArgumentError$(t2));
    p = Math.atan2(t1, t2);
    dphi = phii - (p < 0 ? p + 6.283185307179586 : p);
    if (dphi < 0)
      dphi += 6.283185307179586;
    if (dphi > 6.283185307179586)
      dphi -= 6.283185307179586;
    if (dphi > 3.141592653589793)
      dphi = 6.283185307179586 - dphi;
    t1 = J.$mul$ns(cosi, coso);
    t2 = new Float32Array(3);
    if (0 >= 3)
      return H.ioore(t2, 0);
    t2[0] = sini * sino;
    if (1 >= 3)
      return H.ioore(t2, 1);
    t2[1] = dphi / 3.141592653589793;
    if (2 >= 3)
      return H.ioore(t2, 2);
    t2[2] = t1;
    return new G.Point(t2);
  },
  Spectrum_NumSamples: function() {
    var t1 = $.Spectrum_type;
    if (t1 === 0)
      t1 = 3;
    else
      t1 = t1 === 1 ? 3 : 4;
    return t1;
  },
  Spectrum_Spectrum: function(v) {
    var t1, t2;
    t1 = $.Spectrum_type;
    if (t1 === 0) {
      t1 = new Float32Array(3);
      t2 = new G.RGBColor(t1);
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(t1, 0, 3, v);
      t1 = t2;
    } else if (t1 === 2) {
      t1 = new Float32Array(4);
      t2 = new G.SampledSpectrum(t1);
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(t1, 0, 4, v);
      t1 = t2;
    } else if (t1 === 1) {
      t1 = new Float32Array(3);
      t2 = new G.XYZColor(t1);
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(t1, 0, 3, v);
      t1 = t2;
    } else
      t1 = null;
    return t1;
  },
  Spectrum_Spectrum$from: function(other, type) {
    switch ($.Spectrum_type) {
      case 0:
        return G.RGBColor$from(other);
      case 1:
        return G.XYZColor$from(other);
      case 2:
        return G.SampledSpectrum$from(other, type);
    }
    $.Log.call$2(3, "Invalid Spectrum type");
    return;
  },
  Spectrum_Spectrum$rgb: function(r, g, b) {
    var t1, t2;
    t1 = $.Spectrum_type;
    if (t1 === 0)
      t1 = G.RGBColor$rgb(r, g, b);
    else if (t1 === 2) {
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.setRGB$3(r, g, b);
    } else if (t1 === 1) {
      t1 = new Float32Array(3);
      t2 = new G.XYZColor(t1);
      G.Spectrum_RGBToXYZ(r, g, b, t1);
      t1 = t2;
    } else
      t1 = null;
    return t1;
  },
  Spectrum_AllocateList: function(count) {
    var r, t1, i, t2;
    if (typeof count !== "number")
      return H.iae(count);
    r = H.setRuntimeTypeInfo(Array(count), [G.Spectrum]);
    for (t1 = r.length, i = 0; i < count; ++i) {
      t2 = G.Spectrum_Spectrum(0);
      if (i >= t1)
        return H.ioore(r, i);
      r[i] = t2;
    }
    return r;
  },
  Spectrum_XYZToRGB: function(x, y, z, rgb) {
    var t1;
    if (typeof x !== "number")
      return H.iae(x);
    if (typeof y !== "number")
      return H.iae(y);
    if (typeof z !== "number")
      return H.iae(z);
    t1 = rgb.length;
    if (0 >= t1)
      return H.ioore(rgb, 0);
    rgb[0] = 3.240479 * x - 1.53715 * y - 0.498535 * z;
    if (1 >= t1)
      return H.ioore(rgb, 1);
    rgb[1] = -0.969256 * x + 1.875991 * y + 0.041556 * z;
    if (2 >= t1)
      return H.ioore(rgb, 2);
    rgb[2] = 0.055648 * x - 0.204043 * y + 1.057311 * z;
  },
  Spectrum_RGBToXYZ: function(r, g, b, xyz) {
    var t1;
    if (typeof r !== "number")
      return H.iae(r);
    if (typeof g !== "number")
      return H.iae(g);
    if (typeof b !== "number")
      return H.iae(b);
    t1 = xyz.length;
    if (0 >= t1)
      return H.ioore(xyz, 0);
    xyz[0] = 0.412453 * r + 0.35758 * g + 0.180423 * b;
    if (1 >= t1)
      return H.ioore(xyz, 1);
    xyz[1] = 0.212671 * r + 0.71516 * g + 0.072169 * b;
    if (2 >= t1)
      return H.ioore(xyz, 2);
    xyz[2] = 0.019334 * r + 0.119193 * g + 0.950227 * b;
  },
  Spectrum_SpectrumSamplesSorted: function(lambda) {
    var t1, i, t2, t3;
    for (t1 = lambda.length - 1, i = 0; i < t1;) {
      t2 = lambda.length;
      if (i >= t2)
        return H.ioore(lambda, i);
      t3 = lambda[i];
      ++i;
      if (i >= t2)
        return H.ioore(lambda, i);
      if (J.$gt$n(t3, lambda[i]))
        return false;
    }
    return true;
  },
  Spectrum_SortSpectrumSamples: function(lambda, vals, offset) {
    var sortVec, n, i, t1, t2;
    sortVec = [];
    n = lambda.length;
    for (i = 0; i < n; ++i) {
      if (i >= lambda.length)
        return H.ioore(lambda, i);
      t1 = lambda[i];
      t2 = offset + i;
      if (t2 < 0 || t2 >= vals.length)
        return H.ioore(vals, t2);
      sortVec.push([t1, vals[t2]]);
    }
    H.IterableMixinWorkaround_sortList(sortVec, new G.Spectrum_SortSpectrumSamples_closure());
    for (t1 = J.getInterceptor$ax(lambda), t2 = J.getInterceptor$ax(vals), i = 0; i < n; ++i) {
      if (i >= sortVec.length)
        return H.ioore(sortVec, i);
      t1.$indexSet(lambda, i, J.$index$asx(sortVec[i], 0));
      if (i >= sortVec.length)
        return H.ioore(sortVec, i);
      t2.$indexSet(vals, offset + i, J.$index$asx(sortVec[i], 1));
    }
  },
  Spectrum_AverageSpectrumSamples: function(lambda, vals, lambdaStart, lambdaEnd, offset) {
    var n, t1, t2, t3, t4, sum, i, i0, segStart, segEnd;
    n = lambda.length;
    if (0 >= n)
      return H.ioore(lambda, 0);
    t1 = J.getInterceptor$n(lambdaEnd);
    if (t1.$le(lambdaEnd, lambda[0])) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      return vals[offset];
    }
    t2 = n - 1;
    if (t2 < 0 || t2 >= lambda.length)
      return H.ioore(lambda, t2);
    t3 = J.getInterceptor$n(lambdaStart);
    if (t3.$ge(lambdaStart, lambda[t2])) {
      t1 = offset + n - 1;
      if (t1 < 0 || t1 >= vals.length)
        return H.ioore(vals, t1);
      return vals[t1];
    }
    if (n === 1) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      return vals[offset];
    }
    if (0 >= lambda.length)
      return H.ioore(lambda, 0);
    if (t3.$lt(lambdaStart, lambda[0])) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      t4 = vals[offset];
      if (0 >= lambda.length)
        return H.ioore(lambda, 0);
      t4 = J.$mul$ns(t4, J.$sub$n(lambda[0], lambdaStart));
      if (typeof t4 !== "number")
        return H.iae(t4);
      sum = 0 + t4;
    } else
      sum = 0;
    if (t2 >= lambda.length)
      return H.ioore(lambda, t2);
    if (t1.$gt(lambdaEnd, lambda[t2])) {
      t4 = offset + n - 1;
      if (t4 < 0 || t4 >= vals.length)
        return H.ioore(vals, t4);
      t4 = vals[t4];
      if (t2 >= lambda.length)
        return H.ioore(lambda, t2);
      t2 = J.$mul$ns(t4, t1.$sub(lambdaEnd, lambda[t2]));
      if (typeof t2 !== "number")
        return H.iae(t2);
      sum += t2;
    }
    i = 0;
    while (true) {
      i0 = i + 1;
      if (i0 >= lambda.length)
        return H.ioore(lambda, i0);
      if (!t3.$gt(lambdaStart, lambda[i0]))
        break;
      i = i0;
    }
    t2 = new G.Spectrum_AverageSpectrumSamples_SEG_AVG(new G.Spectrum_AverageSpectrumSamples_INTERP(lambda, vals, offset));
    while (true) {
      i0 = i + 1;
      if (i0 < n) {
        if (i >= lambda.length)
          return H.ioore(lambda, i);
        t3 = t1.$ge(lambdaEnd, lambda[i]);
      } else
        t3 = false;
      if (!t3)
        break;
      if (i >= lambda.length)
        return H.ioore(lambda, i);
      segStart = P.max(lambdaStart, lambda[i]);
      if (i0 >= lambda.length)
        return H.ioore(lambda, i0);
      segEnd = P.min(lambdaEnd, lambda[i0]);
      t3 = J.$mul$ns(t2.call$3(segStart, segEnd, i), segEnd - segStart);
      if (typeof t3 !== "number")
        return H.iae(t3);
      sum += t3;
      i = i0;
    }
    t1 = t1.$sub(lambdaEnd, lambdaStart);
    if (typeof t1 !== "number")
      return H.iae(t1);
    return sum / t1;
  },
  Spectrum_Blackbody: function(wl, temp, vals) {
    var i, t1, norm, t2;
    if (J.$le$n(temp, 0)) {
      for (i = 0; i < 471; ++i)
        vals[i] = 0;
      return;
    }
    t1 = Math.pow(555, 5);
    if (typeof temp !== "number")
      return H.iae(temp);
    norm = t1 * (Math.exp(14388000 / (555 * temp)) - 1);
    for (i = 0; i < 471; ++i) {
      t1 = wl[i];
      if (typeof t1 !== "number")
        H.throwExpression(P.ArgumentError$(t1));
      t1 = Math.pow(t1, 5);
      t2 = J.$mul$ns(wl[i], temp);
      if (typeof t2 !== "number")
        return H.iae(t2);
      vals[i] = norm / (t1 * (Math.exp(14388000 / t2) - 1));
    }
  },
  Spectrum_InterpolateSpectrumSamples: function(lambda, vals, l, offset) {
    var n, t1, t2, i, t3, t4, t;
    n = lambda.length;
    if (0 >= n)
      return H.ioore(lambda, 0);
    t1 = J.getInterceptor$n(l);
    if (t1.$le(l, lambda[0])) {
      if (offset < 0 || offset >= vals.length)
        return H.ioore(vals, offset);
      return vals[offset];
    }
    t2 = n - 1;
    if (t2 < 0 || t2 >= lambda.length)
      return H.ioore(lambda, t2);
    if (t1.$ge(l, lambda[t2])) {
      t1 = offset + t2;
      if (t1 < 0 || t1 >= vals.length)
        return H.ioore(vals, t1);
      return vals[t1];
    }
    for (i = 0; i < t2; ++i) {
      if (i >= lambda.length)
        return H.ioore(lambda, i);
      if (t1.$ge(l, lambda[i])) {
        t3 = i + 1;
        if (t3 >= lambda.length)
          return H.ioore(lambda, t3);
        t3 = t1.$le(l, lambda[t3]);
      } else
        t3 = false;
      if (t3) {
        if (i >= lambda.length)
          return H.ioore(lambda, i);
        t2 = t1.$sub(l, lambda[i]);
        t3 = i + 1;
        t4 = lambda.length;
        if (t3 >= t4)
          return H.ioore(lambda, t3);
        t3 = lambda[t3];
        if (i >= t4)
          return H.ioore(lambda, i);
        t3 = J.$sub$n(t3, lambda[i]);
        if (typeof t2 !== "number")
          return t2.$div();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t = t2 / t3;
        t3 = offset + i;
        t2 = vals.length;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(vals, t3);
        t4 = vals[t3];
        ++t3;
        if (t3 >= t2)
          return H.ioore(vals, t3);
        t3 = vals[t3];
        return J.$add$ns(J.$mul$ns(t4, 1 - t), J.$mul$ns(t3, t));
      }
    }
    $.Log.call$2(3, "Fatal logic error in InterpolateSpectrumSamples()");
    return 0;
  },
  SphericalHarmonics_Evaluate: function(w, lmax, out, outIndex) {
    var t1, t2, Klm, l, m, t3, t4, t5, t6, sins, coss, xyLen, i, sqrt2, t7, t8, t9;
    t1 = J.getInterceptor$n(lmax);
    if (t1.$gt(lmax, 28))
      $.Log.call$2(3, "SHEvaluate() runs out of numerical precision for lmax > 28.If you need more bands, try recompiling using doubles.");
    t2 = J.getInterceptor$x(w);
    G.SphericalHarmonics__legendrep(t2.get$z(w), lmax, out, outIndex);
    t1 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
    if (typeof t1 !== "number")
      return H.iae(t1);
    Klm = Array(t1);
    Klm.$builtinTypeInfo = [J.JSDouble];
    if (typeof lmax !== "number")
      return H.iae(lmax);
    t1 = Klm.length;
    l = 0;
    for (; l <= lmax; ++l)
      for (m = -l, t3 = l * l + l, t4 = (2 * l + 1) * 0.07957747154594767; m <= l; ++m) {
        t5 = t3 + m;
        t6 = G.SphericalHarmonics__divfact(l, m);
        t6 = Math.sqrt(t4 * t6);
        if (t5 < 0 || t5 >= t1)
          return H.ioore(Klm, t5);
        Klm[t5] = t6;
      }
    t3 = lmax + 1;
    sins = Array(t3);
    sins.$builtinTypeInfo = [J.JSDouble];
    coss = Array(t3);
    coss.$builtinTypeInfo = [J.JSDouble];
    t4 = J.$mul$ns(t2.get$z(w), t2.get$z(w));
    if (typeof t4 !== "number")
      return H.iae(t4);
    t4 = P.max(0, 1 - t4);
    xyLen = Math.sqrt(t4);
    if (xyLen === 0) {
      for (t2 = sins.length, i = 0; i <= lmax; ++i) {
        if (i >= t2)
          return H.ioore(sins, i);
        sins[i] = 0;
      }
      for (t2 = coss.length, i = 0; i <= lmax; ++i) {
        if (i >= t2)
          return H.ioore(coss, i);
        coss[i] = 1;
      }
    } else
      G.SphericalHarmonics__sinCosIndexed(J.$div$n(t2.get$y(w), xyLen), J.$div$n(t2.get$x(w), xyLen), t3, sins, coss);
    sqrt2 = Math.sqrt(2);
    for (t2 = coss.length, t3 = sins.length, l = 0; l <= lmax; ++l) {
      for (m = -l, t4 = l * l + l, t5 = out.length; m < 0; ++m) {
        t6 = t4 + m;
        if (t6 < 0 || t6 >= t1)
          return H.ioore(Klm, t6);
        t7 = Klm[t6];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = -m;
        t9 = t4 + t8;
        if (t9 < 0 || t9 >= t5)
          return H.ioore(out, t9);
        t9 = out[t9];
        if (typeof t9 !== "number")
          return H.iae(t9);
        if (t8 < 0 || t8 >= t3)
          return H.ioore(sins, t8);
        t8 = sins[t8];
        if (typeof t8 !== "number")
          return H.iae(t8);
        if (t6 >= t5)
          return H.ioore(out, t6);
        out[t6] = sqrt2 * t7 * t9 * t8;
      }
      if (t4 >= t5)
        return H.ioore(out, t4);
      t5 = out[t4];
      if (t4 >= t1)
        return H.ioore(Klm, t4);
      t5 = J.$mul$ns(t5, Klm[t4]);
      t6 = out.length;
      if (t4 >= t6)
        return H.ioore(out, t4);
      out[t4] = t5;
      for (t5 = t6, m = 1; m <= l; ++m, t5 = t7) {
        t6 = t4 + m;
        if (t6 >= t5)
          return H.ioore(out, t6);
        t5 = out[t6];
        if (t6 >= t1)
          return H.ioore(Klm, t6);
        t7 = Klm[t6];
        if (typeof t7 !== "number")
          return H.iae(t7);
        if (m >= t2)
          return H.ioore(coss, m);
        t8 = coss[m];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t8 = J.$mul$ns(t5, sqrt2 * t7 * t8);
        t7 = out.length;
        if (t6 >= t7)
          return H.ioore(out, t6);
        out[t6] = t8;
      }
    }
  },
  SphericalHarmonics_ProjectCube: function(func, p, res, lmax, coeffs) {
    var t1, t2, Ylm, t3, t4, u, fu, v, fv, t5, w, f, dA, k, t6, t7;
    t1 = J.getInterceptor$ns(lmax);
    t2 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
    if (typeof t2 !== "number")
      return H.iae(t2);
    Ylm = H.setRuntimeTypeInfo(Array(t2), [J.JSDouble]);
    for (t2 = coeffs.length, t3 = Ylm.length, t4 = 4 / (res * res), u = 0; u < res; ++u) {
      fu = -1 + 2 * (u + 0.5) / res;
      for (v = 0; v < res; ++v) {
        fv = -1 + 2 * (v + 0.5) / res;
        t5 = new Float32Array(3);
        w = new G.Vector(t5);
        if (0 >= 3)
          return H.ioore(t5, 0);
        t5[0] = fu;
        if (1 >= 3)
          return H.ioore(t5, 1);
        t5[1] = fv;
        if (2 >= 3)
          return H.ioore(t5, 2);
        t5[2] = 1;
        G.SphericalHarmonics_Evaluate(w.$div(0, w.length$0(0)), lmax, Ylm, 0);
        f = func.call$4(u, v, p, w);
        t5 = G.Vector_Dot(w, w);
        if (typeof t5 !== "number")
          H.throwExpression(P.ArgumentError$(t5));
        dA = 1 / Math.pow(t5, 1.5);
        t5 = J.getInterceptor$ns(f);
        k = 0;
        while (true) {
          t6 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (!(k < t6))
            break;
          if (k >= t2)
            return H.ioore(coeffs, k);
          t6 = coeffs[k];
          t7 = t5.$mul(f, dA);
          if (k >= t3)
            return H.ioore(Ylm, k);
          coeffs[k] = J.$add$ns(t6, J.$mul$ns(J.$mul$ns(t7, Ylm[k]), t4));
          ++k;
        }
        t5 = new Float32Array(3);
        w = new G.Vector(t5);
        if (0 >= 3)
          return H.ioore(t5, 0);
        t5[0] = fu;
        if (1 >= 3)
          return H.ioore(t5, 1);
        t5[1] = fv;
        if (2 >= 3)
          return H.ioore(t5, 2);
        t5[2] = -1;
        G.SphericalHarmonics_Evaluate(w.$div(0, w.length$0(0)), lmax, Ylm, 0);
        f = func.call$4(u, v, p, w);
        t5 = J.getInterceptor$ns(f);
        k = 0;
        while (true) {
          t6 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (!(k < t6))
            break;
          if (k >= t2)
            return H.ioore(coeffs, k);
          t6 = coeffs[k];
          if (k >= t3)
            return H.ioore(Ylm, k);
          coeffs[k] = J.$add$ns(t6, J.$mul$ns(J.$mul$ns(t5.$mul(f, Ylm[k]), dA), t4));
          ++k;
        }
        t5 = new Float32Array(3);
        w = new G.Vector(t5);
        if (0 >= 3)
          return H.ioore(t5, 0);
        t5[0] = fu;
        if (1 >= 3)
          return H.ioore(t5, 1);
        t5[1] = 1;
        if (2 >= 3)
          return H.ioore(t5, 2);
        t5[2] = fv;
        G.SphericalHarmonics_Evaluate(w.$div(0, w.length$0(0)), lmax, Ylm, 0);
        f = func.call$4(u, v, p, w);
        t5 = J.getInterceptor$ns(f);
        k = 0;
        while (true) {
          t6 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (!(k < t6))
            break;
          if (k >= t2)
            return H.ioore(coeffs, k);
          t6 = coeffs[k];
          if (k >= t3)
            return H.ioore(Ylm, k);
          coeffs[k] = J.$add$ns(t6, J.$mul$ns(J.$mul$ns(t5.$mul(f, Ylm[k]), dA), t4));
          ++k;
        }
        t5 = new Float32Array(3);
        w = new G.Vector(t5);
        if (0 >= 3)
          return H.ioore(t5, 0);
        t5[0] = fu;
        if (1 >= 3)
          return H.ioore(t5, 1);
        t5[1] = -1;
        if (2 >= 3)
          return H.ioore(t5, 2);
        t5[2] = fv;
        G.SphericalHarmonics_Evaluate(w.$div(0, w.length$0(0)), lmax, Ylm, 0);
        f = func.call$4(u, v, p, w);
        t5 = J.getInterceptor$ns(f);
        k = 0;
        while (true) {
          t6 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (!(k < t6))
            break;
          if (k >= t2)
            return H.ioore(coeffs, k);
          t6 = coeffs[k];
          if (k >= t3)
            return H.ioore(Ylm, k);
          coeffs[k] = J.$add$ns(t6, J.$mul$ns(J.$mul$ns(t5.$mul(f, Ylm[k]), dA), t4));
          ++k;
        }
        t5 = new Float32Array(3);
        w = new G.Vector(t5);
        if (0 >= 3)
          return H.ioore(t5, 0);
        t5[0] = 1;
        if (1 >= 3)
          return H.ioore(t5, 1);
        t5[1] = fu;
        if (2 >= 3)
          return H.ioore(t5, 2);
        t5[2] = fv;
        G.SphericalHarmonics_Evaluate(w.$div(0, w.length$0(0)), lmax, Ylm, 0);
        f = func.call$4(u, v, p, w);
        t5 = J.getInterceptor$ns(f);
        k = 0;
        while (true) {
          t6 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (!(k < t6))
            break;
          if (k >= t2)
            return H.ioore(coeffs, k);
          t6 = coeffs[k];
          if (k >= t3)
            return H.ioore(Ylm, k);
          coeffs[k] = J.$add$ns(t6, J.$mul$ns(J.$mul$ns(t5.$mul(f, Ylm[k]), dA), t4));
          ++k;
        }
        t5 = new Float32Array(3);
        w = new G.Vector(t5);
        if (0 >= 3)
          return H.ioore(t5, 0);
        t5[0] = -1;
        if (1 >= 3)
          return H.ioore(t5, 1);
        t5[1] = fu;
        if (2 >= 3)
          return H.ioore(t5, 2);
        t5[2] = fv;
        G.SphericalHarmonics_Evaluate(w.$div(0, w.length$0(0)), lmax, Ylm, 0);
        f = func.call$4(u, v, p, w);
        t5 = J.getInterceptor$ns(f);
        k = 0;
        while (true) {
          t6 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (!(k < t6))
            break;
          if (k >= t2)
            return H.ioore(coeffs, k);
          t6 = coeffs[k];
          if (k >= t3)
            return H.ioore(Ylm, k);
          coeffs[k] = J.$add$ns(t6, J.$mul$ns(J.$mul$ns(t5.$mul(f, Ylm[k]), dA), t4));
          ++k;
        }
      }
    }
  },
  SphericalHarmonics_ProjectIncidentDirectRadiance: function(p, pEpsilon, time, scene, computeLightVisibility, lmax, rng, c_d) {
    var t1, t2, c, len, i, j, t3;
    t1 = J.getInterceptor$ns(lmax);
    t2 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
    if (typeof t2 !== "number")
      return H.iae(t2);
    c = Array(t2);
    c.$builtinTypeInfo = [G.Spectrum];
    for (len = c.length, i = 0; i < len; ++i)
      c[i] = G.Spectrum_Spectrum(0);
    for (t2 = scene.lights, i = 0; i < t2.length; ++i) {
      t2[i].shProject$8(p, pEpsilon, lmax, scene, computeLightVisibility, time, rng, c);
      j = 0;
      while (true) {
        t3 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(j < t3))
          break;
        if (j >= c_d.length)
          return H.ioore(c_d, j);
        t3 = c_d[j];
        if (j >= len)
          return H.ioore(c, j);
        c_d[j] = J.$add$ns(t3, c[j]);
        ++j;
      }
    }
    G.SphericalHarmonics_ReduceRinging(c_d, lmax, 0.005);
  },
  SphericalHarmonics_ProjectIncidentIndirectRadiance: function(p, pEpsilon, time, renderer, origSample, scene, lmax, rng, nSamples, c_i) {
    var sample, scramble, t1, t2, Ylm, t3, t4, i, u, t5, wi, t6, t7, t8, t9, t10, j, k, t11, Li;
    sample = new G.Sample([], [], [], [], 0, 0, 0, 0, 0);
    sample.n1D = P.List_List$from(origSample.n1D, true, J.JSInt);
    sample.n2D = P.List_List$from(origSample.n2D, true, J.JSInt);
    sample._allocateSampleMemory$0();
    scramble = [rng.random.nextInt$1(4294967295), rng.random.nextInt$1(4294967295)];
    nSamples = G.RoundUpPow2(nSamples);
    t1 = J.getInterceptor$ns(lmax);
    t2 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
    if (typeof t2 !== "number")
      return H.iae(t2);
    Ylm = Array(t2);
    Ylm.$builtinTypeInfo = [J.JSDouble];
    for (t2 = c_i.length, t3 = Ylm.length, t4 = 0.07957747154594767 * nSamples, i = 0; i < nSamples; ++i) {
      u = [0, 0];
      u[0] = G.VanDerCorput(i, scramble[0]);
      t5 = G.Sobol2(i, scramble[1]);
      u[1] = t5;
      wi = G.UniformSampleSphere(u[0], t5);
      G.Spectrum_Spectrum(0);
      t5 = new Float32Array(3);
      if (0 >= 3)
        return H.ioore(t5, 0);
      t5[0] = 0;
      if (1 >= 3)
        return H.ioore(t5, 1);
      t5[1] = 0;
      if (2 >= 3)
        return H.ioore(t5, 2);
      t5[2] = 0;
      t6 = new Float32Array(3);
      if (0 >= 3)
        return H.ioore(t6, 0);
      t6[0] = 0;
      if (1 >= 3)
        return H.ioore(t6, 1);
      t6[1] = 0;
      if (2 >= 3)
        return H.ioore(t6, 2);
      t6[2] = 0;
      t7 = new Float32Array(3);
      if (0 >= 3)
        return H.ioore(t7, 0);
      t7[0] = 0;
      if (1 >= 3)
        return H.ioore(t7, 1);
      t7[1] = 0;
      if (2 >= 3)
        return H.ioore(t7, 2);
      t7[2] = 0;
      t8 = new Float32Array(3);
      if (0 >= 3)
        return H.ioore(t8, 0);
      t8[0] = 0;
      if (1 >= 3)
        return H.ioore(t8, 1);
      t8[1] = 0;
      if (2 >= 3)
        return H.ioore(t8, 2);
      t8[2] = 0;
      t9 = new G.Point(new Float32Array(H._ensureNativeList(p.data)));
      t10 = new G.Vector(new Float32Array(H._ensureNativeList(wi.data)));
      sample.time = time;
      for (j = 0; j < sample.n1D.length; ++j) {
        k = 0;
        while (true) {
          t11 = sample.n1D;
          if (j >= t11.length)
            return H.ioore(t11, j);
          t11 = t11[j];
          if (typeof t11 !== "number")
            return H.iae(t11);
          if (!(k < t11))
            break;
          t11 = sample.oneD;
          if (j >= t11.length)
            return H.ioore(t11, j);
          J.$indexSet$ax(t11[j], k, rng.random.nextDouble$0());
          ++k;
        }
      }
      for (j = 0; j < sample.n2D.length; ++j) {
        k = 0;
        while (true) {
          t11 = sample.n2D;
          if (j >= t11.length)
            return H.ioore(t11, j);
          t11 = t11[j];
          if (typeof t11 !== "number")
            return H.iae(t11);
          if (!(k < 2 * t11))
            break;
          t11 = sample.twoD;
          if (j >= t11.length)
            return H.ioore(t11, j);
          J.$indexSet$ax(t11[j], k, rng.random.nextDouble$0());
          ++k;
        }
      }
      Li = renderer.Li$4(scene, new G.RayDifferential(false, new G.Point(t5), new G.Point(t6), new G.Vector(t7), new G.Vector(t8), t9, t10, pEpsilon, 1 / 0, time, 0), sample, rng);
      G.SphericalHarmonics_Evaluate(wi, lmax, Ylm, 0);
      t5 = J.getInterceptor$ns(Li);
      j = 0;
      while (true) {
        t6 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (!(j < t6))
          break;
        if (j >= t2)
          return H.ioore(c_i, j);
        t6 = c_i[j];
        if (j >= t3)
          return H.ioore(Ylm, j);
        c_i[j] = J.$add$ns(t6, J.$div$n(t5.$mul(Li, Ylm[j]), t4));
        ++j;
      }
    }
  },
  SphericalHarmonics_ReduceRinging: function(c, lmax, lambda) {
    var l, l0, scale, m, t1, t2;
    if (typeof lmax !== "number")
      return H.iae(lmax);
    l = 0;
    for (; l <= lmax; l = l0) {
      l0 = l + 1;
      scale = 1 / (1 + lambda * l * l * l0 * l0);
      for (m = -l, t1 = l * l + l; m <= l; ++m) {
        t2 = t1 + m;
        if (t2 < 0 || t2 >= c.length)
          return H.ioore(c, t2);
        J.scale$1$x(c[t2], scale);
      }
    }
  },
  SphericalHarmonics_RotateZ: function(c_in, c_out, alpha, lmax) {
    var t1, t2, t3, t4, ct, st, t5, l, m, t6, t7, t8, t9;
    t1 = c_out.length;
    if (0 >= t1)
      return H.ioore(c_out, 0);
    t2 = c_out[0];
    t3 = c_in.length;
    if (0 >= t3)
      return H.ioore(c_in, 0);
    t2.copy$1(c_in[0]);
    t2 = J.getInterceptor(lmax);
    if (t2.$eq(lmax, 0))
      return;
    t4 = t2.$add(lmax, 1);
    if (typeof t4 !== "number")
      return H.iae(t4);
    ct = H.setRuntimeTypeInfo(Array(t4), [J.JSDouble]);
    t4 = t2.$add(lmax, 1);
    if (typeof t4 !== "number")
      return H.iae(t4);
    st = H.setRuntimeTypeInfo(Array(t4), [J.JSDouble]);
    t4 = typeof alpha !== "number";
    if (t4)
      H.throwExpression(P.ArgumentError$(alpha));
    t5 = Math.sin(alpha);
    if (t4)
      H.throwExpression(P.ArgumentError$(alpha));
    G.SphericalHarmonics__sinCosIndexed(t5, Math.cos(alpha), t2.$add(lmax, 1), st, ct);
    if (typeof lmax !== "number")
      return H.iae(lmax);
    t2 = ct.length;
    t4 = st.length;
    l = 1;
    for (; l <= lmax; ++l) {
      for (m = -l, t5 = l * l + l; m < 0; ++m) {
        t6 = t5 + m;
        if (t6 < 0 || t6 >= t3)
          return H.ioore(c_in, t6);
        t7 = c_in[t6];
        t8 = -m;
        if (t8 < 0 || t8 >= t2)
          return H.ioore(ct, t8);
        t7 = J.$mul$ns(t7, ct[t8]);
        t9 = t5 + t8;
        if (t9 >= t3)
          return H.ioore(c_in, t9);
        t9 = c_in[t9];
        if (t8 >= t4)
          return H.ioore(st, t8);
        t8 = J.$add$ns(t7, J.$mul$ns(t9, J.$negate$n(st[t8])));
        if (t6 >= t1)
          return H.ioore(c_out, t6);
        c_out[t6] = t8;
      }
      if (t5 >= t1)
        return H.ioore(c_out, t5);
      t6 = c_out[t5];
      if (t5 >= t3)
        return H.ioore(c_in, t5);
      t6.copy$1(c_in[t5]);
      for (m = 1; m <= l; ++m) {
        t6 = t5 + m;
        if (t6 >= t3)
          return H.ioore(c_in, t6);
        t7 = c_in[t6];
        if (m >= t2)
          return H.ioore(ct, m);
        t7 = J.$mul$ns(t7, ct[m]);
        t8 = t5 + -m;
        if (t8 < 0 || t8 >= t3)
          return H.ioore(c_in, t8);
        t8 = c_in[t8];
        if (m >= t4)
          return H.ioore(st, m);
        t8 = J.$add$ns(t7, J.$mul$ns(t8, st[m]));
        if (t6 >= t1)
          return H.ioore(c_out, t6);
        c_out[t6] = t8;
      }
    }
  },
  SphericalHarmonics_RotateXMinus: function(c_in, c_out, lmax) {
    var t1, l, s, t2, m, t3;
    G.SphericalHarmonics_RotateXPlus(c_in, c_out, lmax);
    if (typeof lmax !== "number")
      return H.iae(lmax);
    t1 = c_out.length;
    l = 1;
    for (; l <= lmax; ++l) {
      s = (l & 1) !== 0 ? -1 : 1;
      t2 = l * l + l;
      if (t2 >= t1)
        return H.ioore(c_out, t2);
      J.scale$1$x(c_out[t2], s);
      for (m = 1; m <= l; ++m) {
        s = -s;
        t3 = t2 + m;
        if (t3 >= t1)
          return H.ioore(c_out, t3);
        J.scale$1$x(c_out[t3], s);
        t3 = t2 + -m;
        if (t3 < 0 || t3 >= t1)
          return H.ioore(c_out, t3);
        J.scale$1$x(c_out[t3], -s);
      }
    }
  },
  SphericalHarmonics_RotateXPlus: function(c_in, c_out, lmax) {
    var t1, t2, t3, t4;
    t1 = new G.SphericalHarmonics_RotateXPlus_O(c_in);
    if (0 >= c_in.length)
      return H.ioore(c_in, 0);
    t2 = c_in[0];
    t3 = c_out.length;
    if (0 >= t3)
      return H.ioore(c_out, 0);
    c_out[0] = t2;
    t2 = J.getInterceptor$n(lmax);
    if (t2.$lt(lmax, 1))
      return;
    t4 = t1.call$2(1, 0);
    if (1 >= t3)
      return H.ioore(c_out, 1);
    c_out[1] = t4;
    t4 = J.$negate$n(t1.call$2(1, -1));
    if (2 >= t3)
      return H.ioore(c_out, 2);
    c_out[2] = t4;
    t4 = t1.call$2(1, 1);
    if (3 >= t3)
      return H.ioore(c_out, 3);
    c_out[3] = t4;
    if (t2.$lt(lmax, 2))
      return;
    t4 = t1.call$2(2, 1);
    if (4 >= t3)
      return H.ioore(c_out, 4);
    c_out[4] = t4;
    t4 = J.$negate$n(t1.call$2(2, -1));
    if (5 >= t3)
      return H.ioore(c_out, 5);
    c_out[5] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(2, 0), -0.5), J.$mul$ns(t1.call$2(2, 2), -0.8660254037844386));
    if (6 >= t3)
      return H.ioore(c_out, 6);
    c_out[6] = t4;
    t4 = J.$negate$n(t1.call$2(2, -2));
    if (7 >= t3)
      return H.ioore(c_out, 7);
    c_out[7] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(2, 0), -0.8660254037844386), J.$mul$ns(t1.call$2(2, 2), 0.5));
    if (8 >= t3)
      return H.ioore(c_out, 8);
    c_out[8] = t4;
    if (t2.$lt(lmax, 3))
      return;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(3, 0), -0.7905694150420949), J.$mul$ns(t1.call$2(3, 2), 0.6123724356957945));
    if (9 >= t3)
      return H.ioore(c_out, 9);
    c_out[9] = t4;
    t4 = J.$negate$n(t1.call$2(3, -2));
    if (10 >= t3)
      return H.ioore(c_out, 10);
    c_out[10] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(3, 0), -0.6123724356957945), J.$mul$ns(t1.call$2(3, 2), -0.7905694150420949));
    if (11 >= t3)
      return H.ioore(c_out, 11);
    c_out[11] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(3, -3), 0.7905694150420949), J.$mul$ns(t1.call$2(3, -1), 0.6123724356957945));
    if (12 >= t3)
      return H.ioore(c_out, 12);
    c_out[12] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(3, 1), -0.25), J.$mul$ns(t1.call$2(3, 3), -0.9682458365518543));
    if (13 >= t3)
      return H.ioore(c_out, 13);
    c_out[13] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(3, -3), -0.6123724356957945), J.$mul$ns(t1.call$2(3, -1), 0.7905694150420949));
    if (14 >= t3)
      return H.ioore(c_out, 14);
    c_out[14] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(3, 1), -0.9682458365518543), J.$mul$ns(t1.call$2(3, 3), 0.25));
    if (15 >= t3)
      return H.ioore(c_out, 15);
    c_out[15] = t4;
    if (t2.$lt(lmax, 4))
      return;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(4, 1), -0.9354143466934853), J.$mul$ns(t1.call$2(4, 3), 0.35355339059327373));
    if (16 >= t3)
      return H.ioore(c_out, 16);
    c_out[16] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(4, -3), -0.75), J.$mul$ns(t1.call$2(4, -1), 0.6614378277661477));
    if (17 >= t3)
      return H.ioore(c_out, 17);
    c_out[17] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(4, 1), -0.35355339059327373), J.$mul$ns(t1.call$2(4, 3), -0.9354143466934853));
    if (18 >= t3)
      return H.ioore(c_out, 18);
    c_out[18] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(4, -3), 0.6614378277661477), J.$mul$ns(t1.call$2(4, -1), 0.75));
    if (19 >= t3)
      return H.ioore(c_out, 19);
    c_out[19] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(4, 0), 0.375), J.$mul$ns(t1.call$2(4, 2), 0.5590169943749475)), J.$mul$ns(t1.call$2(4, 4), 0.739509972887452));
    if (20 >= t3)
      return H.ioore(c_out, 20);
    c_out[20] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(4, -4), 0.9354143466934853), J.$mul$ns(t1.call$2(4, -2), 0.35355339059327373));
    if (21 >= t3)
      return H.ioore(c_out, 21);
    c_out[21] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(4, 0), 0.5590169943749475), J.$mul$ns(t1.call$2(4, 2), 0.5)), J.$mul$ns(t1.call$2(4, 4), -0.6614378277661477));
    if (22 >= t3)
      return H.ioore(c_out, 22);
    c_out[22] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(4, -4), -0.35355339059327373), J.$mul$ns(t1.call$2(4, -2), 0.9354143466934853));
    if (23 >= t3)
      return H.ioore(c_out, 23);
    c_out[23] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(4, 0), 0.739509972887452), J.$mul$ns(t1.call$2(4, 2), -0.6614378277661477)), J.$mul$ns(t1.call$2(4, 4), 0.125));
    if (24 >= t3)
      return H.ioore(c_out, 24);
    c_out[24] = t4;
    if (t2.$lt(lmax, 5))
      return;
    t4 = J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(5, 0), 0.701560760020114), J.$mul$ns(t1.call$2(5, 2), 0.6846531968814576)), J.$mul$ns(t1.call$2(5, 4), 0.19764235376052372));
    if (25 >= t3)
      return H.ioore(c_out, 25);
    c_out[25] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(5, -4), -0.5), J.$mul$ns(t1.call$2(5, -2), 0.8660254037844386));
    if (26 >= t3)
      return H.ioore(c_out, 26);
    c_out[26] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(5, 0), 0.5229125165837972), J.$mul$ns(t1.call$2(5, 2), 0.30618621784789724)), J.$mul$ns(t1.call$2(5, 4), 0.795495128834866));
    if (27 >= t3)
      return H.ioore(c_out, 27);
    c_out[27] = t4;
    t4 = J.$add$ns(J.$mul$ns(t1.call$2(5, -4), 0.8660254037844386), J.$mul$ns(t1.call$2(5, -2), 0.5));
    if (28 >= t3)
      return H.ioore(c_out, 28);
    c_out[28] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(5, 0), 0.4841229182759271), J.$mul$ns(t1.call$2(5, 2), 0.6614378277661477)), J.$mul$ns(t1.call$2(5, 4), 0.57282196186948));
    if (29 >= t3)
      return H.ioore(c_out, 29);
    c_out[29] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(5, -5), -0.701560760020114), J.$mul$ns(t1.call$2(5, -3), 0.5229125165837972)), J.$mul$ns(t1.call$2(5, -1), 0.4841229182759271));
    if (30 >= t3)
      return H.ioore(c_out, 30);
    c_out[30] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(5, 1), 0.125), J.$mul$ns(t1.call$2(5, 3), 0.4050462936504913)), J.$mul$ns(t1.call$2(5, 5), 0.9057110466368399));
    if (31 >= t3)
      return H.ioore(c_out, 31);
    c_out[31] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(5, -5), 0.6846531968814576), J.$mul$ns(t1.call$2(5, -3), 0.30618621784789724)), J.$mul$ns(t1.call$2(5, -1), 0.6614378277661477));
    if (32 >= t3)
      return H.ioore(c_out, 32);
    c_out[32] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(5, 1), 0.4050462936504913), J.$mul$ns(t1.call$2(5, 3), 0.8125)), J.$mul$ns(t1.call$2(5, 5), 0.4192627457812106));
    if (33 >= t3)
      return H.ioore(c_out, 33);
    c_out[33] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(5, -5), -0.19764235376052372), J.$mul$ns(t1.call$2(5, -3), 0.795495128834866)), J.$mul$ns(t1.call$2(5, -1), 0.57282196186948));
    if (34 >= t3)
      return H.ioore(c_out, 34);
    c_out[34] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(5, 1), 0.9057110466368399), J.$mul$ns(t1.call$2(5, 3), 0.4192627457812106)), J.$mul$ns(t1.call$2(5, 5), 0.0625));
    if (35 >= t3)
      return H.ioore(c_out, 35);
    c_out[35] = t4;
    if (t2.$lt(lmax, 6))
      return;
    t4 = J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(6, 1), 0.879452954966893), J.$mul$ns(t1.call$2(6, 3), 0.46351240544347894)), J.$mul$ns(t1.call$2(6, 5), 0.10825317547305482));
    if (36 >= t3)
      return H.ioore(c_out, 36);
    c_out[36] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(6, -5), -0.3125), J.$mul$ns(t1.call$2(6, -3), 0.8028270361665706)), J.$mul$ns(t1.call$2(6, -1), 0.5077524002897476));
    if (37 >= t3)
      return H.ioore(c_out, 37);
    c_out[37] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(6, 1), 0.4330127018922193), J.$mul$ns(t1.call$2(6, 3), 0.6846531968814576)), J.$mul$ns(t1.call$2(6, 5), 0.5863019699779287));
    if (38 >= t3)
      return H.ioore(c_out, 38);
    c_out[38] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(6, -5), 0.8028270361665706), J.$mul$ns(t1.call$2(6, -3), 0.0625)), J.$mul$ns(t1.call$2(6, -1), 0.5929270612815711));
    if (39 >= t3)
      return H.ioore(c_out, 39);
    c_out[39] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(6, 1), 0.19764235376052372), J.$mul$ns(t1.call$2(6, 3), 0.5625)), J.$mul$ns(t1.call$2(6, 5), 0.8028270361665706));
    if (40 >= t3)
      return H.ioore(c_out, 40);
    c_out[40] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(6, -5), -0.5077524002897476), J.$mul$ns(t1.call$2(6, -3), 0.5929270612815711)), J.$mul$ns(t1.call$2(6, -1), 0.625));
    if (41 >= t3)
      return H.ioore(c_out, 41);
    c_out[41] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(6, 0), -0.3125), J.$mul$ns(t1.call$2(6, 2), 0.45285552331841994)), J.$mul$ns(t1.call$2(6, 4), 0.49607837082461076)), J.$mul$ns(t1.call$2(6, 6), 0.6716932893813962));
    if (42 >= t3)
      return H.ioore(c_out, 42);
    c_out[42] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(6, -6), -0.879452954966893), J.$mul$ns(t1.call$2(6, -4), 0.4330127018922193)), J.$mul$ns(t1.call$2(6, -2), 0.19764235376052372));
    if (43 >= t3)
      return H.ioore(c_out, 43);
    c_out[43] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(6, 0), -0.45285552331841994), J.$mul$ns(t1.call$2(6, 2), 0.53125)), J.$mul$ns(t1.call$2(6, 4), 0.1711632992203644)), J.$mul$ns(t1.call$2(6, 6), 0.6952686081652184));
    if (44 >= t3)
      return H.ioore(c_out, 44);
    c_out[44] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(6, -6), 0.46351240544347894), J.$mul$ns(t1.call$2(6, -4), 0.6846531968814576)), J.$mul$ns(t1.call$2(6, -2), 0.5625));
    if (45 >= t3)
      return H.ioore(c_out, 45);
    c_out[45] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(6, 0), -0.49607837082461076), J.$mul$ns(t1.call$2(6, 2), 0.1711632992203644)), J.$mul$ns(t1.call$2(6, 4), 0.8125)), J.$mul$ns(t1.call$2(6, 6), 0.2538762001448738));
    if (46 >= t3)
      return H.ioore(c_out, 46);
    c_out[46] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(6, -6), -0.10825317547305482), J.$mul$ns(t1.call$2(6, -4), 0.5863019699779287)), J.$mul$ns(t1.call$2(6, -2), 0.8028270361665706));
    if (47 >= t3)
      return H.ioore(c_out, 47);
    c_out[47] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(6, 0), -0.6716932893813962), J.$mul$ns(t1.call$2(6, 2), 0.6952686081652184)), J.$mul$ns(t1.call$2(6, 4), 0.2538762001448738)), J.$mul$ns(t1.call$2(6, 6), 0.03125));
    if (48 >= t3)
      return H.ioore(c_out, 48);
    c_out[48] = t4;
    if (t2.$lt(lmax, 7))
      return;
    t4 = J.$add$ns(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(7, 0), -0.6472598492877494), J.$mul$ns(t1.call$2(7, 2), 0.6991205412874092)), J.$mul$ns(t1.call$2(7, 4), 0.2981060004427955)), J.$mul$ns(t1.call$2(7, 6), 0.05846339666834283));
    if (49 >= t3)
      return H.ioore(c_out, 49);
    c_out[49] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(7, -6), -0.1875), J.$mul$ns(t1.call$2(7, -4), 0.6373774391990981)), J.$mul$ns(t1.call$2(7, -2), 0.7473912964438374));
    if (50 >= t3)
      return H.ioore(c_out, 50);
    c_out[50] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(7, 0), -0.47495887979908324), J.$mul$ns(t1.call$2(7, 2), 0.07328774624724109)), J.$mul$ns(t1.call$2(7, 4), 0.78125)), J.$mul$ns(t1.call$2(7, 6), 0.3983608994994363));
    if (51 >= t3)
      return H.ioore(c_out, 51);
    c_out[51] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(7, -6), 0.6373774391990981), J.$mul$ns(t1.call$2(7, -4), 0.5)), J.$mul$ns(t1.call$2(7, -2), 0.5863019699779287));
    if (52 >= t3)
      return H.ioore(c_out, 52);
    c_out[52] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(7, 0), -0.42961647140211), J.$mul$ns(t1.call$2(7, 2), 0.41984465132951254)), J.$mul$ns(t1.call$2(7, 4), 0.10364452469860624)), J.$mul$ns(t1.call$2(7, 6), 0.7927281808728639));
    if (53 >= t3)
      return H.ioore(c_out, 53);
    c_out[53] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(7, -6), -0.7473912964438374), J.$mul$ns(t1.call$2(7, -4), 0.5863019699779287)), J.$mul$ns(t1.call$2(7, -2), 0.3125));
    if (54 >= t3)
      return H.ioore(c_out, 54);
    c_out[54] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(7, 0), -0.41339864235384227), J.$mul$ns(t1.call$2(7, 2), 0.5740991584648073)), J.$mul$ns(t1.call$2(7, 4), 0.5385527481129402)), J.$mul$ns(t1.call$2(7, 6), 0.4576818286211503));
    if (55 >= t3)
      return H.ioore(c_out, 55);
    c_out[55] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(7, -7), 0.6472598492877494), J.$mul$ns(t1.call$2(7, -5), 0.47495887979908324)), J.$mul$ns(t1.call$2(7, -3), 0.42961647140211)), J.$mul$ns(t1.call$2(7, -1), 0.41339864235384227));
    if (56 >= t3)
      return H.ioore(c_out, 56);
    c_out[56] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(7, 1), -0.078125), J.$mul$ns(t1.call$2(7, 3), 0.24356964481437335)), J.$mul$ns(t1.call$2(7, 5), 0.4487939567607835)), J.$mul$ns(t1.call$2(7, 7), 0.8562442974262661));
    if (57 >= t3)
      return H.ioore(c_out, 57);
    c_out[57] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(7, -7), -0.6991205412874092), J.$mul$ns(t1.call$2(7, -5), 0.07328774624724109)), J.$mul$ns(t1.call$2(7, -3), 0.41984465132951254)), J.$mul$ns(t1.call$2(7, -1), 0.5740991584648073));
    if (58 >= t3)
      return H.ioore(c_out, 58);
    c_out[58] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(7, 1), -0.24356964481437335), J.$mul$ns(t1.call$2(7, 3), 0.609375)), J.$mul$ns(t1.call$2(7, 5), 0.5700448858423344)), J.$mul$ns(t1.call$2(7, 7), 0.4943528756111367));
    if (59 >= t3)
      return H.ioore(c_out, 59);
    c_out[59] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(7, -7), 0.2981060004427955), J.$mul$ns(t1.call$2(7, -5), 0.78125)), J.$mul$ns(t1.call$2(7, -3), 0.10364452469860624)), J.$mul$ns(t1.call$2(7, -1), 0.5385527481129402));
    if (60 >= t3)
      return H.ioore(c_out, 60);
    c_out[60] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(7, 1), -0.4487939567607835), J.$mul$ns(t1.call$2(7, 3), 0.5700448858423344)), J.$mul$ns(t1.call$2(7, 5), 0.671875)), J.$mul$ns(t1.call$2(7, 7), 0.14905300022139775));
    if (61 >= t3)
      return H.ioore(c_out, 61);
    c_out[61] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(7, -7), -0.05846339666834283), J.$mul$ns(t1.call$2(7, -5), 0.3983608994994363)), J.$mul$ns(t1.call$2(7, -3), 0.7927281808728639)), J.$mul$ns(t1.call$2(7, -1), 0.4576818286211503));
    if (62 >= t3)
      return H.ioore(c_out, 62);
    c_out[62] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(7, 1), -0.8562442974262661), J.$mul$ns(t1.call$2(7, 3), 0.4943528756111367)), J.$mul$ns(t1.call$2(7, 5), 0.14905300022139775)), J.$mul$ns(t1.call$2(7, 7), 0.015625));
    if (63 >= t3)
      return H.ioore(c_out, 63);
    c_out[63] = t4;
    if (t2.$lt(lmax, 8))
      return;
    t4 = J.$add$ns(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(8, 1), -0.8356088723200586), J.$mul$ns(t1.call$2(8, 3), 0.516334738808072)), J.$mul$ns(t1.call$2(8, 5), 0.184877493221863)), J.$mul$ns(t1.call$2(8, 7), 0.03125));
    if (64 >= t3)
      return H.ioore(c_out, 64);
    c_out[64] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(8, -7), -0.109375), J.$mul$ns(t1.call$2(8, -5), 0.4621937330546575)), J.$mul$ns(t1.call$2(8, -3), 0.774502108212108)), J.$mul$ns(t1.call$2(8, -1), 0.4178044361600293));
    if (65 >= t3)
      return H.ioore(c_out, 65);
    c_out[65] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(8, 1), -0.4576818286211503), J.$mul$ns(t1.call$2(8, 3), 0.47134697278119864)), J.$mul$ns(t1.call$2(8, 5), 0.7088310138883598)), J.$mul$ns(t1.call$2(8, 7), 0.2567449488305466));
    if (66 >= t3)
      return H.ioore(c_out, 66);
    c_out[66] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(8, -7), 0.4621937330546575), J.$mul$ns(t1.call$2(8, -5), 0.703125)), J.$mul$ns(t1.call$2(8, -3), 0.2181912506838897)), J.$mul$ns(t1.call$2(8, -1), 0.4943528756111367));
    if (67 >= t3)
      return H.ioore(c_out, 67);
    c_out[67] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(8, 1), -0.27421763710600383), J.$mul$ns(t1.call$2(8, 3), 0.6051536478449089)), J.$mul$ns(t1.call$2(8, 5), 0.33802043207474897)), J.$mul$ns(t1.call$2(8, 7), 0.6665852814906732));
    if (68 >= t3)
      return H.ioore(c_out, 68);
    c_out[68] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(8, -7), -0.774502108212108), J.$mul$ns(t1.call$2(8, -5), 0.2181912506838897)), J.$mul$ns(t1.call$2(8, -3), 0.265625)), J.$mul$ns(t1.call$2(8, -1), 0.5310201708739509));
    if (69 >= t3)
      return H.ioore(c_out, 69);
    c_out[69] = t4;
    t4 = J.$sub$n(J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(8, 1), -0.1307281291459493), J.$mul$ns(t1.call$2(8, 3), 0.38081430021731066)), J.$mul$ns(t1.call$2(8, 5), 0.5908647000371574)), J.$mul$ns(t1.call$2(8, 7), 0.6991205412874092));
    if (70 >= t3)
      return H.ioore(c_out, 70);
    c_out[70] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(8, -7), 0.4178044361600293), J.$mul$ns(t1.call$2(8, -5), 0.4943528756111367)), J.$mul$ns(t1.call$2(8, -3), 0.5310201708739509)), J.$mul$ns(t1.call$2(8, -1), 0.546875));
    if (71 >= t3)
      return H.ioore(c_out, 71);
    c_out[71] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(8, 0), 0.2734375), J.$mul$ns(t1.call$2(8, 2), 0.3921843874378479)), J.$mul$ns(t1.call$2(8, 4), 0.4113264556590057)), J.$mul$ns(t1.call$2(8, 6), 0.4576818286211503)), J.$mul$ns(t1.call$2(8, 8), 0.626706654240044));
    if (72 >= t3)
      return H.ioore(c_out, 72);
    c_out[72] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(8, -8), 0.8356088723200586), J.$mul$ns(t1.call$2(8, -6), 0.4576818286211503)), J.$mul$ns(t1.call$2(8, -4), 0.27421763710600383)), J.$mul$ns(t1.call$2(8, -2), 0.1307281291459493));
    if (73 >= t3)
      return H.ioore(c_out, 73);
    c_out[73] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(8, 0), 0.3921843874378479), J.$mul$ns(t1.call$2(8, 2), 0.5)), J.$mul$ns(t1.call$2(8, 4), 0.32775276505317236)), J.$mul$ns(t1.call$2(8, 8), 0.6991205412874092));
    if (74 >= t3)
      return H.ioore(c_out, 74);
    c_out[74] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(8, -8), -0.516334738808072), J.$mul$ns(t1.call$2(8, -6), 0.47134697278119864)), J.$mul$ns(t1.call$2(8, -4), 0.6051536478449089)), J.$mul$ns(t1.call$2(8, -2), 0.38081430021731066));
    if (75 >= t3)
      return H.ioore(c_out, 75);
    c_out[75] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(8, 0), 0.4113264556590057), J.$mul$ns(t1.call$2(8, 2), 0.32775276505317236)), J.$mul$ns(t1.call$2(8, 4), 0.28125)), J.$mul$ns(t1.call$2(8, 6), 0.7302075903467452)), J.$mul$ns(t1.call$2(8, 8), 0.3332926407453366));
    if (76 >= t3)
      return H.ioore(c_out, 76);
    c_out[76] = t4;
    t4 = J.$add$ns(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(8, -8), 0.184877493221863), J.$mul$ns(t1.call$2(8, -6), 0.7088310138883598)), J.$mul$ns(t1.call$2(8, -4), 0.33802043207474897)), J.$mul$ns(t1.call$2(8, -2), 0.5908647000371574));
    if (77 >= t3)
      return H.ioore(c_out, 77);
    c_out[77] = t4;
    t4 = J.$sub$n(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(8, 0), 0.4576818286211503), J.$mul$ns(t1.call$2(8, 4), 0.7302075903467452)), J.$mul$ns(t1.call$2(8, 6), 0.5)), J.$mul$ns(t1.call$2(8, 8), 0.0855816496101822));
    if (78 >= t3)
      return H.ioore(c_out, 78);
    c_out[78] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(8, -8), -0.03125), J.$mul$ns(t1.call$2(8, -6), 0.2567449488305466)), J.$mul$ns(t1.call$2(8, -4), 0.6665852814906732)), J.$mul$ns(t1.call$2(8, -2), 0.6991205412874092));
    if (79 >= t3)
      return H.ioore(c_out, 79);
    c_out[79] = t4;
    t4 = J.$add$ns(J.$sub$n(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(8, 0), 0.626706654240044), J.$mul$ns(t1.call$2(8, 2), 0.6991205412874092)), J.$mul$ns(t1.call$2(8, 4), 0.3332926407453366)), J.$mul$ns(t1.call$2(8, 6), 0.0855816496101822)), J.$mul$ns(t1.call$2(8, 8), 0.0078125));
    if (80 >= t3)
      return H.ioore(c_out, 80);
    c_out[80] = t4;
    if (t2.$lt(lmax, 9))
      return;
    t2 = J.$add$ns(J.$sub$n(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(9, 0), 0.6090493921755238), J.$mul$ns(t1.call$2(9, 2), 0.6968469725305549)), J.$mul$ns(t1.call$2(9, 4), 0.3615761395439417)), J.$mul$ns(t1.call$2(9, 6), 0.11158481919598204)), J.$mul$ns(t1.call$2(9, 8), 0.016572815184059706));
    if (81 >= t3)
      return H.ioore(c_out, 81);
    c_out[81] = t2;
    t2 = J.$add$ns(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(9, -8), -0.0625), J.$mul$ns(t1.call$2(9, -6), 0.3156095293238149)), J.$mul$ns(t1.call$2(9, -4), 0.6817945071647321)), J.$mul$ns(t1.call$2(9, -2), 0.656993626300895));
    if (82 >= t3)
      return H.ioore(c_out, 82);
    c_out[82] = t2;
    t2 = J.$sub$n(J.$add$ns(J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(9, 0), 0.44314852502786806), J.$mul$ns(t1.call$2(9, 2), 0.05633673867912483)), J.$mul$ns(t1.call$2(9, 4), 0.6723290616859425)), J.$mul$ns(t1.call$2(9, 6), 0.5683291712335379)), J.$mul$ns(t1.call$2(9, 8), 0.1594400908746762));
    if (83 >= t3)
      return H.ioore(c_out, 83);
    c_out[83] = t2;
    t2 = J.$add$ns(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(9, -8), 0.3156095293238149), J.$mul$ns(t1.call$2(9, -6), 0.71875)), J.$mul$ns(t1.call$2(9, -4), 0.20252314682524564)), J.$mul$ns(t1.call$2(9, -2), 0.5854685623498499));
    if (84 >= t3)
      return H.ioore(c_out, 84);
    c_out[84] = t2;
    t2 = J.$add$ns(J.$sub$n(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(9, 0), 0.39636409043643195), J.$mul$ns(t1.call$2(9, 2), 0.25194555463432966)), J.$mul$ns(t1.call$2(9, 4), 0.3921843874378479)), J.$mul$ns(t1.call$2(9, 6), 0.6051536478449089)), J.$mul$ns(t1.call$2(9, 8), 0.509312687906457));
    if (85 >= t3)
      return H.ioore(c_out, 85);
    c_out[85] = t2;
    t2 = J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(9, -8), -0.6817945071647321), J.$mul$ns(t1.call$2(9, -6), 0.20252314682524564)), J.$mul$ns(t1.call$2(9, -4), 0.5625)), J.$mul$ns(t1.call$2(9, -2), 0.4215855488510013));
    if (86 >= t3)
      return H.ioore(c_out, 86);
    c_out[86] = t2;
    t2 = J.$sub$n(J.$sub$n(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(9, 0), 0.3754879637718099), J.$mul$ns(t1.call$2(9, 2), 0.42961647140211)), J.$mul$ns(t1.call$2(9, 4), 0.13799626353637262)), J.$mul$ns(t1.call$2(9, 6), 0.2981060004427955)), J.$mul$ns(t1.call$2(9, 8), 0.7526807559068452));
    if (87 >= t3)
      return H.ioore(c_out, 87);
    c_out[87] = t2;
    t2 = J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(9, -8), 0.656993626300895), J.$mul$ns(t1.call$2(9, -6), 0.5854685623498499)), J.$mul$ns(t1.call$2(9, -4), 0.4215855488510013)), J.$mul$ns(t1.call$2(9, -2), 0.21875));
    if (88 >= t3)
      return H.ioore(c_out, 88);
    c_out[88] = t2;
    t2 = J.$add$ns(J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(9, 0), 0.36685490255855924), J.$mul$ns(t1.call$2(9, 2), 0.5130142237306876)), J.$mul$ns(t1.call$2(9, 4), 0.4943528756111367)), J.$mul$ns(t1.call$2(9, 6), 0.4576818286211503)), J.$mul$ns(t1.call$2(9, 8), 0.38519665736315783));
    if (89 >= t3)
      return H.ioore(c_out, 89);
    c_out[89] = t2;
    t2 = J.$sub$n(J.$sub$n(J.$sub$n(J.$sub$n(J.$mul$ns(t1.call$2(9, -9), -0.6090493921755238), J.$mul$ns(t1.call$2(9, -7), 0.44314852502786806)), J.$mul$ns(t1.call$2(9, -5), 0.39636409043643195)), J.$mul$ns(t1.call$2(9, -3), 0.3754879637718099)), J.$mul$ns(t1.call$2(9, -1), 0.36685490255855924));
    if (90 >= t3)
      return H.ioore(c_out, 90);
    c_out[90] = t2;
    t2 = J.$add$ns(J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(9, 1), 0.0546875), J.$mul$ns(t1.call$2(9, 3), 0.16792332234534904)), J.$mul$ns(t1.call$2(9, 5), 0.2954323500185787)), J.$mul$ns(t1.call$2(9, 7), 0.4624247721758373)), J.$mul$ns(t1.call$2(9, 9), 0.8171255055356398));
    if (91 >= t3)
      return H.ioore(c_out, 91);
    c_out[91] = t2;
    t2 = J.$sub$n(J.$sub$n(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(9, -9), 0.6968469725305549), J.$mul$ns(t1.call$2(9, -7), 0.05633673867912483)), J.$mul$ns(t1.call$2(9, -5), 0.25194555463432966)), J.$mul$ns(t1.call$2(9, -3), 0.42961647140211)), J.$mul$ns(t1.call$2(9, -1), 0.5130142237306876));
    if (92 >= t3)
      return H.ioore(c_out, 92);
    c_out[92] = t2;
    t2 = J.$sub$n(J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(9, 1), 0.16792332234534904), J.$mul$ns(t1.call$2(9, 3), 0.453125)), J.$mul$ns(t1.call$2(9, 5), 0.577279787559724)), J.$mul$ns(t1.call$2(9, 7), 0.387251054106054)), J.$mul$ns(t1.call$2(9, 9), 0.5322256665703469));
    if (93 >= t3)
      return H.ioore(c_out, 93);
    c_out[93] = t2;
    t2 = J.$sub$n(J.$sub$n(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(9, -9), -0.3615761395439417), J.$mul$ns(t1.call$2(9, -7), 0.6723290616859425)), J.$mul$ns(t1.call$2(9, -5), 0.3921843874378479)), J.$mul$ns(t1.call$2(9, -3), 0.13799626353637262)), J.$mul$ns(t1.call$2(9, -1), 0.4943528756111367));
    if (94 >= t3)
      return H.ioore(c_out, 94);
    c_out[94] = t2;
    t2 = J.$add$ns(J.$sub$n(J.$add$ns(J.$add$ns(J.$mul$ns(t1.call$2(9, 1), 0.2954323500185787), J.$mul$ns(t1.call$2(9, 3), 0.577279787559724)), J.$mul$ns(t1.call$2(9, 5), 0.140625)), J.$mul$ns(t1.call$2(9, 7), 0.7162405240429014)), J.$mul$ns(t1.call$2(9, 9), 0.21608307321780204));
    if (95 >= t3)
      return H.ioore(c_out, 95);
    c_out[95] = t2;
    t2 = J.$sub$n(J.$add$ns(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(9, -9), 0.11158481919598204), J.$mul$ns(t1.call$2(9, -7), 0.5683291712335379)), J.$mul$ns(t1.call$2(9, -5), 0.6051536478449089)), J.$mul$ns(t1.call$2(9, -3), 0.2981060004427955)), J.$mul$ns(t1.call$2(9, -1), 0.4576818286211503));
    if (96 >= t3)
      return H.ioore(c_out, 96);
    c_out[96] = t2;
    t2 = J.$sub$n(J.$add$ns(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(9, 1), 0.4624247721758373), J.$mul$ns(t1.call$2(9, 3), 0.387251054106054)), J.$mul$ns(t1.call$2(9, 5), 0.7162405240429014)), J.$mul$ns(t1.call$2(9, 7), 0.34765625)), J.$mul$ns(t1.call$2(9, 9), 0.048317644050206957));
    if (97 >= t3)
      return H.ioore(c_out, 97);
    c_out[97] = t2;
    t2 = J.$sub$n(J.$add$ns(J.$sub$n(J.$add$ns(J.$mul$ns(t1.call$2(9, -9), -0.016572815184059706), J.$mul$ns(t1.call$2(9, -7), 0.1594400908746762)), J.$mul$ns(t1.call$2(9, -5), 0.509312687906457)), J.$mul$ns(t1.call$2(9, -3), 0.7526807559068452)), J.$mul$ns(t1.call$2(9, -1), 0.38519665736315783));
    if (98 >= t3)
      return H.ioore(c_out, 98);
    c_out[98] = t2;
    t1 = J.$add$ns(J.$sub$n(J.$add$ns(J.$sub$n(J.$mul$ns(t1.call$2(9, 1), 0.8171255055356398), J.$mul$ns(t1.call$2(9, 3), 0.5322256665703469)), J.$mul$ns(t1.call$2(9, 5), 0.21608307321780204)), J.$mul$ns(t1.call$2(9, 7), 0.048317644050206957)), J.$mul$ns(t1.call$2(9, 9), 0.00390625));
    if (99 >= t3)
      return H.ioore(c_out, 99);
    c_out[99] = t1;
  },
  SphericalHarmonics_ConvolveCosTheta: function(lmax, c_in, c_out) {
    var t1, t2, l, m, t3, t4, t5, o, t6, t7, t8;
    if (typeof lmax !== "number")
      return H.iae(lmax);
    t1 = c_out.length;
    t2 = c_in.length;
    l = 0;
    for (; l <= lmax; ++l)
      for (m = -l, t3 = l < 18, t4 = l * l + l, t5 = 12.566370614359172 / (2 * l + 1); m <= l; ++m) {
        o = t4 + m;
        if (t3) {
          if (o < 0 || o >= t2)
            return H.ioore(c_in, o);
          t6 = c_in[o];
          t7 = Math.sqrt(t5);
          t8 = C.List_VRN[l];
          if (typeof t8 !== "number")
            return H.iae(t8);
          t8 = J.$mul$ns(t6, t7 * t8);
          if (o >= t1)
            return H.ioore(c_out, o);
          c_out[o] = t8;
        } else {
          if (o < 0 || o >= t1)
            return H.ioore(c_out, o);
          c_out[o].set$1(0);
        }
      }
  },
  SphericalHarmonics_ComputeDiffuseTransfer: function(p, n, rayEpsilon, scene, rng, nSamples, lmax, c_transfer) {
    var scramble, t1, t2, Ylm, u, t3, t4, t5, i, t6, w, t7, hit, len, j;
    scramble = [rng.randomUint$0(), rng.random.nextInt$1(4294967295)];
    t1 = J.getInterceptor$ns(lmax);
    t2 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
    if (typeof t2 !== "number")
      return H.iae(t2);
    Ylm = H.setRuntimeTypeInfo(Array(t2), [J.JSDouble]);
    u = [0, 0];
    for (t2 = scene.aggregate, t3 = c_transfer.length, t4 = Ylm.length, t5 = 0.07957747154594767 * nSamples, i = 0; i < nSamples; ++i) {
      u[0] = G.VanDerCorput(i, scramble[0]);
      t6 = G.Sobol2(i, scramble[1]);
      u[1] = t6;
      w = G.UniformSampleSphere(u[0], t6);
      if (J.$gt$n(G.Vector_Dot(w, n), 0)) {
        t6 = new G.Point(new Float32Array(H._ensureNativeList(p.get$data(p))));
        t7 = new G.Vector(new Float32Array(H._ensureNativeList(w.data)));
        hit = t2.intersectP$1(new G.Ray(t6, t7, rayEpsilon, 1 / 0, 0, 0));
        t7 = $.get$Stats_shadowRays();
        t7.count = J.$add$ns(t7.count, 1);
        $.Stats_shadowRays = t7;
        t7 = !hit;
        t6 = t7;
      } else
        t6 = false;
      if (t6) {
        G.SphericalHarmonics_Evaluate(w, lmax, Ylm, 0);
        len = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
        if (typeof len !== "number")
          return H.iae(len);
        j = 0;
        for (; j < len; ++j) {
          if (j >= t3)
            return H.ioore(c_transfer, j);
          t6 = c_transfer[j];
          if (j >= t4)
            return H.ioore(Ylm, j);
          c_transfer[j] = J.$add$ns(t6, G.Spectrum_Spectrum(J.$mul$ns(Ylm[j], G.Vector_AbsDot(w, n))).$div(0, t5));
        }
      }
    }
  },
  SphericalHarmonics_ComputeTransferMatrix: function(p, rayEpsilon, scene, rng, nSamples, lmax, $T) {
    var t1, len, t2, i, t3, scramble, Ylm, u, t4, t5, t6, w, t7, hit, nj, j, nk, k, t8;
    t1 = J.getInterceptor$ns(lmax);
    len = J.$mul$ns(J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1)), J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1)));
    if (typeof len !== "number")
      return H.iae(len);
    t2 = $T.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = G.Spectrum_Spectrum(0);
      if (i >= t2)
        return H.ioore($T, i);
      $T[i] = t3;
    }
    scramble = [rng.randomUint$0(), rng.random.nextInt$1(4294967295)];
    t3 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
    if (typeof t3 !== "number")
      return H.iae(t3);
    Ylm = H.setRuntimeTypeInfo(Array(t3), [J.JSDouble]);
    u = [0, 0];
    for (t3 = scene.aggregate, t4 = Ylm.length, t5 = 0.07957747154594767 * nSamples, i = 0; i < nSamples; ++i) {
      u[0] = G.VanDerCorput(i, scramble[0]);
      t6 = G.Sobol2(i, scramble[1]);
      u[1] = t6;
      w = G.UniformSampleSphere(u[0], t6);
      t6 = new G.Point(new Float32Array(H._ensureNativeList(p.get$data(p))));
      t7 = new G.Vector(new Float32Array(H._ensureNativeList(w.data)));
      hit = t3.intersectP$1(new G.Ray(t6, t7, rayEpsilon, 1 / 0, 0, 0));
      t7 = $.get$Stats_shadowRays();
      t7.count = J.$add$ns(t7.count, 1);
      $.Stats_shadowRays = t7;
      if (!hit) {
        G.SphericalHarmonics_Evaluate(w, lmax, Ylm, 0);
        nj = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
        if (typeof nj !== "number")
          return H.iae(nj);
        j = 0;
        for (; j < nj; ++j) {
          nk = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
          if (typeof nk !== "number")
            return H.iae(nk);
          k = 0;
          for (; k < nk; ++k) {
            t6 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = j * t6 + k;
            if (t6 >>> 0 !== t6 || t6 >= t2)
              return H.ioore($T, t6);
            t7 = $T[t6];
            if (j >= t4)
              return H.ioore(Ylm, j);
            t8 = Ylm[j];
            if (k >= t4)
              return H.ioore(Ylm, k);
            $T[t6] = J.$add$ns(t7, G.Spectrum_Spectrum(J.$div$n(J.$mul$ns(t8, Ylm[k]), t5)));
          }
        }
      }
    }
  },
  SphericalHarmonics_ComputeBSDFMatrix: function(Kd, Ks, roughness, rng, nSamples, lmax, $B) {
    var t1, i, t2, t3, t4, t5, t6, t7, dg, bsdf, Ylm, w, scramble, u, osamp, wo, isamp, wi, f, j;
    t1 = J.getInterceptor$ns(lmax);
    i = 0;
    while (true) {
      t2 = J.$mul$ns(J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1)), J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1)));
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(i < t2))
        break;
      t2 = G.Spectrum_Spectrum(0);
      if (i >= $B.length)
        return H.ioore($B, i);
      $B[i] = t2;
      ++i;
    }
    t2 = G.DifferentialGeometry$();
    t3 = new G.Point(new Float32Array(3));
    t3.Vector$3(0, 0, 0);
    t4 = G.Vector$(1, 0, 0);
    t5 = G.Vector$(0, 1, 0);
    t6 = new G.Normal(new Float32Array(3));
    t6.Vector$3(0, 0, 0);
    t7 = new G.Normal(new Float32Array(3));
    t7.Vector$3(0, 0, 0);
    dg = t2.set$8(t3, t4, t5, t6, t7, 0, 0, null);
    t2 = new G.Normal(new Float32Array(3));
    t2.Vector$3(0, 0, 1);
    bsdf = G.BSDF$(dg, t2, 1);
    t2 = G.Lambertian$(G.Spectrum_Spectrum$from(Kd, 0));
    t3 = bsdf.bxdfs;
    t4 = bsdf.nBxDFs++;
    if (t4 >= 8)
      return H.ioore(t3, t4);
    t3[t4] = t2;
    if (typeof roughness !== "number")
      return H.iae(roughness);
    t2 = G.Blinn$(1 / roughness);
    t4 = bsdf.nBxDFs++;
    if (t4 >= 8)
      return H.ioore(t3, t4);
    t3[t4] = new G.Microfacet(Ks, t2, new G.FresnelDielectric(1.5, 1), 9);
    t2 = J.$mul$ns(J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1)), nSamples);
    if (typeof t2 !== "number" || Math.floor(t2) !== t2)
      H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
    Ylm = new Float32Array(t2);
    w = H.setRuntimeTypeInfo(Array(nSamples), [G.Vector]);
    scramble = [rng.random.nextInt$1(4294967295), rng.random.nextInt$1(4294967295)];
    u = [0, 0];
    for (t2 = w.length, i = 0; i < nSamples; ++i) {
      u[0] = G.VanDerCorput(i, scramble[0]);
      t3 = G.Sobol2(i, scramble[1]);
      u[1] = t3;
      t3 = G.UniformSampleSphere(u[0], t3);
      if (i >= t2)
        return H.ioore(w, i);
      w[i] = t3;
      G.SphericalHarmonics_Evaluate(t3, lmax, Ylm, J.$mul$ns(J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1)), i));
    }
    for (t3 = Ylm.length, t4 = 0.006332573977646112 * nSamples * nSamples, osamp = 0; osamp < nSamples; ++osamp) {
      if (osamp >= t2)
        return H.ioore(w, osamp);
      wo = w[osamp];
      for (isamp = 0; isamp < nSamples; ++isamp) {
        if (isamp >= t2)
          return H.ioore(w, isamp);
        wi = w[isamp];
        f = bsdf.f$2(wo, wi);
        if (!f.isBlack$0()) {
          f = f.$mul(0, J.abs$0$n(J.$index$asx(J.get$data$x(wi), 2)) / t4);
          i = 0;
          while (true) {
            t5 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
            if (typeof t5 !== "number")
              return H.iae(t5);
            if (!(i < t5))
              break;
            j = 0;
            while (true) {
              t5 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
              if (typeof t5 !== "number")
                return H.iae(t5);
              if (!(j < t5))
                break;
              t5 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
              if (typeof t5 !== "number")
                return H.iae(t5);
              t5 = i * t5 + j;
              if (t5 >>> 0 !== t5 || t5 >= $B.length)
                return H.ioore($B, t5);
              t5 = $B[t5];
              t6 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
              if (typeof t6 !== "number")
                return H.iae(t6);
              t6 = isamp * t6 + j;
              if (t6 >>> 0 !== t6 || t6 >= t3)
                return H.ioore(Ylm, t6);
              t6 = Ylm[t6];
              t7 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
              if (typeof t7 !== "number")
                return H.iae(t7);
              t7 = osamp * t7 + i;
              if (t7 >>> 0 !== t7 || t7 >= t3)
                return H.ioore(Ylm, t7);
              J.add$1$ax(t5, f.$mul(0, t6 * Ylm[t7]));
              ++j;
            }
            ++i;
          }
        }
      }
    }
  },
  SphericalHarmonics_MatrixVectorMultiply: function($M, v, vout, lmax) {
    var t1, len, t2, i, t3, j, t4, t5;
    t1 = J.getInterceptor$ns(lmax);
    len = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
    if (typeof len !== "number")
      return H.iae(len);
    t2 = vout.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = G.Spectrum_Spectrum(0);
      if (i >= t2)
        return H.ioore(vout, i);
      vout[i] = t3;
      j = 0;
      while (true) {
        t3 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(j < t3))
          break;
        t3 = vout[i];
        if (j >= v.length)
          return H.ioore(v, j);
        t4 = v[j];
        t5 = J.$add$ns(J.$mul$ns(J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1)), i), j);
        if (t5 >>> 0 !== t5 || t5 >= $M.length)
          return H.ioore($M, t5);
        vout[i] = J.$add$ns(t3, J.$mul$ns(t4, $M[t5]));
        ++j;
      }
    }
  },
  SphericalHarmonics__legendrep: function(x, lmax, out, outIndex) {
    var t1, t2, l, t3, t4, t5, t6, xroot, xpow, neg, dfact, m, t7, t8, t9;
    t1 = new G.SphericalHarmonics__legendrep_P(out, outIndex);
    t2 = out.length;
    if (0 >= t2)
      return H.ioore(out, 0);
    out[0] = 1;
    if (2 >= t2)
      return H.ioore(out, 2);
    out[2] = x;
    if (typeof lmax !== "number")
      return H.iae(lmax);
    t2 = J.getInterceptor$ns(outIndex);
    l = 2;
    for (; l <= lmax; ++l) {
      t3 = t2.$add(outIndex, l * l + l);
      if (typeof x !== "number")
        return H.iae(x);
      t4 = l - 1;
      t5 = t1.call$2(t4, 0);
      if (typeof t5 !== "number")
        return H.iae(t5);
      t6 = t1.call$2(l - 2, 0);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (t3 >>> 0 !== t3 || t3 >= out.length)
        return H.ioore(out, t3);
      out[t3] = ((2 * l - 1) * x * t5 - t4 * t6) / l;
    }
    t3 = J.getInterceptor$ns(x);
    t4 = t3.$mul(x, x);
    if (typeof t4 !== "number")
      return H.iae(t4);
    t4 = P.max(0, 1 - t4);
    xroot = Math.sqrt(t4);
    for (xpow = xroot, neg = -1, dfact = 1, l = 1; l <= lmax; ++l) {
      t4 = t2.$add(outIndex, l * l + l + l);
      if (t4 >>> 0 !== t4 || t4 >= out.length)
        return H.ioore(out, t4);
      out[t4] = neg * dfact * xpow;
      neg *= -1;
      dfact *= 2 * l + 1;
      xpow *= xroot;
    }
    for (l = 2; l <= lmax; ++l) {
      t4 = l - 1;
      t5 = t2.$add(outIndex, l * l + l + t4);
      t4 = J.$mul$ns(t3.$mul(x, 2 * l - 1), t1.call$2(t4, t4));
      if (t5 >>> 0 !== t5 || t5 >= out.length)
        return H.ioore(out, t5);
      out[t5] = t4;
    }
    for (l = 3; l <= lmax; ++l)
      for (t3 = l - 2, t4 = l * l + l, t5 = l - 1, t6 = 2 * t5 + 1, m = 1; m <= t3; ++m) {
        t7 = t2.$add(outIndex, t4 + m);
        if (typeof x !== "number")
          return H.iae(x);
        t8 = t1.call$2(t5, m);
        if (typeof t8 !== "number")
          return H.iae(t8);
        t9 = t1.call$2(t3, m);
        if (typeof t9 !== "number")
          return H.iae(t9);
        if (t7 >>> 0 !== t7 || t7 >= out.length)
          return H.ioore(out, t7);
        out[t7] = (t6 * x * t8 - (t5 + m) * t9) / (l - m);
      }
  },
  SphericalHarmonics__divfact: function(a, b) {
    var fb, x, t1, v;
    if (b === 0)
      return 1;
    fb = Math.abs(b);
    for (x = a - fb + 1, t1 = a + fb, v = 1; x <= t1; ++x)
      v *= x;
    return 1 / v;
  },
  SphericalHarmonics__sinCosIndexed: function(s, c, n, sout, cout) {
    var t1, t2, si, ci, i, si0;
    if (typeof n !== "number")
      return H.iae(n);
    t1 = sout.length;
    t2 = cout.length;
    si = 0;
    ci = 1;
    i = 0;
    for (; i < n; ++i, si = si0) {
      if (i >= t1)
        return H.ioore(sout, i);
      sout[i] = si;
      if (i >= t2)
        return H.ioore(cout, i);
      cout[i] = ci;
      if (typeof c !== "number")
        return H.iae(c);
      if (typeof s !== "number")
        return H.iae(s);
      si0 = si * c + ci * s;
      ci = ci * c - si * s;
    }
  },
  Stats_getString: function() {
    var t1, s;
    for (t1 = $.get$Stats_trackers(), t1 = new H.ListIterator(t1, t1.length, 0, null), s = ""; t1.moveNext$0();)
      s += H.S(t1._current) + "\n";
    return s;
  },
  Lanczos: function(x, tau) {
    var t1, t2;
    x = Math.abs(x);
    if (x < 0.00001)
      return 1;
    if (x > 1)
      return 0;
    x *= 3.141592653589793;
    t1 = x * tau;
    t2 = Math.sin(t1);
    return t2 / t1 * (Math.sin(x) / x);
  },
  Noise: function(x, y, z) {
    var ix, iy, iz, dx, dy, dz, w000, t1, t2, w100, t3, t4, w010, w110, t5, t6, w001, w101, w011, w111, wx, wy, wz;
    ix = C.JSNumber_methods.toInt$0(Math.floor(x));
    iy = C.JSNumber_methods.toInt$0(Math.floor(y));
    iz = C.JSNumber_methods.toInt$0(Math.floor(z));
    dx = x - ix;
    dy = y - iy;
    dz = z - iz;
    ix &= 255;
    iy &= 255;
    iz &= 255;
    w000 = G._Grad(ix, iy, iz, dx, dy, dz);
    t1 = ix + 1;
    t2 = dx - 1;
    w100 = G._Grad(t1, iy, iz, t2, dy, dz);
    t3 = iy + 1;
    t4 = dy - 1;
    w010 = G._Grad(ix, t3, iz, dx, t4, dz);
    w110 = G._Grad(t1, t3, iz, t2, t4, dz);
    t5 = iz + 1;
    t6 = dz - 1;
    w001 = G._Grad(ix, iy, t5, dx, dy, t6);
    w101 = G._Grad(t1, iy, t5, t2, dy, t6);
    w011 = G._Grad(ix, t3, t5, dx, t4, t6);
    w111 = G._Grad(t1, t3, t5, t2, t4, t6);
    wx = G._NoiseWeight(dx);
    wy = G._NoiseWeight(dy);
    wz = G._NoiseWeight(dz);
    t6 = 1 - wx;
    t4 = 1 - wy;
    return ((w000 * t6 + w100 * wx) * t4 + (w010 * t6 + w110 * wx) * wy) * (1 - wz) + ((w001 * t6 + w101 * wx) * t4 + (w011 * t6 + w111 * wx) * wy) * wz;
  },
  FBm: function($P, dpdx, dpdy, omega, maxOctaves) {
    var s2, t1, t2, foctaves, octaves, sum, lambda, o, i;
    s2 = P.max(dpdx.lengthSquared$0(), dpdy.lengthSquared$0());
    t1 = Math.log(s2);
    t2 = $.get$_invLog2();
    if (typeof t2 !== "number")
      return H.iae(t2);
    foctaves = P.min(J.toDouble$0$n(maxOctaves), P.max(0, -1 - 0.5 * (t1 * t2)));
    octaves = C.JSNumber_methods.floor$0(foctaves);
    for (sum = 0, lambda = 1, o = 1, i = 0; i < octaves; ++i) {
      t1 = $P.$mul(0, lambda);
      t1 = G.Noise(t1.get$x(t1), t1.get$y(t1), t1.get$z(t1));
      if (typeof t1 !== "number")
        return H.iae(t1);
      sum += o * t1;
      lambda *= 1.99;
      if (typeof omega !== "number")
        return H.iae(omega);
      o *= omega;
    }
    t1 = G.SmoothStep(0.3, 0.7, foctaves - octaves);
    t2 = $P.$mul(0, lambda);
    t2 = G.Noise(t2.get$x(t2), t2.get$y(t2), t2.get$z(t2));
    if (typeof t2 !== "number")
      return H.iae(t2);
    return sum + o * t1 * t2;
  },
  Turbulence: function($P, dpdx, dpdy, omega, maxOctaves) {
    var s2, t1, t2, t3, foctaves, octaves, sum, lambda, o, i;
    s2 = P.max(dpdx.lengthSquared$0(), dpdy.lengthSquared$0());
    t1 = J.toDouble$0$n(maxOctaves);
    t2 = Math.log(s2);
    t3 = $.get$_invLog2();
    if (typeof t3 !== "number")
      return H.iae(t3);
    foctaves = P.min(t1, P.max(0, -1 - 0.5 * (t2 * t3)));
    octaves = C.JSNumber_methods.floor$0(foctaves);
    for (sum = 0, lambda = 1, o = 1, i = 0; i < octaves; ++i) {
      t1 = $P.$mul(0, lambda);
      sum += o * J.abs$0$n(G.Noise(t1.get$x(t1), t1.get$y(t1), t1.get$z(t1)));
      lambda *= 1.99;
      if (typeof omega !== "number")
        return H.iae(omega);
      o *= omega;
    }
    t1 = G.SmoothStep(0.3, 0.7, foctaves - octaves);
    t2 = $P.$mul(0, lambda);
    return sum + o * t1 * J.abs$0$n(G.Noise(t2.get$x(t2), t2.get$y(t2), t2.get$z(t2))) + (maxOctaves - foctaves) * 0.2;
  },
  _Grad: function(x, y, z, dx, dy, dz) {
    var t1, h, u, v;
    if (x >= 512)
      return H.ioore(C.List_2jN, x);
    t1 = J.$add$ns(C.List_2jN[x], y);
    if (t1 >>> 0 !== t1 || t1 >= 512)
      return H.ioore(C.List_2jN, t1);
    t1 = J.$add$ns(C.List_2jN[t1], z);
    if (t1 >>> 0 !== t1 || t1 >= 512)
      return H.ioore(C.List_2jN, t1);
    h = J.$and$n(C.List_2jN[t1], 15);
    u = h < 8 || h === 12 || h === 13 ? dx : dy;
    v = h < 4 || h === 12 || h === 13 ? dy : dz;
    t1 = (h & 1) !== 0 ? -u : u;
    return t1 + ((h & 2) !== 0 ? -v : v);
  },
  _NoiseWeight: function(t) {
    var t3, t4;
    t3 = t * t * t;
    t4 = t3 * t;
    return 6 * t4 * t - 15 * t4 + 10 * t3;
  },
  Fdr: function(eta) {
    var t1 = J.getInterceptor$n(eta);
    if (t1.$ge(eta, 1)) {
      t1 = t1.$mul(eta, eta);
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (typeof eta !== "number")
        return H.iae(eta);
      return -1.4399 / t1 + 0.7099 / eta + 0.6681 + 0.0636 * eta;
    } else {
      if (typeof eta !== "number")
        return H.iae(eta);
      t1 = eta * eta;
      return -0.4399 + 0.7099 / eta - 0.3319 / t1 + 0.0636 / (t1 * eta);
    }
  },
  _RdIntegral: function(alphap, $A) {
    var sqrtTerm, t1;
    sqrtTerm = Math.sqrt(3 * (1 - alphap));
    t1 = Math.exp(-1.3333333333333333 * $A * sqrtTerm);
    return alphap / 2 * (1 + t1) * Math.exp(-sqrtTerm);
  },
  _RdToAlphap: function(reflectance, $A) {
    var kd0, kd1, alphaLow, alphaHigh, i, t1, alphaMid, kd;
    kd0 = G._RdIntegral(0, $A);
    kd1 = G._RdIntegral(1, $A);
    for (alphaLow = 0, alphaHigh = 1, i = 0; t1 = alphaLow + alphaHigh, i < 16; ++i) {
      alphaMid = t1 * 0.5;
      kd = G._RdIntegral(alphaMid, $A);
      if (typeof reflectance !== "number")
        return H.iae(reflectance);
      if (kd < reflectance) {
        kd0 = kd;
        alphaLow = alphaMid;
      } else {
        kd1 = kd;
        alphaHigh = alphaMid;
      }
    }
    return t1 * 0.5;
  },
  PhaseHG: function(w, wp, g) {
    var costheta, t1, t2;
    costheta = G.Vector_Dot(w, wp);
    t1 = J.getInterceptor$ns(g);
    t2 = t1.$mul(g, g);
    if (typeof t2 !== "number")
      return H.iae(t2);
    t1 = t1.$mul(g, g);
    if (typeof t1 !== "number")
      return H.iae(t1);
    if (typeof g !== "number")
      return H.iae(g);
    if (typeof costheta !== "number")
      return H.iae(costheta);
    return 0.07957747154594767 * (1 - t2) / Math.pow(1 + t1 - 2 * g * costheta, 1.5);
  },
  GetVolumeScatteringProperties: function($name, sigma_a, sigma_prime_s) {
    if (C.Map_2j0.containsKey$1($name) !== true)
      return false;
    sigma_a.setRGB$3(J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 1), 0), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 1), 1), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 2), 2));
    sigma_prime_s.setRGB$3(J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 0), 0), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 0), 1), J.$index$asx(J.$index$asx(C.Map_2j0.$index(0, $name), 0), 2));
    return true;
  },
  SubsurfaceFromDiffuse: function(Kd, meanPathLength, eta, sigma_a, sigma_prime_s) {
    var $A, t1, t2, t3, t4, rgb, sigma_prime_s_rgb, sigma_a_rgb, i, alphap, sigma_prime_t;
    $A = (1 + G.Fdr(eta)) / (1 - G.Fdr(eta));
    t1 = Kd.c;
    t2 = t1.length;
    if (0 >= t2)
      return H.ioore(t1, 0);
    t3 = t1[0];
    if (1 >= t2)
      return H.ioore(t1, 1);
    t4 = t1[1];
    if (2 >= t2)
      return H.ioore(t1, 2);
    rgb = [t3, t4, t1[2]];
    sigma_prime_s_rgb = H.setRuntimeTypeInfo(Array(3), [J.JSDouble]);
    sigma_a_rgb = H.setRuntimeTypeInfo(Array(3), [J.JSDouble]);
    for (i = 0; i < 3; ++i) {
      alphap = G._RdToAlphap(rgb[i], $A);
      if (typeof meanPathLength !== "number")
        return H.iae(meanPathLength);
      sigma_prime_t = 1 / meanPathLength / Math.sqrt(3 * (1 - alphap));
      t1 = alphap * sigma_prime_t;
      sigma_prime_s_rgb[i] = t1;
      sigma_a_rgb[i] = sigma_prime_t - t1;
    }
    sigma_a.setRGB$3(sigma_a_rgb[0], sigma_a_rgb[1], sigma_a_rgb[2]);
    sigma_prime_s.setRGB$3(sigma_prime_s_rgb[0], sigma_prime_s_rgb[1], sigma_prime_s_rgb[2]);
  },
  AnimatedTransform: {
    "^": "Object;startTime,endTime,startTransform,endTransform,actuallyAnimated,T,R,S",
    interpolate$2: function(time, t) {
      var t1, t2, t3, dt, trans, rotate, scale, t4, i, t5, t6;
      if (!this.actuallyAnimated || J.$le$n(time, this.startTime)) {
        t1 = this.startTransform;
        t.m = new G.Matrix4x4(new Float32Array(H._ensureNativeList(t1.m.data)));
        t.mInv = new G.Matrix4x4(new Float32Array(H._ensureNativeList(t1.mInv.data)));
        return;
      }
      t1 = this.endTime;
      t2 = J.getInterceptor$n(time);
      if (t2.$ge(time, t1)) {
        t1 = this.endTransform;
        t.m = new G.Matrix4x4(new Float32Array(H._ensureNativeList(t1.m.data)));
        t.mInv = new G.Matrix4x4(new Float32Array(H._ensureNativeList(t1.mInv.data)));
        return;
      }
      t3 = this.startTime;
      t2 = t2.$sub(time, t3);
      t3 = J.$sub$n(t1, t3);
      if (typeof t2 !== "number")
        return t2.$div();
      if (typeof t3 !== "number")
        return H.iae(t3);
      dt = t2 / t3;
      t3 = 1 - dt;
      trans = J.$add$ns(J.$mul$ns(this.T[0], t3), J.$mul$ns(this.T[1], dt));
      t2 = this.R;
      rotate = G.Quaternion_Slerp(dt, t2[0], t2[1]);
      scale = G.Matrix4x4$();
      for (t1 = scale.data, t2 = this.S, t4 = t1.length, i = 0; i < 16; ++i) {
        t5 = J.$index$asx(J.get$data$x(t2[0]), i);
        t6 = J.$index$asx(J.get$data$x(t2[1]), i);
        t6 = J.$add$ns(J.$mul$ns(t5, t3), J.$mul$ns(t6, dt));
        if (i >= t4)
          return H.ioore(t1, i);
        t1[i] = t6;
      }
      t1 = G.Transform_Translate(trans);
      t2 = rotate.toTransform$0();
      t1 = G.Transform$(G.Matrix4x4_Mul(t1.m, t2.m), G.Matrix4x4_Mul(t2.mInv, t1.mInv));
      t2 = G.Transform$(scale, null);
      t1 = G.Transform$(G.Matrix4x4_Mul(t1.m, t2.m), G.Matrix4x4_Mul(t2.mInv, t1.mInv));
      t.m = new G.Matrix4x4(new Float32Array(H._ensureNativeList(t1.m.data)));
      t.mInv = new G.Matrix4x4(new Float32Array(H._ensureNativeList(t1.mInv.data)));
    },
    transformRay$2: function(r, tr) {
      var t;
      if (tr == null)
        tr = G.Ray$(null, null, 0, 1 / 0, 0, 0);
      if (!this.actuallyAnimated || J.$le$n(r.get$time(), this.startTime))
        this.startTransform.transformRay$2(r, tr);
      else if (J.$ge$n(r.get$time(), this.endTime))
        this.endTransform.transformRay$2(r, tr);
      else {
        t = G.Transform$(null, null);
        this.interpolate$2(r.get$time(), t);
        t.transformRay$2(r, tr);
      }
      tr.time = r.get$time();
      return tr;
    },
    transformRay$1: function(r) {
      return this.transformRay$2(r, null);
    },
    transformRayDifferential$2: function(r, tr) {
      var t;
      if (!this.actuallyAnimated || J.$le$n(r.time, this.startTime))
        this.startTransform.transformRayDifferential$2(r, tr);
      else if (J.$ge$n(r.time, this.endTime))
        this.endTransform.transformRayDifferential$2(r, tr);
      else {
        t = G.Transform$(null, null);
        this.interpolate$2(r.time, t);
        t.transformRayDifferential$2(r, tr);
      }
      tr.time = r.time;
    },
    transformPoint$2: function(time, p) {
      var t;
      if (!this.actuallyAnimated || J.$le$n(time, this.startTime))
        return this.startTransform.transformPoint$1(p);
      else if (J.$ge$n(time, this.endTime))
        return this.endTransform.transformPoint$1(p);
      t = G.Transform$(null, null);
      this.interpolate$2(time, t);
      return t.transformPoint$1(p);
    },
    motionBounds$2: function(b, useInverse) {
      var t1, ret, t, t2, t3, t4, i, t5;
      if (!this.actuallyAnimated) {
        t1 = this.startTransform;
        return G.Transform$(t1.mInv, t1.m).transformBBox$1(b);
      }
      ret = G.BBox$(null, null);
      t = G.Transform$(null, null);
      for (t1 = this.startTime, t2 = this.endTime, t3 = J.getInterceptor$ns(t1), t4 = J.getInterceptor$ns(t2), i = 0; i < 128; ++i) {
        t5 = i / 127;
        this.interpolate$2(J.$add$ns(t3.$mul(t1, 1 - t5), t4.$mul(t2, t5)), t);
        if (useInverse)
          t = G.Transform$(t.mInv, t.m);
        t5 = t.transformBBox$1(b);
        ret = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(ret.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(ret.pMax.data)))).union$1(t5);
      }
      return ret;
    },
    AnimatedTransform$from$1: function(other) {
      var t1, t2;
      this.T[0] = new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(other.T[0]))));
      this.T[1] = new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(other.T[1]))));
      t1 = this.R;
      t2 = other.R;
      t1[0] = G.Quaternion$from(t2[0]);
      t1[1] = G.Quaternion$from(t2[1]);
      t2 = this.S;
      t1 = other.S;
      t2[0] = new G.Matrix4x4(new Float32Array(H._ensureNativeList(J.get$data$x(t1[0]))));
      t2[1] = new G.Matrix4x4(new Float32Array(H._ensureNativeList(J.get$data$x(t1[1]))));
    },
    AnimatedTransform$4: function(transform1, startTime, transform2, endTime) {
      var t1, t2;
      t1 = this.R;
      t2 = this.S;
      G.AnimatedTransform_Decompose(this.startTransform.m, this.T[0], t1[0], t2[0]);
      G.AnimatedTransform_Decompose(this.endTransform.m, this.T[1], t1[1], t2[1]);
    },
    static: {AnimatedTransform$: function(transform1, startTime, transform2, endTime) {
        var t1, t2, t3, t4, t5, t6;
        t1 = G.Vector$(0, 0, 0);
        t2 = G.Vector$(0, 0, 0);
        t3 = G.Vector$(0, 0, 0);
        t4 = G.Vector$(0, 0, 0);
        t5 = G.Matrix4x4$();
        t6 = G.Matrix4x4$();
        t6 = new G.AnimatedTransform(startTime, endTime, G.Transform$from(transform1), G.Transform$from(transform2), !transform1.$eq(0, transform2), [t1, t2], [new G.Quaternion(t3, 1), new G.Quaternion(t4, 1)], [t5, t6]);
        t6.AnimatedTransform$4(transform1, startTime, transform2, endTime);
        return t6;
      }, AnimatedTransform$from: function(other) {
        var t1, t2, t3, t4, t5, t6;
        t1 = G.Vector$(0, 0, 0);
        t2 = G.Vector$(0, 0, 0);
        t3 = G.Vector$(0, 0, 0);
        t4 = G.Vector$(0, 0, 0);
        t5 = G.Matrix4x4$();
        t6 = G.Matrix4x4$();
        t6 = new G.AnimatedTransform(other.startTime, other.endTime, G.Transform$from(other.startTransform), G.Transform$from(other.endTransform), other.actuallyAnimated, [t1, t2], [new G.Quaternion(t3, 1), new G.Quaternion(t4, 1)], [t5, t6]);
        t6.AnimatedTransform$from$1(other);
        return t6;
      }, AnimatedTransform_Decompose: function(m, $T, Rquat, $S) {
        var t1, t2, t3, i, $R, count, Rnext, t4, t5, t6, t7, t8, t9, norm, j;
        t1 = m.data;
        t2 = t1.length;
        if (3 >= t2)
          return H.ioore(t1, 3);
        t3 = J.getInterceptor$x($T);
        t3.set$x($T, t1[3]);
        if (7 >= t2)
          return H.ioore(t1, 7);
        t3.set$y($T, t1[7]);
        if (11 >= t2)
          return H.ioore(t1, 11);
        t3.set$z($T, t1[11]);
        t1 = new Float32Array(H._ensureNativeList(t1));
        for (t2 = t1.length, i = 0; i < 3; ++i) {
          t3 = i * 4 + 3;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = 0;
          t3 = 12 + i;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = 0;
        }
        if (15 >= t2)
          return H.ioore(t1, 15);
        t1[15] = 1;
        $R = new G.Matrix4x4(new Float32Array(H._ensureNativeList(t1)));
        count = 0;
        do {
          Rnext = G.Matrix4x4$();
          for (t2 = Rnext.data, t3 = $R.data, t4 = t3.length, t5 = new G.Matrix4x4(new Float32Array(H._ensureNativeList(G.Matrix4x4_Transpose($R).data))).invert$0().data, t6 = t5.length, t7 = t2.length, i = 0; i < 16; ++i) {
            if (i >= t4)
              return H.ioore(t3, i);
            t8 = t3[i];
            if (i >= t6)
              return H.ioore(t5, i);
            t9 = t5[i];
            if (i >= t7)
              return H.ioore(t2, i);
            t2[i] = 0.5 * (t8 + t9);
          }
          for (norm = 0, i = 0, j = 0; i < 3; ++i, j += 4) {
            if (j >= t4)
              return H.ioore(t3, j);
            t5 = t3[j];
            if (j >= t7)
              return H.ioore(t2, j);
            t5 = Math.abs(t5 - t2[j]);
            t6 = j + 1;
            if (t6 >= t4)
              return H.ioore(t3, t6);
            t8 = t3[t6];
            if (t6 >= t7)
              return H.ioore(t2, t6);
            t6 = Math.abs(t8 - t2[t6]);
            t8 = j + 2;
            if (t8 >= t4)
              return H.ioore(t3, t8);
            t9 = t3[t8];
            if (t8 >= t7)
              return H.ioore(t2, t8);
            norm = P.max(norm, t5 + t6 + Math.abs(t9 - t2[t8]));
          }
          ++count;
          if (count < 100 && norm > 0.0001) {
            $R = Rnext;
            continue;
          } else
            break;
        } while (true);
        t3 = new G.Quaternion(G.Vector$(0, 0, 0), 1);
        t3.Quaternion$fromMatrix$1(Rnext);
        Rquat.copy$1(t3);
        $S.copy$1(G.Matrix4x4_Mul(new G.Matrix4x4(new Float32Array(H._ensureNativeList(t2))).invert$0(), new G.Matrix4x4(t1)));
      }}
  },
  BBox: {
    "^": "Object;pMin<,pMax<",
    reset$0: function(_) {
      var t1, t2;
      t1 = this.pMin.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = 1 / 0;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = 1 / 0;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = 1 / 0;
      t1 = this.pMax.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = -1 / 0;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = -1 / 0;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = -1 / 0;
    },
    copy$1: function(other) {
      this.pMin.copy$1(other.get$pMin());
      this.pMax.copy$1(other.pMax);
    },
    boundingSphere$1: function(c) {
      c.copy$1(this.pMin.$mul(0, 0.5).$add(0, this.pMax.$mul(0, 0.5)));
      return this.inside$1(c) ? this.pMax.$sub(0, c).length$0(0) : 0;
    },
    get$center: function() {
      return this.pMin.$mul(0, 0.5).$add(0, this.pMax.$mul(0, 0.5));
    },
    $index: function(_, index) {
      return J.$eq(index, 0) ? this.pMin : this.pMax;
    },
    intersectP$3: function(ray, hitt0, hitt1) {
      var t00, t1, i, t2, invRayDir, t3, tNear, tFar, t0;
      t00 = ray.get$minDistance();
      t1 = ray.maxDistance;
      for (i = 0; i < 3; ++i) {
        t2 = J.$index$asx(ray.direction, i);
        if (typeof t2 !== "number")
          return H.iae(t2);
        invRayDir = 1 / t2;
        t2 = this.pMin.data;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2 = t2[i];
        t3 = J.$index$asx(ray.origin, i);
        if (typeof t3 !== "number")
          return H.iae(t3);
        tNear = (t2 - t3) * invRayDir;
        t3 = this.pMax.data;
        if (i >= t3.length)
          return H.ioore(t3, i);
        t3 = t3[i];
        t2 = J.$index$asx(ray.origin, i);
        if (typeof t2 !== "number")
          return H.iae(t2);
        tFar = (t3 - t2) * invRayDir;
        if (tNear > tFar) {
          t0 = tFar;
          tFar = tNear;
          tNear = t0;
        }
        if (typeof t00 !== "number")
          return H.iae(t00);
        if (tNear > t00)
          t00 = tNear;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (tFar < t1)
          t1 = tFar;
        if (t00 > t1)
          return false;
      }
      if (hitt0 != null)
        hitt0[0] = t00;
      if (hitt1 != null)
        hitt1[0] = t1;
      return true;
    },
    intersectP$1: function(ray) {
      return this.intersectP$3(ray, null, null);
    },
    intersectP$2: function(ray, hitt0) {
      return this.intersectP$3(ray, hitt0, null);
    },
    inside$1: function(pt) {
      var t1, t2, t3;
      t1 = J.getInterceptor$x(pt);
      t2 = t1.get$x(pt);
      t3 = this.pMin.data;
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      if (J.$ge$n(t2, t3[0])) {
        t2 = t1.get$x(pt);
        t3 = this.pMax.data;
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        if (J.$le$n(t2, t3[0])) {
          t2 = t1.get$y(pt);
          t3 = this.pMin.data;
          if (1 >= t3.length)
            return H.ioore(t3, 1);
          if (J.$ge$n(t2, t3[1])) {
            t2 = t1.get$y(pt);
            t3 = this.pMax.data;
            if (1 >= t3.length)
              return H.ioore(t3, 1);
            if (J.$le$n(t2, t3[1])) {
              t2 = t1.get$z(pt);
              t3 = this.pMin.data;
              if (2 >= t3.length)
                return H.ioore(t3, 2);
              if (J.$ge$n(t2, t3[2])) {
                t1 = t1.get$z(pt);
                t2 = this.pMax.data;
                if (2 >= t2.length)
                  return H.ioore(t2, 2);
                t2 = J.$le$n(t1, t2[2]);
                t1 = t2;
              } else
                t1 = false;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    unionPoint$1: function(p) {
      var t1, t2;
      t1 = this.pMin.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = J.getInterceptor$x(p);
      t1[0] = P.min(t1[0], t2.get$x(p));
      t1 = this.pMin.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1[1] = P.min(t1[1], t2.get$y(p));
      t1 = this.pMin.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = P.min(t1[2], t2.get$z(p));
      t1 = this.pMax.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = P.max(t1[0], t2.get$x(p));
      t1 = this.pMax.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1[1] = P.max(t1[1], t2.get$y(p));
      t1 = this.pMax.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = P.max(t1[2], t2.get$z(p));
      return this;
    },
    union$1: function(b2) {
      var t1, t2, t3;
      t1 = this.pMin.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = t1[0];
      t3 = b2.get$pMin().data;
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t1[0] = P.min(t2, t3[0]);
      t3 = this.pMin.data;
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t2 = t3[1];
      t1 = b2.pMin.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t3[1] = P.min(t2, t1[1]);
      t1 = this.pMin.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t2 = t1[2];
      t3 = b2.pMin.data;
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t1[2] = P.min(t2, t3[2]);
      t3 = this.pMax.data;
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t2 = t3[0];
      t1 = b2.pMax.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t3[0] = P.max(t2, t1[0]);
      t1 = this.pMax.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t2 = t1[1];
      t3 = b2.pMax.data;
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t1[1] = P.max(t2, t3[1]);
      t3 = this.pMax.data;
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t2 = t3[2];
      t1 = b2.pMax.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t3[2] = P.max(t2, t1[2]);
      return this;
    },
    expand$1: function(_, delta) {
      var t1, t2;
      t1 = this.pMin.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = t1[0] - delta;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = t1[1] - delta;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = t1[2] - delta;
      t1 = this.pMax.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = t1[0] + delta;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = t1[1] + delta;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = t1[2] + delta;
    },
    surfaceArea$0: function() {
      var t1, t2, t3, t4;
      t1 = this.pMax.$sub(0, this.pMin).data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      return 2 * (t3 * t4 + t3 * t1 + t4 * t1);
    },
    volume$0: function(_) {
      var t1, t2, t3, t4;
      t1 = this.pMax.$sub(0, this.pMin).data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return t3 * t4 * t1[2];
    },
    maximumExtent$0: function() {
      var t1, t2, t3, t4;
      t1 = this.pMax.$sub(0, this.pMin).data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (t3 > t4) {
        if (2 >= t2)
          return H.ioore(t1, 2);
        t3 = t3 > t1[2];
      } else
        t3 = false;
      if (t3)
        return 0;
      else {
        if (2 >= t2)
          return H.ioore(t1, 2);
        if (t4 > t1[2])
          return 1;
        else
          return 2;
      }
    },
    lerp$3: function(tx, ty, tz) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = this.pMin.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = this.pMax.data;
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t6 = t4[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t7 = t1[1];
      if (1 >= t5)
        return H.ioore(t4, 1);
      t8 = t4[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      if (2 >= t5)
        return H.ioore(t4, 2);
      t4 = t4[2];
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t3 * (1 - tx) + t6 * tx, t7 * (1 - ty) + t8 * ty, t1 * (1 - tz) + t4 * tz);
      return t2;
    },
    offset$1: function(_, p) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = p.get$x(p);
      t2 = this.pMin.data;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2 = t2[0];
      t3 = this.pMax.data;
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t4 = p.get$y(p);
      t5 = this.pMin.data;
      if (1 >= t5.length)
        return H.ioore(t5, 1);
      t5 = t5[1];
      t6 = this.pMax.data;
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      t7 = p.get$z(p);
      t8 = this.pMin.data;
      if (2 >= t8.length)
        return H.ioore(t8, 2);
      t8 = t8[2];
      t9 = this.pMax.data;
      if (2 >= t9.length)
        return H.ioore(t9, 2);
      return G.Vector$((t1 - t2) / (t3 - t2), (t4 - t5) / (t6 - t5), (t7 - t8) / (t9[2] - t8));
    },
    BBox$2: function(p1, p2) {
      var t1, t2, t3, t4, t5, t6;
      t1 = p1 == null;
      if (t1 && p2 == null) {
        t1 = new G.Point(new Float32Array(3));
        t1.Vector$3(1 / 0, 1 / 0, 1 / 0);
        this.pMin = t1;
        t1 = new G.Point(new Float32Array(3));
        t1.Vector$3(-1 / 0, -1 / 0, -1 / 0);
        this.pMax = t1;
      } else {
        t1 = !t1 && p2 != null;
        t2 = J.getInterceptor$x(p1);
        if (t1) {
          t1 = J.getInterceptor$x(p2);
          t3 = P.min(t2.get$x(p1), t1.get$x(p2));
          t4 = P.min(t2.get$y(p1), t1.get$y(p2));
          t5 = P.min(t2.get$z(p1), t1.get$z(p2));
          t6 = new G.Point(new Float32Array(3));
          t6.Vector$3(t3, t4, t5);
          this.pMin = t6;
          t6 = P.max(t2.get$x(p1), t1.get$x(p2));
          t5 = P.max(t2.get$y(p1), t1.get$y(p2));
          t1 = P.max(t2.get$z(p1), t1.get$z(p2));
          t2 = new G.Point(new Float32Array(3));
          t2.Vector$3(t6, t5, t1);
          this.pMax = t2;
        } else {
          this.pMin = new G.Point(new Float32Array(H._ensureNativeList(t2.get$data(p1))));
          this.pMax = new G.Point(new Float32Array(H._ensureNativeList(t2.get$data(p1))));
        }
      }
    },
    static: {BBox$: function(p1, p2) {
        var t1 = new G.BBox(null, null);
        t1.BBox$2(p1, p2);
        return t1;
      }, BBox$from: function(other) {
        return new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(other.get$pMin().data))), new G.Point(new Float32Array(H._ensureNativeList(other.pMax.data))));
      }}
  },
  Camera: {
    "^": "Object;cameraToWorld<,shutterOpen<,shutterClose<,film<",
    generateRayDifferential$2: function(sample, rd) {
      var wt, sshift, rx, wtx, ry, wty;
      wt = this.generateRay$2(sample, rd);
      sshift = G.CameraSample$from(sample);
      sshift.imageX = J.$add$ns(sshift.imageX, 1);
      rx = G.Ray$(null, null, 0, 1 / 0, 0, 0);
      wtx = this.generateRay$2(sshift, rx);
      rd.set$rxOrigin(new G.Point(new Float32Array(H._ensureNativeList(J.get$data$x(rx.origin)))));
      rd.rxDirection = new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(rx.direction))));
      sshift.imageX = J.$sub$n(sshift.imageX, 1);
      sshift.imageY = J.$add$ns(sshift.imageY, 1);
      ry = G.Ray$(null, null, 0, 1 / 0, 0, 0);
      wty = this.generateRay$2(sshift, ry);
      rd.ryOrigin = new G.Point(new Float32Array(H._ensureNativeList(J.get$data$x(ry.origin))));
      rd.ryDirection = new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(ry.direction))));
      if (wtx === 0 || wty === 0)
        return 0;
      rd.hasDifferentials = true;
      return wt;
    }
  },
  CameraSample: {
    "^": "Object;imageX@,imageY@,lensU?,lensV?,time@",
    static: {CameraSample$from: function(s) {
        return new G.CameraSample(s.get$imageX(), s.imageY, s.lensU, s.lensV, s.time);
      }}
  },
  FutureWhileLoop_nextElement: {
    "^": "Closure:13;f_0,doneSignal_1",
    call$1: function(_) {
      var future, t1;
      future = this.f_0.call$0();
      t1 = this.doneSignal_1;
      if (future == null) {
        t1 = t1.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
      } else
        P.Future_Future$sync(new G.FutureWhileLoop_nextElement_closure(future), null).then$2$onError(this, t1.get$completeError());
    }
  },
  FutureWhileLoop_nextElement_closure: {
    "^": "Closure:95;future_2",
    call$0: function() {
      return this.future_2;
    }
  },
  ReadFloatFile__isdigit: {
    "^": "Closure:103;ZERO_0,NINE_1",
    call$1: function(c) {
      var cu = C.JSString_methods.codeUnitAt$1(c, 0);
      return cu >= this.ZERO_0 && cu <= this.NINE_1;
    }
  },
  ReadFloatFile__isspace: {
    "^": "Closure:103;",
    call$1: function(c) {
      return c === " " || c === "\t" || c === "\n" || c === "\r";
    }
  },
  nth_element_closure: {
    "^": "Closure:96;pred_0",
    call$2: function(a, b) {
      return this.pred_0.call$2(a, b) === true ? -1 : 1;
    }
  },
  DifferentialGeometry: {
    "^": "Object;p>,nn<,u<,v<,shape,dpdu,dpdv,dndu,dndv,dpdx,dpdy,dudx,dvdx,dudy,dvdy",
    p$4: function($receiver, arg0, arg1, arg2, arg3) {
      return this.p.call$4(arg0, arg1, arg2, arg3);
    },
    set$8: function(p, dpdu, dpdv, dndu, dndv, u, v, shape) {
      var t1, t2, a, b;
      this.p = p;
      this.dpdu = dpdu;
      this.dpdv = dpdv;
      this.dndu = dndu;
      this.dndv = dndv;
      t1 = G.Vector_Cross(dpdu, dpdv);
      t1 = t1.$div(0, t1.length$0(0));
      this.nn = t1;
      this.u = u;
      this.v = v;
      this.shape = shape;
      this.dudx = 0;
      this.dvdx = 0;
      this.dudy = 0;
      this.dvdy = 0;
      t2 = shape != null;
      a = t2 && shape.reverseOrientation === true ? 1 : 0;
      b = t2 && shape.transformSwapsHandedness ? 1 : 0;
      if (t2 && (a ^ b) !== 0)
        this.nn = t1.$mul(0, -1);
      return this;
    },
    copy$1: function(other) {
      this.p.copy$1(J.get$p$x(other));
      this.nn.copy$1(other.get$nn());
      this.u = other.get$u();
      this.v = other.v;
      this.shape = other.shape;
      this.dpdu.copy$1(other.dpdu);
      this.dpdv.copy$1(other.dpdv);
      this.dndu.copy$1(other.dndu);
      this.dndv.copy$1(other.dndv);
      this.dpdx.copy$1(other.dpdx);
      this.dpdy.copy$1(other.dpdy);
      this.dudx = other.dudx;
      this.dvdx = other.dvdx;
      this.dudy = other.dudy;
      this.dvdy = other.dvdy;
    },
    computeDifferentials$1: function(ray) {
      var t1, t2, t3, t4, d, rxv, tx, ty, $A, Bx, By, axes, _du, _dv;
      if (ray.get$hasDifferentials()) {
        t1 = this.nn;
        t2 = this.p;
        t2 = t2.get$x(t2);
        t3 = this.p;
        t3 = t3.get$y(t3);
        t4 = this.p;
        d = J.$negate$n(G.Vector_Dot(t1, G.Vector$(t2, t3, t4.get$z(t4))));
        rxv = G.Vector$(J.get$x$x(ray.rxOrigin), J.get$y$x(ray.rxOrigin), J.get$z$x(ray.rxOrigin));
        tx = J.$div$n(J.$negate$n(J.$add$ns(G.Vector_Dot(this.nn, rxv), d)), G.Vector_Dot(this.nn, ray.rxDirection));
        if (J.get$isNaN$n(tx)) {
          this.dvdx = 0;
          this.dudx = 0;
          this.dvdy = 0;
          this.dudy = 0;
          this.dpdx = G.Vector$(0, 0, 0);
          this.dpdy = G.Vector$(0, 0, 0);
          return;
        }
        t1 = new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(ray.rxOrigin, J.$mul$ns(ray.rxDirection, tx)))));
        t2 = new Float32Array(H._ensureNativeList(J.get$data$x(ray.ryOrigin)));
        ty = J.$div$n(J.$negate$n(J.$add$ns(G.Vector_Dot(this.nn, new G.Vector(t2)), d)), G.Vector_Dot(this.nn, ray.ryDirection));
        if (J.get$isNaN$n(ty)) {
          this.dvdx = 0;
          this.dudx = 0;
          this.dvdy = 0;
          this.dudy = 0;
          this.dpdx = G.Vector$(0, 0, 0);
          this.dpdy = G.Vector$(0, 0, 0);
          return;
        }
        t2 = new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(ray.ryOrigin, J.$mul$ns(ray.ryDirection, ty)))));
        this.dpdx = new G.Point(t1).$sub(0, this.p);
        this.dpdy = new G.Point(t2).$sub(0, this.p);
        $A = H.setRuntimeTypeInfo(Array(4), [J.JSDouble]);
        Bx = H.setRuntimeTypeInfo(Array(2), [J.JSDouble]);
        By = H.setRuntimeTypeInfo(Array(2), [J.JSDouble]);
        axes = H.setRuntimeTypeInfo(Array(2), [J.JSInt]);
        if (J.abs$0$n(J.get$x$x(this.nn)) > J.abs$0$n(J.get$y$x(this.nn)) && J.abs$0$n(J.get$x$x(this.nn)) > J.abs$0$n(J.get$z$x(this.nn))) {
          axes[0] = 1;
          axes[1] = 2;
          t3 = 1;
        } else {
          if (J.abs$0$n(J.get$y$x(this.nn)) > J.abs$0$n(J.get$z$x(this.nn))) {
            axes[0] = 0;
            axes[1] = 2;
          } else {
            axes[0] = 0;
            axes[1] = 1;
          }
          t3 = 0;
        }
        $A[0] = J.$index$asx(this.dpdu, t3);
        $A[1] = J.$index$asx(this.dpdv, axes[0]);
        $A[2] = J.$index$asx(this.dpdu, axes[1]);
        $A[3] = J.$index$asx(this.dpdv, axes[1]);
        t3 = axes[0];
        t4 = t1.length;
        if (t3 >>> 0 !== t3 || t3 >= t4)
          return H.ioore(t1, t3);
        Bx[0] = t1[t3] - this.p.$index(0, t3);
        t3 = axes[1];
        if (t3 >>> 0 !== t3 || t3 >= t4)
          return H.ioore(t1, t3);
        Bx[1] = t1[t3] - this.p.$index(0, t3);
        t3 = axes[0];
        t1 = t2.length;
        if (t3 >>> 0 !== t3 || t3 >= t1)
          return H.ioore(t2, t3);
        By[0] = t2[t3] - this.p.$index(0, t3);
        t3 = axes[1];
        if (t3 >>> 0 !== t3 || t3 >= t1)
          return H.ioore(t2, t3);
        By[1] = t2[t3] - this.p.$index(0, t3);
        _du = [0];
        _dv = [0];
        if (!G.SolveLinearSystem2x2($A, Bx, _du, _dv)) {
          this.dudx = 0;
          this.dvdx = 0;
        } else {
          this.dudx = _du[0];
          this.dvdx = _dv[0];
        }
        if (!G.SolveLinearSystem2x2($A, By, _du, _dv)) {
          this.dudy = 0;
          this.dvdy = 0;
        } else {
          this.dudy = _du[0];
          this.dvdy = _dv[0];
        }
      } else {
        this.dvdx = 0;
        this.dudx = 0;
        this.dvdy = 0;
        this.dudy = 0;
        this.dpdx = G.Vector$(0, 0, 0);
        this.dpdy = G.Vector$(0, 0, 0);
      }
    },
    DifferentialGeometry$from$1: function(other) {
      var t1 = other.p;
      this.p = new G.Point(new Float32Array(H._ensureNativeList(t1.get$data(t1))));
      this.nn = new G.Normal(new Float32Array(H._ensureNativeList(J.get$data$x(other.nn))));
      this.u = other.u;
      this.v = other.v;
      this.shape = other.shape;
      this.dpdu = new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(other.dpdu))));
      this.dpdv = new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(other.dpdv))));
      this.dndu = new G.Normal(new Float32Array(H._ensureNativeList(other.dndu.data)));
      this.dndv = new G.Normal(new Float32Array(H._ensureNativeList(other.dndv.data)));
      this.dpdx = new G.Vector(new Float32Array(H._ensureNativeList(other.dpdx.data)));
      this.dpdy = new G.Vector(new Float32Array(H._ensureNativeList(other.dpdy.data)));
      this.dudx = other.dudx;
      this.dvdx = other.dvdx;
      this.dudy = other.dudy;
      this.dvdy = other.dvdy;
    },
    static: {DifferentialGeometry$: function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = new G.Point(new Float32Array(3));
        t1.Vector$3(0, 0, 0);
        t2 = new G.Normal(new Float32Array(3));
        t2.Vector$3(0, 0, 0);
        t3 = G.Vector$(0, 0, 0);
        t4 = G.Vector$(0, 0, 0);
        t5 = new G.Normal(new Float32Array(3));
        t5.Vector$3(0, 0, 0);
        t6 = new G.Normal(new Float32Array(3));
        t6.Vector$3(0, 0, 0);
        return new G.DifferentialGeometry(t1, t2, 0, 0, null, t3, t4, t5, t6, G.Vector$(0, 0, 0), G.Vector$(0, 0, 0), 0, 0, 0, 0);
      }}
  },
  Film: {
    "^": "Object;xResolution<,yResolution<,splatScale?"
  },
  Filter: {
    "^": "Object;xWidth<,yWidth<,invXWidth<,invYWidth<"
  },
  Integrator: {
    "^": "Object;",
    preprocess$3: function(scene, camera, renderer) {
    },
    requestSamples$3: function(sampler, sample, scene) {
    }
  },
  Intersection: {
    "^": "Object;dg<,primitive,worldToObject<,objectToWorld<,shapeId<,primitiveId@,rayEpsilon<",
    copy$1: function(other) {
      this.dg = other.get$dg();
      this.primitive = other.primitive;
      this.worldToObject = other.worldToObject;
      this.objectToWorld = other.objectToWorld;
      this.shapeId = other.shapeId;
      this.primitiveId = other.primitiveId;
      this.rayEpsilon = other.rayEpsilon;
    },
    getBSDF$1: function(ray) {
      this.dg.computeDifferentials$1(ray);
      return this.primitive.getBSDF$2(this.dg, this.objectToWorld);
    },
    getBSSRDF$1: function(ray) {
      this.dg.computeDifferentials$1(ray);
      return this.primitive.getBSSRDF$2(this.dg, this.objectToWorld);
    },
    Le$1: function(wo) {
      var area, t1;
      area = this.primitive.areaLight;
      if (area != null) {
        t1 = this.dg;
        t1 = area.L$3(t1.p, t1.nn, wo);
      } else
        t1 = G.Spectrum_Spectrum(0);
      return t1;
    },
    Intersection$0: function() {
      this.primitive = null;
      this.shapeId = 0;
      this.primitiveId = 0;
      this.rayEpsilon = 0;
    },
    static: {Intersection$: function() {
        var t1 = new G.Intersection(G.DifferentialGeometry$(), null, null, null, null, null, null);
        t1.Intersection$0();
        return t1;
      }}
  },
  KdTree: {
    "^": "Object;nodes,nodeData,nNodes,nextFreeNode",
    _core0$_recursiveBuild$5: function(nodeNum, start, end, data, buildNodes) {
      var t1, t2, bound, i, t3, splitAxis, splitPos;
      t1 = J.getInterceptor$ns(start);
      if (J.$eq(t1.$add(start, 1), end)) {
        t1 = this.nodes;
        if (nodeNum < 0 || nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum] = new G._KdNode(null, 3, false, 536870911);
        t1 = this.nodeData;
        if (start >>> 0 !== start || start >= buildNodes.length)
          return H.ioore(buildNodes, start);
        t2 = buildNodes[start];
        if (t2 >>> 0 !== t2 || t2 >= data.length)
          return H.ioore(data, t2);
        t2 = data[t2];
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum] = t2;
        return;
      }
      bound = G.BBox$(null, null);
      for (t2 = buildNodes.length, i = start; J.$lt$n(i, end); ++i) {
        if (i >>> 0 !== i || i >= t2)
          return H.ioore(buildNodes, i);
        t3 = buildNodes[i];
        if (t3 >>> 0 !== t3 || t3 >= data.length)
          return H.ioore(data, t3);
        t3 = J.get$p$x(data[t3]);
        bound = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(bound.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(bound.pMax.data)))).unionPoint$1(t3);
      }
      splitAxis = bound.maximumExtent$0();
      splitPos = J.$tdiv$n(t1.$add(start, end), 2);
      G.nth_element(buildNodes, start, splitPos, end, new G._CompareNode(data, splitAxis));
      t3 = this.nodes;
      if (splitPos >>> 0 !== splitPos || splitPos >= t2)
        return H.ioore(buildNodes, splitPos);
      t2 = buildNodes[splitPos];
      if (t2 >>> 0 !== t2 || t2 >= data.length)
        return H.ioore(data, t2);
      t2 = J.$index$asx(J.get$p$x(data[t2]), splitAxis);
      if (nodeNum < 0 || nodeNum >= t3.length)
        return H.ioore(t3, nodeNum);
      t3[nodeNum] = new G._KdNode(t2, splitAxis, false, 536870911);
      t2 = this.nodeData;
      t3 = buildNodes[splitPos];
      if (t3 >>> 0 !== t3 || t3 >= data.length)
        return H.ioore(data, t3);
      t3 = data[t3];
      if (nodeNum >= t2.length)
        return H.ioore(t2, nodeNum);
      t2[nodeNum] = t3;
      if (t1.$lt(start, splitPos)) {
        t1 = this.nodes;
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        t1[nodeNum].set$hasLeftChild(true);
        this._core0$_recursiveBuild$5(this.nextFreeNode++, start, splitPos, data, buildNodes);
      }
      t1 = splitPos + 1;
      if (typeof end !== "number")
        return H.iae(end);
      if (t1 < end) {
        t2 = this.nodes;
        if (nodeNum >= t2.length)
          return H.ioore(t2, nodeNum);
        t2[nodeNum].set$rightChild(this.nextFreeNode++);
        t2 = this.nodes;
        if (nodeNum >= t2.length)
          return H.ioore(t2, nodeNum);
        this._core0$_recursiveBuild$5(t2[nodeNum].get$rightChild(), t1, end, data, buildNodes);
      }
    },
    _core0$_lookup$4: function(nodeNum, p, process, maxDistSquared) {
      var t1, node, axis, dist2, t2;
      t1 = this.nodes;
      if (nodeNum < 0 || nodeNum >= t1.length)
        return H.ioore(t1, nodeNum);
      node = t1[nodeNum];
      axis = node.get$splitAxis();
      if (!J.$eq(axis, 3)) {
        t1 = J.getInterceptor$asx(p);
        dist2 = J.$mul$ns(J.$sub$n(t1.$index(p, axis), node.get$splitPos()), J.$sub$n(t1.$index(p, axis), node.get$splitPos()));
        if (J.$le$n(t1.$index(p, axis), node.get$splitPos())) {
          if (node.get$hasLeftChild())
            this._core0$_lookup$4(nodeNum + 1, p, process, maxDistSquared);
          if (0 >= maxDistSquared.length)
            return H.ioore(maxDistSquared, 0);
          if (J.$lt$n(dist2, maxDistSquared[0])) {
            t1 = node.rightChild;
            t2 = this.nNodes;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = t1 < t2;
            t1 = t2;
          } else
            t1 = false;
          if (t1)
            this._core0$_lookup$4(node.rightChild, p, process, maxDistSquared);
        } else {
          t1 = node.get$rightChild();
          t2 = this.nNodes;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 < t2)
            this._core0$_lookup$4(node.rightChild, p, process, maxDistSquared);
          if (0 >= maxDistSquared.length)
            return H.ioore(maxDistSquared, 0);
          if (J.$lt$n(dist2, maxDistSquared[0]) && node.hasLeftChild)
            this._core0$_lookup$4(nodeNum + 1, p, process, maxDistSquared);
        }
      }
      t1 = this.nodeData;
      if (nodeNum >= t1.length)
        return H.ioore(t1, nodeNum);
      dist2 = J.$sub$n(p, J.get$p$x(t1[nodeNum])).lengthSquared$0();
      if (0 >= maxDistSquared.length)
        return H.ioore(maxDistSquared, 0);
      t1 = maxDistSquared[0];
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (dist2 < t1) {
        t1 = this.nodeData;
        if (nodeNum >= t1.length)
          return H.ioore(t1, nodeNum);
        process.call$4(p, t1[nodeNum], dist2, maxDistSquared);
      }
    },
    KdTree$1: function(data) {
      var t1, buildNodes, t2, i;
      t1 = data.length;
      this.nNodes = t1;
      this.nextFreeNode = 1;
      this.nodes = H.setRuntimeTypeInfo(Array(t1), [G._KdNode]);
      t1 = this.nNodes;
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.nodeData = Array(t1);
      buildNodes = H.setRuntimeTypeInfo(Array(t1), [J.JSInt]);
      t1 = this.nNodes;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = buildNodes.length;
      i = 0;
      for (; i < t1; ++i) {
        if (i >= t2)
          return H.ioore(buildNodes, i);
        buildNodes[i] = i;
      }
      this._core0$_recursiveBuild$5(0, 0, t1, data, buildNodes);
    },
    static: {KdTree$: function(data) {
        var t1 = new G.KdTree(null, null, null, null);
        t1.KdTree$1(data);
        return t1;
      }}
  },
  _CompareNode: {
    "^": "Object:8;data>,axis?",
    call$2: function(d1, d2) {
      var t1, t2;
      t1 = this.data;
      if (d1 >>> 0 !== d1 || d1 >= t1.length)
        return H.ioore(t1, d1);
      t1 = J.$index$asx(J.get$p$x(t1[d1]), this.axis);
      t2 = this.data;
      if (d2 >>> 0 !== d2 || d2 >= t2.length)
        return H.ioore(t2, d2);
      t2 = J.$eq(t1, J.$index$asx(J.get$p$x(t2[d2]), this.axis));
      t1 = this.data;
      if (t2) {
        if (d1 >= t1.length)
          return H.ioore(t1, d1);
        t1 = J.get$hashCode$(t1[d1]);
        t2 = this.data;
        if (d2 >= t2.length)
          return H.ioore(t2, d2);
        t2 = J.$lt$n(t1, J.get$hashCode$(t2[d2]));
        t1 = t2;
      } else {
        if (d1 >= t1.length)
          return H.ioore(t1, d1);
        t1 = J.$index$asx(J.get$p$x(t1[d1]), this.axis);
        t2 = this.data;
        if (d2 >= t2.length)
          return H.ioore(t2, d2);
        t2 = J.$lt$n(t1, J.$index$asx(J.get$p$x(t2[d2]), this.axis));
        t1 = t2;
      }
      return t1;
    }
  },
  _KdNode: {
    "^": "Object;splitPos<,splitAxis<,hasLeftChild@,rightChild@"
  },
  Light: {
    "^": "Object;nSamples<",
    Le$1: function(r) {
      return G.Spectrum_Spectrum(0);
    },
    shProject$8: function(p, pEpsilon, lmax, scene, computeLightVisibility, time, rng, coeffs) {
      var t1, len, t2, i, t3, ns, scramble1D, scramble2D, Ylm, u, pdf, t4, t5, t6, t7, t8, wi, vis, Li, hit, j;
      t1 = J.getInterceptor$ns(lmax);
      len = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
      if (typeof len !== "number")
        return H.iae(len);
      t2 = coeffs.length;
      i = 0;
      for (; i < len; ++i) {
        t3 = G.Spectrum_Spectrum(0);
        if (i >= t2)
          return H.ioore(coeffs, i);
        coeffs[i] = t3;
      }
      ns = G.RoundUpPow2(this.nSamples);
      scramble1D = rng.random.nextInt$1(4294967295);
      scramble2D = [rng.random.nextInt$1(4294967295), rng.random.nextInt$1(4294967295)];
      t3 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
      if (typeof t3 !== "number" || Math.floor(t3) !== t3)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t3)));
      Ylm = new Float32Array(t3);
      u = [0, 0];
      pdf = [0];
      for (t3 = scene.aggregate, t4 = Ylm.length, i = 0; i < ns; ++i) {
        u[0] = G.VanDerCorput(i, scramble2D[0]);
        t5 = G.Sobol2(i, scramble2D[1]);
        u[1] = t5;
        t6 = u[0];
        t7 = G.VanDerCorput(i, scramble1D);
        t8 = new Float32Array(2);
        if (0 >= 2)
          return H.ioore(t8, 0);
        t8[0] = t6;
        if (1 >= 2)
          return H.ioore(t8, 1);
        t8[1] = t5;
        t5 = new Float32Array(3);
        wi = new G.Vector(t5);
        if (0 >= 3)
          return H.ioore(t5, 0);
        t5[0] = 0;
        if (1 >= 3)
          return H.ioore(t5, 1);
        t5[1] = 0;
        if (2 >= 3)
          return H.ioore(t5, 2);
        t5[2] = 0;
        vis = new G.VisibilityTester(null);
        Li = this.sampleLAtPoint$7(p, pEpsilon, new G.LightSample(t8, t7), time, wi, pdf, vis);
        if (!Li.isBlack$0())
          if (J.$gt$n(pdf[0], 0))
            if (computeLightVisibility) {
              hit = t3.intersectP$1(vis.r);
              t5 = $.get$Stats_shadowRays();
              t5.count = J.$add$ns(t5.count, 1);
              $.Stats_shadowRays = t5;
              t5 = !hit;
            } else
              t5 = true;
          else
            t5 = false;
        else
          t5 = false;
        if (t5) {
          G.SphericalHarmonics_Evaluate(wi, lmax, Ylm, 0);
          j = 0;
          while (true) {
            t5 = J.$mul$ns(t1.$add(lmax, 1), t1.$add(lmax, 1));
            if (typeof t5 !== "number")
              return H.iae(t5);
            if (!(j < t5))
              break;
            if (j >= t2)
              return H.ioore(coeffs, j);
            t5 = coeffs[j];
            if (j >= t4)
              return H.ioore(Ylm, j);
            coeffs[j] = J.$add$ns(t5, Li.$mul(0, Ylm[j]).$div(0, J.$mul$ns(pdf[0], ns)));
            ++j;
          }
        }
      }
    },
    Light$2: function(l2w, ns) {
      if (this.worldToLight.hasScale$0())
        $.Log.call$2(1, "Scaling detected in world to light transformation!\nThe system has numerous assumptions, implicit and explicit,\nthat this transform will have no scale factors in it.\nProceed at your own risk; your image may have errors or\nthe system may crash as a result of this.");
    }
  },
  AreaLight: {
    "^": "Light;"
  },
  LightSample: {
    "^": "Object;uPos,uComponent<",
    LightSample$sample$3: function(sample, offsets, n) {
      var t1, t2, t3, t4, t5;
      t1 = this.uPos;
      t2 = sample.get$twoD();
      t3 = offsets.get$posOffset();
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        return H.ioore(t2, t3);
      t4 = 2 * n;
      t3 = J.$index$asx(t2[t3], t4);
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = t3;
      t3 = sample.twoD;
      t5 = offsets.posOffset;
      if (t5 >>> 0 !== t5 || t5 >= t3.length)
        return H.ioore(t3, t5);
      t4 = J.$index$asx(t3[t5], t4 + 1);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = t4;
      t4 = sample.oneD;
      t1 = offsets.componentOffset;
      if (t1 >>> 0 !== t1 || t1 >= t4.length)
        return H.ioore(t4, t1);
      this.uComponent = J.$index$asx(t4[t1], n);
    },
    LightSample$random$1: function(rng) {
      var t1, t2, t3;
      t1 = this.uPos;
      t2 = rng.randomFloat$0();
      t3 = t1.length;
      if (0 >= t3)
        return H.ioore(t1, 0);
      t1[0] = t2;
      t2 = rng.random.nextDouble$0();
      if (1 >= t3)
        return H.ioore(t1, 1);
      t1[1] = t2;
      this.uComponent = rng.random.nextDouble$0();
    },
    static: {LightSample$sample: function(sample, offsets, n) {
        var t1 = new G.LightSample(new Float32Array(2), null);
        t1.LightSample$sample$3(sample, offsets, n);
        return t1;
      }, LightSample$random: function(rng) {
        var t1 = new G.LightSample(new Float32Array(2), null);
        t1.LightSample$random$1(rng);
        return t1;
      }}
  },
  LightSampleOffsets: {
    "^": "Object;nSamples<,componentOffset,posOffset<",
    LightSampleOffsets$2: function(nSamples, sample) {
      var t1 = this.nSamples;
      sample.n1D.push(t1);
      this.componentOffset = sample.n1D.length - 1;
      t1 = this.nSamples;
      sample.n2D.push(t1);
      this.posOffset = sample.n2D.length - 1;
    },
    static: {LightSampleOffsets$: function(nSamples, sample) {
        var t1 = new G.LightSampleOffsets(nSamples, null, null);
        t1.LightSampleOffsets$2(nSamples, sample);
        return t1;
      }}
  },
  ShapeSet: {
    "^": "Object;shapes,area<,areas,areaDistribution",
    sample$3: function(ls, Ns, p) {
      var t1, t2, t3, sn, t4, t5, r, rayEps, thit, dg, anyHit, i;
      if (p == null) {
        t1 = this.areaDistribution.sampleDiscrete$2(ls.get$uComponent(), null);
        t2 = this.shapes;
        t3 = t2.length;
        sn = C.JSNumber_methods.$mod(t1, t3);
        if (sn >>> 0 !== sn || sn >= t3)
          return H.ioore(t2, sn);
        t2 = t2[sn];
        t3 = ls.uPos;
        t1 = t3.length;
        if (0 >= t1)
          return H.ioore(t3, 0);
        t4 = t3[0];
        if (1 >= t1)
          return H.ioore(t3, 1);
        return t2.sample$3(t4, t3[1], Ns);
      }
      t1 = this.areaDistribution.sampleDiscrete$2(ls.get$uComponent(), null);
      t2 = this.shapes;
      t3 = t2.length;
      sn = C.JSNumber_methods.$mod(t1, t3);
      if (sn >>> 0 !== sn || sn >= t3)
        return H.ioore(t2, sn);
      t3 = t2[sn];
      t1 = ls.uPos;
      t4 = t1.length;
      if (0 >= t4)
        return H.ioore(t1, 0);
      t5 = t1[0];
      if (1 >= t4)
        return H.ioore(t1, 1);
      r = G.Ray$(p, J.$sub$n(t3.sample2$4(p, t5, t1[1], Ns), p), 0.001, 1 / 0, 0, 0);
      rayEps = [0];
      thit = [1];
      dg = G.DifferentialGeometry$();
      for (anyHit = false, i = 0; i < t2.length; ++i)
        anyHit = t2[i].intersect$4(r, thit, rayEps, dg) || anyHit;
      if (anyHit)
        Ns.copy$1(dg.nn);
      t1 = thit[0];
      return new G.Point(new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(r.origin, J.$mul$ns(r.direction, t1))))));
    },
    sample$2: function(ls, Ns) {
      return this.sample$3(ls, Ns, null);
    },
    pdf$2: function(p, wi) {
      var t1, t2, pdf, i, t3;
      if (wi != null) {
        for (t1 = this.shapes, t2 = this.areas, pdf = 0, i = 0; i < t1.length; ++i) {
          if (i >= t2.length)
            return H.ioore(t2, i);
          t3 = J.$mul$ns(t2[i], t1[i].pdf2$2(p, wi));
          if (typeof t3 !== "number")
            return H.iae(t3);
          pdf += t3;
        }
        t1 = this.area;
        if (typeof t1 !== "number")
          return H.iae(t1);
        return pdf / t1;
      }
      for (t1 = this.shapes, t2 = this.areas, pdf = 0, i = 0; i < t1.length; ++i) {
        if (i >= t2.length)
          return H.ioore(t2, i);
        t3 = J.$mul$ns(t2[i], t1[i].pdf$1(p));
        if (typeof t3 !== "number")
          return H.iae(t3);
        pdf += t3;
      }
      t1 = this.area;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return pdf / t1;
    },
    pdf$1: function(p) {
      return this.pdf$2(p, null);
    },
    area$0: function() {
      return this.area.call$0();
    },
    ShapeSet$1: function(s) {
      var todo, t1, sh, t2, i, a, t3;
      todo = [];
      todo.push(s);
      for (t1 = this.shapes; todo.length !== 0;) {
        sh = C.JSArray_methods.get$last(todo);
        if (0 >= todo.length)
          return H.ioore(todo, 0);
        todo.pop();
        if (sh.canIntersect$0())
          t1.push(sh);
        else
          sh.refine$1(todo);
      }
      t2 = t1.length;
      if (t2 > 64) {
        t2 = "Area light geometry turned into " + t2 + " shapes; may be very inefficient.";
        $.Log.call$2(1, t2);
      }
      this.area = 0;
      for (t2 = this.areas, i = 0; i < t1.length; ++i) {
        a = t1[i].area$0();
        t2.push(a);
        t3 = this.area;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof a !== "number")
          return H.iae(a);
        this.area = t3 + a;
      }
      this.areaDistribution = G.Distribution1D$(t2, t2.length);
    },
    static: {ShapeSet$: function(s) {
        var t1 = new G.ShapeSet([], null, [], null);
        t1.ShapeSet$1(s);
        return t1;
      }}
  },
  VisibilityTester: {
    "^": "Object;r"
  },
  Material: {
    "^": "Object;",
    getBSSRDF$2: function(dgGeom, dgShading) {
      return;
    }
  },
  Matrix4x4: {
    "^": "Object;data>",
    $eq: function(_, m2) {
      var t1, t2, t3, i;
      if (m2 == null)
        return false;
      for (t1 = this.data, t2 = t1.length, t3 = J.getInterceptor$x(m2), i = 0; i < 16; ++i) {
        if (i >= t2)
          return H.ioore(t1, i);
        if (t1[i] !== J.$index$asx(t3.get$data(m2), i))
          return false;
      }
      return true;
    },
    copy$1: function(other) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = J.getInterceptor$x(other);
      t3 = J.$index$asx(t2.get$data(other), 0);
      t4 = t1.length;
      if (0 >= t4)
        return H.ioore(t1, 0);
      t1[0] = t3;
      t3 = J.$index$asx(t2.get$data(other), 1);
      if (1 >= t4)
        return H.ioore(t1, 1);
      t1[1] = t3;
      t3 = J.$index$asx(t2.get$data(other), 2);
      if (2 >= t4)
        return H.ioore(t1, 2);
      t1[2] = t3;
      t3 = J.$index$asx(t2.get$data(other), 3);
      if (3 >= t4)
        return H.ioore(t1, 3);
      t1[3] = t3;
      t3 = J.$index$asx(t2.get$data(other), 4);
      if (4 >= t4)
        return H.ioore(t1, 4);
      t1[4] = t3;
      t3 = J.$index$asx(t2.get$data(other), 5);
      if (5 >= t4)
        return H.ioore(t1, 5);
      t1[5] = t3;
      t3 = J.$index$asx(t2.get$data(other), 6);
      if (6 >= t4)
        return H.ioore(t1, 6);
      t1[6] = t3;
      t3 = J.$index$asx(t2.get$data(other), 7);
      if (7 >= t4)
        return H.ioore(t1, 7);
      t1[7] = t3;
      t3 = J.$index$asx(t2.get$data(other), 8);
      if (8 >= t4)
        return H.ioore(t1, 8);
      t1[8] = t3;
      t3 = J.$index$asx(t2.get$data(other), 9);
      if (9 >= t4)
        return H.ioore(t1, 9);
      t1[9] = t3;
      t3 = J.$index$asx(t2.get$data(other), 10);
      if (10 >= t4)
        return H.ioore(t1, 10);
      t1[10] = t3;
      t3 = J.$index$asx(t2.get$data(other), 11);
      if (11 >= t4)
        return H.ioore(t1, 11);
      t1[11] = t3;
      t3 = J.$index$asx(t2.get$data(other), 12);
      if (12 >= t4)
        return H.ioore(t1, 12);
      t1[12] = t3;
      t3 = J.$index$asx(t2.get$data(other), 13);
      if (13 >= t4)
        return H.ioore(t1, 13);
      t1[13] = t3;
      t3 = J.$index$asx(t2.get$data(other), 14);
      if (14 >= t4)
        return H.ioore(t1, 14);
      t1[14] = t3;
      t2 = J.$index$asx(t2.get$data(other), 15);
      if (15 >= t4)
        return H.ioore(t1, 15);
      t1[15] = t2;
      return this;
    },
    $index: function(_, index) {
      var t1 = this.data;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this.data;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = value;
      return value;
    },
    invert$0: function() {
      var t1, t2, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, det, invDet, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      n11 = t1[0];
      if (4 >= t2)
        return H.ioore(t1, 4);
      n12 = t1[4];
      if (8 >= t2)
        return H.ioore(t1, 8);
      n13 = t1[8];
      if (12 >= t2)
        return H.ioore(t1, 12);
      n14 = t1[12];
      n21 = t1[1];
      n22 = t1[5];
      n23 = t1[9];
      if (13 >= t2)
        return H.ioore(t1, 13);
      n24 = t1[13];
      n31 = t1[2];
      n32 = t1[6];
      n33 = t1[10];
      if (14 >= t2)
        return H.ioore(t1, 14);
      n34 = t1[14];
      n41 = t1[3];
      n42 = t1[7];
      n43 = t1[11];
      if (15 >= t2)
        return H.ioore(t1, 15);
      n44 = t1[15];
      t2 = n14 * n23;
      t3 = t2 * n32;
      t4 = n13 * n24;
      t5 = t4 * n32;
      t6 = n14 * n22;
      t7 = t6 * n33;
      t8 = n12 * n24;
      t9 = t8 * n33;
      t10 = n13 * n22;
      t11 = t10 * n34;
      t12 = n12 * n23;
      t13 = t12 * n34;
      t14 = t2 * n31;
      t15 = t4 * n31;
      t16 = n14 * n21;
      t17 = t16 * n33;
      t18 = n11 * n24;
      t19 = t18 * n33;
      t20 = n13 * n21;
      t21 = t20 * n34;
      t22 = n11 * n23;
      t23 = t22 * n34;
      t24 = t6 * n31;
      t25 = t8 * n31;
      t26 = t16 * n32;
      t27 = t18 * n32;
      t28 = n12 * n21;
      t29 = t28 * n34;
      t30 = n11 * n22;
      t31 = t30 * n34;
      t32 = t10 * n31;
      t33 = t12 * n31;
      t34 = t20 * n32;
      t35 = t22 * n32;
      t36 = t28 * n33;
      t37 = t30 * n33;
      det = t3 * n41 - t5 * n41 - t7 * n41 + t9 * n41 + t11 * n41 - t13 * n41 - t14 * n42 + t15 * n42 + t17 * n42 - t19 * n42 - t21 * n42 + t23 * n42 + t24 * n43 - t25 * n43 - t26 * n43 + t27 * n43 + t29 * n43 - t31 * n43 - t32 * n44 + t33 * n44 + t34 * n44 - t35 * n44 - t36 * n44 + t37 * n44;
      if (det === 0)
        return this;
      invDet = 1 / det;
      t38 = n23 * n34;
      t39 = n24 * n33;
      t40 = n24 * n32;
      t41 = n22 * n34;
      t42 = n23 * n32;
      t43 = n22 * n33;
      t1[0] = (t38 * n42 - t39 * n42 + t40 * n43 - t41 * n43 - t42 * n44 + t43 * n44) * invDet;
      t44 = n14 * n33;
      t45 = n13 * n34;
      t46 = n14 * n32;
      t47 = n12 * n34;
      t48 = n13 * n32;
      t49 = n12 * n33;
      t1[4] = (t44 * n42 - t45 * n42 - t46 * n43 + t47 * n43 + t48 * n44 - t49 * n44) * invDet;
      t1[8] = (t4 * n42 - t2 * n42 + t6 * n43 - t8 * n43 - t10 * n44 + t12 * n44) * invDet;
      t1[12] = (t3 - t5 - t7 + t9 + t11 - t13) * invDet;
      t13 = n24 * n31;
      t11 = n21 * n34;
      t9 = n23 * n31;
      t7 = n21 * n33;
      t1[1] = (t39 * n41 - t38 * n41 - t13 * n43 + t11 * n43 + t9 * n44 - t7 * n44) * invDet;
      t38 = n14 * n31;
      t39 = n11 * n34;
      t5 = n13 * n31;
      t3 = n11 * n33;
      t1[5] = (t45 * n41 - t44 * n41 + t38 * n43 - t39 * n43 - t5 * n44 + t3 * n44) * invDet;
      t1[9] = (t2 * n41 - t4 * n41 - t16 * n43 + t18 * n43 + t20 * n44 - t22 * n44) * invDet;
      t1[13] = (t15 - t14 + t17 - t19 - t21 + t23) * invDet;
      t23 = n22 * n31;
      t21 = n21 * n32;
      t1[2] = (t41 * n41 - t40 * n41 + t13 * n42 - t11 * n42 - t23 * n44 + t21 * n44) * invDet;
      t11 = n12 * n31;
      t13 = n11 * n32;
      t1[6] = (t46 * n41 - t47 * n41 - t38 * n42 + t39 * n42 + t11 * n44 - t13 * n44) * invDet;
      t1[10] = (t8 * n41 - t6 * n41 + t16 * n42 - t18 * n42 - t28 * n44 + t30 * n44) * invDet;
      t1[14] = (t24 - t25 - t26 + t27 + t29 - t31) * invDet;
      t1[3] = (t42 * n41 - t43 * n41 - t9 * n42 + t7 * n42 + t23 * n43 - t21 * n43) * invDet;
      t1[7] = (t49 * n41 - t48 * n41 + t5 * n42 - t3 * n42 - t11 * n43 + t13 * n43) * invDet;
      t1[11] = (t10 * n41 - t12 * n41 - t20 * n42 + t22 * n42 + t28 * n43 - t30 * n43) * invDet;
      t1[15] = (t33 - t32 + t34 - t35 - t36 + t37) * invDet;
      return this;
    },
    toString$0: function(_) {
      var t1, t2, t3;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = H.S(t1[0]) + " ";
      if (1 >= t2)
        return H.ioore(t1, 1);
      t3 = t3 + H.S(t1[1]) + " ";
      if (2 >= t2)
        return H.ioore(t1, 2);
      t3 = t3 + H.S(t1[2]) + " ";
      if (3 >= t2)
        return H.ioore(t1, 3);
      t3 = t3 + H.S(t1[3]) + " ";
      if (4 >= t2)
        return H.ioore(t1, 4);
      t3 = t3 + H.S(t1[4]) + " ";
      if (5 >= t2)
        return H.ioore(t1, 5);
      t3 = t3 + H.S(t1[5]) + " ";
      if (6 >= t2)
        return H.ioore(t1, 6);
      t3 = t3 + H.S(t1[6]) + " ";
      if (7 >= t2)
        return H.ioore(t1, 7);
      t3 = t3 + H.S(t1[7]) + " ";
      if (8 >= t2)
        return H.ioore(t1, 8);
      t3 = t3 + H.S(t1[8]) + " ";
      if (9 >= t2)
        return H.ioore(t1, 9);
      t3 = t3 + H.S(t1[9]) + " ";
      if (10 >= t2)
        return H.ioore(t1, 10);
      t3 = t3 + H.S(t1[10]) + " ";
      if (11 >= t2)
        return H.ioore(t1, 11);
      t3 = t3 + H.S(t1[11]) + " ";
      if (12 >= t2)
        return H.ioore(t1, 12);
      t3 = t3 + H.S(t1[12]) + " ";
      if (13 >= t2)
        return H.ioore(t1, 13);
      t3 = t3 + H.S(t1[13]) + " ";
      if (14 >= t2)
        return H.ioore(t1, 14);
      t3 = t3 + H.S(t1[14]) + " ";
      if (15 >= t2)
        return H.ioore(t1, 15);
      return t3 + H.S(t1[15]);
    },
    Matrix4x4$values$16: function(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
      var t1, t2;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = m11;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = m12;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = m13;
      if (3 >= t2)
        return H.ioore(t1, 3);
      t1[3] = m14;
      if (4 >= t2)
        return H.ioore(t1, 4);
      t1[4] = m21;
      if (5 >= t2)
        return H.ioore(t1, 5);
      t1[5] = m22;
      if (6 >= t2)
        return H.ioore(t1, 6);
      t1[6] = m23;
      if (7 >= t2)
        return H.ioore(t1, 7);
      t1[7] = m24;
      if (8 >= t2)
        return H.ioore(t1, 8);
      t1[8] = m31;
      if (9 >= t2)
        return H.ioore(t1, 9);
      t1[9] = m32;
      if (10 >= t2)
        return H.ioore(t1, 10);
      t1[10] = m33;
      if (11 >= t2)
        return H.ioore(t1, 11);
      t1[11] = m34;
      if (12 >= t2)
        return H.ioore(t1, 12);
      t1[12] = m41;
      if (13 >= t2)
        return H.ioore(t1, 13);
      t1[13] = m42;
      if (14 >= t2)
        return H.ioore(t1, 14);
      t1[14] = m43;
      if (15 >= t2)
        return H.ioore(t1, 15);
      t1[15] = m44;
    },
    Matrix4x4$0: function() {
      var t1, t2;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = 1;
      if (5 >= t2)
        return H.ioore(t1, 5);
      t1[5] = 1;
      if (10 >= t2)
        return H.ioore(t1, 10);
      t1[10] = 1;
      if (15 >= t2)
        return H.ioore(t1, 15);
      t1[15] = 1;
    },
    static: {"^": "Matrix4x4_IDENTITY", Matrix4x4$: function() {
        var t1 = new G.Matrix4x4(new Float32Array(16));
        t1.Matrix4x4$0();
        return t1;
      }, Matrix4x4$values: function(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
        var t1 = new G.Matrix4x4(new Float32Array(16));
        t1.Matrix4x4$values$16(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44);
        return t1;
      }, Matrix4x4_Transpose: function(m) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
        t1 = m.data;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (4 >= t2)
          return H.ioore(t1, 4);
        t4 = t1[4];
        if (8 >= t2)
          return H.ioore(t1, 8);
        t5 = t1[8];
        if (12 >= t2)
          return H.ioore(t1, 12);
        t6 = t1[12];
        t7 = t1[1];
        t8 = t1[5];
        t9 = t1[9];
        if (13 >= t2)
          return H.ioore(t1, 13);
        t10 = t1[13];
        t11 = t1[2];
        t12 = t1[6];
        t13 = t1[10];
        if (14 >= t2)
          return H.ioore(t1, 14);
        t14 = t1[14];
        t15 = t1[3];
        t16 = t1[7];
        t17 = t1[11];
        if (15 >= t2)
          return H.ioore(t1, 15);
        return G.Matrix4x4$values(t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t1[15]);
      }, Matrix4x4_Mul: function(m1, m2) {
        var r, t1, t2, t3, t4, t5, t6, i, k, t7, t8, t9, j, t10, t11, t12, t13, t14, t15, t16, t17, t18;
        r = G.Matrix4x4$();
        for (t1 = r.data, t2 = m1.data, t3 = t2.length, t4 = m2.data, t5 = t4.length, t6 = t1.length, i = 0, k = 0; i < 4; ++i, k += 4)
          for (t7 = k + 1, t8 = k + 2, t9 = k + 3, j = 0; j < 4; ++j) {
            t10 = k + j;
            if (k >= t3)
              return H.ioore(t2, k);
            t11 = t2[k];
            if (j >= t5)
              return H.ioore(t4, j);
            t12 = t4[j];
            if (t7 >= t3)
              return H.ioore(t2, t7);
            t13 = t2[t7];
            t14 = 4 + j;
            if (t14 >= t5)
              return H.ioore(t4, t14);
            t14 = t4[t14];
            if (t8 >= t3)
              return H.ioore(t2, t8);
            t15 = t2[t8];
            t16 = 8 + j;
            if (t16 >= t5)
              return H.ioore(t4, t16);
            t16 = t4[t16];
            if (t9 >= t3)
              return H.ioore(t2, t9);
            t17 = t2[t9];
            t18 = 12 + j;
            if (t18 >= t5)
              return H.ioore(t4, t18);
            t18 = t4[t18];
            if (t10 >= t6)
              return H.ioore(t1, t10);
            t1[t10] = t11 * t12 + t13 * t14 + t15 * t16 + t17 * t18;
          }
        return r;
      }}
  },
  MIPMap: {
    "^": "Object;doTrilinear,maxAnisotropy,wrapMode,pyramid,width>,height>,levels",
    texel$3: function(level, s, t) {
      var t1, l, t2, a, a0;
      t1 = this.pyramid;
      if (level >>> 0 !== level || level >= t1.length)
        return H.ioore(t1, level);
      l = t1[level];
      switch (this.wrapMode) {
        case 0:
          t1 = J.getInterceptor$x(l);
          t2 = t1.get$width(l);
          if (typeof t2 !== "number")
            return H.iae(t2);
          a = s - C.JSInt_methods.$tdiv(s, t2) * t2;
          if (a < 0)
            a += t2;
          t1 = t1.get$height(l);
          if (typeof t1 !== "number")
            return H.iae(t1);
          a0 = t - C.JSInt_methods.$tdiv(t, t1) * t1;
          if (a0 < 0)
            a0 += t1;
          t = a0;
          s = a;
          break;
        case 2:
          t1 = J.getInterceptor$x(l);
          s = C.JSInt_methods.clamp$2(s, 0, J.$sub$n(t1.get$width(l), 1));
          t = C.JSInt_methods.clamp$2(t, 0, J.$sub$n(t1.get$height(l), 1));
          break;
        case 1:
          if (s >= 0) {
            t1 = J.getInterceptor$x(l);
            t2 = t1.get$width(l);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(s >= t2))
              if (t >= 0) {
                t1 = t1.get$height(l);
                if (typeof t1 !== "number")
                  return H.iae(t1);
                t1 = t >= t1;
              } else
                t1 = true;
            else
              t1 = true;
          } else
            t1 = true;
          if (t1)
            return G.Spectrum_Spectrum(0);
          break;
      }
      t1 = J.getInterceptor$x(l);
      t2 = t1.get$width(l);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1.$index(l, t * t2 + s);
    },
    lookup$3: function(s, t, width) {
      var t1, t2, t3, level, iLevel, delta;
      t1 = this.levels;
      if (typeof t1 !== "number")
        return t1.$sub();
      t2 = P.max(width, 1e-8);
      t2 = Math.log(t2);
      t3 = $.get$_invLog2();
      if (typeof t3 !== "number")
        return H.iae(t3);
      level = t1 - 1 + t2 * t3;
      if (level < 0)
        return this.triangle$3(0, s, t);
      else {
        t1 = this.levels;
        if (typeof t1 !== "number")
          return t1.$sub();
        --t1;
        if (level >= t1)
          return this.texel$3(t1, 0, 0);
        else {
          iLevel = C.JSNumber_methods.toInt$0(Math.floor(level));
          delta = level - iLevel;
          return J.$add$ns(J.$mul$ns(this.triangle$3(iLevel, s, t), 1 - delta), J.$mul$ns(this.triangle$3(iLevel + 1, s, t), delta));
        }
      }
    },
    lookup$2: function(s, t) {
      return this.lookup$3(s, t, 0);
    },
    lookup2$6: function(s, t, ds0, dt0, ds1, dt1) {
      var t0, t1, majorLength, t2, t3, minorLength, scale, lod, ilod, d;
      if (this.doTrilinear === true)
        return this.lookup$3(s, t, 2 * P.max(P.max(J.abs$0$n(ds0), J.abs$0$n(dt0)), P.max(J.abs$0$n(ds1), J.abs$0$n(dt1))));
      if (J.$lt$n(J.$add$ns(J.$mul$ns(ds0, ds0), J.$mul$ns(dt0, dt0)), J.$add$ns(J.$mul$ns(ds1, ds1), J.$mul$ns(dt1, dt1)))) {
        t0 = dt1;
        dt1 = dt0;
        dt0 = t0;
        t0 = ds1;
        ds1 = ds0;
        ds0 = t0;
      }
      t1 = J.$add$ns(J.$mul$ns(ds0, ds0), J.$mul$ns(dt0, dt0));
      if (typeof t1 !== "number")
        H.throwExpression(P.ArgumentError$(t1));
      majorLength = Math.sqrt(t1);
      t1 = J.getInterceptor$ns(ds1);
      t2 = J.getInterceptor$ns(dt1);
      t3 = J.$add$ns(t1.$mul(ds1, ds1), t2.$mul(dt1, dt1));
      if (typeof t3 !== "number")
        H.throwExpression(P.ArgumentError$(t3));
      minorLength = Math.sqrt(t3);
      t3 = this.maxAnisotropy;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = minorLength * t3;
      if (t3 < majorLength && minorLength > 0) {
        scale = majorLength / t3;
        ds1 = t1.$mul(ds1, scale);
        dt1 = t2.$mul(dt1, scale);
        minorLength *= scale;
      }
      if (minorLength === 0)
        return this.triangle$3(0, s, t);
      t1 = this.levels;
      if (typeof t1 !== "number")
        return t1.$sub();
      t2 = Math.log(minorLength);
      t3 = $.get$_invLog2();
      if (typeof t3 !== "number")
        return H.iae(t3);
      lod = P.max(0, t1 - 1 + t2 * t3);
      ilod = C.JSNumber_methods.floor$0(lod);
      d = lod - ilod;
      return J.$add$ns(J.$mul$ns(this.EWA$7(ilod, s, t, ds0, dt0, ds1, dt1), 1 - d), J.$mul$ns(this.EWA$7(ilod + 1, s, t, ds0, dt0, ds1, dt1), d));
    },
    EWA$7: function(level, s, t, ds0, dt0, ds1, dt1) {
      var t1, $A, t2, $B, $C, invF, det, uSqrt, vSqrt, t3, s0, s1, t00, sum, it, sumWts, tt, si, ss, r2, t4, weight;
      t1 = this.levels;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (level >= t1)
        return this.texel$3(t1 - 1, 0, 0);
      t1 = this.pyramid;
      if (level < 0 || level >= t1.length)
        return H.ioore(t1, level);
      s = J.$sub$n(J.$mul$ns(s, J.get$width$x(t1[level])), 0.5);
      t1 = this.pyramid;
      if (level >= t1.length)
        return H.ioore(t1, level);
      t = J.$sub$n(J.$mul$ns(t, J.get$height$x(t1[level])), 0.5);
      t1 = this.pyramid;
      if (level >= t1.length)
        return H.ioore(t1, level);
      ds0 = J.$mul$ns(ds0, J.get$width$x(t1[level]));
      t1 = this.pyramid;
      if (level >= t1.length)
        return H.ioore(t1, level);
      dt0 = J.$mul$ns(dt0, J.get$height$x(t1[level]));
      t1 = this.pyramid;
      if (level >= t1.length)
        return H.ioore(t1, level);
      ds1 = J.$mul$ns(ds1, J.get$width$x(t1[level]));
      t1 = this.pyramid;
      if (level >= t1.length)
        return H.ioore(t1, level);
      dt1 = J.$mul$ns(dt1, J.get$height$x(t1[level]));
      $A = J.$add$ns(J.$add$ns(J.$mul$ns(dt0, dt0), J.$mul$ns(dt1, dt1)), 1);
      t1 = J.getInterceptor$ns(ds0);
      t2 = J.getInterceptor$ns(ds1);
      dt1 = J.$add$ns(t1.$mul(ds0, dt0), t2.$mul(ds1, dt1));
      if (typeof dt1 !== "number")
        return H.iae(dt1);
      $B = -2 * dt1;
      $C = J.$add$ns(J.$add$ns(t1.$mul(ds0, ds0), t2.$mul(ds1, ds1)), 1);
      t2 = J.getInterceptor$ns($A);
      t1 = J.$sub$n(t2.$mul($A, $C), $B * $B * 0.25);
      if (typeof t1 !== "number")
        return H.iae(t1);
      invF = 1 / t1;
      $A = t2.$mul($A, invF);
      $B *= invF;
      $C = J.$mul$ns($C, invF);
      if (typeof $A !== "number")
        return H.iae($A);
      if (typeof $C !== "number")
        return H.iae($C);
      det = -$B * $B + 4 * $A * $C;
      uSqrt = Math.sqrt(det * $C);
      vSqrt = Math.sqrt($A * det);
      t1 = 2 * (1 / det);
      t2 = t1 * uSqrt;
      t3 = J.getInterceptor$n(s);
      s0 = J.ceil$0$n(t3.$sub(s, t2));
      s1 = J.floor$0$n(t3.$add(s, t2));
      t1 *= vSqrt;
      t2 = J.getInterceptor$n(t);
      t00 = J.ceil$0$n(t2.$sub(t, t1));
      t1 = J.floor$0$n(t2.$add(t, t1));
      t2 = this.pyramid;
      if (level >= t2.length)
        return H.ioore(t2, level);
      sum = J.$eq(t2[level].get$samplesPerPixel(), 1) ? 0 : G.Spectrum_Spectrum(0);
      for (it = t00, sumWts = 0; it <= t1; ++it) {
        if (typeof t !== "number")
          return H.iae(t);
        tt = it - t;
        for (t2 = $C * tt * tt, si = s0; si <= s1; ++si) {
          if (typeof s !== "number")
            return H.iae(s);
          ss = si - s;
          r2 = $A * ss * ss + $B * ss * tt + t2;
          if (r2 < 1) {
            t3 = $.MIPMap_weightLut;
            t4 = C.JSNumber_methods.toInt$0(P.min(r2 * 128, 127));
            t3.length;
            if (t4 < 0 || t4 >= 128)
              return H.ioore(t3, t4);
            weight = t3[t4];
            sum = J.$add$ns(sum, J.$mul$ns(this.texel$3(level, si, it), weight));
            sumWts += weight;
          }
        }
      }
      return J.$div$n(sum, sumWts);
    },
    triangle$3: function(level, s, t) {
      var t1, s0, t00, ds, dt, t2, t3, t4;
      t1 = this.levels;
      if (typeof t1 !== "number")
        return t1.$sub();
      level = C.JSInt_methods.clamp$2(level, 0, t1 - 1);
      t1 = this.pyramid;
      if (level >>> 0 !== level || level >= t1.length)
        return H.ioore(t1, level);
      s = J.$sub$n(J.$mul$ns(s, J.get$width$x(t1[level])), 0.5);
      t1 = this.pyramid;
      if (level >= t1.length)
        return H.ioore(t1, level);
      t = J.$sub$n(J.$mul$ns(t, J.get$height$x(t1[level])), 0.5);
      s0 = J.floor$0$n(s);
      t00 = J.floor$0$n(t);
      ds = s - s0;
      dt = t - t00;
      t1 = 1 - ds;
      t2 = 1 - dt;
      t3 = t00 + 1;
      t4 = s0 + 1;
      return J.$add$ns(J.$add$ns(J.$add$ns(J.$mul$ns(this.texel$3(level, s0, t00), t1 * t2), J.$mul$ns(this.texel$3(level, s0, t3), t1 * dt)), J.$mul$ns(this.texel$3(level, t4, t00), ds * t2)), J.$mul$ns(this.texel$3(level, t4, t3), ds * dt));
    },
    _resampleWeights$2: function(oldres, newres) {
      var wt, t1, i, t2, center, j, t3, invSumWts;
      wt = H.setRuntimeTypeInfo(Array(newres), [G._ResampleWeight]);
      for (t1 = wt.length, i = 0; i < newres; ++i) {
        t2 = new G._ResampleWeight(null, [0, 0, 0, 0]);
        if (i >= t1)
          return H.ioore(wt, i);
        wt[i] = t2;
        if (typeof oldres !== "number")
          return H.iae(oldres);
        center = (i + 0.5) * oldres / newres;
        t2.firstTexel = C.JSNumber_methods.toInt$0(Math.floor(center - 2 + 0.5));
        for (j = 0; t2 = wt[i], j < 4; ++j) {
          t3 = t2.get$firstTexel();
          if (typeof t3 !== "number")
            return t3.$add();
          t2.weight[j] = G.Lanczos((t3 + j + 0.5 - center) / 2, 2);
        }
        t2 = t2.get$weight();
        t2 = J.$add$ns(J.$add$ns(J.$add$ns(t2[0], t2[1]), wt[i].get$weight()[2]), wt[i].get$weight()[3]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        invSumWts = 1 / t2;
        for (j = 0; j < 4; ++j) {
          t2 = wt[i].get$weight();
          t2[j] = J.$mul$ns(t2[j], invSumWts);
        }
      }
      return wt;
    },
    MIPMap$texture$5: function(img, filename, doTrilinear, maxAnisotropy, wrapMode) {
      var t1, xres, yres, t2, t3, sPow2, tPow2, sWeights, resampledImage, zero, t4, t5, t, p, t6, s, t7, j, t8, origS, a, px, tWeights, workData, offset, i, sRes, tRes;
      t1 = J.getInterceptor$x(img);
      xres = t1.get$width(img);
      yres = t1.get$height(img);
      t2 = J.getInterceptor$n(xres);
      if (t2.$and(xres, t2.$sub(xres, 1)) === 0) {
        t3 = J.getInterceptor$n(yres);
        t3 = t3.$and(yres, t3.$sub(yres, 1)) !== 0;
      } else
        t3 = true;
      if (t3) {
        sPow2 = G.RoundUpPow2(xres);
        tPow2 = G.RoundUpPow2(yres);
        if (J.get$isNotEmpty$asx(filename)) {
          t3 = "Resizing Image " + H.S(filename) + " to " + sPow2 + " " + tPow2;
          $.Log.call$2(0, t3);
        }
        sWeights = this._resampleWeights$2(xres, sPow2);
        resampledImage = G.SpectrumImage$(sPow2, tPow2, img.get$samplesPerPixel());
        zero = J.$eq(img.get$samplesPerPixel(), 1) ? 0 : G.Spectrum_Spectrum(0);
        if (typeof yres !== "number")
          return H.iae(yres);
        t3 = this.wrapMode;
        t4 = t3 === 2;
        t3 = t3 === 0;
        t5 = sWeights.length;
        t = 0;
        p = 0;
        for (; t < yres; ++t)
          for (t6 = t * sPow2, s = 0; s < sPow2; ++s, ++p) {
            resampledImage.$indexSet(0, p, zero);
            for (t7 = t6 + s, j = 0; j < 4; ++j) {
              if (s >= t5)
                return H.ioore(sWeights, s);
              t8 = sWeights[s].get$firstTexel();
              if (typeof t8 !== "number")
                return t8.$add();
              origS = t8 + j;
              if (t3) {
                if (typeof xres !== "number")
                  return H.iae(xres);
                a = origS - C.JSInt_methods.$tdiv(origS, xres) * xres;
                if (a < 0)
                  a += xres;
                origS = a;
              } else if (t4)
                origS = C.JSInt_methods.clamp$2(origS, 0, t2.$sub(xres, 1));
              if (origS >= 0) {
                if (typeof xres !== "number")
                  return H.iae(xres);
                t8 = origS < xres;
              } else
                t8 = false;
              if (t8) {
                if (typeof xres !== "number")
                  return H.iae(xres);
                px = J.$mul$ns(t1.$index(img, t * xres + origS), sWeights[s].get$weight()[j]);
                resampledImage.$indexSet(0, t7, J.$add$ns(resampledImage.$index(0, t7), px));
              }
            }
          }
        tWeights = this._resampleWeights$2(yres, tPow2);
        workData = Array(tPow2);
        for (t1 = tWeights.length, t2 = yres - 1, s = 0; s < sPow2; ++s) {
          for (t = 0; t < tPow2; ++t) {
            workData[t] = J.$eq(img.get$samplesPerPixel(), 3) ? G.Spectrum_Spectrum(0) : 0;
            for (j = 0; j < 4; ++j) {
              if (t >= t1)
                return H.ioore(tWeights, t);
              t5 = tWeights[t].get$firstTexel();
              if (typeof t5 !== "number")
                return t5.$add();
              offset = t5 + j;
              if (t3) {
                a = offset - C.JSInt_methods.$tdiv(offset, yres) * yres;
                if (a < 0)
                  a += yres;
                offset = a;
              } else if (t4)
                offset = C.JSInt_methods.clamp$2(offset, 0, t2);
              if (offset >= 0 && offset < yres) {
                px = J.$mul$ns(resampledImage.$index(0, offset * sPow2 + s), tWeights[t].get$weight()[j]);
                workData[t] = J.$add$ns(workData[t], px);
              }
            }
          }
          for (t = 0; t < tPow2; ++t)
            resampledImage.$indexSet(0, t * sPow2 + s, J.clamp$2$n(workData[t], 0, 1 / 0));
        }
        img.set$1(resampledImage);
        yres = tPow2;
        xres = sPow2;
      }
      this.width = xres;
      this.height = yres;
      t1 = P.max(xres, yres);
      t1 = Math.log(t1);
      t2 = $.get$_invLog2();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = 1 + C.JSDouble_methods.toInt$0(t1 * t2);
      this.levels = t2;
      this.pyramid = H.setRuntimeTypeInfo(Array(t2), [G.SpectrumImage]);
      t1 = J.getInterceptor$asx(filename);
      if (t1.get$isNotEmpty(filename)) {
        t2 = this.levels;
        if (typeof t2 !== "number")
          return t2.$gt();
        t2 = t2 > 1;
      } else
        t2 = false;
      if (t2) {
        t2 = H.S(filename) + ": Generating " + H.S(this.levels) + " MIPMap Levels";
        $.Log.call$2(0, t2);
      }
      t2 = this.pyramid;
      t3 = G.SpectrumImage$from(img);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2[0] = t3;
      i = 1;
      while (true) {
        t2 = this.levels;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t2 = this.pyramid;
        t3 = i - 1;
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        sRes = P.max(1, J.$tdiv$n(J.get$width$x(t2[t3]), 2));
        t2 = this.pyramid;
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        tRes = P.max(1, J.$tdiv$n(J.get$height$x(t2[t3]), 2));
        t2 = this.pyramid;
        t4 = img.get$samplesPerPixel();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = sRes * tRes * t4;
        if (typeof t5 !== "number" || Math.floor(t5) !== t5)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t5)));
        t5 = new Float32Array(t5);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = new G.SpectrumImage(sRes, tRes, t4, t5);
        for (t = 0, p = 0; t < tRes; ++t)
          for (t2 = 2 * t, t4 = t2 + 1, s = 0; s < sRes; ++s, ++p) {
            t5 = this.pyramid;
            if (i >= t5.length)
              return H.ioore(t5, i);
            t6 = 2 * s;
            t7 = t6 + 1;
            J.$indexSet$ax(t5[i], p, J.$mul$ns(J.$add$ns(J.$add$ns(J.$add$ns(this.texel$3(t3, t6, t2), this.texel$3(t3, t7, t2)), this.texel$3(t3, t6, t4)), this.texel$3(t3, t7, t4)), 0.25));
          }
        ++i;
      }
      if ($.MIPMap_weightLut == null) {
        $.MIPMap_weightLut = new Float32Array(128);
        for (i = 0; i < 128; ++i) {
          t2 = $.MIPMap_weightLut;
          t3 = Math.exp(-2 * (i / 127));
          t2[i] = t3 - Math.exp(-2);
        }
      }
      if (t1.get$isNotEmpty(filename)) {
        t1 = this.levels;
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 1;
      } else
        t1 = false;
      if (t1) {
        t1 = "Finished generating MIPMap for " + H.S(filename);
        $.Log.call$2(0, t1);
      }
    },
    static: {"^": "MIPMap_TEXTURE_REPEAT,MIPMap_TEXTURE_BLACK,MIPMap_TEXTURE_CLAMP,MIPMap_WEIGHT_LUT_SIZE,MIPMap_weightLut", MIPMap_GetTextureName: function(filename, doTri, gamma, maxAniso, scale, spectrum, wrap) {
        var $name = doTri === true ? J.$add$ns(filename, "_TRI:" + H.S(doTri)) : filename;
        if (!J.$eq(maxAniso, 8))
          $name = J.$add$ns($name, "_ANI:" + H.S(maxAniso));
        if (wrap !== 0)
          $name = J.$add$ns($name, "_WRAP:" + wrap);
        if (typeof scale === "number" && scale !== 1)
          $name = J.$add$ns($name, "_SCALE:" + H.S(scale));
        if (!!J.getInterceptor(scale).$isSpectrum && !scale.isValue$1(1))
          $name = J.$add$ns($name, "_SCALE:" + H.S(scale));
        if (!J.$eq(gamma, 1))
          $name = J.$add$ns($name, "_GAMMA:" + H.S(gamma));
        return !spectrum ? J.$add$ns($name, "_SPECTRUM:false") : $name;
      }, MIPMap$texture: function(img, filename, doTrilinear, maxAnisotropy, wrapMode) {
        var t1 = new G.MIPMap(doTrilinear, maxAnisotropy, wrapMode, null, null, null, null);
        t1.MIPMap$texture$5(img, filename, doTrilinear, maxAnisotropy, wrapMode);
        return t1;
      }}
  },
  _ResampleWeight: {
    "^": "Object;firstTexel<,weight<"
  },
  Distribution1D: {
    "^": "Object;func,cdf,funcInt<,count@",
    sampleContinuous$3: function(u, pdf, off) {
      var offset, t1, t2, dc, du;
      offset = P.max(0, G.upper_bound(this.cdf, u, G.less_than$closure(), 0, J.$add$ns(this.count, 1)) - 1);
      t1 = this.count;
      if (offset === t1)
        offset = J.$sub$n(t1, 1);
      if (off != null)
        off[0] = offset;
      t1 = this.cdf;
      t2 = J.$add$ns(offset, 1);
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      t1 = this.cdf;
      if (offset >>> 0 !== offset || offset >= t1.length)
        return H.ioore(t1, offset);
      t1 = t1[offset];
      dc = t2 - t1;
      du = dc !== 0 ? (u - t1) / dc : 0;
      t1 = this.func;
      if (offset >= t1.length)
        return H.ioore(t1, offset);
      t1 = t1[offset];
      t2 = this.funcInt;
      if (typeof t2 !== "number")
        return H.iae(t2);
      pdf[0] = t1 / t2;
      t1 = this.count;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return (offset + du) / t1;
    },
    sampleContinuous$2: function(u, pdf) {
      return this.sampleContinuous$3(u, pdf, null);
    },
    sampleDiscrete$2: function(u, pdf) {
      var offset, t1, t2, t3;
      offset = P.max(0, G.upper_bound(this.cdf, u, G.less_than$closure(), 0, J.$add$ns(this.count, 1)) - 1);
      if (pdf != null) {
        t1 = this.func;
        if (offset >>> 0 !== offset || offset >= t1.length)
          return H.ioore(t1, offset);
        t1 = t1[offset];
        t2 = this.funcInt;
        t3 = this.count;
        if (typeof t2 !== "number")
          return t2.$mul();
        if (typeof t3 !== "number")
          return H.iae(t3);
        pdf[0] = t1 / (t2 * t3);
      }
      return offset;
    },
    Distribution1D$2: function(f, count) {
      var t1, i, t2, t3, t4, t5, t6;
      t1 = this.count;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      t1 = new Float32Array(t1);
      this.func = t1;
      C.NativeFloat32List_methods.setRange$3(t1, 0, this.count, f);
      t1 = J.$add$ns(this.count, 1);
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      t1 = new Float32Array(t1);
      this.cdf = t1;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = 0;
      i = 1;
      while (true) {
        t1 = J.$add$ns(this.count, 1);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.cdf;
        t3 = this.count;
        if (!(i < t1))
          break;
        t1 = i - 1;
        t4 = t2.length;
        if (t1 >= t4)
          return H.ioore(t2, t1);
        t5 = t2[t1];
        t6 = this.func;
        if (t1 >= t6.length)
          return H.ioore(t6, t1);
        t1 = t6[t1];
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (i >= t4)
          return H.ioore(t2, i);
        t2[i] = t5 + t1 / t3;
        ++i;
      }
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        return H.ioore(t2, t3);
      t1 = t2[t3];
      this.funcInt = t1;
      if (t1 === 0) {
        t1 = t3;
        i = 1;
        while (true) {
          t1 = J.$add$ns(t1, 1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.cdf;
          t2 = this.count;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = i / t2;
          ++i;
          t1 = t2;
        }
      } else {
        i = 1;
        while (true) {
          t1 = J.$add$ns(this.count, 1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.cdf;
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t3 = this.funcInt;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t1[i] = t2 / t3;
          ++i;
        }
      }
    },
    static: {Distribution1D$: function(f, count) {
        var t1 = new G.Distribution1D(null, null, null, count);
        t1.Distribution1D$2(f, count);
        return t1;
      }}
  },
  Distribution2D: {
    "^": "Object;pConditionalV,pMarginal",
    sampleContinuous$4: function(u0, u1, uv, pdf) {
      var pdfs, v, pdfs1, t1, t2;
      pdfs = [0];
      v = [0];
      uv[1] = this.pMarginal.sampleContinuous$3(u1, pdfs, v);
      pdfs1 = pdfs[0];
      t1 = this.pConditionalV;
      t2 = v[0];
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      uv[0] = t1[t2].sampleContinuous$2(u0, pdfs);
      pdf[0] = J.$mul$ns(pdfs[0], pdfs1);
    },
    pdf$2: function(u, v) {
      var t1, t2, iu, iv, t3, t4;
      t1 = this.pConditionalV;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = J.toInt$0$n(J.$mul$ns(u, t1[0].get$count()));
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      iu = C.JSInt_methods.clamp$2(t2, 0, J.$sub$n(t1[0].get$count(), 1));
      iv = C.JSInt_methods.clamp$2(J.toInt$0$n(J.$mul$ns(v, this.pMarginal.count)), 0, J.$sub$n(this.pMarginal.count, 1));
      if (iv >>> 0 !== iv || iv >= t1.length)
        return H.ioore(t1, iv);
      t1 = t1[iv];
      t2 = t1.get$funcInt();
      t3 = this.pMarginal;
      t4 = t3.funcInt;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t4 = t2 * t4;
      if (t4 === 0)
        return 0;
      t1 = t1.func;
      if (iu >>> 0 !== iu || iu >= t1.length)
        return H.ioore(t1, iu);
      t1 = t1[iu];
      t3 = t3.func;
      if (iv >= t3.length)
        return H.ioore(t3, iv);
      return t1 * t3[iv] / t4;
    },
    Distribution2D$3: function(data, nu, nv) {
      var t1, t2, v, t3, marginalFunc, t4;
      if (typeof nv !== "number")
        return H.iae(nv);
      t1 = data.length;
      t2 = this.pConditionalV;
      v = 0;
      for (; v < nv; ++v) {
        if (typeof nu !== "number")
          return H.iae(nu);
        t3 = v * nu;
        t2.push(G.Distribution1D$(new Float32Array(data.subarray(t3, C.NativeFloat32List_methods._checkSublistArguments$3(data, t3, t3 + nu, t1))), nu));
      }
      if (typeof nv !== "number" || Math.floor(nv) !== nv)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(nv)));
      marginalFunc = new Float32Array(nv);
      for (t1 = t2.length, t3 = marginalFunc.length, v = 0; v < nv; ++v) {
        if (v >= t1)
          return H.ioore(t2, v);
        t4 = t2[v].get$funcInt();
        if (v >= t3)
          return H.ioore(marginalFunc, v);
        marginalFunc[v] = t4;
      }
      this.pMarginal = G.Distribution1D$(marginalFunc, nv);
    },
    static: {Distribution2D$: function(data, nu, nv) {
        var t1 = new G.Distribution2D([], null);
        t1.Distribution2D$3(data, nu, nv);
        return t1;
      }}
  },
  PermutedHalton: {
    "^": "Object;dims,b,permute",
    sample$2: function(n, out) {
      var t1, pi, i, t2;
      t1 = this.dims;
      if (typeof t1 !== "number")
        return H.iae(t1);
      pi = 0;
      i = 0;
      for (; i < t1; ++i) {
        t2 = this.b;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2 = P.min(G.PermutedRadicalInverse(n, t2[i], this.permute, pi), 0.9999999403953552);
        if (i >= 6)
          return H.ioore(out, i);
        out[i] = t2;
        t2 = this.b;
        if (i >= t2.length)
          return H.ioore(t2, i);
        pi += t2[i];
      }
    },
    PermutedHalton$2: function(dims, rng) {
      var t1, t2, sumBases, i, t3, pi;
      t1 = this.dims;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      t2 = new Uint32Array(t1);
      this.b = t2;
      if (typeof t1 !== "number")
        return H.iae(t1);
      sumBases = 0;
      i = 0;
      for (; i < t1; ++i) {
        if (i >= 1000)
          return H.ioore(C.List_bge, i);
        t3 = C.List_bge[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3;
        sumBases += t2[i];
      }
      this.permute = new Uint32Array(sumBases);
      for (pi = 0, i = 0; i < t1; ++i) {
        t2 = this.permute;
        t3 = this.b;
        if (i >= t3.length)
          return H.ioore(t3, i);
        G.GeneratePermutation(t2, pi, t3[i], rng);
        t3 = this.b;
        if (i >= t3.length)
          return H.ioore(t3, i);
        pi += t3[i];
      }
    },
    static: {PermutedHalton$: function(dims, rng) {
        var t1 = new G.PermutedHalton(dims, null, null);
        t1.PermutedHalton$2(dims, rng);
        return t1;
      }}
  },
  Normal: {
    "^": "Vector;data",
    normalize$0: function() {
      var t1 = this.lengthSquared$0();
      this.invScale$1(Math.sqrt(t1));
      return this;
    },
    $mul: function(_, s) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof s !== "number")
        return H.iae(s);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = new G.Normal(new Float32Array(3));
      t2.Vector$3(t3 * s, t4 * s, t1 * s);
      return t2;
    },
    $div: function(_, s) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof s !== "number")
        return H.iae(s);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = new G.Normal(new Float32Array(3));
      t2.Vector$3(t3 / s, t4 / s, t1 / s);
      return t2;
    },
    $add: function(_, p) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(p);
      t5 = t4.get$x(p);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = t4.get$y(p);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = t4.get$z(p);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = new G.Normal(new Float32Array(3));
      t2.Vector$3(t3 + t5, t6 + t7, t1 + t4);
      return t2;
    },
    $sub: function(_, p) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(p);
      t5 = t4.get$x(p);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = t4.get$y(p);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = t4.get$z(p);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = new G.Normal(new Float32Array(3));
      t2.Vector$3(t3 - t5, t6 - t7, t1 - t4);
      return t2;
    },
    $negate: function(_) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = new G.Normal(new Float32Array(3));
      t2.Vector$3(-t3, -t4, -t1);
      return t2;
    },
    $isNormal: true,
    static: {"^": "Normal_ZERO", Normal_FaceForward: function(n, n2) {
        var t1, t2, t3, t4, t5;
        if (J.$lt$n(G.Vector_Dot(n, n2), 0)) {
          t1 = J.getInterceptor$x(n);
          t2 = J.$negate$n(t1.get$x(n));
          t3 = J.$negate$n(t1.get$y(n));
          t1 = J.$negate$n(t1.get$z(n));
          t4 = new Float32Array(3);
          t5 = new G.Normal(t4);
          if (0 >= 3)
            return H.ioore(t4, 0);
          t4[0] = t2;
          if (1 >= 3)
            return H.ioore(t4, 1);
          t4[1] = t3;
          if (2 >= 3)
            return H.ioore(t4, 2);
          t4[2] = t1;
          t1 = t5;
        } else
          t1 = n;
        return t1;
      }}
  },
  Octree: {
    "^": "Object;maxDepth,bound,root",
    add$2: function(_, dataItem, dataBound) {
      var t1 = dataBound.pMin;
      this._core0$_add$5(this.root, this.bound, dataItem, dataBound, dataBound.pMax.$sub(0, t1).lengthSquared$0());
    },
    lookup$2: function(p, process) {
      var t1 = this.bound;
      if (!t1.inside$1(p))
        return;
      this._core0$_lookup$4(this.root, t1, p, process);
    },
    _core0$_add$6: function(node, nodeBound, dataItem, dataBound, diag2, depth) {
      var t1, t2, t3, t4, t5, pMid, t6, t7, t8, x, y, z, over, child, childBound;
      if (depth !== this.maxDepth) {
        t1 = nodeBound.pMin;
        t1 = nodeBound.pMax.$sub(0, t1).lengthSquared$0() < diag2;
      } else
        t1 = true;
      if (t1) {
        J.add$1$ax(J.get$data$x(node), dataItem);
        return;
      }
      t1 = nodeBound.pMin.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = new Float32Array(3);
      if (0 >= 3)
        return H.ioore(t2, 0);
      t2[0] = t3 * 0.5;
      if (1 >= 3)
        return H.ioore(t2, 1);
      t2[1] = t4 * 0.5;
      if (2 >= 3)
        return H.ioore(t2, 2);
      t2[2] = t1 * 0.5;
      t1 = nodeBound.pMax.data;
      t4 = t1.length;
      if (0 >= t4)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t4)
        return H.ioore(t1, 1);
      t5 = t1[1];
      if (2 >= t4)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = new Float32Array(3);
      if (0 >= 3)
        return H.ioore(t4, 0);
      t4[0] = t3 * 0.5;
      if (1 >= 3)
        return H.ioore(t4, 1);
      t4[1] = t5 * 0.5;
      if (2 >= 3)
        return H.ioore(t4, 2);
      t4[2] = t1 * 0.5;
      pMid = new G.Point(t2).$add(0, new G.Point(t4));
      t4 = dataBound.pMin.data;
      t2 = t4.length;
      if (0 >= t2)
        return H.ioore(t4, 0);
      t1 = t4[0];
      t5 = pMid.data;
      t3 = t5.length;
      if (0 >= t3)
        return H.ioore(t5, 0);
      t6 = t5[0];
      t7 = dataBound.pMax.data;
      t8 = t7.length;
      if (0 >= t8)
        return H.ioore(t7, 0);
      x = [t1 <= t6, t7[0] > t6];
      if (1 >= t2)
        return H.ioore(t4, 1);
      t6 = t4[1];
      if (1 >= t3)
        return H.ioore(t5, 1);
      t1 = t5[1];
      if (1 >= t8)
        return H.ioore(t7, 1);
      y = [t6 <= t1, t7[1] > t1];
      if (2 >= t2)
        return H.ioore(t4, 2);
      t4 = t4[2];
      if (2 >= t3)
        return H.ioore(t5, 2);
      t5 = t5[2];
      if (2 >= t8)
        return H.ioore(t7, 2);
      z = [t4 <= t5, t7[2] > t5];
      t1 = x[0] === true;
      t2 = t1 && y[0] === true && z[0] === true;
      t3 = t1 && y[0] === true && z[1] === true;
      t4 = t1 && y[1] === true && z[0] === true;
      t1 = t1 && y[1] === true && z[1] === true;
      t5 = x[1] === true;
      t6 = t5 && y[0] === true && z[0] === true;
      t7 = t5 && y[0] === true && z[1] === true;
      t8 = t5 && y[1] === true && z[0] === true;
      over = [t2, t3, t4, t1, t6, t7, t8, t5 && y[1] === true && z[1] === true];
      for (t1 = depth + 1, t2 = J.getInterceptor$x(node), child = 0; child < 8; ++child) {
        if (over[child] !== true)
          continue;
        if (J.$index$asx(t2.get$children(node), child) == null) {
          t3 = t2.get$children(node);
          t4 = Array(8);
          t4.$builtinTypeInfo = [G._OctreeNode];
          J.$indexSet$ax(t3, child, new G._OctreeNode(t4, []));
        }
        childBound = G.Octree_OctreeChildBound(child, nodeBound, pMid);
        this._core0$_add$6(J.$index$asx(t2.get$children(node), child), childBound, dataItem, dataBound, diag2, t1);
      }
    },
    _core0$_add$5: function(node, nodeBound, dataItem, dataBound, diag2) {
      return this._core0$_add$6(node, nodeBound, dataItem, dataBound, diag2, 0);
    },
    _core0$_lookup$4: function(node, nodeBound, p, process) {
      var t1, i, t2, pMid, t3, t4, t5, t6, child, childBound;
      t1 = J.getInterceptor$x(node);
      i = 0;
      while (true) {
        t2 = J.get$length$asx(t1.get$data(node));
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        if (process.call$1(J.$index$asx(t1.get$data(node), i)) !== true)
          return false;
        ++i;
      }
      pMid = nodeBound.pMin.$mul(0, 0.5).$add(0, nodeBound.pMax.$mul(0, 0.5));
      t2 = J.getInterceptor$x(p);
      t3 = t2.get$x(p);
      t4 = pMid.data;
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t3 = J.$gt$n(t3, t4[0]) ? 4 : 0;
      t6 = t2.get$y(p);
      if (1 >= t5)
        return H.ioore(t4, 1);
      t6 = J.$gt$n(t6, t4[1]) ? 2 : 0;
      t2 = t2.get$z(p);
      if (2 >= t5)
        return H.ioore(t4, 2);
      t2 = J.$gt$n(t2, t4[2]) ? 1 : 0;
      child = t3 + t6 + t2;
      if (J.$index$asx(t1.get$children(node), child) == null)
        return true;
      childBound = G.Octree_OctreeChildBound(child, nodeBound, pMid);
      return this._core0$_lookup$4(J.$index$asx(t1.get$children(node), child), childBound, p, process);
    },
    static: {Octree_OctreeChildBound: function(child, nodeBound, pMid) {
        var childBound, t1, t2, t3, t4, t5, t6;
        childBound = G.BBox$(null, null);
        t1 = childBound.pMin;
        t2 = (child & 4) !== 0;
        if (t2) {
          t3 = pMid.data;
          if (0 >= t3.length)
            return H.ioore(t3, 0);
          t3 = t3[0];
        } else {
          t3 = nodeBound.pMin.data;
          if (0 >= t3.length)
            return H.ioore(t3, 0);
          t3 = t3[0];
        }
        t1 = t1.data;
        t4 = t1.length;
        if (0 >= t4)
          return H.ioore(t1, 0);
        t1[0] = t3;
        t3 = childBound.pMax;
        if (t2) {
          t2 = nodeBound.pMax.data;
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          t2 = t2[0];
        } else {
          t2 = pMid.data;
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          t2 = t2[0];
        }
        t3 = t3.data;
        t5 = t3.length;
        if (0 >= t5)
          return H.ioore(t3, 0);
        t3[0] = t2;
        t2 = (child & 2) !== 0;
        if (t2) {
          t6 = pMid.data;
          if (1 >= t6.length)
            return H.ioore(t6, 1);
          t6 = t6[1];
        } else {
          t6 = nodeBound.pMin.data;
          if (1 >= t6.length)
            return H.ioore(t6, 1);
          t6 = t6[1];
        }
        if (1 >= t4)
          return H.ioore(t1, 1);
        t1[1] = t6;
        if (t2) {
          t2 = nodeBound.pMax.data;
          if (1 >= t2.length)
            return H.ioore(t2, 1);
          t2 = t2[1];
        } else {
          t2 = pMid.data;
          if (1 >= t2.length)
            return H.ioore(t2, 1);
          t2 = t2[1];
        }
        if (1 >= t5)
          return H.ioore(t3, 1);
        t3[1] = t2;
        t2 = (child & 1) !== 0;
        if (t2) {
          t6 = pMid.data;
          if (2 >= t6.length)
            return H.ioore(t6, 2);
          t6 = t6[2];
        } else {
          t6 = nodeBound.pMin.data;
          if (2 >= t6.length)
            return H.ioore(t6, 2);
          t6 = t6[2];
        }
        if (2 >= t4)
          return H.ioore(t1, 2);
        t1[2] = t6;
        if (t2) {
          t1 = nodeBound.pMax.data;
          if (2 >= t1.length)
            return H.ioore(t1, 2);
          t1 = t1[2];
        } else {
          t1 = pMid.data;
          if (2 >= t1.length)
            return H.ioore(t1, 2);
          t1 = t1[2];
        }
        if (2 >= t5)
          return H.ioore(t3, 2);
        t3[2] = t1;
        return childBound;
      }}
  },
  _OctreeNode: {
    "^": "Object;children>,data>",
    static: {_OctreeNode$: function() {
        return new G._OctreeNode(H.setRuntimeTypeInfo(Array(8), [G._OctreeNode]), []);
      }}
  },
  OutputImage: {
    "^": "Object;width>,height>,xOffset,yOffset,imageWidth,imageHeight,rgb<",
    OutputImage$7: function(xOffset, yOffset, width, height, imageWidth, imageHeight, rgb) {
      if (this.imageWidth == null)
        this.imageWidth = width;
      if (this.imageHeight == null)
        this.imageHeight = height;
    },
    static: {OutputImage$: function(xOffset, yOffset, width, height, imageWidth, imageHeight, rgb) {
        var t1;
        if (rgb != null)
          t1 = rgb;
        else {
          t1 = J.$mul$ns(J.$mul$ns(width, height), 3);
          if (typeof t1 !== "number" || Math.floor(t1) !== t1)
            H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
          t1 = new Float32Array(t1);
        }
        t1 = new G.OutputImage(width, height, xOffset, yOffset, imageWidth, imageHeight, t1);
        t1.OutputImage$7(xOffset, yOffset, width, height, imageWidth, imageHeight, rgb);
        return t1;
      }}
  },
  ParamSet: {
    "^": "Object;bools<,ints,floats,points,vectors,normals,spectra,strings,textures",
    toJson$0: function() {
      var json, t1, p, t2;
      json = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      for (t1 = this.bools, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        json.$indexSet(0, "bool " + H.S(t2.get$name(p)), t2.get$data(p));
      }
      for (t1 = this.ints, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        json.$indexSet(0, "int " + H.S(t2.get$name(p)), t2.get$data(p));
      }
      for (t1 = this.floats, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        json.$indexSet(0, "float " + H.S(t2.get$name(p)), t2.get$data(p));
      }
      for (t1 = this.points, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        json.$indexSet(0, "point " + H.S(t2.get$name(p)), t2.get$data(p));
      }
      for (t1 = this.vectors, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        json.$indexSet(0, "vector " + H.S(t2.get$name(p)), t2.get$data(p));
      }
      for (t1 = this.normals, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        json.$indexSet(0, "normal " + H.S(t2.get$name(p)), t2.get$data(p));
      }
      for (t1 = this.spectra, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        json.$indexSet(0, "color " + H.S(t2.get$name(p)), t2.get$data(p));
      }
      for (t1 = this.strings, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        json.$indexSet(0, "string " + H.S(t2.get$name(p)), t2.get$data(p));
      }
      return json;
    },
    addFloat$2: function($name, data) {
      $name = J.toLowerCase$0$s($name);
      this.eraseFloat$1($name);
      this.floats.push(new G.ParamSetItem($name, data, false));
    },
    addInt$2: function($name, data) {
      $name = J.toLowerCase$0$s($name);
      this.eraseInt$1($name);
      this.ints.push(new G.ParamSetItem($name, data, false));
    },
    addPoint$2: function($name, data) {
      var t1, t2, numPts, pts, i, j, t3, t4, t5, t6;
      $name = J.toLowerCase$0$s($name);
      this.erasePoint$1($name);
      t1 = J.getInterceptor$asx(data);
      t2 = t1.$index(data, 0);
      if (typeof t2 === "number") {
        numPts = J.$tdiv$n(t1.get$length(data), 3);
        if (typeof numPts !== "number")
          return H.iae(numPts);
        pts = Array(numPts);
        pts.fixed$length = init;
        pts.$builtinTypeInfo = [G.Point];
        for (t2 = pts.length, i = 0, j = 0; i < numPts; ++i, j += 3) {
          t3 = t1.$index(data, j);
          t4 = t1.$index(data, j + 1);
          t5 = t1.$index(data, j + 2);
          t6 = new Float32Array(3);
          if (0 >= 3)
            return H.ioore(t6, 0);
          t6[0] = t3;
          if (1 >= 3)
            return H.ioore(t6, 1);
          t6[1] = t4;
          if (2 >= 3)
            return H.ioore(t6, 2);
          t6[2] = t5;
          if (i >= t2)
            return H.ioore(pts, i);
          pts[i] = new G.Point(t6);
        }
        this.points.push(new G.ParamSetItem($name, pts, false));
      } else if (!!J.getInterceptor(t1.$index(data, 0)).$isPoint)
        this.points.push(new G.ParamSetItem($name, data, false));
    },
    addVector$2: function($name, data) {
      var t1, t2, numVecs, vecs, i, j, t3, t4, t5, t6;
      $name = J.toLowerCase$0$s($name);
      this.eraseVector$1($name);
      t1 = J.getInterceptor$asx(data);
      t2 = t1.$index(data, 0);
      if (typeof t2 === "number") {
        numVecs = J.$tdiv$n(t1.get$length(data), 3);
        if (typeof numVecs !== "number")
          return H.iae(numVecs);
        vecs = Array(numVecs);
        vecs.fixed$length = init;
        vecs.$builtinTypeInfo = [G.Vector];
        for (t2 = vecs.length, i = 0, j = 0; i < numVecs; ++i, j += 3) {
          t3 = t1.$index(data, j);
          t4 = t1.$index(data, j + 1);
          t5 = t1.$index(data, j + 2);
          t6 = new Float32Array(3);
          if (0 >= 3)
            return H.ioore(t6, 0);
          t6[0] = t3;
          if (1 >= 3)
            return H.ioore(t6, 1);
          t6[1] = t4;
          if (2 >= 3)
            return H.ioore(t6, 2);
          t6[2] = t5;
          if (i >= t2)
            return H.ioore(vecs, i);
          vecs[i] = new G.Vector(t6);
        }
        this.vectors.push(new G.ParamSetItem($name, vecs, false));
      } else if (!!J.getInterceptor(t1.$index(data, 0)).$isVector)
        this.vectors.push(new G.ParamSetItem($name, data, false));
    },
    addNormal$2: function($name, data) {
      var t1, t2, numNorms, norms, i, j, t3, t4, t5, t6;
      $name = J.toLowerCase$0$s($name);
      this.eraseNormal$1($name);
      t1 = J.getInterceptor$asx(data);
      if (!!J.getInterceptor(t1.$index(data, 0)).$isNormal)
        this.normals.push(new G.ParamSetItem($name, data, false));
      else {
        t2 = t1.$index(data, 0);
        if (typeof t2 === "number") {
          numNorms = J.$tdiv$n(t1.get$length(data), 3);
          if (typeof numNorms !== "number")
            return H.iae(numNorms);
          norms = Array(numNorms);
          norms.fixed$length = init;
          norms.$builtinTypeInfo = [G.Normal];
          for (t2 = norms.length, i = 0, j = 0; i < numNorms; ++i, j += 3) {
            t3 = t1.$index(data, j);
            t4 = t1.$index(data, j + 1);
            t5 = t1.$index(data, j + 2);
            t6 = new Float32Array(3);
            if (0 >= 3)
              return H.ioore(t6, 0);
            t6[0] = t3;
            if (1 >= 3)
              return H.ioore(t6, 1);
            t6[1] = t4;
            if (2 >= 3)
              return H.ioore(t6, 2);
            t6[2] = t5;
            if (i >= t2)
              return H.ioore(norms, i);
            norms[i] = new G.Normal(t6);
          }
          this.normals.push(new G.ParamSetItem($name, norms, false));
        }
      }
    },
    addRGBSpectrum$2: function($name, data) {
      var t1, nItems, s, t2, i, di, t3;
      $name = J.toLowerCase$0$s($name);
      this.eraseSpectrum$1($name);
      t1 = J.getInterceptor$asx(data);
      nItems = J.$tdiv$n(t1.get$length(data), 3);
      if (typeof nItems !== "number")
        return H.iae(nItems);
      s = Array(nItems);
      s.fixed$length = init;
      s.$builtinTypeInfo = [G.Spectrum];
      for (t2 = s.length, i = 0, di = 0; i < nItems; ++i, di += 3) {
        t3 = G.Spectrum_Spectrum$rgb(t1.$index(data, di), t1.$index(data, di + 1), t1.$index(data, di + 2));
        if (i >= t2)
          return H.ioore(s, i);
        s[i] = t3;
      }
      this.spectra.push(new G.ParamSetItem($name, s, false));
    },
    addXYZSpectrum$2: function($name, data) {
      var t1, nItems, s, t2, i, di, t3, t4, t5, t6, t7;
      $name = J.toLowerCase$0$s($name);
      this.eraseSpectrum$1($name);
      t1 = J.getInterceptor$asx(data);
      nItems = J.$tdiv$n(t1.get$length(data), 3);
      if (typeof nItems !== "number")
        return H.iae(nItems);
      s = Array(nItems);
      s.fixed$length = init;
      s.$builtinTypeInfo = [G.Spectrum];
      for (t2 = s.length, i = 0, di = 0; i < nItems; ++i, di += 3) {
        t3 = t1.$index(data, di);
        t4 = t1.$index(data, di + 1);
        t5 = t1.$index(data, di + 2);
        t6 = $.Spectrum_type;
        if (t6 === 0)
          t3 = G.RGBColor$xyz(t3, t4, t5);
        else if (t6 === 2) {
          t6 = new G.SampledSpectrum(new Float32Array(4));
          t3 = G.RGBColor$xyz(t3, t4, t5).c;
          t4 = t3.length;
          if (0 >= t4)
            return H.ioore(t3, 0);
          t5 = t3[0];
          if (1 >= t4)
            return H.ioore(t3, 1);
          t7 = t3[1];
          if (2 >= t4)
            return H.ioore(t3, 2);
          t6.setRGB$3(t5, t7, t3[2]);
          t3 = t6;
        } else if (t6 === 1) {
          t6 = new Float32Array(3);
          t7 = new G.XYZColor(t6);
          if (0 >= 3)
            return H.ioore(t6, 0);
          t6[0] = t3;
          if (1 >= 3)
            return H.ioore(t6, 1);
          t6[1] = t4;
          if (2 >= 3)
            return H.ioore(t6, 2);
          t6[2] = t5;
          t3 = t7;
        } else
          t3 = null;
        if (i >= t2)
          return H.ioore(s, i);
        s[i] = t3;
      }
      this.spectra.push(new G.ParamSetItem($name, s, false));
    },
    addBlackbodySpectrum$2: function($name, data) {
      var t1, nItems, t2, s, bb, i, di, bs, t3;
      $name = J.toLowerCase$0$s($name);
      this.eraseSpectrum$1($name);
      t1 = J.getInterceptor$asx(data);
      nItems = J.$tdiv$n(t1.get$length(data), 2);
      if (typeof nItems !== "number")
        return H.iae(nItems);
      t2 = Array(nItems);
      t2.fixed$length = init;
      s = H.setRuntimeTypeInfo(t2, [G.Spectrum]);
      bb = new Float32Array(471);
      for (t2 = s.length, i = 0, di = 0; i < nItems; ++i, di += 2) {
        G.Spectrum_Blackbody(C.List_U49, t1.$index(data, di), bb);
        bs = new G.SampledSpectrum(new Float32Array(4));
        bs.setSampled$3(C.List_U49, bb, 0);
        t3 = G.Spectrum_Spectrum$from(bs, 0).$mul(0, t1.$index(data, di + 1));
        if (i >= t2)
          return H.ioore(s, i);
        s[i] = t3;
      }
      this.spectra.push(new G.ParamSetItem($name, s, false));
    },
    addSpectrumFiles$3: function($name, filenames, futures) {
      var t1, t2, s, subFutures, box_0, t3, t4, t5, path, bytes, values, numSamples, wls, v, i, j, j0, sc, box_00, c;
      t1 = J.getInterceptor$asx(filenames);
      t2 = t1.get$length(filenames);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = Array(t2);
      t2.fixed$length = init;
      s = H.setRuntimeTypeInfo(t2, [G.Spectrum]);
      subFutures = [];
      box_0 = {};
      box_0.fi_0 = 0;
      t2 = futures == null;
      t3 = s.length;
      while (true) {
        t4 = box_0.fi_0;
        t5 = t1.get$length(filenames);
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (!(t4 < t5))
          break;
        c$0: {
          path = t1.$index(filenames, box_0.fi_0);
          if ($.ResourceManager_global.resources.containsKey$1(path)) {
            bytes = $.ResourceManager_global.getResource$1(path);
            t4 = H.checkSubtype(bytes, "$isList", [J.JSInt], "$asList");
            if (!t4)
              break c$0;
            values = G.ReadFloatFile(bytes, path);
            numSamples = C.JSInt_methods._tdivFast$1(values.length, 2);
            wls = new Float32Array(numSamples);
            v = new Float32Array(numSamples);
            for (t4 = values.length, i = 0, j = 0; i < numSamples; ++i) {
              j0 = j + 1;
              if (j >= t4)
                return H.ioore(values, j);
              wls[i] = values[j];
              j = j0 + 1;
              if (j0 >= t4)
                return H.ioore(values, j0);
              v[i] = values[j0];
            }
            t4 = box_0.fi_0;
            t5 = G.Spectrum_Spectrum(0);
            t5.setSampled$3(wls, v, 0);
            if (t4 >= t3)
              return H.ioore(s, t4);
            s[t4] = t5;
          } else if (t2) {
            t4 = "UNABLE TO LOAD SPECTRUM FILE " + H.S(path);
            $.Log.call$2(4, t4);
          } else {
            t4 = "LOADING SPECTRUM FILE " + H.S(path);
            $.Log.call$2(4, t4);
            t4 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
            t4.$builtinTypeInfo = [null];
            sc = new P._AsyncCompleter(t4);
            sc.$builtinTypeInfo = [null];
            $.ResourceManager_global.requestFile$2(path, null).then$1(new G.ParamSet_addSpectrumFiles_closure(box_0, s, path, sc));
            subFutures.push(t4);
          }
        }
        box_00 = {};
        t4 = box_0.fi_0;
        box_00.fi_0 = t4;
        box_00.fi_0 = t4 + 1;
        box_0 = box_00;
      }
      if (t2)
        this.spectra.push(new G.ParamSetItem($name, s, false));
      else if (subFutures.length === 0)
        this.spectra.push(new G.ParamSetItem($name, s, false));
      else {
        c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        futures.push(c.future);
        P.Future_wait(subFutures, false).then$1(new G.ParamSet_addSpectrumFiles_closure0(this, $name, s, c));
      }
    },
    addSampledSpectrum$2: function($name, data) {
      var t1, nItems, t2, wl, v, t3, i, j, j0, t4;
      this.eraseSpectrum$1($name);
      t1 = J.getInterceptor$asx(data);
      nItems = J.$tdiv$n(t1.get$length(data), 2);
      t2 = typeof nItems !== "number" || Math.floor(nItems) !== nItems;
      if (t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(nItems)));
      wl = new Float32Array(nItems);
      if (t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(nItems)));
      v = new Float32Array(nItems);
      if (typeof nItems !== "number")
        return H.iae(nItems);
      t2 = wl.length;
      t3 = v.length;
      i = 0;
      j = 0;
      for (; i < nItems; ++i) {
        j0 = j + 1;
        t4 = t1.$index(data, j);
        if (i >= t2)
          return H.ioore(wl, i);
        wl[i] = t4;
        j = j0 + 1;
        t4 = t1.$index(data, j0);
        if (i >= t3)
          return H.ioore(v, i);
        v[i] = t4;
      }
      t1 = G.Spectrum_Spectrum(0);
      t1.setSampled$3(wl, v, 0);
      this.spectra.push(new G.ParamSetItem($name, [t1], false));
    },
    eraseInt$1: function(n) {
      var t1, i;
      for (t1 = this.ints, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    eraseBool$1: function(n) {
      var t1, i;
      for (t1 = this.bools, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    eraseFloat$1: function(n) {
      var t1, i;
      for (t1 = this.floats, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    erasePoint$1: function(n) {
      var t1, i;
      for (t1 = this.points, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    eraseVector$1: function(n) {
      var t1, i;
      for (t1 = this.vectors, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    eraseNormal$1: function(n) {
      var t1, i;
      for (t1 = this.normals, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    eraseSpectrum$1: function(n) {
      var t1, i;
      for (t1 = this.spectra, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    eraseString$1: function(n) {
      var t1, i;
      for (t1 = this.strings, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    eraseTexture$1: function(n) {
      var t1, i;
      for (t1 = this.textures, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), n)) {
          C.JSArray_methods.removeAt$1(t1, i);
          return true;
        }
      return false;
    },
    findOneFloat$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.floats, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneInt$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.ints, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneBool$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.bools, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOnePoint$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.points, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneVector$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.vectors, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneSpectrum$2: function($name, d) {
      var t1, i, t2, t3;
      $name = $name.toLowerCase();
      for (t1 = this.spectra, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          t3 = t1.length;
          if (i >= t3)
            return H.ioore(t1, i);
          if (t2.data == null)
            return d;
          if (i >= t3)
            return H.ioore(t1, i);
          if (J.$eq(J.get$length$asx(t2.data), 1)) {
            if (i >= t1.length)
              return H.ioore(t1, i);
            t2 = t1[i];
            t2.set$lookedUp(true);
            if (i >= t1.length)
              return H.ioore(t1, i);
            return J.$index$asx(t2.data, 0);
          }
        }
      return d;
    },
    findOneString$2: function($name, d) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.strings, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return d;
    },
    findOneFilename$2: function($name, d) {
      var filename = this.findOneString$2($name.toLowerCase(), "");
      if (J.$eq(filename, ""))
        return d;
      return filename;
    },
    findTexture$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.textures, i = 0; i < t1.length; ++i) {
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(J.get$length$asx(J.get$data$x(t1[i])), 1);
        } else
          t2 = false;
        if (t2) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return J.$index$asx(t2.data, 0);
        }
      }
      return "";
    },
    findFloat$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.floats, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findInt$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.ints, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findPoint$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.points, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findVector$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.vectors, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findNormal$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.normals, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    findString$1: function($name) {
      var t1, i, t2;
      $name = $name.toLowerCase();
      for (t1 = this.strings, i = 0; i < t1.length; ++i)
        if (J.$eq(J.get$name$x(t1[i]), $name)) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = t1[i];
          t2.set$lookedUp(true);
          if (i >= t1.length)
            return H.ioore(t1, i);
          return t2.data;
        }
      return;
    },
    reportUnused$0: function() {
      this._reportUnused$1(this.bools);
      this._reportUnused$1(this.ints);
      this._reportUnused$1(this.floats);
      this._reportUnused$1(this.points);
      this._reportUnused$1(this.vectors);
      this._reportUnused$1(this.normals);
      this._reportUnused$1(this.spectra);
      this._reportUnused$1(this.strings);
      this._reportUnused$1(this.textures);
    },
    _reportUnused$1: function(list) {
      var i, t1;
      for (i = 0; i < list.length; ++i) {
        t1 = list[i];
        if (!t1.get$lookedUp()) {
          t1 = "Parameter " + H.S(t1.name) + " not used";
          $.Log.call$2(1, t1);
        }
      }
    },
    toString$0: function(_) {
      var t1, out, p, t2, i, t3;
      for (t1 = this.bools, t1 = new H.ListIterator(t1, t1.length, 0, null), out = ""; t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        out += "\"bool " + H.S(t2.get$name(p)) + "\" [";
        i = 0;
        while (true) {
          t3 = J.get$length$asx(t2.get$data(p));
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (i !== 0)
            out += " ";
          out += J.$index$asx(t2.get$data(p), i) === true ? 1 : 0;
          ++i;
        }
        out += "] ";
      }
      for (t1 = this.ints, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("integer", t1._current);
      for (t1 = this.floats, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("float", t1._current);
      for (t1 = this.points, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("point", t1._current);
      for (t1 = this.vectors, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("vector", t1._current);
      for (t1 = this.normals, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("normals", t1._current);
      for (t1 = this.spectra, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        out += this._paramToString$2("color", t1._current);
      for (t1 = this.strings, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        out += "\"string " + H.S(t2.get$name(p)) + "\" [";
        i = 0;
        while (true) {
          t3 = J.get$length$asx(t2.get$data(p));
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (i !== 0)
            out += " ";
          out += "\"" + H.S(J.$index$asx(t2.get$data(p), i)) + "\"";
          ++i;
        }
        out += "] ";
      }
      for (t1 = this.textures, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        p = t1._current;
        t2 = J.getInterceptor$x(p);
        out += "\"texture " + H.S(t2.get$name(p)) + "\" [";
        i = 0;
        while (true) {
          t3 = J.get$length$asx(t2.get$data(p));
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (i !== 0)
            out += " ";
          out += "\"" + H.S(J.$index$asx(t2.get$data(p), i)) + "\"";
          ++i;
        }
        out += "] ";
      }
      return out;
    },
    _paramToString$2: function(type, item) {
      var t1, out, i, t2;
      t1 = J.getInterceptor$x(item);
      out = "\"" + type + " " + H.S(t1.get$name(item)) + "\" [";
      i = 0;
      while (true) {
        t2 = J.get$length$asx(t1.get$data(item));
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        if (i !== 0)
          out += " ";
        out += H.S(J.$index$asx(t1.get$data(item), i));
        ++i;
      }
      return out + "] ";
    },
    ParamSet$fromJson$1: function(json) {
      var t1, type_name, value, tk, t2, type, $name;
      for (t1 = J.get$iterator$ax(json.get$keys()); t1.moveNext$0();) {
        type_name = t1.get$current();
        value = json.$index(0, type_name);
        tk = J.split$1$s(type_name, " ");
        t2 = J.getInterceptor$asx(tk);
        if (!J.$eq(t2.get$length(tk), 2)) {
          t2 = "Invalid parameter declaration: '" + H.S(type_name) + "'. Should be 'type name'.";
          $.Log.call$2(2, t2);
          continue;
        }
        type = t2.$index(tk, 0);
        $name = t2.$index(tk, 1);
        t2 = J.getInterceptor(type);
        if (t2.$eq(type, "float")) {
          if (typeof value === "number")
            value = [C.JSNumber_methods.toDouble$0(value)];
          $name = J.toLowerCase$0$s($name);
          this.eraseFloat$1($name);
          this.floats.push(new G.ParamSetItem($name, value, false));
        } else if (t2.$eq(type, "int") || t2.$eq(type, "integer")) {
          if (typeof value === "number")
            value = [C.JSNumber_methods.toInt$0(value)];
          $name = J.toLowerCase$0$s($name);
          this.eraseInt$1($name);
          this.ints.push(new G.ParamSetItem($name, value, false));
        } else if (t2.$eq(type, "bool") || t2.$eq(type, "boolean")) {
          if (typeof value === "boolean")
            value = [value];
          $name = J.toLowerCase$0$s($name);
          this.eraseBool$1($name);
          this.bools.push(new G.ParamSetItem($name, value, false));
        } else if (t2.$eq(type, "point"))
          this.addPoint$2($name, value);
        else if (t2.$eq(type, "vector"))
          this.addVector$2($name, value);
        else if (t2.$eq(type, "normal"))
          this.addNormal$2($name, value);
        else if (t2.$eq(type, "string")) {
          $name = J.toLowerCase$0$s($name);
          this.eraseString$1($name);
          this.strings.push(new G.ParamSetItem($name, value, false));
        } else if (t2.$eq(type, "string")) {
          $name = J.toLowerCase$0$s($name);
          this.eraseString$1($name);
          this.strings.push(new G.ParamSetItem($name, value, false));
        } else if (t2.$eq(type, "rgb") || t2.$eq(type, "color"))
          this.addRGBSpectrum$2($name, value);
        else if (t2.$eq(type, "xyz"))
          this.addXYZSpectrum$2($name, value);
        else {
          t2 = "Unhandled parameter type: " + H.S(type);
          $.Log.call$2(2, t2);
        }
      }
    },
    static: {ParamSet$from: function(other) {
        return new G.ParamSet(P.List_List$from(other.get$bools(), true, null), P.List_List$from(other.ints, true, null), P.List_List$from(other.floats, true, null), P.List_List$from(other.points, true, null), P.List_List$from(other.vectors, true, null), P.List_List$from(other.normals, true, null), P.List_List$from(other.spectra, true, null), P.List_List$from(other.strings, true, null), P.List_List$from(other.textures, true, null));
      }, ParamSet$fromJson: function(json) {
        var t1 = new G.ParamSet([], [], [], [], [], [], [], [], []);
        t1.ParamSet$fromJson$1(json);
        return t1;
      }}
  },
  ParamSet_addSpectrumFiles_closure: {
    "^": "Closure:97;box_0,s_1,path_2,sc_3",
    call$1: function(bytes) {
      var t1, t2, values, numSamples, wls, v, i, j, j0, t3;
      t1 = this.path_2;
      t2 = "FINISHED SPECTRUM FILE " + H.S(t1);
      $.Log.call$2(4, t2);
      values = G.ReadFloatFile(bytes, t1);
      numSamples = C.JSInt_methods._tdivFast$1(values.length, 2);
      wls = new Float32Array(numSamples);
      v = new Float32Array(numSamples);
      for (t1 = values.length, i = 0, j = 0; i < numSamples; ++i) {
        j0 = j + 1;
        if (j >= t1)
          return H.ioore(values, j);
        wls[i] = values[j];
        j = j0 + 1;
        if (j0 >= t1)
          return H.ioore(values, j0);
        v[i] = values[j0];
      }
      t1 = this.s_1;
      t2 = this.box_0.fi_0;
      t3 = G.Spectrum_Spectrum(0);
      t3.setSampled$3(wls, v, 0);
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = t3;
      t1 = this.sc_3.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  ParamSet_addSpectrumFiles_closure0: {
    "^": "Closure:97;this_4,name_5,s_6,c_7",
    call$1: function(e) {
      var t1;
      this.this_4.spectra.push(new G.ParamSetItem(this.name_5, this.s_6, false));
      t1 = this.c_7.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  ParamSetItem: {
    "^": "Object;name>,data>,lookedUp@"
  },
  PixelSampler: {
    "^": "Object;left>,top>,width>,height>",
    setup$4: function(x, y, width, height) {
      this.left = x;
      this.top = y;
      this.width = width;
      this.height = height;
    }
  },
  Point: {
    "^": "Vector;data",
    $mul: function(_, s) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof s !== "number")
        return H.iae(s);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t3 * s, t4 * s, t1 * s);
      return t2;
    },
    $div: function(_, s) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof s !== "number")
        return H.iae(s);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t3 / s, t4 / s, t1 / s);
      return t2;
    },
    $add: function(_, p) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(p);
      t5 = J.$index$asx(t4.get$data(p), 0);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = J.$index$asx(t4.get$data(p), 1);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = J.$index$asx(t4.get$data(p), 2);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t3 + t5, t6 + t7, t1 + t4);
      return t2;
    },
    $sub: function(_, p) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(p);
      t5 = J.$index$asx(t4.get$data(p), 0);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = J.$index$asx(t4.get$data(p), 1);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = J.$index$asx(t4.get$data(p), 2);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t3 - t5, t6 - t7, t1 - t4);
      return t2;
    },
    $isPoint: true,
    static: {"^": "Point_ZERO"}
  },
  Primitive: {
    "^": "Object;",
    canIntersect$0: function() {
      return true;
    },
    refine$1: function(refined) {
      $.Log.call$2(3, "Unimplemented Primitive.refine() method called!");
    },
    fullyRefine$1: function(refined) {
      var todo, t1, prim;
      todo = [];
      todo.push(this);
      for (t1 = J.getInterceptor$ax(refined); todo.length !== 0;) {
        prim = C.JSArray_methods.get$last(todo);
        if (0 >= todo.length)
          return H.ioore(todo, 0);
        todo.pop();
        if (prim.canIntersect$0())
          t1.add$1(refined, prim);
        else
          prim.refine$1(todo);
      }
    }
  },
  Aggregate: {
    "^": "Primitive;",
    getBSDF$2: function(dg, xform) {
      $.Log.call$2(3, "Aggregate.getBSDF() methodcalled; should have gone to GeometricPrimitive");
      return;
    },
    getBSSRDF$2: function(dg, xform) {
      $.Log.call$2(3, "Aggregate.getBSSRDF() methodcalled; should have gone to GeometricPrimitive");
      return;
    }
  },
  GeometricPrimitive: {
    "^": "Primitive;shape,material@,areaLight@,primitiveId",
    canIntersect$0: function() {
      return this.shape.canIntersect$0();
    },
    refine$1: function(refined) {
      var r, i, t1, t2, t3, t4;
      r = [];
      this.shape.refine$1(r);
      for (i = 0; i < r.length; ++i) {
        t1 = r[i];
        t2 = this.material;
        t3 = this.areaLight;
        t4 = $.Primitive__nextprimitiveId;
        $.Primitive__nextprimitiveId = t4 + 1;
        refined.push(new G.GeometricPrimitive(t1, t2, t3, t4));
      }
    },
    worldBound$0: function() {
      return this.shape.worldBound$0();
    },
    intersect$2: function(r, isect) {
      var thit, rayEpsilon;
      thit = [0];
      rayEpsilon = [0];
      if (!this.shape.intersect$4(r, thit, rayEpsilon, isect.get$dg()))
        return false;
      isect.primitive = this;
      isect.worldToObject = G.Transform$from(this.shape.get$worldToObject());
      isect.objectToWorld = G.Transform$from(this.shape.get$objectToWorld());
      isect.shapeId = this.shape.get$shapeId();
      isect.primitiveId = this.primitiveId;
      isect.rayEpsilon = rayEpsilon[0];
      r.set$maxDistance(thit[0]);
      return true;
    },
    intersectP$1: function(r) {
      return this.shape.intersectP$1(r);
    },
    getBSDF$2: function(dg, objectToWorld) {
      var dgs = G.DifferentialGeometry$();
      this.shape.getShadingGeometry$3(objectToWorld, dg, dgs);
      return this.material.getBSDF$2(dg, dgs);
    },
    getBSSRDF$2: function(dg, objectToWorld) {
      var dgs = G.DifferentialGeometry$();
      this.shape.getShadingGeometry$3(objectToWorld, dg, dgs);
      return this.material.getBSSRDF$2(dg, dgs);
    }
  },
  TransformedPrimitive: {
    "^": "Primitive;primitive,worldToPrimitive,primitiveId",
    intersect$2: function(r, isect) {
      var w2p, ray, t1, t2, p2w;
      w2p = G.Transform$(null, null);
      this.worldToPrimitive.interpolate$2(r.get$time(), w2p);
      ray = w2p.transformRay$1(r);
      if (!this.primitive.intersect$2(ray, isect))
        return false;
      r.set$maxDistance(ray.maxDistance);
      isect.set$primitiveId(this.primitiveId);
      t1 = w2p.m.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      if (t1[0] === 1) {
        if (1 >= t2)
          return H.ioore(t1, 1);
        if (t1[1] === 0) {
          if (2 >= t2)
            return H.ioore(t1, 2);
          if (t1[2] === 0) {
            if (3 >= t2)
              return H.ioore(t1, 3);
            if (t1[3] === 0) {
              if (4 >= t2)
                return H.ioore(t1, 4);
              if (t1[4] === 0) {
                if (5 >= t2)
                  return H.ioore(t1, 5);
                if (t1[5] === 1) {
                  if (6 >= t2)
                    return H.ioore(t1, 6);
                  if (t1[6] === 0) {
                    if (7 >= t2)
                      return H.ioore(t1, 7);
                    if (t1[7] === 0) {
                      if (8 >= t2)
                        return H.ioore(t1, 8);
                      if (t1[8] === 0) {
                        if (9 >= t2)
                          return H.ioore(t1, 9);
                        if (t1[9] === 0) {
                          if (10 >= t2)
                            return H.ioore(t1, 10);
                          if (t1[10] === 1) {
                            if (11 >= t2)
                              return H.ioore(t1, 11);
                            if (t1[11] === 0) {
                              if (12 >= t2)
                                return H.ioore(t1, 12);
                              if (t1[12] === 0) {
                                if (13 >= t2)
                                  return H.ioore(t1, 13);
                                if (t1[13] === 0) {
                                  if (14 >= t2)
                                    return H.ioore(t1, 14);
                                  if (t1[14] === 0) {
                                    if (15 >= t2)
                                      return H.ioore(t1, 15);
                                    t1 = t1[15] === 1;
                                  } else
                                    t1 = false;
                                } else
                                  t1 = false;
                              } else
                                t1 = false;
                            } else
                              t1 = false;
                          } else
                            t1 = false;
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      if (!t1) {
        t1 = isect.worldToObject.$mul(0, w2p);
        isect.worldToObject = t1;
        isect.objectToWorld = G.Transform$(t1.mInv, t1.m);
        p2w = G.Transform$(w2p.mInv, w2p.m);
        t1 = isect.dg;
        t1.p = p2w.transformPoint$1(t1.p);
        t1 = isect.dg;
        t2 = p2w.transformNormal$1(t1.nn);
        t1.nn = t2.$div(0, t2.length$0(0));
        t2 = isect.dg;
        t2.dpdu = p2w.transformVector$1(t2.dpdu);
        t2 = isect.dg;
        t2.dpdv = p2w.transformVector$1(t2.dpdv);
        t2 = isect.dg;
        t2.dndu = p2w.transformNormal$1(t2.dndu);
        t2 = isect.dg;
        t2.dndv = p2w.transformNormal$1(t2.dndv);
      }
      return true;
    },
    intersectP$1: function(r) {
      return this.primitive.intersectP$1(this.worldToPrimitive.transformRay$1(r));
    },
    getBSDF$2: function(dg, ObjectToWorld) {
      return;
    },
    getBSSRDF$2: function(dg, ObjectToWorld) {
      return;
    },
    worldBound$0: function() {
      return this.worldToPrimitive.motionBounds$2(this.primitive.worldBound$0(), true);
    }
  },
  ProjectiveCamera: {
    "^": "Camera;",
    ProjectiveCamera$8: function(cam2world, cameraToScreen, screenWindow, sopen, sclose, lensRadius, focalDistance, film) {
      var t1, t2, t3, t4;
      t1 = G.Transform_Scale(film.xResolution, film.yResolution, 1);
      t2 = J.getInterceptor$asx(screenWindow);
      t3 = J.$sub$n(t2.$index(screenWindow, 1), t2.$index(screenWindow, 0));
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = J.$sub$n(t2.$index(screenWindow, 2), t2.$index(screenWindow, 3));
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = t1.$mul(0, G.Transform_Scale(1 / t3, 1 / t4, 1)).$mul(0, G.Transform_Translate(G.Vector$(-J.toDouble$0$n(t2.$index(screenWindow, 0)), -J.toDouble$0$n(t2.$index(screenWindow, 3)), 0)));
      this.screenToRaster = t2;
      this.rasterToScreen = G.Transform$(t2.mInv, t2.m);
      t2 = this.cameraToScreen;
      this.rasterToCamera = G.Transform$(t2.mInv, t2.m).$mul(0, this.rasterToScreen);
    }
  },
  Quaternion: {
    "^": "Object;v<,w<",
    copy$1: function(other) {
      this.v = new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(other.get$v()))));
      this.w = other.get$w();
      return this;
    },
    add$1: function(_, q) {
      this.v.add$1(0, q.get$v());
      this.w = this.w + q.get$w();
      return this;
    },
    $add: function(_, q) {
      return G.Quaternion$from(this).add$1(0, q);
    },
    $sub: function(_, q) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = G.Quaternion$from(this);
      t2 = t1.v;
      t3 = q.get$v();
      t2 = t2.data;
      t4 = t2.length;
      if (0 >= t4)
        return H.ioore(t2, 0);
      t5 = t2[0];
      t6 = J.getInterceptor$x(t3);
      t7 = J.$index$asx(t6.get$data(t3), 0);
      if (typeof t7 !== "number")
        return H.iae(t7);
      t2[0] = t5 - t7;
      if (1 >= t4)
        return H.ioore(t2, 1);
      t7 = t2[1];
      t5 = J.$index$asx(t6.get$data(t3), 1);
      if (typeof t5 !== "number")
        return H.iae(t5);
      t2[1] = t7 - t5;
      if (2 >= t4)
        return H.ioore(t2, 2);
      t4 = t2[2];
      t3 = J.$index$asx(t6.get$data(t3), 2);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2[2] = t4 - t3;
      t1.w = t1.w - q.get$w();
      return t1;
    },
    scale$1: function(_, f) {
      var t1;
      this.v.scale$1(0, f);
      t1 = this.w;
      if (typeof f !== "number")
        return H.iae(f);
      this.w = t1 * f;
      return this;
    },
    $mul: function(_, f) {
      var t1, t2;
      t1 = G.Quaternion$from(this);
      t1.v.scale$1(0, f);
      t2 = t1.w;
      if (typeof f !== "number")
        return H.iae(f);
      t1.w = t2 * f;
      return t1;
    },
    $div: function(_, f) {
      var t1, t2;
      t1 = G.Quaternion$from(this);
      t1.v.invScale$1(f);
      t2 = t1.w;
      if (typeof f !== "number")
        return H.iae(f);
      t1.w = t2 / f;
      return t1;
    },
    toTransform$0: function() {
      var t1, t2, t3, xx, t4, yy, zz, xy, xz, yz, wx, wy, wz, m;
      t1 = this.v.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      xx = t3 * t3;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      yy = t4 * t4;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      zz = t1 * t1;
      xy = t3 * t4;
      xz = t3 * t1;
      yz = t4 * t1;
      t2 = this.w;
      wx = t3 * t2;
      wy = t4 * t2;
      wz = t1 * t2;
      m = G.Matrix4x4$();
      t2 = m.data;
      t1 = t2.length;
      if (0 >= t1)
        return H.ioore(t2, 0);
      t2[0] = 1 - 2 * (yy + zz);
      if (1 >= t1)
        return H.ioore(t2, 1);
      t2[1] = 2 * (xy + wz);
      if (2 >= t1)
        return H.ioore(t2, 2);
      t2[2] = 2 * (xz - wy);
      if (4 >= t1)
        return H.ioore(t2, 4);
      t2[4] = 2 * (xy - wz);
      if (5 >= t1)
        return H.ioore(t2, 5);
      t2[5] = 1 - 2 * (xx + zz);
      if (6 >= t1)
        return H.ioore(t2, 6);
      t2[6] = 2 * (yz + wx);
      if (8 >= t1)
        return H.ioore(t2, 8);
      t2[8] = 2 * (xz + wy);
      if (9 >= t1)
        return H.ioore(t2, 9);
      t2[9] = 2 * (yz - wx);
      if (10 >= t1)
        return H.ioore(t2, 10);
      t2[10] = 1 - 2 * (xx + yy);
      return G.Transform$(G.Matrix4x4_Transpose(m), m);
    },
    Quaternion$fromMatrix$1: function(m) {
      var t1, t2, t3, t4, t5, trace, s, q, i, j, k, t6, t7;
      t1 = m.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (5 >= t2)
        return H.ioore(t1, 5);
      t4 = t1[5];
      if (10 >= t2)
        return H.ioore(t1, 10);
      t5 = t1[10];
      trace = t3 + t4 + t5;
      if (trace > 0) {
        s = Math.sqrt(trace + 1);
        this.w = s / 2;
        s = 0.5 / s;
        t2 = this.v;
        t3 = t1[9];
        t4 = t1[6];
        t2 = t2.data;
        t5 = t2.length;
        if (0 >= t5)
          return H.ioore(t2, 0);
        t2[0] = (t3 - t4) * s;
        t4 = t1[2];
        t3 = t1[8];
        if (1 >= t5)
          return H.ioore(t2, 1);
        t2[1] = (t4 - t3) * s;
        t3 = t1[4];
        t1 = t1[1];
        if (2 >= t5)
          return H.ioore(t2, 2);
        t2[2] = (t3 - t1) * s;
      } else {
        q = [0, 0, 0];
        i = t4 > t3 ? 1 : 0;
        t3 = i * 4 + i;
        if (t3 >= t2)
          return H.ioore(t1, t3);
        if (t5 > t1[t3])
          i = 2;
        j = C.List_1_2_0[i];
        if (j >>> 0 !== j || j >= 3)
          return H.ioore(C.List_1_2_0, j);
        k = C.List_1_2_0[j];
        t3 = i * 4;
        t4 = t3 + i;
        if (t4 >= t2)
          return H.ioore(t1, t4);
        t4 = t1[t4];
        t5 = j * 4 + j;
        if (t5 >= t2)
          return H.ioore(t1, t5);
        t5 = t1[t5];
        t6 = J.getInterceptor$ns(k);
        t7 = J.$add$ns(t6.$mul(k, 4), k);
        if (t7 >>> 0 !== t7 || t7 >= t2)
          return H.ioore(t1, t7);
        t7 = t1[t7];
        s = Math.sqrt(t4 - (t5 + t7) + 1);
        q[i] = s * 0.5;
        if (s !== 0)
          s = 0.5 / s;
        t4 = J.$add$ns(t6.$mul(k, 4), j);
        if (t4 >>> 0 !== t4 || t4 >= t2)
          return H.ioore(t1, t4);
        t4 = t1[t4];
        if (typeof k !== "number")
          return H.iae(k);
        t5 = j * 4 + k;
        if (t5 >>> 0 !== t5 || t5 >= t2)
          return H.ioore(t1, t5);
        this.w = (t4 - t1[t5]) * s;
        t5 = j * 4 + i;
        if (t5 >= t2)
          return H.ioore(t1, t5);
        t5 = t1[t5];
        t4 = t3 + j;
        if (t4 >= t2)
          return H.ioore(t1, t4);
        q[j] = (t5 + t1[t4]) * s;
        t4 = k * 4 + i;
        if (t4 >>> 0 !== t4 || t4 >= t2)
          return H.ioore(t1, t4);
        t4 = t1[t4];
        t3 += k;
        if (t3 >>> 0 !== t3 || t3 >= t2)
          return H.ioore(t1, t3);
        t3 = t1[t3];
        if (k >>> 0 !== k || k >= 3)
          return H.ioore(q, k);
        q[k] = (t4 + t3) * s;
        t3 = this.v;
        t4 = q[0];
        t3 = t3.data;
        t1 = t3.length;
        if (0 >= t1)
          return H.ioore(t3, 0);
        t3[0] = t4;
        t4 = q[1];
        if (1 >= t1)
          return H.ioore(t3, 1);
        t3[1] = t4;
        t4 = q[2];
        if (2 >= t1)
          return H.ioore(t3, 2);
        t3[2] = t4;
      }
    },
    static: {Quaternion$from: function(q) {
        return new G.Quaternion(new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(q.get$v())))), q.get$w());
      }, Quaternion_Slerp: function(t, q1, q2) {
        var cosTheta, t1, t2, thetap, t3, qperp;
        cosTheta = G.Quaternion_Dot(q1, q2);
        t1 = J.getInterceptor$n(cosTheta);
        if (t1.$gt(cosTheta, 0.9995)) {
          t1 = J.$add$ns(J.$mul$ns(q1, 1 - t), J.$mul$ns(q2, t));
          t2 = G.Quaternion_Dot(t1, t1);
          if (typeof t2 !== "number")
            H.throwExpression(P.ArgumentError$(t2));
          return J.$div$n(t1, Math.sqrt(t2));
        } else {
          t1 = t1.clamp$2(cosTheta, -1, 1);
          thetap = Math.acos(t1) * t;
          t1 = J.getInterceptor$ns(q1);
          t2 = J.$sub$n(q2, t1.$mul(q1, cosTheta));
          t3 = G.Quaternion_Dot(t2, t2);
          if (typeof t3 !== "number")
            H.throwExpression(P.ArgumentError$(t3));
          qperp = J.$div$n(t2, Math.sqrt(t3));
          t1 = t1.$mul(q1, Math.cos(thetap));
          return J.$add$ns(t1, J.$mul$ns(qperp, Math.sin(thetap)));
        }
      }, Quaternion_Dot: function(q1, q2) {
        return J.$add$ns(G.Vector_Dot(q1.get$v(), q2.get$v()), q1.get$w() * q2.get$w());
      }}
  },
  Ray: {
    "^": "Object;origin*,direction@,minDistance<,maxDistance?,time@,depth",
    set$5: function(o, d, minDist, maxDist, time) {
      this.origin = new G.Point(new Float32Array(H._ensureNativeList(o.get$data(o))));
      this.direction = new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(d))));
      this.minDistance = minDist;
      this.maxDistance = maxDist;
      this.time = time;
    },
    pointAt$1: function(t) {
      return new G.Point(new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(this.origin, J.$mul$ns(this.direction, t))))));
    },
    hasNaNs$0: function() {
      return this.origin.hasNaNs$0() || this.direction.hasNaNs$0() || J.get$isNaN$n(this.minDistance) || J.get$isNaN$n(this.maxDistance);
    },
    static: {Ray$: function(o, d, minDistance, maxDistance, time, depth) {
        var t1, t2;
        if (o == null) {
          t1 = new G.Point(new Float32Array(3));
          t1.Vector$3(0, 0, 0);
        } else
          t1 = new G.Point(new Float32Array(H._ensureNativeList(J.get$data$x(o))));
        t2 = d == null ? G.Vector$(0, 0, 0) : new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(d))));
        return new G.Ray(t1, t2, minDistance, maxDistance, time, depth);
      }}
  },
  RayDifferential: {
    "^": "Ray;hasDifferentials<,rxOrigin?,ryOrigin,rxDirection,ryDirection,origin,direction,minDistance,maxDistance,time,depth",
    copy$1: function(b) {
      this.origin.copy$1(J.get$origin$x(b));
      this.direction.copy$1(b.get$direction());
      this.hasDifferentials = b.get$hasDifferentials();
      this.rxOrigin.copy$1(b.rxOrigin);
      this.ryOrigin.copy$1(b.ryOrigin);
      this.rxDirection.copy$1(b.rxDirection);
      this.ryDirection.copy$1(b.ryDirection);
    },
    scaleDifferentials$1: function(s) {
      var t1 = this.origin;
      this.rxOrigin = new G.Point(new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(t1, J.$mul$ns(J.$sub$n(this.rxOrigin, t1), s))))));
      t1 = this.origin;
      this.ryOrigin = new G.Point(new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(t1, J.$mul$ns(J.$sub$n(this.ryOrigin, t1), s))))));
      t1 = this.direction;
      this.rxDirection = J.$add$ns(t1, J.$mul$ns(J.$sub$n(this.rxDirection, t1), s));
      t1 = this.direction;
      this.ryDirection = J.$add$ns(t1, J.$mul$ns(J.$sub$n(this.ryDirection, t1), s));
    },
    hasNaNs$0: function() {
      if (!G.Ray.prototype.hasNaNs$0.call(this))
        if (this.hasDifferentials)
          var t1 = this.rxOrigin.hasNaNs$0() || this.ryOrigin.hasNaNs$0() || this.rxDirection.hasNaNs$0() || this.ryDirection.hasNaNs$0();
        else
          t1 = false;
      else
        t1 = true;
      return t1;
    },
    static: {RayDifferential$fromRay: function(ray) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
        t1 = new G.Point(new Float32Array(3));
        t1.Vector$3(0, 0, 0);
        t2 = new G.Point(new Float32Array(3));
        t2.Vector$3(0, 0, 0);
        t3 = G.Vector$(0, 0, 0);
        t4 = G.Vector$(0, 0, 0);
        t5 = new Float32Array(H._ensureNativeList(J.get$data$x(J.get$origin$x(ray))));
        t6 = new Float32Array(H._ensureNativeList(J.get$data$x(ray.get$direction())));
        t7 = ray.minDistance;
        t8 = ray.maxDistance;
        t9 = ray.time;
        t10 = ray.depth;
        t5 = new G.Point(new Float32Array(H._ensureNativeList(t5)));
        t6 = new G.Vector(new Float32Array(H._ensureNativeList(t6)));
        return new G.RayDifferential(false, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10);
      }}
  },
  Anisotropic: {
    "^": "MicrofacetDistribution;ex,ey",
    d$1: function(wh) {
      var t1, costhetah, d, t2, t3, t4, t5, t6, t7, t8;
      t1 = J.getInterceptor$x(wh);
      costhetah = J.abs$0$n(t1.get$z(wh));
      d = 1 - costhetah * costhetah;
      if (d === 0)
        return 0;
      t2 = this.ex;
      t3 = t1.get$x(wh);
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = t1.get$x(wh);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = this.ey;
      t6 = t1.get$y(wh);
      if (typeof t5 !== "number")
        return t5.$mul();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t1 = t1.get$y(wh);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t7 = this.ex;
      if (typeof t7 !== "number")
        return t7.$add();
      t8 = this.ey;
      if (typeof t8 !== "number")
        return t8.$add();
      t7 = Math.sqrt((t7 + 2) * (t8 + 2));
      return t7 * 0.15915494309189535 * Math.pow(costhetah, (t2 * t3 * t4 + t5 * t6 * t1) / d);
    },
    pdf$2: function(wo, wi) {
      var t1, t2, wh, costhetah, ds, t3, t4, t5, t6, t7, t8, anisotropic_pdf;
      t1 = J.$add$ns(wo, wi);
      t2 = J.getInterceptor$asx(t1);
      wh = t2.$div(t1, t2.length$0(t1));
      t1 = J.getInterceptor$x(wh);
      costhetah = J.abs$0$n(J.$index$asx(t1.get$data(wh), 2));
      ds = 1 - costhetah * costhetah;
      if (ds > 0 && J.$gt$n(G.Vector_Dot(wo, wh), 0)) {
        t2 = this.ex;
        t3 = t1.get$x(wh);
        if (typeof t2 !== "number")
          return t2.$mul();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = t1.get$x(wh);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = this.ey;
        t6 = t1.get$y(wh);
        if (typeof t5 !== "number")
          return t5.$mul();
        if (typeof t6 !== "number")
          return H.iae(t6);
        t1 = t1.get$y(wh);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t7 = this.ex;
        if (typeof t7 !== "number")
          return t7.$add();
        t8 = this.ey;
        if (typeof t8 !== "number")
          return t8.$add();
        t7 = Math.sqrt((t7 + 1) * (t8 + 1));
        t1 = Math.pow(costhetah, (t2 * t3 * t4 + t5 * t6 * t1) / ds);
        t2 = G.Vector_Dot(wo, wh);
        if (typeof t2 !== "number")
          return H.iae(t2);
        anisotropic_pdf = t7 * 0.15915494309189535 * t1 / (4 * t2);
      } else
        anisotropic_pdf = 0;
      return anisotropic_pdf;
    },
    sampleFirstQuadrant$3: function(u1, u2, phi_costheta) {
      var t1, t2, cosphi, sinphi;
      t1 = this.ex;
      t2 = this.ey;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = 3.141592653589793 * u1 * 0.5;
        phi_costheta[0] = t1;
      } else {
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return t2.$add();
        t1 = Math.sqrt((t1 + 1) / (t2 + 1));
        t2 = Math.tan(3.141592653589793 * u1 * 0.5);
        t1 = Math.atan(t1 * t2);
        phi_costheta[0] = t1;
      }
      cosphi = Math.cos(t1);
      t1 = phi_costheta[0];
      if (typeof t1 !== "number")
        H.throwExpression(P.ArgumentError$(t1));
      sinphi = Math.sin(t1);
      t1 = this.ex;
      if (typeof t1 !== "number")
        return t1.$mul();
      t2 = this.ey;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof u2 !== "number")
        H.throwExpression(P.ArgumentError$(u2));
      phi_costheta[1] = Math.pow(u2, 1 / (t1 * cosphi * cosphi + t2 * sinphi * sinphi + 1));
    },
    Anisotropic$2: function(ex, ey) {
      var t1 = this.ex;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 10000 || isNaN(t1))
        this.ex = 10000;
      t1 = this.ey;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 10000 || isNaN(t1))
        this.ey = 10000;
    }
  },
  Blinn: {
    "^": "MicrofacetDistribution;exponent",
    pdf$2: function(wo, wi) {
      var t1, t2, wh, costheta, t3, blinn_pdf;
      t1 = J.$add$ns(wo, wi);
      t2 = J.getInterceptor$asx(t1);
      wh = t2.$div(t1, t2.length$0(t1));
      costheta = J.abs$0$n(J.$index$asx(J.get$data$x(wh), 2));
      t1 = this.exponent;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = Math.pow(costheta, t1);
      t3 = G.Vector_Dot(wo, wh);
      if (typeof t3 !== "number")
        return H.iae(t3);
      blinn_pdf = (t1 + 1) * t2 / (25.132741228718345 * t3);
      return J.$le$n(G.Vector_Dot(wo, wh), 0) ? 0 : blinn_pdf;
    },
    Blinn$1: function(exponent) {
      var t1 = this.exponent;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 10000 || isNaN(t1))
        this.exponent = 10000;
    },
    static: {Blinn$: function(exponent) {
        var t1 = new G.Blinn(exponent);
        t1.Blinn$1(exponent);
        return t1;
      }}
  },
  BRDFToBTDF: {
    "^": "BxDF;brdf,type",
    f$2: [function(wo, wi) {
      var t1 = J.getInterceptor$x(wi);
      return this.brdf.f$2(wo, G.Vector$(t1.get$x(wi), t1.get$y(wi), J.$negate$n(t1.get$z(wi))));
    }, "call$2", "get$f", 4, 0, 104],
    sample_f$5: function(wo, wi, u1, u2, pdf) {
      var f, t1, t2, t3, t4;
      f = this.brdf.sample_f$5(wo, wi, u1, u2, pdf);
      t1 = wi.get$x(wi);
      t2 = wi.get$y(wi);
      t3 = wi.get$z(wi);
      t4 = new Float32Array(3);
      if (0 >= 3)
        return H.ioore(t4, 0);
      t4[0] = t1;
      if (1 >= 3)
        return H.ioore(t4, 1);
      t4[1] = t2;
      if (2 >= 3)
        return H.ioore(t4, 2);
      t4[2] = -t3;
      wi.copy$1(new G.Vector(t4));
      return f;
    },
    rho$3: function(w, nSamples, samples) {
      var t1 = J.getInterceptor$x(w);
      return this.brdf.rho$3(G.Vector$(t1.get$x(w), t1.get$y(w), J.$negate$n(t1.get$z(w))), nSamples, samples);
    },
    rho2$3: function(nSamples, samples1, samples2) {
      return this.brdf.rho2$3(nSamples, samples1, samples2);
    },
    pdf$2: function(wo, wi) {
      return this.brdf.pdf$2(wo, G.Vector$(wi.get$x(wi), wi.get$y(wi), -wi.get$z(wi)));
    },
    static: {BRDFToBTDF$: function(b) {
        var t1 = b.type;
        if (typeof t1 !== "number")
          return t1.$xor();
        return new G.BRDFToBTDF(b, (t1 ^ 3) >>> 0);
      }}
  },
  BSDF: {
    "^": "Object;dgShading,eta,nn<,ng,sn,tn,nBxDFs,bxdfs",
    sample_f$6: function(woW, wiW, bsdfSample, pdf, flags, sampledType) {
      var matchingComps, t1, which, count, i, bxdf, count0, t2, wo, wi, t3, t4, f;
      matchingComps = this.numComponents$1(flags);
      if (matchingComps === 0) {
        J.$indexSet$ax(pdf, 0, 0);
        if (sampledType != null)
          sampledType[0] = 0;
        t1 = new G.RGBColor(new Float32Array(3));
        t1.Spectrum$_$2(3, 0);
        return t1;
      }
      which = P.min(J.floor$0$n(J.$mul$ns(bsdfSample.get$uComponent(), matchingComps)), matchingComps - 1);
      for (t1 = this.bxdfs, count = which, i = 0; bxdf = null, i < this.nBxDFs; ++i) {
        if (i >= 8)
          return H.ioore(t1, i);
        if (t1[i].matchesFlags$1(flags)) {
          count0 = count - 1;
          t2 = count === 0;
          count = count0;
        } else
          t2 = false;
        if (t2) {
          bxdf = t1[i];
          break;
        }
      }
      wo = this.worldToLocal$1(woW);
      wi = G.Vector$(0, 0, 0);
      t2 = J.getInterceptor$ax(pdf);
      t2.$indexSet(pdf, 0, 0);
      t3 = bsdfSample.get$uDir();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t4 = bsdfSample.uDir;
      if (1 >= t4.length)
        return H.ioore(t4, 1);
      f = bxdf.sample_f$5(wo, wi, t3, t4[1], pdf);
      if (J.$eq(t2.$index(pdf, 0), 0)) {
        if (sampledType != null)
          sampledType[0] = 0;
        return G.Spectrum_Spectrum(0);
      }
      if (sampledType != null)
        sampledType[0] = bxdf.get$type(bxdf);
      wiW.copy$1(this.localToWorld$1(wi));
      t3 = bxdf.get$type(bxdf);
      if (typeof t3 !== "number")
        return t3.$and();
      if ((t3 & 16) === 0 && matchingComps > 1)
        for (i = 0; i < this.nBxDFs; ++i) {
          if (i >= 8)
            return H.ioore(t1, i);
          if (!J.$eq(t1[i], bxdf) && t1[i].matchesFlags$1(flags))
            t2.$indexSet(pdf, 0, J.$add$ns(t2.$index(pdf, 0), t1[i].pdf$2(wo, wi)));
        }
      if (matchingComps > 1)
        t2.$indexSet(pdf, 0, J.$div$n(t2.$index(pdf, 0), matchingComps));
      t2 = bxdf.type;
      if (typeof t2 !== "number")
        return t2.$and();
      if ((t2 & 16) === 0) {
        f = G.Spectrum_Spectrum(0);
        t2 = J.getInterceptor$n(flags);
        flags = J.$gt$n(J.$mul$ns(G.Vector_Dot(wiW, this.ng), G.Vector_Dot(woW, this.ng)), 0) ? t2.$and(flags, 4294967293) : t2.$and(flags, 4294967294);
        for (i = 0; i < this.nBxDFs; ++i) {
          if (i >= 8)
            return H.ioore(t1, i);
          if (t1[i].matchesFlags$1(flags))
            f = f.$add(0, t1[i].f$2(wo, wi));
        }
      }
      return f;
    },
    sample_f$5: function(woW, wiW, bsdfSample, pdf, flags) {
      return this.sample_f$6(woW, wiW, bsdfSample, pdf, flags, null);
    },
    sample_f$4: function(woW, wiW, bsdfSample, pdf) {
      return this.sample_f$6(woW, wiW, bsdfSample, pdf, 31, null);
    },
    pdf$3: function(woW, wiW, flags) {
      var wo, wi, t1, pdf, matchingComps, i;
      if (this.nBxDFs === 0)
        return 0;
      wo = this.worldToLocal$1(woW);
      wi = this.worldToLocal$1(wiW);
      for (t1 = this.bxdfs, pdf = 0, matchingComps = 0, i = 0; i < this.nBxDFs; ++i) {
        if (i >= 8)
          return H.ioore(t1, i);
        if (t1[i].matchesFlags$1(flags)) {
          ++matchingComps;
          pdf += t1[i].pdf$2(wo, wi);
        }
      }
      return matchingComps > 0 ? pdf / matchingComps : 0;
    },
    pdf$2: function(woW, wiW) {
      return this.pdf$3(woW, wiW, 31);
    },
    add$1: function(_, bxdf) {
      var t1, t2;
      t1 = this.bxdfs;
      t2 = this.nBxDFs++;
      if (t2 >= 8)
        return H.ioore(t1, t2);
      t1[t2] = bxdf;
    },
    numComponents$1: function(flags) {
      var t1, num, i;
      if (flags == null)
        return this.nBxDFs;
      for (t1 = this.bxdfs, num = 0, i = 0; i < this.nBxDFs; ++i) {
        if (i >= 8)
          return H.ioore(t1, i);
        if (t1[i].matchesFlags$1(flags))
          ++num;
      }
      return num;
    },
    numComponents$0: function() {
      return this.numComponents$1(null);
    },
    worldToLocal$1: function(v) {
      return G.Vector$(G.Vector_Dot(v, this.sn), G.Vector_Dot(v, this.tn), G.Vector_Dot(v, this.nn));
    },
    localToWorld$1: function(v) {
      var t1, t2, t3, t4, t5;
      t1 = J.get$x$x(this.sn);
      t2 = v.data;
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t1 = J.$mul$ns(t1, t2[0]);
      t4 = this.tn.data;
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (1 >= t3)
        return H.ioore(t2, 1);
      t4 = J.$add$ns(t1, t4 * t2[1]);
      t1 = J.get$x$x(this.nn);
      if (2 >= t3)
        return H.ioore(t2, 2);
      t1 = J.$add$ns(t4, J.$mul$ns(t1, t2[2]));
      t4 = J.$mul$ns(J.get$y$x(this.sn), t2[0]);
      t3 = this.tn.data;
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = J.$add$ns(J.$add$ns(t4, t3[1] * t2[1]), J.$mul$ns(J.get$y$x(this.nn), t2[2]));
      t4 = J.$mul$ns(J.get$z$x(this.sn), t2[0]);
      t5 = this.tn.data;
      if (2 >= t5.length)
        return H.ioore(t5, 2);
      return G.Vector$(t1, t3, J.$add$ns(J.$add$ns(t4, t5[2] * t2[1]), J.$mul$ns(J.get$z$x(this.nn), t2[2])));
    },
    f$3: [function(woW, wiW, flags) {
      var wi, wo, t1, f, i;
      wi = this.worldToLocal$1(wiW);
      wo = this.worldToLocal$1(woW);
      t1 = J.getInterceptor$n(flags);
      flags = J.$gt$n(J.$mul$ns(G.Vector_Dot(wiW, this.ng), G.Vector_Dot(woW, this.ng)), 0) ? t1.$and(flags, 4294967293) : t1.$and(flags, 4294967294);
      f = G.Spectrum_Spectrum(0);
      for (t1 = this.bxdfs, i = 0; i < this.nBxDFs; ++i) {
        if (i >= 8)
          return H.ioore(t1, i);
        if (t1[i].matchesFlags$1(flags))
          f = f.$add(0, t1[i].f$2(wo, wi));
      }
      return f;
    }, function(woW, wiW) {
      return this.f$3(woW, wiW, 31);
    }, "f$2", "call$3", "call$2", "get$f", 4, 2, 105, 106],
    rho$3: function(rng, flags, sqrtSamples) {
      var nSamples, t1, t2, s1, s2, ret, i;
      if (typeof sqrtSamples !== "number")
        return sqrtSamples.$mul();
      nSamples = sqrtSamples * sqrtSamples;
      t1 = 2 * nSamples;
      t2 = Array(t1);
      t2.fixed$length = init;
      s1 = H.setRuntimeTypeInfo(t2, [J.JSDouble]);
      G.StratifiedSample2D(s1, sqrtSamples, sqrtSamples, rng, true);
      t1 = Array(t1);
      t1.fixed$length = init;
      s2 = H.setRuntimeTypeInfo(t1, [J.JSDouble]);
      G.StratifiedSample2D(s2, sqrtSamples, sqrtSamples, rng, true);
      ret = G.Spectrum_Spectrum(0);
      for (t1 = this.bxdfs, i = 0; i < this.nBxDFs; ++i) {
        if (i >= 8)
          return H.ioore(t1, i);
        if (t1[i].matchesFlags$1(flags))
          ret = ret.$add(0, t1[i].rho2$3(nSamples, s1, s2));
      }
      return ret;
    },
    rho$2: function(rng, flags) {
      return this.rho$3(rng, flags, 6);
    },
    rho2$4: function(wo, rng, flags, sqrtSamples) {
      var nSamples, t1, s1, ret, i;
      nSamples = sqrtSamples * sqrtSamples;
      t1 = Array(2 * nSamples);
      t1.fixed$length = init;
      s1 = H.setRuntimeTypeInfo(t1, [J.JSDouble]);
      G.StratifiedSample2D(s1, sqrtSamples, sqrtSamples, rng, true);
      ret = G.Spectrum_Spectrum(0);
      for (t1 = this.bxdfs, i = 0; i < this.nBxDFs; ++i) {
        if (i >= 8)
          return H.ioore(t1, i);
        if (t1[i].matchesFlags$1(flags))
          ret = ret.$add(0, t1[i].rho$3(wo, nSamples, s1));
      }
      return ret;
    },
    rho2$3: function(wo, rng, flags) {
      return this.rho2$4(wo, rng, flags, 6);
    },
    rho2$2: function(wo, rng) {
      return this.rho2$4(wo, rng, 31, 6);
    },
    BSDF$3: function(dgShading, ngeom, eta) {
      var t1, t2;
      this.ng = ngeom;
      t1 = this.dgShading;
      this.nn = t1.nn;
      t1 = t1.dpdu;
      t2 = J.getInterceptor$asx(t1);
      t1 = t2.$div(t1, t2.length$0(t1));
      this.sn = t1;
      this.tn = G.Vector_Cross(this.nn, t1);
      this.nBxDFs = 0;
    },
    static: {"^": "BSDF_MAX_BxDFS", BSDF$: function(dgShading, ngeom, eta) {
        var t1 = new G.BSDF(dgShading, eta, null, null, null, null, null, H.setRuntimeTypeInfo(Array(8), [G.BxDF]));
        t1.BSDF$3(dgShading, ngeom, eta);
        return t1;
      }}
  },
  BSDFSample: {
    "^": "Object;uDir<,uComponent<",
    BSDFSample$sample$3: function(sample, offsets, n) {
      var t1, t2, t3, t4, t5;
      t1 = this.uDir;
      t2 = sample.get$twoD();
      t3 = offsets.get$dirOffset();
      if (t3 < 0 || t3 >= t2.length)
        return H.ioore(t2, t3);
      t4 = 2 * n;
      t3 = J.$index$asx(t2[t3], t4);
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = t3;
      t3 = sample.twoD;
      t5 = offsets.dirOffset;
      if (t5 < 0 || t5 >= t3.length)
        return H.ioore(t3, t5);
      t4 = J.$index$asx(t3[t5], t4 + 1);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = t4;
      t4 = sample.oneD;
      t1 = offsets.componentOffset;
      if (t1 < 0 || t1 >= t4.length)
        return H.ioore(t4, t1);
      this.uComponent = J.$index$asx(t4[t1], n);
    },
    BSDFSample$random$1: function(rng) {
      var t1, t2, t3;
      t1 = this.uDir;
      t2 = rng.randomFloat$0();
      t3 = t1.length;
      if (0 >= t3)
        return H.ioore(t1, 0);
      t1[0] = t2;
      t2 = rng.random.nextDouble$0();
      if (1 >= t3)
        return H.ioore(t1, 1);
      t1[1] = t2;
      this.uComponent = rng.random.nextDouble$0();
    },
    static: {BSDFSample$random: function(rng) {
        var t1 = new G.BSDFSample(new Float32Array(2), 0);
        t1.BSDFSample$random$1(rng);
        return t1;
      }, BSDFSample$sample: function(sample, offsets, n) {
        var t1 = new G.BSDFSample(new Float32Array(2), 0);
        t1.BSDFSample$sample$3(sample, offsets, n);
        return t1;
      }}
  },
  BSDFSampleOffsets: {
    "^": "Object;nSamples<,componentOffset,dirOffset<",
    BSDFSampleOffsets$2: function(nSamples, sample) {
      var t1 = this.nSamples;
      sample.n1D.push(t1);
      this.componentOffset = sample.n1D.length - 1;
      t1 = this.nSamples;
      sample.n2D.push(t1);
      this.dirOffset = sample.n2D.length - 1;
    },
    static: {BSDFSampleOffsets$: function(nSamples, sample) {
        var t1 = new G.BSDFSampleOffsets(nSamples, null, null);
        t1.BSDFSampleOffsets$2(nSamples, sample);
        return t1;
      }}
  },
  BSSRDF: {
    "^": "Object;eta,sigma_a,sigma_prime_s"
  },
  BxDF: {
    "^": "Object;type>",
    matchesFlags$1: function(flags) {
      var t1 = this.type;
      if (typeof t1 !== "number")
        return t1.$and();
      if (typeof flags !== "number")
        return H.iae(flags);
      return (t1 & flags) >>> 0 === t1;
    },
    sample_f$5: function(wo, out_wi, u1, u2, out_pdf) {
      var t1;
      out_wi.copy$1(G.CosineSampleHemisphere(u1, u2));
      if (J.$lt$n(J.get$z$x(wo), 0)) {
        t1 = out_wi.data;
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        t1[2] = t1[2] * -1;
      }
      J.$indexSet$ax(out_pdf, 0, this.pdf$2(wo, out_wi));
      return this.f$2(wo, out_wi);
    },
    rho$3: function(w, nSamples, samples) {
      var r, t1, i, t2, pdf, t3, t4, f;
      r = G.Spectrum_Spectrum(0);
      for (t1 = samples.length, i = 0; i < nSamples; ++i) {
        t2 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t2, 0);
        t2[0] = 0;
        if (1 >= 3)
          return H.ioore(t2, 1);
        t2[1] = 0;
        if (2 >= 3)
          return H.ioore(t2, 2);
        t2[2] = 0;
        pdf = [0];
        t3 = 2 * i;
        if (t3 >= t1)
          return H.ioore(samples, t3);
        t4 = samples[t3];
        ++t3;
        if (t3 >= t1)
          return H.ioore(samples, t3);
        f = this.sample_f$5(w, new G.Vector(t2), t4, samples[t3], pdf);
        if (0 >= pdf.length)
          return H.ioore(pdf, 0);
        if (J.$gt$n(pdf[0], 0)) {
          t2 = C.JSNumber_methods.abs$0(t2[2]);
          if (0 >= pdf.length)
            return H.ioore(pdf, 0);
          t3 = pdf[0];
          if (typeof t3 !== "number")
            return H.iae(t3);
          r = r.$add(0, J.$mul$ns(f, t2 / t3));
        }
      }
      return r.$div(0, nSamples);
    },
    rho2$3: function(nSamples, samples1, samples2) {
      var r, t1, t2, i, t3, t4, z, t5, t6, t7, r0, phi, t8, pdf_i, f;
      r = G.Spectrum_Spectrum(0);
      for (t1 = samples2.length, t2 = samples1.length, i = 0; i < nSamples; ++i) {
        t3 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t3, 0);
        t3[0] = 0;
        if (1 >= 3)
          return H.ioore(t3, 1);
        t3[1] = 0;
        if (2 >= 3)
          return H.ioore(t3, 2);
        t3[2] = 0;
        t4 = 2 * i;
        if (t4 >= t2)
          return H.ioore(samples1, t4);
        z = samples1[t4];
        t5 = t4 + 1;
        if (t5 >= t2)
          return H.ioore(samples1, t5);
        t6 = samples1[t5];
        t7 = J.$mul$ns(z, z);
        if (typeof t7 !== "number")
          return H.iae(t7);
        t7 = P.max(0, 1 - t7);
        r0 = Math.sqrt(t7);
        if (typeof t6 !== "number")
          return H.iae(t6);
        phi = 6.283185307179586 * t6;
        t6 = Math.cos(phi);
        t7 = Math.sin(phi);
        t8 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t8, 0);
        t8[0] = r0 * t6;
        if (1 >= 3)
          return H.ioore(t8, 1);
        t8[1] = r0 * t7;
        if (2 >= 3)
          return H.ioore(t8, 2);
        t8[2] = z;
        pdf_i = [0];
        if (t4 >= t1)
          return H.ioore(samples2, t4);
        t4 = samples2[t4];
        if (t5 >= t1)
          return H.ioore(samples2, t5);
        f = this.sample_f$5(new G.Vector(t8), new G.Vector(t3), t4, samples2[t5], pdf_i);
        if (0 >= pdf_i.length)
          return H.ioore(pdf_i, 0);
        if (J.$gt$n(pdf_i[0], 0)) {
          t3 = C.JSNumber_methods.abs$0(t3[2]);
          t8 = C.JSNumber_methods.abs$0(t8[2]);
          if (0 >= pdf_i.length)
            return H.ioore(pdf_i, 0);
          t4 = pdf_i[0];
          if (typeof t4 !== "number")
            return H.iae(t4);
          r = r.$add(0, J.$mul$ns(f, t3 * t8 / (0.15915494309189535 * t4)));
        }
      }
      return r.$div(0, 3.141592653589793 * nSamples);
    },
    pdf$2: function(wo, wi) {
      var t1, t2;
      t1 = J.get$z$x(wo);
      t2 = wi.data;
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      return J.$gt$n(J.$mul$ns(t1, t2[2]), 0) ? C.JSNumber_methods.abs$0(t2[2]) * 0.3183098861837907 : 0;
    }
  },
  Fresnel: {
    "^": "Object;"
  },
  FresnelBlend: {
    "^": "BxDF;Rd,Rs,distribution,type",
    f$2: [function(wo, wi) {
      var t1, t2, t3, t4, t5, t6, t7, diffuse, wh;
      t1 = this.Rd.$mul(0, 0.387507687528093);
      t2 = $.get$Spectrum_ONE();
      t3 = this.Rs;
      t1 = t1.$mul(0, t2.$sub(0, t3));
      t4 = J.getInterceptor$x(wi);
      t5 = J.abs$0$n(J.$index$asx(t4.get$data(wi), 2));
      t5 = Math.pow(1 - 0.5 * t5, 5);
      t6 = J.getInterceptor$x(wo);
      t7 = J.abs$0$n(J.$index$asx(t6.get$data(wo), 2));
      diffuse = t1.$mul(0, (1 - t5) * (1 - Math.pow(1 - 0.5 * t7, 5)));
      wh = t4.$add(wi, wo);
      t1 = J.getInterceptor$x(wh);
      if (J.$eq(t1.get$x(wh), 0) && J.$eq(t1.get$y(wh), 0) && J.$eq(t1.get$z(wh), 0))
        return G.Spectrum_Spectrum(0);
      wh = t1.$div(wh, t1.length$0(wh));
      t1 = this.distribution.d$1(wh);
      t5 = G.Vector_AbsDot(wi, wh);
      t6 = P.max(J.abs$0$n(J.$index$asx(t4.get$data(wi), 2)), J.abs$0$n(J.$index$asx(t6.get$data(wo), 2)));
      t4 = G.Vector_Dot(wi, wh);
      t2 = t2.$sub(0, t3);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return diffuse.$add(0, t3.$add(0, t2.$mul(0, Math.pow(1 - t4, 5))).$mul(0, t1 / (4 * t5 * t6)));
    }, "call$2", "get$f", 4, 0, 104],
    sample_f$5: function(wo, wi, u1, u2, outPdf) {
      var t1, phi_cosTheta, t2, phi, cosTheta, sintheta, t3, t4, wh, t5, t6, t7, t8, t9, costhetah, ds, anisotropic_pdf;
      t1 = J.getInterceptor$n(u1);
      if (t1.$lt(u1, 0.5)) {
        if (typeof u1 !== "number")
          return H.iae(u1);
        wi.copy$1(G.CosineSampleHemisphere(2 * u1, u2));
        if (J.$lt$n(J.get$z$x(wo), 0)) {
          t1 = wi.data;
          if (2 >= t1.length)
            return H.ioore(t1, 2);
          t1[2] = t1[2] * -1;
        }
      } else {
        t1 = t1.$sub(u1, 0.5);
        if (typeof t1 !== "number")
          return H.iae(t1);
        u1 = 2 * t1;
        t1 = this.distribution;
        phi_cosTheta = [0, 0];
        if (u1 < 0.25)
          t1.sampleFirstQuadrant$3(4 * u1, u2, phi_cosTheta);
        else if (u1 < 0.5) {
          t1.sampleFirstQuadrant$3(4 * (0.5 - u1), u2, phi_cosTheta);
          t2 = phi_cosTheta[0];
          if (typeof t2 !== "number")
            return H.iae(t2);
          phi_cosTheta[0] = 3.141592653589793 - t2;
        } else if (u1 < 0.75) {
          t1.sampleFirstQuadrant$3(4 * (u1 - 0.5), u2, phi_cosTheta);
          phi_cosTheta[0] = J.$add$ns(phi_cosTheta[0], 3.141592653589793);
        } else {
          t1.sampleFirstQuadrant$3(4 * (1 - u1), u2, phi_cosTheta);
          t2 = phi_cosTheta[0];
          if (typeof t2 !== "number")
            return H.iae(t2);
          phi_cosTheta[0] = 6.283185307179586 - t2;
        }
        phi = phi_cosTheta[0];
        cosTheta = phi_cosTheta[1];
        t2 = J.$mul$ns(cosTheta, cosTheta);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = P.max(0, 1 - t2);
        sintheta = Math.sqrt(t2);
        t2 = typeof phi !== "number";
        if (t2)
          H.throwExpression(P.ArgumentError$(phi));
        t3 = Math.cos(phi);
        if (t2)
          H.throwExpression(P.ArgumentError$(phi));
        t2 = Math.sin(phi);
        t4 = new Float32Array(3);
        wh = new G.Vector(t4);
        if (0 >= 3)
          return H.ioore(t4, 0);
        t4[0] = sintheta * t3;
        if (1 >= 3)
          return H.ioore(t4, 1);
        t4[1] = sintheta * t2;
        if (2 >= 3)
          return H.ioore(t4, 2);
        t4[2] = cosTheta;
        t2 = J.getInterceptor$x(wo);
        if (!J.$gt$n(J.$mul$ns(t2.get$z(wo), t4[2]), 0)) {
          t3 = t4[0];
          t5 = t4[1];
          t4 = t4[2];
          t6 = new Float32Array(3);
          wh = new G.Vector(t6);
          if (0 >= 3)
            return H.ioore(t6, 0);
          t6[0] = -t3;
          if (1 >= 3)
            return H.ioore(t6, 1);
          t6[1] = -t5;
          if (2 >= 3)
            return H.ioore(t6, 2);
          t6[2] = -t4;
        }
        t3 = t2.$negate(wo);
        t4 = wh.data;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t7 = t4[1];
        if (2 >= t5)
          return H.ioore(t4, 2);
        t5 = t4[2];
        t8 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t8, 0);
        t8[0] = t6 * 2;
        if (1 >= 3)
          return H.ioore(t8, 1);
        t8[1] = t7 * 2;
        if (2 >= 3)
          return H.ioore(t8, 2);
        t8[2] = t5 * 2;
        t5 = G.Vector_Dot(wo, wh);
        t7 = t8[0];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t8[1];
        t8 = t8[2];
        t9 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t9, 0);
        t9[0] = t7 * t5;
        if (1 >= 3)
          return H.ioore(t9, 1);
        t9[1] = t6 * t5;
        if (2 >= 3)
          return H.ioore(t9, 2);
        t9[2] = t8 * t5;
        wi.copy$1(J.$add$ns(t3, new G.Vector(t9)));
        costhetah = C.JSNumber_methods.abs$0(t4[2]);
        ds = 1 - costhetah * costhetah;
        if (ds > 0 && J.$gt$n(G.Vector_Dot(wo, wh), 0)) {
          t3 = t1.ex;
          t5 = t4[0];
          if (typeof t3 !== "number")
            return t3.$mul();
          t1 = t1.ey;
          t4 = t4[1];
          if (typeof t1 !== "number")
            return t1.$mul();
          t6 = Math.sqrt((t3 + 1) * (t1 + 1));
          t1 = Math.pow(costhetah, (t3 * t5 * t5 + t1 * t4 * t4) / ds);
          t3 = G.Vector_Dot(wo, wh);
          if (typeof t3 !== "number")
            return H.iae(t3);
          anisotropic_pdf = t6 * 0.15915494309189535 * t1 / (4 * t3);
        } else
          anisotropic_pdf = 0;
        J.$indexSet$ax(outPdf, 0, anisotropic_pdf);
        t1 = t2.get$z(wo);
        t2 = wi.data;
        if (2 >= t2.length)
          return H.ioore(t2, 2);
        if (!(t1 * t2[2] > 0))
          return G.Spectrum_Spectrum(0);
      }
      J.$indexSet$ax(outPdf, 0, this.pdf$2(wo, wi));
      return this.f$2(wo, wi);
    },
    pdf$2: function(wo, wi) {
      var t1, t2;
      t1 = J.get$z$x(wo);
      t2 = wi.data;
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      if (!J.$gt$n(J.$mul$ns(t1, t2[2]), 0))
        return 0;
      return 0.5 * (C.JSNumber_methods.abs$0(t2[2]) * 0.3183098861837907 + this.distribution.pdf$2(wo, wi));
    }
  },
  FresnelConductor: {
    "^": "Fresnel;eta,k",
    evaluate$1: function(cosi) {
      var t1, cosSqr, t2, t3, tmp, t4, t5, Rparl2, tmp_f;
      cosi = J.abs$0$n(cosi);
      t1 = cosi * cosi;
      cosSqr = G.Spectrum_Spectrum(t1);
      t2 = this.eta;
      t3 = this.k;
      tmp = t2.$mul(0, t2).$add(0, t3.$mul(0, t3)).$mul(0, t1);
      t1 = 2 * cosi;
      t4 = tmp.$sub(0, t2.$mul(t2, t1));
      t5 = $.get$FresnelConductor_ONE();
      Rparl2 = t4.$add(0, t5).$div(0, tmp.$add(0, t2.$mul(t2, t1)).$add(0, t5));
      tmp_f = t2.$mul(t2, t2).$add(0, t3.$mul(t3, t3));
      return Rparl2.$add(0, tmp_f.$sub(0, t2.$mul(t2, t1)).$add(0, cosSqr).$div(0, tmp_f.$add(0, t2.$mul(t2, t1)).$add(0, cosSqr))).$div(0, 2);
    },
    static: {"^": "FresnelConductor_ONE", FresnelConductor$: function(e, kk) {
        return new G.FresnelConductor(G.Spectrum_Spectrum$from(e, 0), G.Spectrum_Spectrum$from(kk, 0));
      }}
  },
  FresnelDielectric: {
    "^": "Fresnel;eta_i,eta_t",
    evaluate$1: function(cosi) {
      var ei, et, t0, t1, t2, t3, sint, cost, Rparl, Rperp;
      cosi = J.clamp$2$n(cosi, -1, 1);
      if (typeof cosi !== "number")
        return cosi.$gt();
      ei = this.eta_i;
      et = this.eta_t;
      if (!(cosi > 0)) {
        t0 = et;
        et = ei;
        ei = t0;
      }
      t1 = J.getInterceptor$n(ei);
      t2 = t1.$div(ei, et);
      t3 = P.max(0, 1 - cosi * cosi);
      sint = J.$mul$ns(t2, Math.sqrt(t3));
      t2 = J.getInterceptor$n(sint);
      if (t2.$ge(sint, 1))
        return G.Spectrum_Spectrum(1);
      t2 = t2.$mul(sint, sint);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = P.max(0, 1 - t2);
      cost = Math.sqrt(t2);
      cosi = Math.abs(cosi);
      t2 = J.getInterceptor$ns(et);
      Rparl = J.$div$n(J.$sub$n(t2.$mul(et, cosi), t1.$mul(ei, cost)), J.$add$ns(t2.$mul(et, cosi), t1.$mul(ei, cost)));
      Rperp = J.$div$n(J.$sub$n(t1.$mul(ei, cosi), t2.$mul(et, cost)), J.$add$ns(t1.$mul(ei, cosi), t2.$mul(et, cost)));
      return G.Spectrum_Spectrum(J.$div$n(J.$add$ns(J.$mul$ns(Rparl, Rparl), J.$mul$ns(Rperp, Rperp)), 2));
    }
  },
  FresnelNoOp: {
    "^": "Fresnel;",
    evaluate$1: function($double) {
      return G.Spectrum_Spectrum(1);
    }
  },
  IrregIsotropicBRDFSample: {
    "^": "Object;p>,v<",
    p$4: function($receiver, arg0, arg1, arg2, arg3) {
      return this.p.call$4(arg0, arg1, arg2, arg3);
    }
  },
  IrregularIsotropicBRDF: {
    "^": "BxDF;isoBRDFData,type",
    f$2: [function(wo, wi) {
      var m, t1, lastMaxDist2, t2;
      m = G.BRDFRemap(wo, wi);
      for (t1 = this.isoBRDFData, lastMaxDist2 = 0.001; true;) {
        t2 = {};
        t2.v_0 = G.Spectrum_Spectrum(0);
        t2.sumWeights_1 = 0;
        t2.nFound_2 = 0;
        t1._core0$_lookup$4(0, m, new G.IrregularIsotropicBRDF_f_proc(t2), [lastMaxDist2]);
        if (t2.nFound_2 > 2 || lastMaxDist2 > 1.5)
          return t2.v_0.clamp$0(0).$div(0, t2.sumWeights_1);
        lastMaxDist2 *= 2;
      }
    }, "call$2", "get$f", 4, 0, 104]
  },
  IrregularIsotropicBRDF_f_proc: {
    "^": "Closure:107;box_0",
    call$4: function(p, sample, d2, maxDist2) {
      var weight, t1;
      weight = Math.exp(-100 * d2);
      t1 = this.box_0;
      t1.v_0 = t1.v_0.$add(0, J.$mul$ns(sample.get$v(), weight));
      t1.sumWeights_1 += weight;
      ++t1.nFound_2;
    }
  },
  Lambertian: {
    "^": "BxDF;R,type",
    f$2: [function(wo, wi) {
      return this.R.$mul(0, 0.3183098861837907);
    }, "call$2", "get$f", 4, 0, 104],
    rho$3: function(Vector, $int, samples) {
      return this.R;
    },
    rho2$3: function($int, samples1, samples2) {
      return this.R;
    },
    static: {Lambertian$: function(reflectance) {
        return new G.Lambertian(G.Spectrum_Spectrum$from(reflectance, 0), 5);
      }}
  },
  Microfacet: {
    "^": "BxDF;R,distribution,fresnel,type",
    f$2: [function(wo, wi) {
      var t1, cosThetaO, t2, cosThetaI, wh, t3, $F, t4, costhetah, t5, NdotWh, NdotWo, NdotWi, WOdotWh;
      t1 = J.getInterceptor$x(wo);
      cosThetaO = J.abs$0$n(J.$index$asx(t1.get$data(wo), 2));
      t2 = J.getInterceptor$x(wi);
      cosThetaI = J.abs$0$n(J.$index$asx(t2.get$data(wi), 2));
      if (cosThetaI === 0 || cosThetaO === 0)
        return G.Spectrum_Spectrum(0);
      wh = t2.$add(wi, wo);
      t3 = J.getInterceptor$x(wh);
      if (J.$eq(t3.get$x(wh), 0) && J.$eq(t3.get$y(wh), 0) && J.$eq(t3.get$z(wh), 0))
        return G.Spectrum_Spectrum(0);
      wh = t3.$div(wh, t3.length$0(wh));
      $F = this.fresnel.evaluate$1(G.Vector_Dot(wi, wh));
      t3 = this.distribution;
      t4 = J.getInterceptor$x(wh);
      costhetah = J.abs$0$n(J.$index$asx(t4.get$data(wh), 2));
      t3 = t3.exponent;
      if (typeof t3 !== "number")
        return t3.$add();
      t5 = Math.pow(costhetah, t3);
      NdotWh = J.abs$0$n(J.$index$asx(t4.get$data(wh), 2));
      NdotWo = J.abs$0$n(J.$index$asx(t1.get$data(wo), 2));
      NdotWi = J.abs$0$n(J.$index$asx(t2.get$data(wi), 2));
      WOdotWh = G.Vector_AbsDot(wo, wh);
      t2 = 2 * NdotWh;
      return J.$div$n(J.$mul$ns(J.$mul$ns(this.R, (t3 + 2) * 0.15915494309189535 * t5 * P.min(1, P.min(t2 * NdotWo / WOdotWh, t2 * NdotWi / WOdotWh))), $F), 4 * cosThetaI * cosThetaO);
    }, "call$2", "get$f", 4, 0, 104],
    sample_f$5: function(wo, wi, u1, u2, pdf) {
      var t1, t2, costheta, sintheta, phi, t3, t4, wh, t5, t6, t7, t8, blinn_pdf;
      t1 = this.distribution;
      t2 = t1.exponent;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof u1 !== "number")
        H.throwExpression(P.ArgumentError$(u1));
      costheta = Math.pow(u1, 1 / (t2 + 1));
      t2 = P.max(0, 1 - costheta * costheta);
      sintheta = Math.sqrt(t2);
      phi = J.$mul$ns(J.$mul$ns(u2, 2), 3.141592653589793);
      t2 = typeof phi !== "number";
      if (t2)
        H.throwExpression(P.ArgumentError$(phi));
      t3 = Math.cos(phi);
      if (t2)
        H.throwExpression(P.ArgumentError$(phi));
      t2 = Math.sin(phi);
      t4 = new Float32Array(3);
      wh = new G.Vector(t4);
      if (0 >= 3)
        return H.ioore(t4, 0);
      t4[0] = sintheta * t3;
      if (1 >= 3)
        return H.ioore(t4, 1);
      t4[1] = sintheta * t2;
      if (2 >= 3)
        return H.ioore(t4, 2);
      t4[2] = costheta;
      t2 = J.getInterceptor$x(wo);
      if (!J.$gt$n(J.$mul$ns(t2.get$z(wo), t4[2]), 0)) {
        t3 = t4[0];
        t5 = t4[1];
        t4 = t4[2];
        t6 = new Float32Array(3);
        wh = new G.Vector(t6);
        if (0 >= 3)
          return H.ioore(t6, 0);
        t6[0] = -t3;
        if (1 >= 3)
          return H.ioore(t6, 1);
        t6[1] = -t5;
        if (2 >= 3)
          return H.ioore(t6, 2);
        t6[2] = -t4;
      }
      t3 = t2.$negate(wo);
      t4 = wh.data;
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t6 = t4[0];
      if (1 >= t5)
        return H.ioore(t4, 1);
      t7 = t4[1];
      if (2 >= t5)
        return H.ioore(t4, 2);
      t4 = t4[2];
      t5 = new Float32Array(3);
      if (0 >= 3)
        return H.ioore(t5, 0);
      t5[0] = t6 * 2;
      if (1 >= 3)
        return H.ioore(t5, 1);
      t5[1] = t7 * 2;
      if (2 >= 3)
        return H.ioore(t5, 2);
      t5[2] = t4 * 2;
      t4 = G.Vector_Dot(wo, wh);
      t7 = t5[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t6 = t5[1];
      t5 = t5[2];
      t8 = new Float32Array(3);
      if (0 >= 3)
        return H.ioore(t8, 0);
      t8[0] = t7 * t4;
      if (1 >= 3)
        return H.ioore(t8, 1);
      t8[1] = t6 * t4;
      if (2 >= 3)
        return H.ioore(t8, 2);
      t8[2] = t5 * t4;
      wi.copy$1(J.$add$ns(t3, new G.Vector(t8)));
      t1 = t1.exponent;
      if (typeof t1 !== "number")
        return t1.$add();
      t3 = Math.pow(costheta, t1);
      t4 = G.Vector_Dot(wo, wh);
      if (typeof t4 !== "number")
        return H.iae(t4);
      blinn_pdf = (t1 + 1) * t3 / (25.132741228718345 * t4);
      J.$indexSet$ax(pdf, 0, J.$le$n(G.Vector_Dot(wo, wh), 0) ? 0 : blinn_pdf);
      t1 = t2.get$z(wo);
      t2 = wi.data;
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      if (!(t1 * t2[2] > 0))
        return G.Spectrum_Spectrum(0);
      return this.f$2(wo, wi);
    },
    pdf$2: function(wo, wi) {
      var t1, t2;
      t1 = J.get$z$x(wo);
      t2 = wi.data;
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      if (!J.$gt$n(J.$mul$ns(t1, t2[2]), 0))
        return 0;
      return this.distribution.pdf$2(wo, wi);
    }
  },
  MicrofacetDistribution: {
    "^": "Object;"
  },
  OrenNayar: {
    "^": "BxDF;R,A,B,type",
    f$2: [function(wo, wi) {
      var t1, sinthetai, sinthetao, sinphii, cosphii, sinphio, maxcos, t2, tanbeta, sinalpha;
      t1 = G.Vector_SinTheta2(wi);
      sinthetai = Math.sqrt(t1);
      t1 = G.Vector_SinTheta2(wo);
      sinthetao = Math.sqrt(t1);
      if (sinthetai > 0.0001 && sinthetao > 0.0001) {
        sinphii = G.Vector_SinPhi(wi);
        cosphii = G.Vector_CosPhi(wi);
        sinphio = G.Vector_SinPhi(wo);
        maxcos = P.max(0, J.$add$ns(J.$mul$ns(cosphii, G.Vector_CosPhi(wo)), J.$mul$ns(sinphii, sinphio)));
      } else
        maxcos = 0;
      t1 = J.getInterceptor$x(wi);
      t2 = J.getInterceptor$x(wo);
      if (J.abs$0$n(J.$index$asx(t1.get$data(wi), 2)) > J.abs$0$n(J.$index$asx(t2.get$data(wo), 2))) {
        tanbeta = sinthetai / J.abs$0$n(J.$index$asx(t1.get$data(wi), 2));
        sinalpha = sinthetao;
      } else {
        tanbeta = sinthetao / J.abs$0$n(J.$index$asx(t2.get$data(wo), 2));
        sinalpha = sinthetai;
      }
      return this.R.$mul(0, 0.3183098861837907 * (this.A + this.B * maxcos * sinalpha * tanbeta));
    }, "call$2", "get$f", 4, 0, 104],
    OrenNayar$2: function(reflectance, sig) {
      var sigma, sigma2;
      if (typeof sig !== "number")
        return H.iae(sig);
      sigma = 0.017453292519943295 * sig;
      sigma2 = sigma * sigma;
      this.A = 1 - sigma2 / (2 * (sigma2 + 0.33));
      this.B = 0.45 * sigma2 / (sigma2 + 0.09);
    }
  },
  RegularHalfangleBRDF: {
    "^": "BxDF;brdf,nThetaH,nThetaD,nPhiD,type",
    f$2: [function(WO, WI) {
      var wo, wi, wh, t1, t2, whTheta, whCosPhi, whSinPhi, whCosTheta, whSinTheta, whx, why, wd, wdTheta, wdPhi, whThetaIndex, wdThetaIndex, wdPhiIndex, t3, t4, t5;
      wo = new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(WO))));
      wi = new G.Vector(new Float32Array(H._ensureNativeList(J.get$data$x(WI))));
      wh = wo.$add(0, wi);
      t1 = wh.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      if (t1[2] < 0) {
        wo.$negate(0);
        wi = wi.$negate(0);
        wh = wh.$negate(0);
      }
      t1 = wh.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      if (t1[0] === 0) {
        if (1 >= t2)
          return H.ioore(t1, 1);
        if (t1[1] === 0) {
          if (2 >= t2)
            return H.ioore(t1, 2);
          t1 = t1[2] === 0;
        } else
          t1 = false;
      } else
        t1 = false;
      if (t1)
        return G.Spectrum_Spectrum(0);
      wh = wh.$div(0, wh.length$0(0));
      t1 = C.JSNumber_methods.clamp$2(wh.get$z(wh), -1, 1);
      whTheta = Math.acos(t1);
      whCosPhi = G.Vector_CosPhi(wh);
      whSinPhi = G.Vector_SinPhi(wh);
      t1 = wh.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      whCosTheta = t1[2];
      t1 = G.Vector_SinTheta2(wh);
      whSinTheta = Math.sqrt(t1);
      t1 = J.getInterceptor$ns(whSinPhi);
      whx = G.Vector$(J.$mul$ns(whCosPhi, whCosTheta), t1.$mul(whSinPhi, whCosTheta), -whSinTheta);
      why = G.Vector$(t1.$negate(whSinPhi), whCosPhi, 0);
      wd = G.Vector$(G.Vector_Dot(wi, whx), G.Vector_Dot(wi, why), G.Vector_Dot(wi, wh));
      t1 = C.JSNumber_methods.clamp$2(wd.get$z(wd), -1, 1);
      wdTheta = Math.acos(t1);
      wdPhi = G.Vector_SphericalPhi(wd);
      if (wdPhi > 3.141592653589793)
        wdPhi -= 3.141592653589793;
      t1 = new G.RegularHalfangleBRDF_f_REMAP();
      t2 = P.max(0, whTheta / 1.5707963267948966);
      whThetaIndex = t1.call$3(Math.sqrt(t2), 1, this.nThetaH);
      wdThetaIndex = t1.call$3(wdTheta, 1.5707963267948966, this.nThetaD);
      wdPhiIndex = t1.call$3(wdPhi, 3.141592653589793, this.nPhiD);
      t1 = this.nPhiD;
      t2 = J.$add$ns(wdThetaIndex, J.$mul$ns(whThetaIndex, this.nThetaD));
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.brdf;
      t2 = 3 * J.$add$ns(wdPhiIndex, t1 * t2);
      t1 = t3.length;
      if (t2 >>> 0 !== t2 || t2 >= t1)
        return H.ioore(t3, t2);
      t4 = t3[t2];
      t5 = t2 + 1;
      if (t5 >= t1)
        return H.ioore(t3, t5);
      t5 = t3[t5];
      t2 += 2;
      if (t2 >= t1)
        return H.ioore(t3, t2);
      return G.Spectrum_Spectrum$rgb(t4, t5, t3[t2]);
    }, "call$2", "get$f", 4, 0, 104]
  },
  RegularHalfangleBRDF_f_REMAP: {
    "^": "Closure:108;",
    call$3: function($V, MAX, COUNT) {
      var t1 = C.JSNumber_methods.toInt$0($V / MAX);
      if (typeof COUNT !== "number")
        return H.iae(COUNT);
      return C.JSInt_methods.clamp$2(t1 * COUNT, 0, COUNT - 1);
    }
  },
  ScaledBxDF: {
    "^": "BxDF;bxdf,s,type",
    rho$3: function(w, nSamples, samples) {
      return this.s.$mul(0, this.bxdf.rho$3(w, nSamples, samples));
    },
    rho2$3: function(nSamples, samples1, samples2) {
      return this.s.$mul(0, this.bxdf.rho2$3(nSamples, samples1, samples2));
    },
    f$2: [function(wo, wi) {
      return this.s.$mul(0, this.bxdf.f$2(wo, wi));
    }, "call$2", "get$f", 4, 0, 104],
    sample_f$5: function(wo, wi, u1, u2, pdf) {
      return this.s.$mul(0, this.bxdf.sample_f$5(wo, wi, u1, u2, pdf));
    }
  },
  SpecularReflection: {
    "^": "BxDF;R,fresnel,type",
    f$2: [function(wo, wi) {
      return G.Spectrum_Spectrum(0);
    }, "call$2", "get$f", 4, 0, 104],
    sample_f$5: function(wo, wi, u1, u2, pdf) {
      var t1, t2, t3, t4;
      t1 = J.getInterceptor$x(wo);
      t2 = J.$negate$n(t1.get$x(wo));
      t3 = wi.data;
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t3[0] = t2;
      t2 = J.$negate$n(t1.get$y(wo));
      if (1 >= t4)
        return H.ioore(t3, 1);
      t3[1] = t2;
      t2 = t1.get$z(wo);
      if (2 >= t4)
        return H.ioore(t3, 2);
      t3[2] = t2;
      J.$indexSet$ax(pdf, 0, 1);
      return this.fresnel.evaluate$1(J.$index$asx(t1.get$data(wo), 2)).$mul(0, this.R).$div(0, C.JSNumber_methods.abs$0(t3[2]));
    },
    pdf$2: function(wo, wi) {
      return 0;
    },
    static: {SpecularReflection$: function(r, f) {
        return new G.SpecularReflection(G.Spectrum_Spectrum$from(r, 0), f, 17);
      }}
  },
  SpecularTransmission: {
    "^": "BxDF;T,etai,etat,fresnel,type",
    f$2: [function(wo, wi) {
      return G.Spectrum_Spectrum(0);
    }, "call$2", "get$f", 4, 0, 104],
    sample_f$5: function(wo, wi, u1, u2, pdf) {
      var t1, entering, ei, et, t0, t2, sini2, eta, sint2, t3, cost, t4, t5, $F;
      t1 = J.getInterceptor$x(wo);
      entering = J.$gt$n(J.$index$asx(t1.get$data(wo), 2), 0);
      ei = this.etai;
      et = this.etat;
      if (!entering) {
        t0 = et;
        et = ei;
        ei = t0;
      }
      t2 = J.$mul$ns(J.$index$asx(t1.get$data(wo), 2), J.$index$asx(t1.get$data(wo), 2));
      if (typeof t2 !== "number")
        return H.iae(t2);
      sini2 = P.max(0, 1 - t2);
      eta = J.$div$n(ei, et);
      t2 = J.getInterceptor$ns(eta);
      sint2 = J.$mul$ns(t2.$mul(eta, eta), sini2);
      if (J.$ge$n(sint2, 1))
        return G.Spectrum_Spectrum(0);
      if (typeof sint2 !== "number")
        return H.iae(sint2);
      t3 = P.max(0, 1 - sint2);
      cost = Math.sqrt(t3);
      if (entering)
        cost = -cost;
      t3 = t2.$mul(eta, J.$negate$n(t1.get$x(wo)));
      t4 = wi.data;
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t4[0] = t3;
      t2 = t2.$mul(eta, J.$negate$n(t1.get$y(wo)));
      if (1 >= t5)
        return H.ioore(t4, 1);
      t4[1] = t2;
      if (2 >= t5)
        return H.ioore(t4, 2);
      t4[2] = cost;
      J.$indexSet$ax(pdf, 0, 1);
      $F = this.fresnel.evaluate$1(J.$index$asx(t1.get$data(wo), 2));
      return G.Spectrum_Spectrum(1).$sub(0, $F).$mul(0, this.T).$div(0, C.JSNumber_methods.abs$0(t4[2]));
    },
    pdf$2: function(wo, wi) {
      return 0;
    },
    SpecularTransmission$3: function(t, ei, et) {
      this.T = t;
      this.etai = ei;
      this.etat = et;
    },
    static: {SpecularTransmission$: function(t, ei, et) {
        var t1 = new G.SpecularTransmission(null, null, null, new G.FresnelDielectric(ei, et), 18);
        t1.SpecularTransmission$3(t, ei, et);
        return t1;
      }}
  },
  RenderOverrides: {
    "^": "Object;quickRender,resolutionScale,samplingMode,filterName,filterParams,filmName,filmParams,pixelSamplerName,pixelSamplerParams,samplerName,samplerParams,acceleratorName,acceleratorParams,rendererName,rendererParams,surfaceIntegratorName,surfaceIntegratorParams,volumeIntegratorName,volumeIntegratorParams,cameraName,cameraParams",
    RenderOverrides$fromJson$1: function(json) {
      $.RenderOverrides_global = this;
      if (json.containsKey$1("quickRender") === true)
        this.quickRender = json.$index(0, "quickRender");
      if (json.containsKey$1("resolutionScale") === true)
        this.resolutionScale = json.$index(0, "resolutionScale");
      if (json.containsKey$1("samplingMode") === true)
        this.samplingMode = json.$index(0, "samplingMode");
      if (json.containsKey$1("filter") === true) {
        this.filterName = J.$index$asx(json.$index(0, "filter"), "name");
        this.filterParams = G.ParamSet$fromJson(J.$index$asx(json.$index(0, "filter"), "params"));
      }
      if (json.containsKey$1("film") === true) {
        this.filmName = J.$index$asx(json.$index(0, "film"), "name");
        this.filmParams = G.ParamSet$fromJson(J.$index$asx(json.$index(0, "film"), "params"));
      }
      if (json.containsKey$1("pixelSampler") === true) {
        this.pixelSamplerName = J.$index$asx(json.$index(0, "pixelSampler"), "name");
        this.pixelSamplerParams = G.ParamSet$fromJson(J.$index$asx(json.$index(0, "pixelSampler"), "params"));
      }
      if (json.containsKey$1("sampler") === true) {
        this.samplerName = J.$index$asx(json.$index(0, "sampler"), "name");
        this.samplerParams = G.ParamSet$fromJson(J.$index$asx(json.$index(0, "sampler"), "params"));
      }
      if (json.containsKey$1("accelerator") === true) {
        this.acceleratorName = J.$index$asx(json.$index(0, "accelerator"), "name");
        this.acceleratorParams = G.ParamSet$fromJson(J.$index$asx(json.$index(0, "accelerator"), "params"));
      }
      if (json.containsKey$1("renderer") === true) {
        this.rendererName = J.$index$asx(json.$index(0, "renderer"), "name");
        this.rendererParams = G.ParamSet$fromJson(J.$index$asx(json.$index(0, "renderer"), "params"));
      }
      if (json.containsKey$1("surfaceIntegrator") === true) {
        this.surfaceIntegratorName = J.$index$asx(json.$index(0, "surfaceIntegrator"), "name");
        this.surfaceIntegratorParams = G.ParamSet$fromJson(J.$index$asx(json.$index(0, "surfaceIntegrator"), "params"));
      }
      if (json.containsKey$1("volumeIntegrator") === true) {
        this.volumeIntegratorName = J.$index$asx(json.$index(0, "volumeIntegrator"), "name");
        this.volumeIntegratorParams = G.ParamSet$fromJson(J.$index$asx(json.$index(0, "volumeIntegrator"), "params"));
      }
      if (json.containsKey$1("camera") === true) {
        this.cameraName = J.$index$asx(json.$index(0, "camera"), "name");
        this.cameraParams = G.ParamSet$fromJson(J.$index$asx(json.$index(0, "camera"), "params"));
      }
    },
    static: {"^": "RenderOverrides_global", RenderOverrides_QuickRender: function() {
        var t1 = $.RenderOverrides_global;
        if (t1 != null)
          return t1.quickRender;
        return false;
      }, RenderOverrides_ResolutionScale: function() {
        var t1 = $.RenderOverrides_global;
        if (t1 != null)
          return t1.resolutionScale;
        return 1;
      }, RenderOverrides_SamplingMode: function() {
        var t1 = $.RenderOverrides_global;
        if (t1 != null)
          return t1.samplingMode;
        return 0;
      }}
  },
  Renderer: {
    "^": "Object;"
  },
  ResourceManager: {
    "^": "Object;",
    requestFile$2: function(path, future) {
      var t1, c, t2;
      if (future != null)
        this.futures.push(future);
      t1 = this.resources;
      if (t1.containsKey$1(path)) {
        if (!!J.getInterceptor(t1.$index(0, path)).$isFuture)
          return t1.$index(0, path);
        c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        t1 = t1.$index(0, path);
        t2 = c.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
        return t2;
      }
      c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      t2 = c.future;
      t1.$indexSet(0, path, t2);
      this.loadFile$1(path).then$1(new G.ResourceManager_requestFile_closure(this, path, c));
      return t2;
    },
    requestFile$1: function(path) {
      return this.requestFile$2(path, null);
    },
    requestImage$2: function(path, future) {
      var t1, t2, c;
      this.futures.push(future);
      t1 = this.resources;
      if (t1.containsKey$1(path)) {
        if (!!J.getInterceptor(t1.$index(0, path)).$isFuture)
          return t1.$index(0, path);
        t2 = [J.JSArray, J.JSInt];
        c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
        t1 = t1.$index(0, path);
        t2 = c.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
        return t2;
      }
      t2 = "LOADING " + H.S(path);
      $.Log.call$2(4, t2);
      t2 = G.SpectrumImage;
      c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
      t2 = c.future;
      t1.$indexSet(0, path, t2);
      this.loadFile$1(path).then$1(new G.ResourceManager_requestImage_closure(this, path, c));
      return t2;
    },
    waitUntilReady$0: function() {
      var c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      P.Future_wait(this.futures, false).then$1(new G.ResourceManager_waitUntilReady_closure(this, c));
      return c.future;
    },
    getResource$1: function(path) {
      var t1 = this.resources;
      if (!t1.containsKey$1(path))
        return;
      return t1.$index(0, path);
    },
    getTexture$1: function($name) {
      var t1 = this.textures;
      if (t1.containsKey$1($name))
        return t1.$index(0, $name);
      return;
    }
  },
  ResourceManager_requestFile_closure: {
    "^": "Closure:97;this_0,path_1,c_2",
    call$1: function(bytes) {
      var t1;
      if (bytes == null) {
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      this.this_0.resources.$indexSet(0, this.path_1, bytes);
      t1 = this.c_2.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(bytes);
    }
  },
  ResourceManager_requestImage_closure: {
    "^": "Closure:97;this_0,path_1,c_2",
    call$1: function(bytes) {
      var t1, decoder, hdr, t2, t3, res, ri, y, x, r, g, b, ri0;
      if (bytes == null) {
        t1 = "UNABLE TO LOAD " + H.S(this.path_1);
        $.Log.call$2(0, t1);
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      decoder = U.findDecoderForData(bytes);
      if (decoder == null) {
        t1 = this.c_2.future;
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncComplete$1(null);
        return;
      }
      hdr = decoder.decodeHdrImage$1(bytes);
      t1 = hdr.slices;
      if (t1.get$isEmpty(t1))
        t2 = 0;
      else {
        t2 = t1.get$values(t1);
        t2 = J.get$width$x(t2._f$1(J.get$first$ax(t2._iterable)));
      }
      if (t1.get$isEmpty(t1))
        t3 = 0;
      else {
        t3 = t1.get$values(t1);
        t3 = J.get$height$x(t3._f$1(J.get$first$ax(t3._iterable)));
      }
      res = G.SpectrumImage$(t2, t3, 3);
      ri = 0;
      y = 0;
      while (true) {
        if (t1.get$isEmpty(t1))
          t2 = 0;
        else {
          t2 = t1.get$values(t1);
          t2 = J.get$height$x(t2._f$1(J.get$first$ax(t2._iterable)));
        }
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(y < t2))
          break;
        x = 0;
        while (true) {
          if (t1.get$isEmpty(t1))
            t2 = 0;
          else {
            t2 = t1.get$values(t1);
            t2 = J.get$width$x(t2._f$1(J.get$first$ax(t2._iterable)));
          }
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(x < t2))
            break;
          t2 = hdr.red;
          r = t2 != null ? t2.getFloat$2(x, y) : 0;
          t2 = hdr.green;
          g = t2 != null ? t2.getFloat$2(x, y) : 0;
          t2 = hdr.blue;
          b = t2 != null ? t2.getFloat$2(x, y) : 0;
          t2 = res.data;
          ri0 = ri + 1;
          t3 = t2.length;
          if (ri < 0 || ri >= t3)
            return H.ioore(t2, ri);
          t2[ri] = r;
          ri = ri0 + 1;
          if (ri0 < 0 || ri0 >= t3)
            return H.ioore(t2, ri0);
          t2[ri0] = g;
          ri0 = ri + 1;
          if (ri < 0 || ri >= t3)
            return H.ioore(t2, ri);
          t2[ri] = b;
          ++x;
          ri = ri0;
        }
        ++y;
      }
      t1 = this.path_1;
      t2 = "HDR IMAGE LOADED " + H.S(t1);
      $.Log.call$2(4, t2);
      this.this_0.resources.$indexSet(0, t1, res);
      t1 = this.c_2.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(res);
    }
  },
  ResourceManager_waitUntilReady_closure: {
    "^": "Closure:97;this_0,c_1",
    call$1: function(r) {
      var t1;
      C.JSArray_methods.set$length(this.this_0.futures, 0);
      t1 = this.c_1.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  RGBColor: {
    "^": "Spectrum;c",
    setSampled$3: function(lambda, v, offset) {
      var x, y, z, yint, i, t1, val, t2;
      if (!G.Spectrum_SpectrumSamplesSorted(lambda))
        G.Spectrum_SortSpectrumSamples(lambda, v, offset);
      for (x = 0, y = 0, z = 0, yint = 0, i = 0; i < 471; ++i) {
        t1 = C.List_s9c[i];
        if (typeof t1 !== "number")
          return H.iae(t1);
        yint += t1;
        val = G.Spectrum_InterpolateSpectrumSamples(lambda, v, C.List_U49[i], offset);
        t1 = J.getInterceptor$ns(val);
        t2 = t1.$mul(val, C.List_wsa[i]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        x += t2;
        t2 = t1.$mul(val, C.List_s9c[i]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        y += t2;
        t1 = t1.$mul(val, C.List_SCE[i]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        z += t1;
      }
      G.Spectrum_XYZToRGB(x / yint, y / yint, z / yint, this.c);
      return this;
    },
    setSampled$2: function(lambda, v) {
      return this.setSampled$3(lambda, v, 0);
    },
    toXYZ$0: function() {
      return G.XYZColor$from(this);
    },
    toRGB$0: function() {
      return this;
    },
    set$1: function(v) {
      var t1, t2;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = v;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = v;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = v;
    },
    setRGB$4: function(r, g, b, type) {
      var t1, t2;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = r;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = g;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = b;
      return this;
    },
    setRGB$3: function(r, g, b) {
      return this.setRGB$4(r, g, b, 0);
    },
    $add: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.RGBColor$rgb(t3 + t4, t5 + t6, t1 + t2);
    },
    $sub: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.RGBColor$rgb(t3 - t4, t5 - t6, t1 - t2);
    },
    $mul: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.RGBColor$rgb(t3 * s, t4 * s, t1[2] * s);
      }
      if (!!J.getInterceptor(s).$isRGBColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.RGBColor$rgb(t3 * t6, t7 * t8, t1 * t4[2]);
      }
      $.Log.call$2(3, "RGBSpectrum or double expected.");
      t1 = new G.RGBColor(new Float32Array(3));
      t1.Spectrum$_$2(3, 0);
      return t1;
    },
    $div: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.RGBColor$rgb(t3 / s, t4 / s, t1[2] / s);
      }
      if (!!J.getInterceptor(s).$isRGBColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.RGBColor$rgb(t3 / t6, t7 / t8, t1 / t4[2]);
      }
      $.Log.call$2(3, "RGBSpectrum or double expected.");
      t1 = new G.RGBColor(new Float32Array(3));
      t1.Spectrum$_$2(3, 0);
      return t1;
    },
    $negate: function(_) {
      var t1, t2, t3, t4;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.RGBColor$rgb(-t3, -t4, -t1[2]);
    },
    luminance$0: function() {
      var t1, t2, t3, t4;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return 0.212671 * t3 + 0.71516 * t4 + 0.072169 * t1[2];
    },
    isBlack$0: function() {
      var t1, t2;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      if (t1[0] === 0) {
        if (1 >= t2)
          return H.ioore(t1, 1);
        if (t1[1] === 0) {
          if (2 >= t2)
            return H.ioore(t1, 2);
          t1 = t1[2] !== 0;
        } else
          t1 = true;
      } else
        t1 = true;
      if (t1)
        return false;
      return true;
    },
    sqrt$0: function() {
      var t1, t2, t3, t4;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t3 = Math.sqrt(t3);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      t4 = Math.sqrt(t4);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      return G.RGBColor$rgb(t3, t4, Math.sqrt(t1));
    },
    exp$0: function() {
      var t1, t2, t3, t4;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t3 = Math.exp(t3);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      t4 = Math.exp(t4);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      return G.RGBColor$rgb(t3, t4, Math.exp(t1));
    },
    clamp$2: function(_, low, high) {
      var t1, t2, t3, t4;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = C.JSNumber_methods.clamp$2(t1[0], low, high);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = C.JSNumber_methods.clamp$2(t1[1], low, high);
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.RGBColor$rgb(t3, t4, C.JSNumber_methods.clamp$2(t1[2], low, high));
    },
    clamp$0: function($receiver) {
      return this.clamp$2($receiver, 0, 1 / 0);
    },
    toString$0: function(_) {
      var t1, t2, t3;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = H.S(t1[0]) + " ";
      if (1 >= t2)
        return H.ioore(t1, 1);
      t3 = t3 + H.S(t1[1]) + " ";
      if (2 >= t2)
        return H.ioore(t1, 2);
      return t3 + H.S(t1[2]);
    },
    RGBColor$xyz$3: function(x, y, z) {
      G.Spectrum_XYZToRGB(x, y, z, this.c);
    },
    RGBColor$rgb$3: function(r, g, b) {
      var t1, t2;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = r;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = g;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = b;
    },
    RGBColor$from$1: function(s) {
      var t1, t2, t3, t4, t5;
      t1 = J.getInterceptor(s);
      if (!!t1.$isRGBColor) {
        t1 = this.c;
        t2 = s.c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      } else if (!!t1.$isXYZColor) {
        t1 = s.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        G.Spectrum_XYZToRGB(t3, t4, t1[2], this.c);
      } else if (!!t1.$isSampledSpectrum) {
        t1 = this.c;
        t2 = s.toRGB$0().c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      }
    },
    $isRGBColor: true,
    static: {RGBColor$rgb: function(r, g, b) {
        var t1 = new G.RGBColor(new Float32Array(3));
        t1.Spectrum$_$2(3, 0);
        t1.RGBColor$rgb$3(r, g, b);
        return t1;
      }, RGBColor$xyz: function(x, y, z) {
        var t1 = new G.RGBColor(new Float32Array(3));
        t1.Spectrum$_$2(3, 0);
        t1.RGBColor$xyz$3(x, y, z);
        return t1;
      }, RGBColor$from: function(s) {
        var t1 = new G.RGBColor(new Float32Array(3));
        t1.Spectrum$_$2(3, 0);
        t1.RGBColor$from$1(s);
        return t1;
      }}
  },
  RNG: {
    "^": "Object;random",
    randomFloat$0: function() {
      return this.random.nextDouble$0();
    },
    randomUint$0: function() {
      return this.random.nextInt$1(4294967295);
    }
  },
  Sample: {
    "^": "CameraSample;n1D<,n2D<,oneD<,twoD<,imageX,imageY,lensU,lensV,time",
    duplicate$1: function(count) {
      var ret, t1, i, t2;
      if (typeof count !== "number")
        return H.iae(count);
      ret = H.setRuntimeTypeInfo(Array(count), [G.Sample]);
      for (t1 = ret.length, i = 0; i < count; ++i) {
        t2 = new G.Sample([], [], [], [], 0, 0, 0, 0, 0);
        t2.n1D = P.List_List$from(this.n1D, true, J.JSInt);
        t2.n2D = P.List_List$from(this.n2D, true, J.JSInt);
        t2._allocateSampleMemory$0();
        if (i >= t1)
          return H.ioore(ret, i);
        ret[i] = t2;
      }
      return ret;
    },
    _allocateSampleMemory$0: function() {
      var i, t1, t2;
      this.oneD = H.setRuntimeTypeInfo(Array(this.n1D.length), [P.Float32List]);
      this.twoD = H.setRuntimeTypeInfo(Array(this.n2D.length), [P.Float32List]);
      for (i = 0; t1 = this.n1D, i < t1.length; ++i) {
        t2 = this.oneD;
        t1 = t1[i];
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        t1 = new Float32Array(t1);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
      }
      for (i = 0; t1 = this.n2D, i < t1.length; ++i) {
        t2 = this.twoD;
        t1 = t1[i];
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = 2 * t1;
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        t1 = new Float32Array(t1);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
      }
    },
    Sample$4: function(sampler, surf, vol, scene) {
      if (surf != null)
        surf.requestSamples$3(sampler, this, scene);
      if (vol != null)
        vol.requestSamples$3(sampler, this, scene);
      this._allocateSampleMemory$0();
    },
    static: {Sample$: function(sampler, surf, vol, scene) {
        var t1 = new G.Sample([], [], [], [], 0, 0, 0, 0, 0);
        t1.Sample$4(sampler, surf, vol, scene);
        return t1;
      }}
  },
  SampledSpectrum: {
    "^": "Spectrum;c",
    setSampled$3: function(lambda, v, offset) {
      var t1, t2, i, t3, i0, t4;
      if (!G.Spectrum_SpectrumSamplesSorted(lambda))
        G.Spectrum_SortSpectrumSamples(lambda, v, offset);
      for (t1 = this.c, t2 = t1.length, i = 0; i < 4; i = i0) {
        t3 = i / 4;
        i0 = i + 1;
        t4 = i0 / 4;
        t4 = G.Spectrum_AverageSpectrumSamples(lambda, v, 400 * (1 - t3) + 700 * t3, 400 * (1 - t4) + 700 * t4, offset);
        if (i >= t2)
          return H.ioore(t1, i);
        t1[i] = t4;
      }
      return this;
    },
    setSampled$2: function(lambda, v) {
      return this.setSampled$3(lambda, v, 0);
    },
    $add: function(_, s) {
      var t1, r, t2, t3, i, t4, t5;
      t1 = new Float32Array(4);
      r = new G.SampledSpectrum(t1);
      r.Spectrum$_$2(4, 0);
      for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        t4 = t2[i];
        t5 = J.$index$asx(s.get$c(), i);
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (i >= 4)
          return H.ioore(t1, i);
        t1[i] = t4 + t5;
      }
      return r;
    },
    $sub: function(_, s) {
      var t1, r, t2, t3, i, t4, t5;
      t1 = new Float32Array(4);
      r = new G.SampledSpectrum(t1);
      r.Spectrum$_$2(4, 0);
      for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        t4 = t2[i];
        t5 = J.$index$asx(s.get$c(), i);
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (i >= 4)
          return H.ioore(t1, i);
        t1[i] = t4 - t5;
      }
      return r;
    },
    $mul: function(_, s) {
      var t1, r, t2, t3, i, t4, t5, t6, t7;
      if (typeof s === "number") {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$_$2(4, 0);
        for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t4 = t2[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t4 * s;
        }
        return r;
      }
      if (!!J.getInterceptor(s).$isSampledSpectrum) {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$_$2(4, 0);
        for (t2 = this.c, t3 = t2.length, t4 = s.c, t5 = t4.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t5)
            return H.ioore(t4, i);
          t7 = t4[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t6 * t7;
        }
        return r;
      }
      $.Log.call$2(3, "SampledSpectrum or num expected.");
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      return t1;
    },
    $div: function(_, s) {
      var t1, r, t2, t3, i, t4, t5, t6, t7;
      if (typeof s === "number") {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$_$2(4, 0);
        for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t4 = t2[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t4 / s;
        }
        return r;
      }
      if (!!J.getInterceptor(s).$isSampledSpectrum) {
        t1 = new Float32Array(4);
        r = new G.SampledSpectrum(t1);
        r.Spectrum$_$2(4, 0);
        for (t2 = this.c, t3 = t2.length, t4 = s.c, t5 = t4.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t5)
            return H.ioore(t4, i);
          t7 = t4[i];
          if (i >= 4)
            return H.ioore(t1, i);
          t1[i] = t6 / t7;
        }
        return r;
      }
      $.Log.call$2(3, "SampledSpectrum or double expected.");
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      return t1;
    },
    setRGB$4: function(r, g, b, type) {
      var res, t1, t2, t3, t4, t5;
      res = new G.SampledSpectrum(new Float32Array(4));
      res.Spectrum$_$2(4, 0);
      if (type === 0) {
        t1 = J.getInterceptor$n(r);
        if (t1.$le(r, g) && t1.$le(r, b)) {
          res = res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectWhite.$mul(0, r));
          t1 = J.getInterceptor$n(g);
          t2 = J.getInterceptor$n(b);
          res = t1.$le(g, b) ? res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectCyan.$mul(0, t1.$sub(g, r))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectBlue.$mul(0, t2.$sub(b, g))) : res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectCyan.$mul(0, t2.$sub(b, r))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectGreen.$mul(0, t1.$sub(g, b)));
        } else {
          t2 = J.getInterceptor$n(g);
          if (t2.$le(g, r) && t2.$le(g, b)) {
            res = res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectWhite.$mul(0, g));
            t2 = J.getInterceptor$n(b);
            res = t1.$le(r, b) ? res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectMagenta.$mul(0, t1.$sub(r, g))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectBlue.$mul(0, t2.$sub(b, r))) : res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectMagenta.$mul(0, t2.$sub(b, g))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectRed.$mul(0, t1.$sub(r, b)));
          } else {
            res = res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectWhite.$mul(0, b));
            res = t1.$le(r, g) ? res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectYellow.$mul(0, t1.$sub(r, b))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectGreen.$mul(0, t2.$sub(g, r))) : res.$add(0, $.get$_Spectrum_G().rgbRefl2SpectYellow.$mul(0, t2.$sub(g, b))).$add(0, $.get$_Spectrum_G().rgbRefl2SpectRed.$mul(0, t1.$sub(r, g)));
          }
        }
        res = res.$mul(0, 0.94);
      } else {
        t1 = J.getInterceptor$n(r);
        if (t1.$le(r, g) && t1.$le(r, b)) {
          res = res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectWhite.$mul(0, r));
          t1 = J.getInterceptor$n(g);
          t2 = J.getInterceptor$n(b);
          res = t1.$le(g, b) ? res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectCyan.$mul(0, t1.$sub(g, r))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectBlue.$mul(0, t2.$sub(b, g))) : res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectCyan.$mul(0, t2.$sub(b, r))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectGreen.$mul(0, t1.$sub(g, b)));
        } else {
          t2 = J.getInterceptor$n(g);
          if (t2.$le(g, r) && t2.$le(g, b)) {
            res = res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectWhite.$mul(0, g));
            t2 = J.getInterceptor$n(b);
            res = t1.$le(r, b) ? res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectMagenta.$mul(0, t1.$sub(r, g))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectBlue.$mul(0, t2.$sub(b, r))) : res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectMagenta.$mul(0, t2.$sub(b, g))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectRed.$mul(0, t1.$sub(r, b)));
          } else {
            res = res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectWhite.$mul(0, b));
            res = t1.$le(r, g) ? res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectYellow.$mul(0, t1.$sub(r, b))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectGreen.$mul(0, t2.$sub(g, r))) : res.$add(0, $.get$_Spectrum_G().rgbIllum2SpectYellow.$mul(0, t2.$sub(g, b))).$add(0, $.get$_Spectrum_G().rgbIllum2SpectRed.$mul(0, t1.$sub(r, g)));
          }
        }
        res = res.$mul(0, 0.86445);
      }
      t1 = this.c;
      t2 = res.c;
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t4 = C.JSNumber_methods.clamp$2(t2[0], 0, 1 / 0);
      t5 = t1.length;
      if (0 >= t5)
        return H.ioore(t1, 0);
      t1[0] = t4;
      if (1 >= t3)
        return H.ioore(t2, 1);
      t4 = C.JSNumber_methods.clamp$2(t2[1], 0, 1 / 0);
      if (1 >= t5)
        return H.ioore(t1, 1);
      t1[1] = t4;
      if (2 >= t3)
        return H.ioore(t2, 2);
      t2 = C.JSNumber_methods.clamp$2(t2[2], 0, 1 / 0);
      if (2 >= t5)
        return H.ioore(t1, 2);
      t1[2] = t2;
      return this;
    },
    setRGB$3: function(r, g, b) {
      return this.setRGB$4(r, g, b, 0);
    },
    toXYZ$0: function() {
      var t1, xyz, t2, t3, i, t4, t5, t6;
      t1 = new Float32Array(3);
      xyz = new G.XYZColor(t1);
      xyz.Spectrum$_$2(3, 0);
      if (0 >= 3)
        return H.ioore(t1, 0);
      t1[0] = 0;
      if (1 >= 3)
        return H.ioore(t1, 1);
      t1[1] = 0;
      if (2 >= 3)
        return H.ioore(t1, 2);
      t1[2] = 0;
      for (t2 = this.c, t3 = t2.length, i = 0; t4 = t1[0], i < 4; ++i) {
        t5 = $.get$_Spectrum_G();
        t6 = t5.X.c;
        if (i >= t6.length)
          return H.ioore(t6, i);
        t6 = t6[i];
        if (i >= t3)
          return H.ioore(t2, i);
        t1[0] = t4 + t6 * t2[i];
        t6 = t1[1];
        t4 = t5.Y.c;
        if (i >= t4.length)
          return H.ioore(t4, i);
        t1[1] = t6 + t4[i] * t2[i];
        t4 = t1[2];
        t5 = t5.Z.c;
        if (i >= t5.length)
          return H.ioore(t5, i);
        t1[2] = t4 + t5[i] * t2[i];
      }
      t1[0] = t4 * 0.7018732857622337;
      t1[1] = t1[1] * 0.7018732857622337;
      t1[2] = t1[2] * 0.7018732857622337;
      return xyz;
    },
    luminance$0: function() {
      var t1, t2, yy, i, t3;
      for (t1 = this.c, t2 = t1.length, yy = 0, i = 0; i < 4; ++i) {
        t3 = $.get$_Spectrum_G().Y.c;
        if (i >= t3.length)
          return H.ioore(t3, i);
        t3 = t3[i];
        if (i >= t2)
          return H.ioore(t1, i);
        yy += t3 * t1[i];
      }
      return yy * 300 / 427.42758;
    },
    toRGB$0: function() {
      return G.RGBColor$from(this.toXYZ$0());
    },
    clamp$2: function(_, low, high) {
      var t1, r, t2, t3, i, t4;
      t1 = new Float32Array(4);
      r = new G.SampledSpectrum(t1);
      r.Spectrum$_$2(4, 0);
      for (t2 = this.c, t3 = t2.length, i = 0; i < 4; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        t4 = C.JSNumber_methods.clamp$2(t2[i], low, high);
        if (i >= 4)
          return H.ioore(t1, i);
        t1[i] = t4;
      }
      return r;
    },
    clamp$0: function($receiver) {
      return this.clamp$2($receiver, 0, 1 / 0);
    },
    SampledSpectrum$from$2: function(s, type) {
      var t1, t2, t3, t4, i, t5;
      t1 = J.getInterceptor(s);
      if (!!t1.$isSampledSpectrum)
        for (t1 = this.c, t2 = s.c, t3 = t2.length, t4 = t1.length, i = 0; i < 4; ++i) {
          if (i >= t3)
            return H.ioore(t2, i);
          t5 = t2[i];
          if (i >= t4)
            return H.ioore(t1, i);
          t1[i] = t5;
        }
      else if (!!t1.$isRGBColor) {
        t1 = s.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        this.setRGB$4(t3, t4, t1[2], type);
      } else if (!!t1.$isXYZColor) {
        t1 = G.RGBColor$from(s).c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        this.setRGB$4(t3, t4, t1[2], type);
      }
    },
    $isSampledSpectrum: true,
    static: {"^": "SampledSpectrum_NUM_SAMPLES", SampledSpectrum$from: function(s, type) {
        var t1 = new G.SampledSpectrum(new Float32Array(4));
        t1.Spectrum$_$2(4, 0);
        t1.SampledSpectrum$from$2(s, type);
        return t1;
      }}
  },
  _Spectrum: {
    "^": "Object;X,Y,Z,rgbRefl2SpectWhite,rgbRefl2SpectCyan,rgbRefl2SpectMagenta,rgbRefl2SpectYellow,rgbRefl2SpectRed,rgbRefl2SpectGreen,rgbRefl2SpectBlue,rgbIllum2SpectWhite,rgbIllum2SpectCyan,rgbIllum2SpectMagenta,rgbIllum2SpectYellow,rgbIllum2SpectRed,rgbIllum2SpectGreen,rgbIllum2SpectBlue",
    _Spectrum$0: function() {
      var t1, i, wl0, i0, wl1, t2;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.X = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.Y = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.Z = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectWhite = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectCyan = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectMagenta = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectYellow = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectRed = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectGreen = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbRefl2SpectBlue = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectWhite = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectCyan = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectMagenta = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectYellow = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectRed = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectGreen = t1;
      t1 = new G.SampledSpectrum(new Float32Array(4));
      t1.Spectrum$_$2(4, 0);
      this.rgbIllum2SpectBlue = t1;
      for (i = 0; i < 4; i = i0) {
        t1 = i / 4;
        wl0 = 400 * (1 - t1) + 700 * t1;
        i0 = i + 1;
        t1 = i0 / 4;
        wl1 = 400 * (1 - t1) + 700 * t1;
        t1 = this.X.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_U49, C.List_wsa, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.Y.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_U49, C.List_s9c, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.Z.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_U49, C.List_SCE, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
      }
      for (i = 0; i < 4; i = i0) {
        t1 = i / 4;
        wl0 = 400 * (1 - t1) + 700 * t1;
        i0 = i + 1;
        t1 = i0 / 4;
        wl1 = 400 * (1 - t1) + 700 * t1;
        t1 = this.rgbRefl2SpectWhite.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_iDZ, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbRefl2SpectCyan.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_DFB, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbRefl2SpectMagenta.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Qu6, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbRefl2SpectYellow.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Qaw, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbRefl2SpectRed.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Sby, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbRefl2SpectGreen.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_cQL, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbRefl2SpectBlue.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_Ls5, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectWhite.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_ssa, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbIllum2SpectCyan.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_QmM, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectMagenta.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_ild, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbIllum2SpectYellow.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_LkP, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectRed.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_wQn, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
        t1 = this.rgbIllum2SpectGreen.c;
        t2 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_ec6, wl0, wl1, 0);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t2;
        t2 = this.rgbIllum2SpectBlue.c;
        t1 = G.Spectrum_AverageSpectrumSamples(C.List_KEl, C.List_aXZ, wl0, wl1, 0);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t1;
      }
    },
    static: {"^": "_Spectrum_G", _Spectrum$: function() {
        var t1 = new G._Spectrum(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1._Spectrum$0();
        return t1;
      }}
  },
  Sampler: {
    "^": "Object;left>,top>,width>,height>,shutterOpen<,shutterClose<,samplesPerPixel<",
    reportResults$5: function(samples, rays, Ls, isects, count) {
      return true;
    }
  },
  Scene: {
    "^": "Object;aggregate,lights,volumeRegion,worldBound",
    worldBound$0: function() {
      return this.worldBound.call$0();
    },
    intersect$2: function(ray, isect) {
      var hit, t1;
      hit = this.aggregate.intersect$2(ray, isect);
      t1 = $.get$Stats_nonShadowRays();
      t1.count = J.$add$ns(t1.count, 1);
      $.Stats_nonShadowRays = t1;
      return hit;
    },
    intersectP$1: function(ray) {
      var hit, t1;
      hit = this.aggregate.intersectP$1(ray);
      t1 = $.get$Stats_shadowRays();
      t1.count = J.$add$ns(t1.count, 1);
      $.Stats_shadowRays = t1;
      return hit;
    },
    Scene$3: function(aggregate, lights, volumeRegion) {
      var t1, t2;
      t1 = this.aggregate.worldBound$0();
      this.worldBound = t1;
      t2 = this.volumeRegion;
      if (t2 != null) {
        t2 = t2.worldBound$0();
        this.worldBound = G.BBox$from(t1).union$1(t2);
      }
    }
  },
  Shape: {
    "^": "Object;objectToWorld<,worldToObject<,reverseOrientation@,shapeId<",
    worldBound$0: function() {
      return this.objectToWorld.transformBBox$1(this.objectBound$0());
    },
    canIntersect$0: function() {
      return true;
    },
    refine$1: function(refined) {
      $.Log.call$2(3, "Unimplemented Shape.refine() method called");
    },
    intersect$4: function(ray, tHit, rayEpsilon, dg) {
      $.Log.call$2(3, "Unimplemented Shape.intersect() method called");
      return false;
    },
    intersectP$1: function(ray) {
      $.Log.call$2(3, "Unimplemented Shape.intersectP() method called");
      return false;
    },
    getShadingGeometry$3: function(obj2world, dg, dgShading) {
      dgShading.copy$1(dg);
    },
    area$0: [function() {
      $.Log.call$2(3, "Unimplemented Shape.area() method called");
      return 0;
    }, "call$0", "get$area", 0, 0, 102],
    sample$3: function(u1, u2, Ns) {
      var t1;
      $.Log.call$2(3, "Unimplemented Shape::sample() method called");
      t1 = new G.Point(new Float32Array(3));
      t1.Vector$3(0, 0, 0);
      return t1;
    },
    pdf$1: function(Pshape) {
      var t1 = this.area$0();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 1 / t1;
    },
    sample2$4: function($P, u1, u2, Ns) {
      return this.sample$3(u1, u2, Ns);
    },
    pdf2$2: function(p, wi) {
      var dgLight, ray, thit, t1, t2, t3, pdf;
      dgLight = G.DifferentialGeometry$();
      ray = G.Ray$(p, wi, 0.001, 1 / 0, 0, 0);
      ray.depth = -1;
      thit = [0];
      if (!this.intersect$4(ray, thit, [0], dgLight))
        return 0;
      t1 = thit[0];
      t1 = new G.Point(new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(ray.origin, J.$mul$ns(ray.direction, t1)))))).$sub(0, p).lengthSquared$0();
      t2 = G.Vector_AbsDot(dgLight.nn, wi.$negate(0));
      t3 = this.area$0();
      if (typeof t3 !== "number")
        return H.iae(t3);
      pdf = t1 / (t2 * t3);
      return pdf == Infinity || pdf == -Infinity ? 0 : pdf;
    }
  },
  Spectrum: {
    "^": "Object;c<",
    toList$2: function(_, data, offset) {
      return this.c;
    },
    toList$0: function($receiver) {
      return this.toList$2($receiver, null, 0);
    },
    setList$2: function(data, offset) {
      var t1, t2, t3, i;
      for (t1 = this.c, t2 = t1.length, t3 = J.getInterceptor$asx(data), i = 0; i < t2; ++i)
        t1[i] = t3.$index(data, offset + i);
    },
    set$1: function(v) {
      var t1, n, i;
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i)
        t1[i] = v;
    },
    copy$1: function(other) {
      var t1, n, i;
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i)
        t1[i] = J.$index$asx(other.get$c(), i);
    },
    hasNaNs$0: function() {
      var t1, nSamples, i;
      for (t1 = this.c, nSamples = t1.length, i = 0; i < nSamples; ++i)
        if (isNaN(t1[i]))
          return true;
      return false;
    },
    isBlack$0: function() {
      var t1, n, i;
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i)
        if (t1[i] !== 0)
          return false;
      return true;
    },
    isValue$1: function(v) {
      var t1, n, i;
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i)
        if (t1[i] !== v)
          return false;
      return true;
    },
    $add: function(_, s) {
      var r, t1, n, i, t2, t3, t4;
      r = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = r.c;
        t3 = t1[i];
        t4 = J.$index$asx(s.get$c(), i);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3 + t4;
      }
      return r;
    },
    $sub: function(_, s) {
      var r, t1, n, i, t2, t3, t4;
      r = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = r.c;
        t3 = t1[i];
        t4 = J.$index$asx(s.get$c(), i);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3 - t4;
      }
      return r;
    },
    $mul: function(_, s) {
      var r, t1, n, i, t2, t3, t4, t5, t6;
      r = G.Spectrum_Spectrum(0);
      if (typeof s === "number")
        for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
          t2 = r.c;
          t3 = t1[i];
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t3 * s;
        }
      else if (!!J.getInterceptor(s).$isSpectrum)
        for (t1 = this.c, n = t1.length, t2 = s.c, t3 = t2.length, i = 0; i < n; ++i) {
          t4 = r.c;
          t5 = t1[i];
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t4.length)
            return H.ioore(t4, i);
          t4[i] = t5 * t6;
        }
      else
        $.Log.call$2(3, "Spectrum or double expected.");
      return r;
    },
    $div: function(_, s) {
      var r, t1, n, i, t2, t3, t4, t5, t6;
      r = G.Spectrum_Spectrum(0);
      if (typeof s === "number")
        for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
          t2 = r.c;
          t3 = t1[i];
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t3 / s;
        }
      else if (!!J.getInterceptor(s).$isSpectrum)
        for (t1 = this.c, n = t1.length, t2 = s.c, t3 = t2.length, i = 0; i < n; ++i) {
          t4 = r.c;
          t5 = t1[i];
          if (i >= t3)
            return H.ioore(t2, i);
          t6 = t2[i];
          if (i >= t4.length)
            return H.ioore(t4, i);
          t4[i] = t5 / t6;
        }
      else
        $.Log.call$2(3, "Spectrum or double expected.");
      return r;
    },
    $negate: function(_) {
      var r, t1, n, i, t2, t3;
      r = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = r.c;
        t3 = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = -t3;
      }
      return r;
    },
    scale$1: function(_, v) {
      var t1, n, i;
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i)
        t1[i] = t1[i] * v;
    },
    add$1: function(_, s) {
      var t1, n, i, t2, t3;
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = t1[i];
        t3 = J.$index$asx(s.get$c(), i);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1[i] = t2 + t3;
      }
    },
    sqrt$0: function() {
      var s, t1, n, i, t2, t3;
      s = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = s.c;
        t3 = t1[i];
        t3 = Math.sqrt(t3);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3;
      }
      return s;
    },
    exp$0: function() {
      var s, t1, n, i, t2, t3;
      s = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = s.c;
        t3 = t1[i];
        t3 = Math.exp(t3);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3;
      }
      return s;
    },
    clamp$2: function(_, low, high) {
      var s, t1, n, i, t2, t3;
      s = G.Spectrum_Spectrum(0);
      for (t1 = this.c, n = t1.length, i = 0; i < n; ++i) {
        t2 = s.c;
        t3 = C.JSNumber_methods.clamp$2(t1[i], low, high);
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i] = t3;
      }
      return s;
    },
    clamp$0: function($receiver) {
      return this.clamp$2($receiver, 0, 1 / 0);
    },
    toString$0: function(_) {
      var t1, t2, s, i;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      s = H.S(t1[0]);
      for (i = 1; i < t2; ++i)
        s += " " + H.S(t1[i]);
      return s;
    },
    Spectrum$_$2: function(nSamples, v) {
      if (!J.$eq(v, 0))
        C.NativeFloat32List_methods.fillRange$3(this.c, 0, nSamples, v);
    },
    $isSpectrum: true,
    static: {"^": "Spectrum_type<"}
  },
  Spectrum_SortSpectrumSamples_closure: {
    "^": "Closure:96;",
    call$2: function(a, b) {
      return J.$lt$n(J.$index$asx(a, 0), J.$index$asx(b, 0));
    }
  },
  Spectrum_AverageSpectrumSamples_INTERP: {
    "^": "Closure:96;lambda_0,vals_1,offset_2",
    call$2: function(w, i) {
      var t1, t2, t3, t4, t5;
      t1 = this.lambda_0;
      t2 = t1.length;
      if (i >= t2)
        return H.ioore(t1, i);
      t3 = t1[i];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = i + 1;
      if (t4 >= t2)
        return H.ioore(t1, t4);
      t4 = J.$sub$n(t1[t4], t3);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t4 = (w - t3) / t4;
      t3 = this.vals_1;
      t1 = this.offset_2 + i;
      t2 = t3.length;
      if (t1 < 0 || t1 >= t2)
        return H.ioore(t3, t1);
      t5 = t3[t1];
      ++t1;
      if (t1 >= t2)
        return H.ioore(t3, t1);
      t1 = t3[t1];
      return J.$add$ns(J.$mul$ns(t5, 1 - t4), J.$mul$ns(t1, t4));
    }
  },
  Spectrum_AverageSpectrumSamples_SEG_AVG: {
    "^": "Closure:109;INTERP_3",
    call$3: function(wl0, wl1, i) {
      var t1 = this.INTERP_3;
      t1 = J.$add$ns(t1.call$2(wl0, i), t1.call$2(wl1, i));
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 0.5 * t1;
    }
  },
  SpectrumImage: {
    "^": "Object;width>,height>,samplesPerPixel<,data>",
    convert$1: function(format) {
      var out, t1, len, t2, t3, i, j, i0, r, g, b, j0, y;
      if (format === this.samplesPerPixel)
        return this;
      if (format === 1) {
        out = G.SpectrumImage$(this.width, this.height, 1);
        t1 = this.data;
        len = t1.length;
        for (t2 = out.data, t3 = t2.length, i = 0, j = 0; i < len; j = j0, i = i0) {
          i0 = i + 1;
          r = t1[i];
          i = i0 + 1;
          if (i0 >= len)
            return H.ioore(t1, i0);
          g = t1[i0];
          i0 = i + 1;
          if (i >= len)
            return H.ioore(t1, i);
          b = t1[i];
          j0 = j + 1;
          if (j >= t3)
            return H.ioore(t2, j);
          t2[j] = 0.212671 * r + 0.71516 * g + 0.072169 * b;
        }
        return out;
      }
      out = G.SpectrumImage$(this.width, this.height, 3);
      t1 = this.data;
      len = t1.length;
      for (t2 = out.data, t3 = t2.length, i = 0, j = 0; i < len; j = j0, i = i0) {
        i0 = i + 1;
        y = t1[i];
        j0 = j + 1;
        if (j >= t3)
          return H.ioore(t2, j);
        t2[j] = y;
        j = j0 + 1;
        if (j0 >= t3)
          return H.ioore(t2, j0);
        t2[j0] = y;
        j0 = j + 1;
        if (j >= t3)
          return H.ioore(t2, j);
        t2[j] = y;
      }
      return out;
    },
    set$1: function(other) {
      this.data = J.get$data$x(other);
      this.width = other.width;
      this.height = other.height;
    },
    $index: function(_, index) {
      var t1, t2, t3, t4, t5;
      if (J.$eq(this.samplesPerPixel, 1)) {
        t1 = this.data;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      }
      index = J.$mul$ns(index, this.samplesPerPixel);
      t1 = $.get$SpectrumImage__output().c;
      t2 = this.data;
      t3 = t2.length;
      if (index >>> 0 !== index || index >= t3)
        return H.ioore(t2, index);
      t4 = t2[index];
      t5 = t1.length;
      if (0 >= t5)
        return H.ioore(t1, 0);
      t1[0] = t4;
      t4 = index + 1;
      if (t4 >= t3)
        return H.ioore(t2, t4);
      t4 = t2[t4];
      if (1 >= t5)
        return H.ioore(t1, 1);
      t1[1] = t4;
      t4 = index + 2;
      if (t4 >= t2.length)
        return H.ioore(t2, t4);
      t4 = t2[t4];
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = t4;
      return $.get$SpectrumImage__output();
    },
    $indexSet: function(_, index, s) {
      var t1, t2, t3;
      if (J.$eq(this.samplesPerPixel, 1)) {
        t1 = this.data;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        t1[index] = s;
        return;
      }
      index = J.$mul$ns(index, this.samplesPerPixel);
      t1 = this.data;
      t2 = J.$index$asx(s.get$c(), 0);
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = t2;
      t2 = this.data;
      t1 = index + 1;
      t3 = J.$index$asx(s.get$c(), 1);
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      t2[t1] = t3;
      t3 = this.data;
      t1 = index + 2;
      t2 = J.$index$asx(s.get$c(), 2);
      if (t1 >= t3.length)
        return H.ioore(t3, t1);
      t3[t1] = t2;
    },
    static: {"^": "SpectrumImage_FLOAT,SpectrumImage_SPECTRUM,SpectrumImage__output", SpectrumImage$: function(width, height, samplesPerPixel) {
        var t1 = J.$mul$ns(J.$mul$ns(width, height), samplesPerPixel);
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
        return new G.SpectrumImage(width, height, samplesPerPixel, new Float32Array(t1));
      }, SpectrumImage$from: function(other) {
        var t1 = J.getInterceptor$x(other);
        return new G.SpectrumImage(t1.get$width(other), t1.get$height(other), other.get$samplesPerPixel(), new Float32Array(H._ensureNativeList(t1.get$data(other))));
      }}
  },
  SphericalHarmonics_RotateXPlus_O: {
    "^": "Closure:96;c_in_0",
    call$2: function(l, m) {
      var t1, t2;
      t1 = this.c_in_0;
      t2 = l * l + l + m;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    }
  },
  SphericalHarmonics__legendrep_P: {
    "^": "Closure:110;out_0,outIndex_1",
    call$2: function(l, m) {
      var index, t1;
      index = J.toInt$0$n(J.$add$ns(this.outIndex_1, l * l + l + m));
      t1 = this.out_0;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }
  },
  StatTracker: {
    "^": "Object;name>"
  },
  StatsCounter: {
    "^": "StatTracker;count@,category,name",
    $add: function(_, n) {
      this.count = J.$add$ns(this.count, n);
      return this;
    },
    toString$0: function(_) {
      return this.category + " | " + this.name + ": " + H.S(this.count);
    }
  },
  SurfaceIntegrator: {
    "^": "Integrator;"
  },
  SurfacePoint: {
    "^": "Object;p>,n<,area<,rayEpsilon<",
    p$4: function($receiver, arg0, arg1, arg2, arg3) {
      return this.p.call$4(arg0, arg1, arg2, arg3);
    },
    area$0: function() {
      return this.area.call$0();
    }
  },
  Texture: {
    "^": "Object;"
  },
  ConstantTexture: {
    "^": "Texture;value",
    evaluate$1: function(dg) {
      return this.value;
    },
    static: {ConstantTexture_CreateSpectrum: [function(tex2world, tp) {
        return new G.ConstantTexture(tp.findSpectrum$2("value", G.Spectrum_Spectrum(1)));
      }, "call$2", "ConstantTexture_CreateSpectrum$closure", 4, 0, 10], ConstantTexture_CreateFloat: [function(tex2world, tp) {
        return new G.ConstantTexture(tp.findFloat$2("value", 1));
      }, "call$2", "ConstantTexture_CreateFloat$closure", 4, 0, 10]}
  },
  CylindricalMapping2D: {
    "^": "TextureMapping2D;worldToTexture",
    map$7: function(_, dg, s, t, dsdx, dtdx, dsdy, dtdy) {
      var sx, tx, sy, ty, t1;
      this._cylinder$3(dg.p, s, t);
      sx = [0];
      tx = [0];
      sy = [0];
      ty = [0];
      this._cylinder$3(dg.p.$add(0, dg.dpdx.$mul(0, 0.01)), sx, tx);
      dsdx[0] = J.$div$n(J.$sub$n(sx[0], s[0]), 0.01);
      t1 = J.$div$n(J.$sub$n(tx[0], t[0]), 0.01);
      dtdx[0] = t1;
      if (J.$gt$n(t1, 0.5)) {
        t1 = dtdx[0];
        if (typeof t1 !== "number")
          return H.iae(t1);
        dtdx[0] = 1 - t1;
      } else if (J.$lt$n(dtdx[0], -0.5))
        dtdx[0] = J.$negate$n(J.$add$ns(dtdx[0], 1));
      this._cylinder$3(dg.p.$add(0, dg.dpdy.$mul(0, 0.01)), sy, ty);
      dsdy[0] = J.$div$n(J.$sub$n(sy[0], s[0]), 0.01);
      t1 = J.$div$n(J.$sub$n(ty[0], t[0]), 0.01);
      dtdy[0] = t1;
      if (J.$gt$n(t1, 0.5)) {
        t1 = dtdy[0];
        if (typeof t1 !== "number")
          return H.iae(t1);
        dtdy[0] = 1 - t1;
      } else if (J.$lt$n(dtdy[0], -0.5))
        dtdy[0] = J.$negate$n(J.$add$ns(dtdy[0], 1));
    },
    _cylinder$3: function(p, s, t) {
      var t1, t2, vec;
      t1 = this.worldToTexture.transformPoint$1(p);
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(0, 0, 0);
      t2 = t1.$sub(0, t2);
      vec = t2.$div(t2, t2.length$0(0));
      t2 = vec.get$y(vec);
      t1 = vec.get$x(vec);
      s[0] = (3.141592653589793 + Math.atan2(t2, t1)) / 6.283185307179586;
      t[0] = vec.get$z(vec);
    }
  },
  IdentityMapping3D: {
    "^": "TextureMapping3D;worldToTexture",
    map$3: function(_, dg, dpdx, dpdy) {
      var t1 = this.worldToTexture;
      dpdx.copy$1(t1.transformVector$1(dg.dpdx));
      dpdy.copy$1(t1.transformVector$1(dg.dpdy));
      return t1.transformPoint$1(dg.p);
    }
  },
  PlanarMapping2D: {
    "^": "TextureMapping2D;vs,vt,ds,dt",
    map$7: function(_, dg, s, t, dsdx, dtdx, dsdy, dtdy) {
      var t1, t2, vec;
      t1 = dg.p;
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(0, 0, 0);
      vec = t1.$sub(0, t2);
      t2 = this.vs;
      s[0] = J.$add$ns(this.ds, G.Vector_Dot(vec, t2));
      t1 = this.vt;
      t[0] = J.$add$ns(this.dt, G.Vector_Dot(vec, t1));
      dsdx[0] = G.Vector_Dot(dg.dpdx, t2);
      dtdx[0] = G.Vector_Dot(dg.dpdx, t1);
      dsdy[0] = G.Vector_Dot(dg.dpdy, t2);
      dtdy[0] = G.Vector_Dot(dg.dpdy, t1);
    }
  },
  SphericalMapping2D: {
    "^": "TextureMapping2D;worldToTexture",
    map$7: function(_, dg, s, t, dsdx, dtdx, dsdy, dtdy) {
      var sx, tx, sy, ty, t1;
      this._sphere$3(dg.p, s, t);
      sx = [0];
      tx = [0];
      sy = [0];
      ty = [0];
      this._sphere$3(dg.p.$add(0, dg.dpdx.$mul(0, 0.1)), sx, tx);
      dsdx[0] = J.$div$n(J.$sub$n(sx[0], s[0]), 0.1);
      t1 = J.$div$n(J.$sub$n(tx[0], t[0]), 0.1);
      dtdx[0] = t1;
      if (J.$gt$n(t1, 0.5)) {
        t1 = dtdx[0];
        if (typeof t1 !== "number")
          return H.iae(t1);
        dtdx[0] = 1 - t1;
      } else if (J.$lt$n(dtdx[0], -0.5))
        dtdx[0] = J.$negate$n(J.$add$ns(dtdx[0], 1));
      this._sphere$3(dg.p.$add(0, dg.dpdy.$mul(0, 0.1)), sy, ty);
      dsdy[0] = J.$div$n(J.$sub$n(sy[0], s[0]), 0.1);
      t1 = J.$div$n(J.$sub$n(ty[0], t[0]), 0.1);
      dtdy[0] = t1;
      if (J.$gt$n(t1, 0.5)) {
        t1 = dtdy[0];
        if (typeof t1 !== "number")
          return H.iae(t1);
        dtdy[0] = 1 - t1;
      } else if (J.$lt$n(dtdy[0], -0.5))
        dtdy[0] = J.$negate$n(J.$add$ns(dtdy[0], 1));
    },
    _sphere$3: function(p, s, t) {
      var t1, t2, vec, theta, phi;
      t1 = this.worldToTexture.transformPoint$1(p);
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(0, 0, 0);
      t2 = t1.$sub(0, t2);
      vec = t2.$div(t2, t2.length$0(0));
      t2 = C.JSNumber_methods.clamp$2(vec.get$z(vec), -1, 1);
      theta = Math.acos(t2);
      phi = G.Vector_SphericalPhi(vec);
      s[0] = theta * 0.3183098861837907;
      t[0] = phi * 0.15915494309189535;
    }
  },
  TextureMapping2D: {
    "^": "Object;"
  },
  TextureMapping3D: {
    "^": "Object;"
  },
  UVMapping2D: {
    "^": "TextureMapping2D;su,sv,du,dv",
    map$7: function(_, dg, s, t, dsdx, dtdx, dsdy, dtdy) {
      var t1, t2, t3, t4;
      t1 = this.su;
      t2 = J.getInterceptor$ns(t1);
      s[0] = J.$add$ns(t2.$mul(t1, dg.u), this.du);
      t3 = this.sv;
      t4 = J.getInterceptor$ns(t3);
      t[0] = J.$add$ns(t4.$mul(t3, dg.v), this.dv);
      dsdx[0] = t2.$mul(t1, dg.dudx);
      dtdx[0] = t4.$mul(t3, dg.dvdx);
      dsdy[0] = t2.$mul(t1, dg.dudy);
      dtdy[0] = t4.$mul(t3, dg.dvdy);
    }
  },
  TextureParams: {
    "^": "Object;floatTextures,spectrumTextures<,geomParams,materialParams@",
    getSpectrumTexture$2: function(n, def) {
      var t1, $name, t2;
      t1 = this.geomParams;
      $name = t1.findTexture$1(n);
      if (J.get$isEmpty$asx($name) === true)
        $name = this.materialParams.findTexture$1(n);
      if (J.get$isNotEmpty$asx($name)) {
        t2 = this.spectrumTextures;
        if (t2.containsKey$1($name))
          return t2.$index(0, $name);
        else {
          t2 = "Couldn't find spectrum texture named '" + H.S($name) + "' for parameter '" + n + "'";
          $.Log.call$2(1, t2);
        }
      }
      return new G.ConstantTexture(t1.findOneSpectrum$2(n, this.materialParams.findOneSpectrum$2(n, def)));
    },
    getFloatTexture$2: function(n, def) {
      var t1, $name, t2;
      t1 = this.geomParams;
      $name = t1.findTexture$1(n);
      if (J.$eq($name, ""))
        $name = this.materialParams.findTexture$1(n);
      if (!J.$eq($name, "")) {
        t2 = this.floatTextures;
        if (t2.containsKey$1($name))
          return t2.$index(0, $name);
        else {
          t2 = "Couldn't find float texture named '" + H.S($name) + "' for parameter '" + n + "'";
          $.Log.call$2(1, t2);
        }
      }
      return new G.ConstantTexture(t1.findOneFloat$2(n, this.materialParams.findOneFloat$2(n, def)));
    },
    getFloatTextureOrNull$1: function(n) {
      var $name, t1;
      $name = this.geomParams.findTexture$1(n);
      if (J.$eq($name, ""))
        $name = this.materialParams.findTexture$1(n);
      if (J.$eq($name, ""))
        return;
      t1 = this.floatTextures;
      if (t1.containsKey$1($name))
        return t1.$index(0, $name);
      else {
        t1 = "Couldn't find float texture named '" + H.S($name) + "' for parameter '" + n + "'";
        $.Log.call$2(1, t1);
        return;
      }
    },
    findFloat$2: function(n, d) {
      return this.geomParams.findOneFloat$2(n, this.materialParams.findOneFloat$2(n, d));
    },
    findString$2: function(n, d) {
      return this.geomParams.findOneString$2(n, this.materialParams.findOneString$2(n, d));
    },
    findString$1: function(n) {
      return this.findString$2(n, "");
    },
    findInt$2: function(n, d) {
      return this.geomParams.findOneInt$2(n, this.materialParams.findOneInt$2(n, d));
    },
    findSpectrum$2: function(n, d) {
      return this.geomParams.findOneSpectrum$2(n, this.materialParams.findOneSpectrum$2(n, d));
    },
    reportUnused$0: function() {
      this.geomParams.reportUnused$0();
      this.materialParams.reportUnused$0();
    }
  },
  Transform: {
    "^": "Object;m<,mInv<",
    copy$1: function(t) {
      this.m = new G.Matrix4x4(new Float32Array(H._ensureNativeList(t.get$m().data)));
      this.mInv = new G.Matrix4x4(new Float32Array(H._ensureNativeList(t.mInv.data)));
      return this;
    },
    $eq: function(_, t) {
      if (t == null)
        return false;
      return t.get$m().$eq(0, this.m) && t.mInv.$eq(0, this.mInv);
    },
    $lt: function(_, t2) {
      var t1, t3, i, t4, t5;
      for (t1 = this.m.data, t3 = t1.length, i = 0; i < 16; ++i) {
        if (i >= t3)
          return H.ioore(t1, i);
        t4 = t1[i];
        t5 = t2.get$m().data;
        if (i >= t5.length)
          return H.ioore(t5, i);
        if (t4 < t5[i])
          return true;
        t5 = t2.m.data;
        if (i >= t5.length)
          return H.ioore(t5, i);
        if (t4 > t5[i])
          return false;
      }
      return false;
    },
    $mul: function(_, t2) {
      return G.Transform$(G.Matrix4x4_Mul(this.m, t2.get$m()), G.Matrix4x4_Mul(t2.mInv, this.mInv));
    },
    hasScale$0: function() {
      var la2, lb2, lc2, t1;
      la2 = this.transformVector$1(G.Vector$(1, 0, 0)).lengthSquared$0();
      lb2 = this.transformVector$1(G.Vector$(0, 1, 0)).lengthSquared$0();
      lc2 = this.transformVector$1(G.Vector$(0, 0, 1)).lengthSquared$0();
      if (!(la2 < 0.999 || la2 > 1.001))
        t1 = lb2 < 0.999 || lb2 > 1.001 || lc2 < 0.999 || lc2 > 1.001;
      else
        t1 = true;
      return t1;
    },
    transformPoint$2: function(p, out) {
      var t1, x, y, z, t2, t3, t4, t5, t6, w;
      if (out == null) {
        out = new G.Point(new Float32Array(3));
        out.Vector$3(0, 0, 0);
      }
      t1 = J.getInterceptor$x(p);
      x = t1.get$x(p);
      y = t1.get$y(p);
      z = t1.get$z(p);
      t1 = this.m.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof x !== "number")
        return H.iae(x);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (typeof y !== "number")
        return H.iae(y);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t5 = t1[2];
      if (typeof z !== "number")
        return H.iae(z);
      if (3 >= t2)
        return H.ioore(t1, 3);
      t2 = J.getInterceptor$x(out);
      t2.set$x(out, t3 * x + t4 * y + t5 * z + t1[3]);
      t1 = this.m.data;
      t5 = t1.length;
      if (4 >= t5)
        return H.ioore(t1, 4);
      t4 = t1[4];
      if (5 >= t5)
        return H.ioore(t1, 5);
      t3 = t1[5];
      if (6 >= t5)
        return H.ioore(t1, 6);
      t6 = t1[6];
      if (7 >= t5)
        return H.ioore(t1, 7);
      t2.set$y(out, t4 * x + t3 * y + t6 * z + t1[7]);
      t1 = this.m.data;
      t6 = t1.length;
      if (8 >= t6)
        return H.ioore(t1, 8);
      t3 = t1[8];
      if (9 >= t6)
        return H.ioore(t1, 9);
      t4 = t1[9];
      if (10 >= t6)
        return H.ioore(t1, 10);
      t5 = t1[10];
      if (11 >= t6)
        return H.ioore(t1, 11);
      t2.set$z(out, t3 * x + t4 * y + t5 * z + t1[11]);
      t1 = this.m.data;
      t5 = t1.length;
      if (12 >= t5)
        return H.ioore(t1, 12);
      t4 = t1[12];
      if (13 >= t5)
        return H.ioore(t1, 13);
      t3 = t1[13];
      if (14 >= t5)
        return H.ioore(t1, 14);
      t2 = t1[14];
      if (15 >= t5)
        return H.ioore(t1, 15);
      w = t4 * x + t3 * y + t2 * z + t1[15];
      if (w !== 1)
        out.invScale$1(w);
      return out;
    },
    transformPoint$1: function(p) {
      return this.transformPoint$2(p, null);
    },
    transformVector$2: function(p, out) {
      var t1, x, y, z, t2, t3, t4, t5;
      if (out == null)
        out = G.Vector$(0, 0, 0);
      t1 = J.getInterceptor$x(p);
      x = t1.get$x(p);
      y = t1.get$y(p);
      z = t1.get$z(p);
      t1 = this.m.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof x !== "number")
        return H.iae(x);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (typeof y !== "number")
        return H.iae(y);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      if (typeof z !== "number")
        return H.iae(z);
      t2 = J.getInterceptor$x(out);
      t2.set$x(out, t3 * x + t4 * y + t1 * z);
      t1 = this.m.data;
      t4 = t1.length;
      if (4 >= t4)
        return H.ioore(t1, 4);
      t3 = t1[4];
      if (5 >= t4)
        return H.ioore(t1, 5);
      t5 = t1[5];
      if (6 >= t4)
        return H.ioore(t1, 6);
      t2.set$y(out, t3 * x + t5 * y + t1[6] * z);
      t1 = this.m.data;
      t5 = t1.length;
      if (8 >= t5)
        return H.ioore(t1, 8);
      t3 = t1[8];
      if (9 >= t5)
        return H.ioore(t1, 9);
      t4 = t1[9];
      if (10 >= t5)
        return H.ioore(t1, 10);
      t2.set$z(out, t3 * x + t4 * y + t1[10] * z);
      return out;
    },
    transformVector$1: function(p) {
      return this.transformVector$2(p, null);
    },
    transformNormal$2: function(p, out) {
      var t1, x, y, z, t2, t3, t4, t5, t6, t7;
      out = new G.Normal(new Float32Array(3));
      out.Vector$3(0, 0, 0);
      t1 = J.getInterceptor$x(p);
      x = t1.get$x(p);
      y = t1.get$y(p);
      z = t1.get$z(p);
      t1 = this.mInv.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof x !== "number")
        return H.iae(x);
      if (4 >= t2)
        return H.ioore(t1, 4);
      t4 = t1[4];
      if (typeof y !== "number")
        return H.iae(y);
      if (8 >= t2)
        return H.ioore(t1, 8);
      t5 = t1[8];
      if (typeof z !== "number")
        return H.iae(z);
      t6 = out.data;
      t7 = t6.length;
      if (0 >= t7)
        return H.ioore(t6, 0);
      t6[0] = t3 * x + t4 * y + t5 * z;
      t5 = t1[1];
      t4 = t1[5];
      if (9 >= t2)
        return H.ioore(t1, 9);
      t3 = t1[9];
      if (1 >= t7)
        return H.ioore(t6, 1);
      t6[1] = t5 * x + t4 * y + t3 * z;
      t3 = t1[2];
      t4 = t1[6];
      if (10 >= t2)
        return H.ioore(t1, 10);
      t1 = t1[10];
      if (2 >= t7)
        return H.ioore(t6, 2);
      t6[2] = t3 * x + t4 * y + t1 * z;
      return out;
    },
    transformNormal$1: function(p) {
      return this.transformNormal$2(p, null);
    },
    transformBBox$2: function(b, out) {
      var t1, t2, t3, t4;
      out = G.BBox$(null, null);
      t1 = this.transformPoint$1(b.get$pMin());
      out.pMin.copy$1(t1);
      out.pMax.copy$1(t1);
      t1 = b.pMax.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = t1[0];
      t2 = b.pMin.data;
      t3 = t2.length;
      if (1 >= t3)
        return H.ioore(t2, 1);
      t4 = t2[1];
      if (2 >= t3)
        return H.ioore(t2, 2);
      t2 = t2[2];
      t3 = new G.Point(new Float32Array(3));
      t3.Vector$3(t1, t4, t2);
      out.unionPoint$1(this.transformPoint$1(t3));
      t3 = b.pMin.data;
      t2 = t3.length;
      if (0 >= t2)
        return H.ioore(t3, 0);
      t4 = t3[0];
      t1 = b.pMax.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1 = t1[1];
      if (2 >= t2)
        return H.ioore(t3, 2);
      t3 = t3[2];
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t4, t1, t3);
      out.unionPoint$1(this.transformPoint$1(t2));
      t2 = b.pMin.data;
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t1 = t2[0];
      if (1 >= t3)
        return H.ioore(t2, 1);
      t2 = t2[1];
      t3 = b.pMax.data;
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t3 = t3[2];
      t4 = new G.Point(new Float32Array(3));
      t4.Vector$3(t1, t2, t3);
      out.unionPoint$1(this.transformPoint$1(t4));
      t4 = b.pMin.data;
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      t3 = b.pMax.data;
      t2 = t3.length;
      if (1 >= t2)
        return H.ioore(t3, 1);
      t1 = t3[1];
      if (2 >= t2)
        return H.ioore(t3, 2);
      t3 = t3[2];
      t2 = new G.Point(new Float32Array(3));
      t2.Vector$3(t4, t1, t3);
      out.unionPoint$1(this.transformPoint$1(t2));
      t2 = b.pMax.data;
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t1 = t2[0];
      if (1 >= t3)
        return H.ioore(t2, 1);
      t2 = t2[1];
      t3 = b.pMin.data;
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t3 = t3[2];
      t4 = new G.Point(new Float32Array(3));
      t4.Vector$3(t1, t2, t3);
      out.unionPoint$1(this.transformPoint$1(t4));
      t4 = b.pMax.data;
      t3 = t4.length;
      if (0 >= t3)
        return H.ioore(t4, 0);
      t2 = t4[0];
      t1 = b.pMin.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1 = t1[1];
      if (2 >= t3)
        return H.ioore(t4, 2);
      t4 = t4[2];
      t3 = new G.Point(new Float32Array(3));
      t3.Vector$3(t2, t1, t4);
      out.unionPoint$1(this.transformPoint$1(t3));
      out.unionPoint$1(this.transformPoint$1(b.pMax));
      return out;
    },
    transformBBox$1: function(b) {
      return this.transformBBox$2(b, null);
    },
    transformRay$2: function(r, tr) {
      if (tr == null)
        tr = G.Ray$(null, null, 0, 1 / 0, 0, 0);
      this.transformPoint$2(J.get$origin$x(r), tr.origin);
      this.transformVector$2(r.get$direction(), tr.direction);
      if (tr !== r) {
        tr.minDistance = r.minDistance;
        tr.maxDistance = r.maxDistance;
        tr.time = r.time;
        tr.depth = r.depth;
      }
      return tr;
    },
    transformRay$1: function(r) {
      return this.transformRay$2(r, null);
    },
    transformRayDifferential$2: function(r, rt) {
      this.transformRay$2(r, rt);
      rt.hasDifferentials = r.hasDifferentials;
      this.transformPoint$2(r.rxOrigin, rt.rxOrigin);
      this.transformPoint$2(r.ryOrigin, rt.ryOrigin);
      this.transformVector$2(r.rxDirection, rt.rxDirection);
      this.transformVector$2(r.ryDirection, rt.ryDirection);
      return rt;
    },
    static: {Transform$: function(m, inv) {
        var t1, t2;
        t1 = m == null;
        t2 = t1 ? G.Matrix4x4$() : new G.Matrix4x4(new Float32Array(H._ensureNativeList(m.data)));
        if (inv == null)
          t1 = t1 ? G.Matrix4x4$() : new G.Matrix4x4(new Float32Array(H._ensureNativeList(m.data))).invert$0();
        else
          t1 = new G.Matrix4x4(new Float32Array(H._ensureNativeList(inv.data)));
        return new G.Transform(t2, t1);
      }, Transform$from: function(t) {
        return new G.Transform(new G.Matrix4x4(new Float32Array(H._ensureNativeList(t.get$m().data))), new G.Matrix4x4(new Float32Array(H._ensureNativeList(t.mInv.data))));
      }, Transform_Translate: function(delta) {
        var t1 = J.getInterceptor$x(delta);
        return G.Transform$(G.Matrix4x4$values(1, 0, 0, t1.get$x(delta), 0, 1, 0, t1.get$y(delta), 0, 0, 1, t1.get$z(delta), 0, 0, 0, 1), G.Matrix4x4$values(1, 0, 0, J.$negate$n(t1.get$x(delta)), 0, 1, 0, J.$negate$n(t1.get$y(delta)), 0, 0, 1, J.$negate$n(t1.get$z(delta)), 0, 0, 0, 1));
      }, Transform_Scale: function(x, y, z) {
        var m = G.Matrix4x4$values(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
        if (typeof x !== "number")
          return H.iae(x);
        if (typeof y !== "number")
          return H.iae(y);
        if (typeof z !== "number")
          return H.iae(z);
        return G.Transform$(m, G.Matrix4x4$values(1 / x, 0, 0, 0, 0, 1 / y, 0, 0, 0, 0, 1 / z, 0, 0, 0, 0, 1));
      }, Transform_Perspective: function(fov, znear, zfar) {
        var t1, persp, invTanAng;
        t1 = zfar - znear;
        persp = G.Matrix4x4$values(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, zfar / t1, -zfar * znear / t1, 0, 0, 1, 0);
        if (typeof fov !== "number")
          return H.iae(fov);
        invTanAng = 1 / Math.tan(0.017453292519943295 * fov / 2);
        return G.Transform_Scale(invTanAng, invTanAng, 1).$mul(0, G.Transform$(persp, null));
      }}
  },
  Vector: {
    "^": "Object;data>",
    get$x: function(_) {
      var t1 = this.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0];
    },
    set$x: function(_, v) {
      var t1 = this.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = v;
      return v;
    },
    get$y: function(_) {
      var t1 = this.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    set$y: function(_, v) {
      var t1 = this.data;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1[1] = v;
      return v;
    },
    get$z: function(_) {
      var t1 = this.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      return t1[2];
    },
    set$z: function(_, v) {
      var t1 = this.data;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = v;
      return v;
    },
    copy$1: function(other) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = J.getInterceptor$x(other);
      t3 = J.$index$asx(t2.get$data(other), 0);
      t4 = t1.length;
      if (0 >= t4)
        return H.ioore(t1, 0);
      t1[0] = t3;
      t3 = J.$index$asx(t2.get$data(other), 1);
      if (1 >= t4)
        return H.ioore(t1, 1);
      t1[1] = t3;
      t2 = J.$index$asx(t2.get$data(other), 2);
      if (2 >= t4)
        return H.ioore(t1, 2);
      t1[2] = t2;
    },
    $add: function(_, v) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(v);
      t5 = J.$index$asx(t4.get$data(v), 0);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = J.$index$asx(t4.get$data(v), 1);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = J.$index$asx(t4.get$data(v), 2);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return G.Vector$(t3 + t5, t6 + t7, t1 + t4);
    },
    $sub: function(_, v) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(v);
      t5 = J.$index$asx(t4.get$data(v), 0);
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t6 = t1[1];
      t7 = J.$index$asx(t4.get$data(v), 1);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t4 = J.$index$asx(t4.get$data(v), 2);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return G.Vector$(t3 - t5, t6 - t7, t1 - t4);
    },
    $mul: function(_, f) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof f !== "number")
        return H.iae(f);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.Vector$(t3 * f, t4 * f, t1[2] * f);
    },
    $div: function(_, f) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof f !== "number")
        return H.iae(f);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.Vector$(t3 / f, t4 / f, t1[2] / f);
    },
    $negate: function(_) {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      return G.Vector$(-t3, -t4, -t1[2]);
    },
    $index: function(_, i) {
      var t1 = this.data;
      if (i >>> 0 !== i || i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.data;
      if (i >>> 0 !== i || i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = v;
      return v;
    },
    lengthSquared$0: function() {
      var t1, t2, t3, t4;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      return t3 * t3 + t4 * t4 + t1 * t1;
    },
    length$0: [function(_) {
      var t1 = this.lengthSquared$0();
      return Math.sqrt(t1);
    }, "call$0", "get$length", 0, 0, 102],
    scale$1: function(_, s) {
      var t1, t2, t3;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof s !== "number")
        return H.iae(s);
      t1[0] = t3 * s;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = t1[1] * s;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = t1[2] * s;
      return this;
    },
    invScale$1: function(s) {
      var t1, t2, t3;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (typeof s !== "number")
        return H.iae(s);
      t1[0] = t3 / s;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = t1[1] / s;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = t1[2] / s;
      return this;
    },
    add$1: function(_, s) {
      var t1, t2, t3, t4, t5;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.getInterceptor$x(s);
      t5 = J.$index$asx(t4.get$data(s), 0);
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[0] = t3 + t5;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t3 = J.$index$asx(t4.get$data(s), 1);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[1] = t5 + t3;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t2 = t1[2];
      t4 = J.$index$asx(t4.get$data(s), 2);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[2] = t2 + t4;
      return this;
    },
    toString$0: function(_) {
      var t1, t2, t3;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = H.S(t1[0]) + " ";
      if (1 >= t2)
        return H.ioore(t1, 1);
      t3 = t3 + H.S(t1[1]) + " ";
      if (2 >= t2)
        return H.ioore(t1, 2);
      return t3 + H.S(t1[2]);
    },
    hasNaNs$0: function() {
      var t1, t2;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      if (!isNaN(t1[0])) {
        if (1 >= t2)
          return H.ioore(t1, 1);
        if (!isNaN(t1[1])) {
          if (2 >= t2)
            return H.ioore(t1, 2);
          t1 = isNaN(t1[2]);
        } else
          t1 = true;
      } else
        t1 = true;
      return t1;
    },
    Vector$3: function(x, y, z) {
      var t1, t2;
      t1 = this.data;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = x;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = y;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = z;
    },
    $isVector: true,
    static: {Vector$: function(x, y, z) {
        var t1 = new G.Vector(new Float32Array(3));
        t1.Vector$3(x, y, z);
        return t1;
      }, Vector_SinTheta2: function(v) {
        var t1 = J.getInterceptor$x(v);
        t1 = J.$mul$ns(J.$index$asx(t1.get$data(v), 2), J.$index$asx(t1.get$data(v), 2));
        if (typeof t1 !== "number")
          return H.iae(t1);
        return P.max(0, 1 - t1);
      }, Vector_CosPhi: function(v) {
        var t1, sintheta;
        t1 = G.Vector_SinTheta2(v);
        sintheta = Math.sqrt(t1);
        if (sintheta === 0)
          return 1;
        return J.clamp$2$n(J.$div$n(J.$index$asx(J.get$data$x(v), 0), sintheta), -1, 1);
      }, Vector_SinPhi: function(v) {
        var t1, sintheta;
        t1 = G.Vector_SinTheta2(v);
        sintheta = Math.sqrt(t1);
        if (sintheta === 0)
          return 0;
        return J.clamp$2$n(J.$div$n(J.$index$asx(J.get$data$x(v), 1), sintheta), -1, 1);
      }, Vector_Dot: function(v1, v2) {
        var t1, t2;
        t1 = J.getInterceptor$x(v1);
        t2 = J.getInterceptor$x(v2);
        return J.$add$ns(J.$add$ns(J.$mul$ns(J.$index$asx(t1.get$data(v1), 0), J.$index$asx(t2.get$data(v2), 0)), J.$mul$ns(J.$index$asx(t1.get$data(v1), 1), J.$index$asx(t2.get$data(v2), 1))), J.$mul$ns(J.$index$asx(t1.get$data(v1), 2), J.$index$asx(t2.get$data(v2), 2)));
      }, Vector_AbsDot: function(v1, v2) {
        var t1, t2;
        t1 = J.getInterceptor$x(v1);
        t2 = J.getInterceptor$x(v2);
        return J.abs$0$n(J.$add$ns(J.$add$ns(J.$mul$ns(J.$index$asx(t1.get$data(v1), 0), J.$index$asx(t2.get$data(v2), 0)), J.$mul$ns(J.$index$asx(t1.get$data(v1), 1), J.$index$asx(t2.get$data(v2), 1))), J.$mul$ns(J.$index$asx(t1.get$data(v1), 2), J.$index$asx(t2.get$data(v2), 2))));
      }, Vector_Cross: function(v1, v2) {
        var t1, v1x, v1y, v1z, v2x, v2y, v2z, t2, t3, t4;
        t1 = J.getInterceptor$x(v1);
        v1x = J.$index$asx(t1.get$data(v1), 0);
        v1y = J.$index$asx(t1.get$data(v1), 1);
        v1z = J.$index$asx(t1.get$data(v1), 2);
        t1 = J.getInterceptor$x(v2);
        v2x = J.$index$asx(t1.get$data(v2), 0);
        v2y = J.$index$asx(t1.get$data(v2), 1);
        v2z = J.$index$asx(t1.get$data(v2), 2);
        t1 = J.getInterceptor$ns(v1y);
        t2 = J.getInterceptor$ns(v1z);
        t3 = J.$sub$n(t1.$mul(v1y, v2z), t2.$mul(v1z, v2y));
        t4 = J.getInterceptor$ns(v1x);
        t2 = J.$sub$n(t2.$mul(v1z, v2x), t4.$mul(v1x, v2z));
        t1 = J.$sub$n(t4.$mul(v1x, v2y), t1.$mul(v1y, v2x));
        t4 = new Float32Array(3);
        if (0 >= 3)
          return H.ioore(t4, 0);
        t4[0] = t3;
        if (1 >= 3)
          return H.ioore(t4, 1);
        t4[1] = t2;
        if (2 >= 3)
          return H.ioore(t4, 2);
        t4[2] = t1;
        return new G.Vector(t4);
      }, Vector_SphericalPhi: function(v) {
        var t1, t2, p;
        t1 = J.getInterceptor$x(v);
        t2 = t1.get$y(v);
        t1 = t1.get$x(v);
        if (typeof t2 !== "number")
          H.throwExpression(P.ArgumentError$(t2));
        if (typeof t1 !== "number")
          H.throwExpression(P.ArgumentError$(t1));
        p = Math.atan2(t2, t1);
        return p < 0 ? p + 6.283185307179586 : p;
      }, Vector_CoordinateSystem: function(v1, v2, v3) {
        var t1, t2, invLen;
        t1 = J.getInterceptor$x(v1);
        if (J.abs$0$n(t1.get$x(v1)) > J.abs$0$n(t1.get$y(v1))) {
          t2 = J.$add$ns(J.$mul$ns(J.$index$asx(t1.get$data(v1), 0), J.$index$asx(t1.get$data(v1), 0)), J.$mul$ns(J.$index$asx(t1.get$data(v1), 2), J.$index$asx(t1.get$data(v1), 2)));
          if (typeof t2 !== "number")
            H.throwExpression(P.ArgumentError$(t2));
          invLen = 1 / Math.sqrt(t2);
          t2 = J.getInterceptor$x(v2);
          J.$indexSet$ax(t2.get$data(v2), 0, J.$mul$ns(J.$negate$n(J.$index$asx(t1.get$data(v1), 2)), invLen));
          J.$indexSet$ax(t2.get$data(v2), 1, 0);
          J.$indexSet$ax(t2.get$data(v2), 2, J.$mul$ns(J.$index$asx(t1.get$data(v1), 0), invLen));
        } else {
          t2 = J.$add$ns(J.$mul$ns(J.$index$asx(t1.get$data(v1), 1), J.$index$asx(t1.get$data(v1), 1)), J.$mul$ns(J.$index$asx(t1.get$data(v1), 2), J.$index$asx(t1.get$data(v1), 2)));
          if (typeof t2 !== "number")
            H.throwExpression(P.ArgumentError$(t2));
          invLen = 1 / Math.sqrt(t2);
          t2 = J.getInterceptor$x(v2);
          J.$indexSet$ax(t2.get$data(v2), 0, 0);
          J.$indexSet$ax(t2.get$data(v2), 1, J.$mul$ns(J.$index$asx(t1.get$data(v1), 2), invLen));
          J.$indexSet$ax(t2.get$data(v2), 2, J.$mul$ns(J.$negate$n(J.$index$asx(t1.get$data(v1), 1)), invLen));
        }
        v3.copy$1(G.Vector_Cross(v1, v2));
      }, Vector_FaceForward: function(n, n2) {
        var t1, t2, t3, t4, t5;
        if (J.$lt$n(G.Vector_Dot(n, n2), 0)) {
          t1 = J.getInterceptor$x(n);
          t2 = J.$negate$n(J.$index$asx(t1.get$data(n), 0));
          t3 = J.$negate$n(J.$index$asx(t1.get$data(n), 1));
          t1 = J.$negate$n(J.$index$asx(t1.get$data(n), 2));
          t4 = new Float32Array(3);
          t5 = new G.Vector(t4);
          if (0 >= 3)
            return H.ioore(t4, 0);
          t4[0] = t2;
          if (1 >= 3)
            return H.ioore(t4, 1);
          t4[1] = t3;
          if (2 >= 3)
            return H.ioore(t4, 2);
          t4[2] = t1;
          t1 = t5;
        } else
          t1 = n;
        return t1;
      }}
  },
  AggregateVolume: {
    "^": "VolumeRegion;regions,_bound",
    worldBound$0: function() {
      return this._bound;
    },
    intersectP$3: function(ray, t00, t1) {
      var tr0, tr1, t2, i;
      t00[0] = 1 / 0;
      t1[0] = -1 / 0;
      tr0 = [0];
      tr1 = [0];
      for (t2 = this.regions, i = 0; i < t2.length; ++i)
        if (t2[i].intersectP$3(ray, tr0, tr1)) {
          t00[0] = P.min(t00[0], tr0[0]);
          t1[0] = P.max(t1[0], tr1[0]);
        }
      return J.$lt$n(t00[0], t1[0]);
    },
    sigma_s$3: function(p, w, time) {
      var s, t1, i;
      s = G.Spectrum_Spectrum(0);
      for (t1 = this.regions, i = 0; i < t1.length; ++i)
        s = s.$add(0, t1[i].sigma_s$3(p, w, time));
      return s;
    },
    Lve$3: function(p, w, time) {
      var $L, t1, i;
      $L = G.Spectrum_Spectrum(0);
      for (t1 = this.regions, i = 0; i < t1.length; ++i)
        $L = $L.$add(0, t1[i].Lve$3(p, w, time));
      return $L;
    },
    p$4: [function(_, p, w, wp, time) {
      var t1, ph, sumWt, i, wt, t2;
      for (t1 = this.regions, ph = 0, sumWt = 0, i = 0; i < t1.length; ++i) {
        wt = t1[i].sigma_s$3(p, w, time).luminance$0();
        sumWt += wt;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t2 = J.p$4$x(t1[i], p, w, wp, time);
        if (typeof t2 !== "number")
          return H.iae(t2);
        ph += wt * t2;
      }
      return ph / sumWt;
    }, "call$4", "get$p", 8, 0, 111],
    tau$3: function(ray, step, offset) {
      var t, t1, i;
      t = G.Spectrum_Spectrum(0);
      for (t1 = this.regions, i = 0; i < t1.length; ++i)
        t = t.$add(0, t1[i].tau$3(ray, step, offset));
      return t;
    },
    AggregateVolume$1: function(regions) {
      var t1, i, t2, t3;
      for (t1 = this.regions, i = 0; i < t1.length; ++i) {
        t2 = this._bound;
        t3 = t1[i].worldBound$0();
        this._bound = new G.BBox(new G.Point(new Float32Array(H._ensureNativeList(t2.pMin.data))), new G.Point(new Float32Array(H._ensureNativeList(t2.pMax.data)))).union$1(t3);
      }
    },
    static: {AggregateVolume$: function(regions) {
        var t1 = new G.AggregateVolume(regions, G.BBox$(null, null));
        t1.AggregateVolume$1(regions);
        return t1;
      }}
  },
  DensityRegion: {
    "^": "VolumeRegion;",
    sigma_s$3: function(p, v, d) {
      return this.sig_s.$mul(0, this.density$1(this.worldToVolume.transformPoint$1(p)));
    },
    Lve$3: function(p, v, d) {
      return this.le.$mul(0, this.density$1(this.worldToVolume.transformPoint$1(p)));
    },
    p$4: [function(_, p, w, wp, d) {
      return G.PhaseHG(w, wp, this.g);
    }, "call$4", "get$p", 8, 0, 111],
    tau$3: function(r, stepSize, u) {
      var t00, t1, $length, rn, tau, t2;
      t00 = [0];
      t1 = [0];
      $length = J.length$0$asx(r.direction);
      if (J.$eq($length, 0))
        return G.Spectrum_Spectrum(0);
      rn = G.Ray$(r.origin, J.$div$n(r.direction, $length), J.$mul$ns(r.minDistance, $length), J.$mul$ns(r.maxDistance, $length), r.time, 0);
      if (!this.intersectP$3(rn, t00, t1))
        return G.Spectrum_Spectrum(0);
      tau = G.Spectrum_Spectrum(0);
      t2 = J.$add$ns(t00[0], J.$mul$ns(u, stepSize));
      t00[0] = t2;
      for (; J.$lt$n(t2, t1[0]);) {
        t2 = t00[0];
        t2 = new Float32Array(H._ensureNativeList(J.get$data$x(J.$add$ns(rn.origin, J.$mul$ns(rn.direction, t2)))));
        J.$negate$n(rn.direction);
        tau = tau.$add(0, this.sig_a.$add(0, this.sig_s).$mul(0, this.density$1(this.worldToVolume.transformPoint$1(new G.Point(t2)))));
        t2 = J.$add$ns(t00[0], stepSize);
        t00[0] = t2;
      }
      return tau.$mul(0, stepSize);
    }
  },
  VolumeRegion: {
    "^": "Object;"
  },
  VolumeIntegrator: {
    "^": "Integrator;"
  },
  XYZColor: {
    "^": "Spectrum;c",
    get$x: function(_) {
      var t1 = this.c;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0];
    },
    set$x: function(_, v) {
      var t1 = this.c;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = v;
      return v;
    },
    get$y: function(_) {
      var t1 = this.c;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    set$y: function(_, v) {
      var t1 = this.c;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1[1] = v;
      return v;
    },
    get$z: function(_) {
      var t1 = this.c;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      return t1[2];
    },
    set$z: function(_, v) {
      var t1 = this.c;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = v;
      return v;
    },
    luminance$0: function() {
      var t1 = this.c;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    toRGB$0: function() {
      return G.RGBColor$from(this);
    },
    toXYZ$0: function() {
      return this;
    },
    setSampled$3: function(lambda, v, offset) {
      var t1, t2, t3, t4;
      t1 = new G.RGBColor(new Float32Array(3));
      t1.Spectrum$_$2(3, 0);
      t1 = t1.setSampled$3(lambda, v, offset).c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      G.Spectrum_RGBToXYZ(t3, t4, t1[2], this.c);
      return this;
    },
    setSampled$2: function(lambda, v) {
      return this.setSampled$3(lambda, v, 0);
    },
    setRGB$4: function(r, g, b, type) {
      G.Spectrum_RGBToXYZ(r, g, b, this.c);
      return this;
    },
    setRGB$3: function(r, g, b) {
      return this.setRGB$4(r, g, b, 0);
    },
    $add: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.XYZColor$xyz(t3 + t4, t5 + t6, t1 + t2);
    },
    $sub: function(_, s) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      t4 = J.$index$asx(s.get$c(), 0);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (1 >= t2)
        return H.ioore(t1, 1);
      t5 = t1[1];
      t6 = J.$index$asx(s.get$c(), 1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = t1[2];
      t2 = J.$index$asx(s.get$c(), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return G.XYZColor$xyz(t3 - t4, t5 - t6, t1 - t2);
    },
    $mul: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.XYZColor$xyz(t3 * s, t4 * s, t1[2] * s);
      }
      if (!!J.getInterceptor(s).$isXYZColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.XYZColor$xyz(t3 * t6, t7 * t8, t1 * t4[2]);
      }
      $.Log.call$2(3, "XYZColor or double expected.");
      t1 = new G.XYZColor(new Float32Array(3));
      t1.Spectrum$_$2(3, 0);
      return t1;
    },
    $div: function(_, s) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof s === "number") {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        return G.XYZColor$xyz(t3 / s, t4 / s, t1[2] / s);
      }
      if (!!J.getInterceptor(s).$isXYZColor) {
        t1 = this.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = s.c;
        t5 = t4.length;
        if (0 >= t5)
          return H.ioore(t4, 0);
        t6 = t4[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t7 = t1[1];
        if (1 >= t5)
          return H.ioore(t4, 1);
        t8 = t4[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        t1 = t1[2];
        if (2 >= t5)
          return H.ioore(t4, 2);
        return G.XYZColor$xyz(t3 / t6, t7 / t8, t1 / t4[2]);
      }
      $.Log.call$2(3, "XYZColor or double expected.");
      t1 = new G.XYZColor(new Float32Array(3));
      t1.Spectrum$_$2(3, 0);
      return t1;
    },
    XYZColor$from$1: function(color) {
      var t1, t2, t3, t4, t5;
      t1 = J.getInterceptor(color);
      if (!!t1.$isRGBColor) {
        t1 = color.c;
        t2 = t1.length;
        if (0 >= t2)
          return H.ioore(t1, 0);
        t3 = t1[0];
        if (1 >= t2)
          return H.ioore(t1, 1);
        t4 = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        G.Spectrum_RGBToXYZ(t3, t4, t1[2], this.c);
      } else if (!!t1.$isXYZColor) {
        t1 = this.c;
        t2 = color.c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      } else if (!!t1.$isSampledSpectrum) {
        t1 = this.c;
        t2 = color.toXYZ$0().c;
        t3 = t2.length;
        if (0 >= t3)
          return H.ioore(t2, 0);
        t4 = t2[0];
        t5 = t1.length;
        if (0 >= t5)
          return H.ioore(t1, 0);
        t1[0] = t4;
        if (1 >= t3)
          return H.ioore(t2, 1);
        t4 = t2[1];
        if (1 >= t5)
          return H.ioore(t1, 1);
        t1[1] = t4;
        if (2 >= t3)
          return H.ioore(t2, 2);
        t2 = t2[2];
        if (2 >= t5)
          return H.ioore(t1, 2);
        t1[2] = t2;
      }
    },
    XYZColor$xyz$3: function(x, y, z) {
      var t1, t2;
      t1 = this.c;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = x;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = y;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = z;
    },
    $isXYZColor: true,
    static: {XYZColor$xyz: function(x, y, z) {
        var t1 = new G.XYZColor(new Float32Array(3));
        t1.Spectrum$_$2(3, 0);
        t1.XYZColor$xyz$3(x, y, z);
        return t1;
      }, XYZColor$from: function(color) {
        var t1 = new G.XYZColor(new Float32Array(3));
        t1.Spectrum$_$2(3, 0);
        t1.XYZColor$from$1(color);
        return t1;
      }}
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      f.call$1(t1._current);
  },
  IterableMixinWorkaround_removeWhereList: function(list, test) {
    var retained, $length, t1, i, element;
    retained = [];
    $length = list.length;
    for (t1 = $length, i = 0; i < $length; ++i) {
      if (i >= t1)
        return H.ioore(list, i);
      element = list[i];
      if (test.call$1(element) !== true)
        retained.push(element);
      t1 = list.length;
      if ($length !== t1)
        throw H.wrapException(P.ConcurrentModificationError$(list));
    }
    t1 = retained.length;
    if (t1 === $length)
      return;
    C.JSArray_methods.set$length(list, t1);
    for (i = 0; i < retained.length; ++i)
      C.JSArray_methods.$indexSet(list, i, retained[i]);
  },
  IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1, t2;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i) {
      t1 = t1[i];
      t2 = iterable;
      if (t1 == null ? t2 == null : t1 === t2)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    }
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  IterableMixinWorkaround_sortList: function(list, compare) {
    H.Sort__doSort(list, 0, list.length - 1, compare);
  },
  IterableMixinWorkaround__rangeCheck: function(list, start, end) {
    var t1 = J.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, list.length))
      throw H.wrapException(P.RangeError$range(start, 0, list.length));
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, list.length))
      throw H.wrapException(P.RangeError$range(end, start, list.length));
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length, t1, otherStart, otherList;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    $length = J.$sub$n(end, start);
    if (J.$eq($length, 0))
      return;
    if (J.$lt$n(skipCount, 0))
      throw H.wrapException(P.ArgumentError$(skipCount));
    t1 = J.getInterceptor(from);
    if (!!t1.$isList) {
      otherStart = skipCount;
      otherList = from;
    } else {
      otherList = t1.skip$1(from, skipCount).toList$1$growable(0, false);
      otherStart = 0;
    }
    if (J.$gt$n(J.$add$ns(otherStart, $length), J.get$length$asx(otherList)))
      throw H.wrapException(P.StateError$("Not enough elements"));
    H.Lists_copy(otherList, otherStart, list, start, $length);
  },
  IterableMixinWorkaround_fillRangeList: function(list, start, end, fillValue) {
    var i, t1;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    for (i = start; t1 = J.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
      C.JSArray_methods.$indexSet(list, i, fillValue);
  },
  IterableMixinWorkaround_insertAllList: function(list, index, iterable) {
    var insertionLength, t1, index0;
    if (index > list.length)
      throw H.wrapException(P.RangeError$range(index, 0, list.length));
    insertionLength = iterable.length;
    C.JSArray_methods.set$length(list, list.length + insertionLength);
    t1 = list.length;
    if (!!list.immutable$list)
      H.throwExpression(P.UnsupportedError$("set range"));
    H.IterableMixinWorkaround_setRangeList(list, index + insertionLength, t1, list, index);
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0(); index = index0) {
      index0 = index + 1;
      C.JSArray_methods.$indexSet(list, index, t1._current);
    }
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var t1, i, j, t2, t3;
    t1 = J.getInterceptor$n(srcStart);
    if (t1.$lt(srcStart, dstStart))
      for (i = J.$sub$n(t1.$add(srcStart, count), 1), j = J.$sub$n(J.$add$ns(dstStart, count), 1), t1 = J.getInterceptor$asx(src); t2 = J.getInterceptor$n(i), t2.$ge(i, srcStart); i = t2.$sub(i, 1), j = J.$sub$n(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
    else
      for (t2 = J.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = J.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)); i = t3.$add(i, 1), j = J.$add$ns(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
  },
  Lists_lastIndexOf: function(a, element, startIndex) {
    var t1, i;
    if (typeof startIndex !== "number")
      return startIndex.$lt();
    if (startIndex < 0)
      return -1;
    t1 = a.length;
    if (startIndex >= t1)
      startIndex = t1 - 1;
    for (i = startIndex; i >= 0; --i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  Symbol_getName: function(symbol) {
    return symbol.get$_name();
  },
  ListIterable: {
    "^": "IterableBase;",
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$first: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.elementAt$1(0, 0);
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, null);
    },
    toList$1$growable: function(_, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(this)), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      for (i = 0; i < this.get$length(this); ++i) {
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,_start,_endOrLength",
    get$_endIndex: function() {
      var $length = J.get$length$asx(this._iterable);
      return $length;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$ge$n(t1, $length))
        return 0;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return $length - t1;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    elementAt$1: function(_, index) {
      var realIndex = J.$add$ns(this.get$_startIndex(), index);
      if (J.$lt$n(index, 0) || J.$ge$n(realIndex, this.get$_endIndex()))
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    skip$1: function(_, count) {
      if (J.$lt$n(count, 0))
        throw H.wrapException(P.RangeError$value(count));
      return H.SubListIterable$(this._iterable, J.$add$ns(this._start, count), this._endOrLength, null);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1 = this._start;
      if (J.$lt$n(t1, 0))
        throw H.wrapException(P.RangeError$value(t1));
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this._length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._iterable);
    },
    get$first: function(_) {
      return this._f$1(J.get$first$ax(this._iterable));
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!J.getInterceptor(iterable).$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "^": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  },
  WhereIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "^": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  SkipIterable: {
    "^": "IterableBase;_iterable,_skipCount",
    skip$1: function(_, n) {
      if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
        throw H.wrapException(P.RangeError$value(n));
      return H.SkipIterable_SkipIterable(this._iterable, J.$add$ns(this._skipCount, n), H.getTypeArgumentByIndex(this, 0));
    },
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.SkipIterator(t1.get$iterator(t1), this._skipCount);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    SkipIterable$_$2: function(_iterable, _skipCount, $E) {
      var t1 = this._skipCount;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1 || J.$lt$n(t1, 0))
        throw H.wrapException(P.RangeError$(t1));
    },
    static: {SkipIterable_SkipIterable: function(iterable, skipCount, $E) {
        var t1;
        if (!!iterable.$isEfficientLength) {
          t1 = H.setRuntimeTypeInfo(new H.EfficientLengthSkipIterable(iterable, skipCount), [$E]);
          t1.SkipIterable$_$2(iterable, skipCount, $E);
          return t1;
        }
        return H.SkipIterable$_(iterable, skipCount, $E);
      }, SkipIterable$_: function(_iterable, _skipCount, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SkipIterable(_iterable, _skipCount), [$E]);
        t1.SkipIterable$_$2(_iterable, _skipCount, $E);
        return t1;
      }}
  },
  EfficientLengthSkipIterable: {
    "^": "SkipIterable;_iterable,_skipCount",
    get$length: function(_) {
      var t1, $length;
      t1 = this._iterable;
      $length = J.$sub$n(t1.get$length(t1), this._skipCount);
      if (J.$ge$n($length, 0))
        return $length;
      return 0;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    $isEfficientLength: true
  },
  SkipIterator: {
    "^": "Iterator;_iterator,_skipCount",
    moveNext$0: function() {
      var t1, i, t2;
      t1 = this._iterator;
      i = 0;
      while (true) {
        t2 = this._skipCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.moveNext$0();
        ++i;
      }
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insert$2: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  },
  UnmodifiableListMixin: {
    "^": "Object;",
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insert$2: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    fillRange$3: function(_, start, end, fillValue) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  UnmodifiableListBase: {
    "^": "ListBase+UnmodifiableListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo(function(victim, hasOwnProperty) {
      var result = [];
      for (var key in victim) {
        if (hasOwnProperty.call(victim, key))
          result.push(key);
      }
      return result;
    }(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    if ($.get$globalThis().scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    $.get$globalThis().scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 11],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P._createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 11],
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1) {
      zone.toString;
      return errorHandler;
    } else {
      zone.toString;
      return errorHandler;
    }
  },
  Future_Future$sync: function(computation, $T) {
    var result, T0, error, stackTrace, t1, exception;
    try {
      result = computation.call$0();
      t1 = P._Future$immediate(result, T0);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      error = t1;
      stackTrace = new H._StackTrace(exception, null);
      return P._Future$immediateError(error, stackTrace, T0);
    }

  },
  Future_wait: function(futures, eagerError) {
    var t1, t2, t3, values, completer;
    t1 = {};
    t1.completer_0 = null;
    t1.values_1 = null;
    t1.remaining_2 = 0;
    t1.error_3 = null;
    t1.stackTrace_4 = null;
    t2 = new P.Future_wait_handleError(t1, eagerError);
    for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();)
      t3._current.then$2$onError(new P.Future_wait_closure(t1, eagerError, t1.remaining_2++), t2);
    t2 = t1.remaining_2;
    if (t2 === 0)
      return P._Future$immediate(C.List_empty, null);
    values = Array(t2);
    values.fixed$length = init;
    t1.values_1 = values;
    t2 = J.JSArray;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
    t1.completer_0 = completer;
    return completer.future;
  },
  _asyncRunCallbackLoop: function() {
    var entry = $._nextCallback;
    for (; entry != null;) {
      entry.callback$0();
      entry = entry.next;
      $._nextCallback = entry;
    }
    $._lastCallback = null;
  },
  _asyncRunCallback: [function() {
    var exception;
    try {
      P._asyncRunCallbackLoop();
    } catch (exception) {
      H.unwrapException(exception);
      $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
      $._nextCallback = $._nextCallback.get$next();
      throw exception;
    }

  }, "call$0", "_asyncRunCallback$closure", 0, 0, 12],
  _scheduleAsyncCallback: function(callback) {
    var t1, t2;
    t1 = $._lastCallback;
    if (t1 == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      t2 = new P._AsyncCallbackEntry(callback, null);
      t1.next = t2;
      $._lastCallback = t2;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, callback);
      return;
    }
    P._rootScheduleMicrotask(t1, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]);
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(t1, null, t1, e, s);
    }

  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 13],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 14, 15],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 12],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreateTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreateTimer(t1, null, t1, duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  _createTimer: function(duration, callback) {
    var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  },
  _rootCreateTimer: function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure:95;callback_0",
    call$0: function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }
  },
  _AsyncError: {
    "^": "Object;error>,stackTrace<",
    $isError: true
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  Future_wait_handleError: {
    "^": "Closure:96;box_0,eagerError_1",
    call$2: function(theError, theStackTrace) {
      var t1, t2, t3;
      t1 = this.box_0;
      t2 = t1.values_1;
      t1.values_1 = null;
      t3 = --t1.remaining_2;
      if (t2 != null)
        if (t3 === 0 || this.eagerError_1)
          t1.completer_0.completeError$2(theError, theStackTrace);
        else {
          t1.error_3 = theError;
          t1.stackTrace_4 = theStackTrace;
        }
      else if (t3 === 0 && !this.eagerError_1)
        t1.completer_0.completeError$2(t1.error_3, t1.stackTrace_4);
    }
  },
  Future_wait_closure: {
    "^": "Closure:112;box_0,eagerError_2,pos_3",
    call$1: function(value) {
      var t1, t2, t3, t4;
      t1 = this.box_0;
      t2 = --t1.remaining_2;
      t3 = t1.values_1;
      if (t3 != null) {
        t4 = this.pos_3;
        if (t4 < 0 || t4 >= t3.length)
          return H.ioore(t3, t4);
        t3[t4] = value;
        if (t2 === 0) {
          t1 = t1.completer_0.future;
          if (t1._state !== 0)
            H.throwExpression(P.StateError$("Future already completed"));
          t1._asyncComplete$1(t3);
        }
      } else if (t2 === 0 && !this.eagerError_2)
        t1.completer_0.completeError$2(t1.error_3, t1.stackTrace_4);
    }
  },
  _Completer: {
    "^": "Object;future<"
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    completeError$2: [function(error, stackTrace) {
      var t1;
      if (error == null)
        throw H.wrapException(P.ArgumentError$("Error must not be null"));
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncCompleteError$2(error, stackTrace);
    }, function(error) {
      return this.completeError$2(error, null);
    }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 113, 15]
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasValue: function() {
      return this._state === 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, f, null, P._registerErrorHandler(onError, t1), null), [null]);
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    catchError$2$test: function(onError, test) {
      var t1, t2, result;
      t1 = $.Zone__current;
      t2 = P._registerErrorHandler(onError, t1);
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, null, test, t2, null), [null]);
      this._addListener$1(result);
      return result;
    },
    catchError$1: function(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = new P._Future(0, t1, null, null, null, null, null, action);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_async$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(t1, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 14, 15],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              if (this._state !== 0)
                H.throwExpression(P.StateError$("Future already completed"));
              this._state = 1;
              t1 = this._zone;
              t1.toString;
              P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    _async$_Future$immediateError$2: function(error, stackTrace, $T) {
      this._asyncCompleteError$2(error, stackTrace);
    },
    _async$_Future$immediate$1: function(value, $T) {
      this._asyncComplete$1(value);
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future$immediate: function(value, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediate$1(value, $T);
        return t1;
      }, _Future$immediateError: function(error, stackTrace, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediateError$2(error, stackTrace, $T);
        return t1;
      }, _Future__chainForeignFuture: function(source, target) {
        target._state = 2;
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        target._state = 2;
        if (source._state >= 4)
          P._Future__propagateToListeners(source, target);
        else
          source._addListener$1(target);
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners._nextListener = null;
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, sourceValue, t5, zone, oldZone, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            t2 = t1.source_4;
            asyncError = t2.get$_error();
            t2 = t2._zone;
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          if (listeners == null)
            return;
          if (listeners._nextListener != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          t3.listenerHasValue_1 = true;
          sourceValue = t1.source_4.get$_hasValue() ? t1.source_4.get$_async$_value() : null;
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (t2) {
            t4 = listeners._state === 2;
            if ((t4 ? null : listeners._onValueCallback) == null) {
              t5 = (t4 ? null : listeners._whenCompleteActionCallback) != null;
              t4 = t5;
            } else
              t4 = true;
          } else
            t4 = true;
          if (t4) {
            zone = listeners._zone;
            if (hasError) {
              t4 = t1.source_4.get$_zone();
              t4.toString;
              zone.toString;
              t4 = zone == null ? t4 != null : zone !== t4;
            } else
              t4 = false;
            if (t4) {
              t2 = t1.source_4;
              asyncError = t2.get$_error();
              t2 = t2._zone;
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(t2, null, t2, t3, t4);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if ((listeners._state === 2 ? null : listeners._onValueCallback) != null)
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if ((listeners._state === 2 ? null : listeners._whenCompleteActionCallback) != null)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  listeners._state = 2;
                  t1.source_4 = chainSource;
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, listeners);
              else
                P._Future__chainForeignFuture(chainSource, listeners);
              return;
            }
          }
          if (t3.listenerHasValue_1 === true) {
            listeners0 = listeners._removeListeners$0();
            t2 = t3.listenerValueOrError_2;
            listeners._state = 4;
            listeners._resultOrListeners = t2;
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            t2 = J.get$error$x(asyncError);
            t3 = asyncError.get$stackTrace();
            listeners._state = 8;
            listeners._resultOrListeners = new P._AsyncError(t2, t3);
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:95;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:97;target_0",
    call$1: function(value) {
      this.target_0._completeWithValue$1(value);
    }
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:114;target_1",
    call$2: function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:95;this_0,coreFuture_1",
    call$0: function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:95;this_2,value_3",
    call$0: function() {
      this.this_2._completeWithValue$1(this.value_3);
    }
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:95;this_0,error_1,stackTrace_2",
    call$0: function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:115;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, t1, t2, exception;
      try {
        t1 = this.zone_5;
        t2 = this.listener_3;
        t2 = t2._state === 2 ? null : t2._onValueCallback;
        t1.toString;
        this.box_1.listenerValueOrError_2 = P._rootRunUnary(t1, null, t1, t2, this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P._AsyncError(e, s);
        return false;
      }

    }
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:12;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, test, matchesTest, e, s, errorCallback, e0, s0, t1, t2, t3, exception, listenerValueOrError, t4;
      asyncError = this.box_2.source_4.get$_error();
      t1 = this.listener_6;
      test = t1._state === 2 ? null : t1._errorTestCallback;
      matchesTest = true;
      if (test != null)
        try {
          t2 = this.zone_7;
          t3 = J.get$error$x(asyncError);
          t2.toString;
          matchesTest = P._rootRunUnary(t2, null, t2, test, t3);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      errorCallback = t1._state === 2 ? null : t1._onErrorCallback;
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2) {
            t1 = J.get$error$x(asyncError);
            t2 = asyncError.get$stackTrace();
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunBinary(t3, null, t3, errorCallback, t1, t2);
          } else {
            t1 = J.get$error$x(asyncError);
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunUnary(t3, null, t3, errorCallback, t1);
          }
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:12;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, t2, t3, exception;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        t2 = this.zone_10;
        t3 = this.listener_9;
        t3 = t3._state === 2 ? null : t3._whenCompleteActionCallback;
        t2.toString;
        t1.completeResult_0 = P._rootRun(t2, null, t2, t3);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8) {
          t2 = J.get$error$x(this.box_2.source_4.get$_error());
          t3 = e;
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        t3 = this.box_1;
        if (t2)
          t3.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t3.listenerValueOrError_2 = new P._AsyncError(e, s);
        t3.listenerHasValue_1 = false;
      }

      if (!!J.getInterceptor(t1.completeResult_0).$isFuture) {
        t2 = this.listener_9;
        t2.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, t2), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, t2));
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:97;box_2,listener_11",
    call$1: function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_11);
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:114;box_0,listener_12",
    call$2: function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_12);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next@",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSInt);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSBool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    toList$0: function(_) {
      var result, future;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      future = P._Future$([J.JSArray, H.getRuntimeTypeArgument(this, "Stream", 0)]);
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
      return future;
    },
    skip$1: function(_, count) {
      var t1 = H.setRuntimeTypeInfo(new P._SkipStream(count, this), [null]);
      t1._SkipStream$2(this, count, null);
      return t1;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    }
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:95;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    }
  },
  Stream_forEach__closure0: {
    "^": "Closure:97;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "^": "Closure:95;future_6",
    call$0: function() {
      this.future_6._complete$1(null);
    }
  },
  Stream_length_closure: {
    "^": "Closure:97;box_0",
    call$1: function(_) {
      ++this.box_0.count_0;
    }
  },
  Stream_length_closure0: {
    "^": "Closure:95;box_0,future_1",
    call$0: function() {
      this.future_1._complete$1(this.box_0.count_0);
    }
  },
  Stream_isEmpty_closure: {
    "^": "Closure:97;box_0,future_1",
    call$1: function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    }
  },
  Stream_isEmpty_closure0: {
    "^": "Closure:95;future_2",
    call$0: function() {
      this.future_2._complete$1(true);
    }
  },
  Stream_toList_closure: {
    "^": "Closure;this_0,result_1",
    call$1: function(data) {
      this.result_1.push(data);
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_0, "Stream");
    }
  },
  Stream_toList_closure0: {
    "^": "Closure:95;result_2,future_3",
    call$0: function() {
      this.future_3._complete$1(this.result_2);
    }
  },
  Stream_first_closure: {
    "^": "Closure;box_0,this_1,future_2",
    call$1: function(value) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_first_closure0: {
    "^": "Closure:95;future_3",
    call$0: function() {
      this.future_3._completeError$1(new P.StateError("No elements"));
    }
  },
  StreamSubscription: {
    "^": "Object;"
  },
  _StreamController: {
    "^": "Object;",
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      if ((this._state & 8) === 0) {
        var t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      t1 = this._varData.get$varData();
      return t1;
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null) {
        t1 = (this._state & 2) !== 0 ? $.get$Future__nullFuture() : P._Future$(null);
        this._doneFuture = t1;
      }
      return t1;
    },
    add$1: [function(_, value) {
      var t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null));
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }],
    close$0: function(_) {
      var t1 = this._state;
      if ((t1 & 4) !== 0) {
        this._ensureDoneFuture$0();
        return this._doneFuture;
      }
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      t1 |= 4;
      this._state = t1;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      this._ensureDoneFuture$0();
      return this._doneFuture;
    },
    _subscribe$1: function(cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, t2, null, null), [null]);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state |= 1;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var t1, future;
      if ((this._state & 8) !== 0)
        this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      t1 = new P._StreamController__recordCancel_complete(this);
      future = P._runGuarded(this.get$_onCancel());
      if (future != null)
        future = future.whenComplete$1(t1);
      else
        t1.call$0();
      return future;
    }
  },
  _StreamController__subscribe_closure: {
    "^": "Closure:95;this_0",
    call$0: function() {
      P._runGuarded(this.this_0.get$_onListen());
    }
  },
  _StreamController__recordCancel_complete: {
    "^": "Closure:12;this_0",
    call$0: function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }
  },
  _SyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  },
  _AsyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  },
  _AsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;"
  },
  _SyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__SyncStreamControllerDispatch: {
    "^": "_StreamController+_SyncStreamControllerDispatch;"
  },
  _ControllerStream: {
    "^": "_StreamImpl;_async$_controller",
    _createSubscription$1: function(cancelOnError) {
      return this._async$_controller._subscribe$1(cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true
  },
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.pause$0(0);
      P._runGuarded(t1.get$_onPause());
    }, "call$0", "get$_onPause", 0, 0, 12],
    _onResume$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.resume$0();
      P._runGuarded(t1.get$_onResume());
    }, "call$0", "get$_onResume", 0, 0, 12]
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        this._state = (this._state | 64) >>> 0;
        pendingEvents.schedule$1(this);
      }
    },
    onData$1: function(handleData) {
      this._zone.toString;
      this._onData = handleData;
    },
    onError$1: function(_, handleError) {
      if (handleError == null)
        handleError = P._nullErrorHandler$closure();
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    onDone$1: function(handleDone) {
      if (handleDone == null)
        handleDone = P._nullDoneHandler$closure();
      this._zone.toString;
      this._onDone = handleDone;
    },
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1, t2;
      t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t2 = this._pending;
            t2 = !t2.get$isEmpty(t2);
          } else
            t2 = false;
          if (t2)
            this._pending.schedule$1(this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 12],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 12],
    _onCancel$0: function() {
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        if (!!J.getInterceptor(t1).$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, t2, isInputPaused;
      t1 = this._state;
      if ((t1 & 64) !== 0) {
        t2 = this._pending;
        t2 = t2.get$isEmpty(t2);
      } else
        t2 = false;
      if (t2) {
        t1 = (t1 & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = this._pending;
            t2 = t2 == null || t2.get$isEmpty(t2);
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        t1 = (this._state & 4294967263) >>> 0;
        this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    static: {"^": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:12;this_0,error_1,stackTrace_2",
    call$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._zone;
      t3 = $.Zone__current;
      t2.toString;
      t3.toString;
      if (t3 == null ? t2 != null : t3 !== t2)
        P._rootHandleUncaughtError(t3, null, t3, this.error_1, this.stackTrace_2);
      else {
        t3 = t1._onError;
        t4 = H.getDynamicRuntimeType();
        t4 = H.buildFunctionType(t4, [t4, t4])._isTest$1(t3);
        t5 = this.error_1;
        if (t4)
          t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
        else
          t2.runUnaryGuarded$2(t3, t5);
      }
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:12;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(0, onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error>,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:95;this_0,dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _cancelAndError_closure: {
    "^": "Closure:95;future_0,error_1,stackTrace_2",
    call$0: function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:116;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }
  },
  _cancelAndValue_closure: {
    "^": "Closure:95;future_0,value_1",
    call$0: function() {
      return this.future_0._complete$1(this.value_1);
    }
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4, result;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      result = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null), [t1, t2]);
      result._ForwardingStreamSubscription$2(this, cancelOnError, t1, t2);
      result.onData$1(onData);
      result.onError$1(0, onError);
      result.onDone$1(onDone);
      return result;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 12],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 12],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 117],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 12],
    _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    }
  },
  _SkipStream: {
    "^": "_ForwardingStream;_remaining,_source",
    _handleData$2: function(inputEvent, sink) {
      if (J.$gt$n(this._remaining, 0)) {
        this._remaining = J.$sub$n(this._remaining, 1);
        return;
      }
      sink._async$_add$1(inputEvent);
    },
    _SkipStream$2: function(source, count, $T) {
      if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
        throw H.wrapException(P.ArgumentError$(count));
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  _BaseZone: {
    "^": "Object;",
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        t1 = this.runBinary$3(f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    }
  },
  _BaseZone_bindCallback_closure: {
    "^": "Closure:95;this_0,registered_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }
  },
  _BaseZone_bindCallback_closure0: {
    "^": "Closure:95;this_2,registered_3",
    call$0: function() {
      return this.this_2.run$1(this.registered_3);
    }
  },
  _BaseZone_bindUnaryCallback_closure: {
    "^": "Closure:97;this_0,registered_1",
    call$1: function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }
  },
  _BaseZone_bindUnaryCallback_closure0: {
    "^": "Closure:97;this_2,registered_3",
    call$1: function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:95;error_0,stackTrace_1",
    call$0: function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    }
  },
  _rootHandleUncaughtError__closure: {
    "^": "Closure:95;error_2,stackTrace_3",
    call$0: function() {
      var t1, trace;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null && !!J.getInterceptor(t1).$isError)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    }
  },
  _RootZone: {
    "^": "_BaseZone;",
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      return P._rootRunBinary(this, null, this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _HashSet__newHashTable: function() {
    var table = Object.create(null);
    table["<non-identifier-key>"] = table;
    delete table["<non-identifier-key>"];
    return table;
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 8],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 16],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  HashSet_HashSet$identity: function($E) {
    return H.setRuntimeTypeInfo(new P._IdentityHashSet(0, null, null, null, null), [$E]);
  },
  _iterableToString: function(iterable) {
    var parts, t1;
    if ($.get$_toStringVisiting().contains$1(0, iterable))
      return "(...)";
    $.get$_toStringVisiting().add$1(0, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      $.get$_toStringVisiting().remove$1(0, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  },
  _iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, t1, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              t1 = J.$add$ns(J.get$length$asx(parts.pop()), 2);
              if (typeof t1 !== "number")
                return H.iae(t1);
              $length -= t1;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      t1 = J.$add$ns(J.get$length$asx(parts.pop()), 2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      $length -= t1;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result, i, t2, t3;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i) {
      t2 = t2[i];
      t3 = m;
      if (t2 == null ? t3 == null : t2 === t3)
        return "{...}";
    }
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, t1, entry, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++this._collection$_length;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++this._collection$_length;
          this._keys = null;
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "^": "Closure:97;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "^": "Object;_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    addAll$1: function(_, other) {
      other.forEach$1(0, new P._LinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_value();
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(key);
    },
    _remove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell._value);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure:97;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  _LinkedHashMap_addAll_closure: {
    "^": "Closure;this_0",
    call$2: function(key, value) {
      this.this_0.$indexSet(0, key, value);
    },
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V", args: [K, V]};
      }, this.this_0, "_LinkedHashMap");
    }
  },
  LinkedHashMapCell: {
    "^": "Object;_key<,_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    length$0: function($receiver) {
      return this.get$length(this).call$0();
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modificati